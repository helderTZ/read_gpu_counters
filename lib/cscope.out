cscope 15 $HOME/read_gpu_counters2/lib               0002075753
	@check-ndebug.h

1 #ifde‡
NDEBUG


	@debug.h

28 #i‚de‡
_DEBUG_H_


29 
	#_DEBUG_H_


	)

31 
	#DEBUG_PROTOCOL_VERSION
 1

	)

32 
	#COMMUNICATION_OFFSET
 0xc00

	)

33 
	#COMMUNICATION_QWORD
 0xc0

	)

35 
	#STATE_EU_MSG
 0x47534d65

	)

36 
	#STATE_CPU_ACK
 0x4b434163

	)

37 
	#STATE_OFFSET
 0xc20

	)

38 
	#STATE_QWORD
 0xc2

	)

40 
	#TX_OFFSET
 0xc40

	)

41 
	#TX_QWORD
 0xc4

	)

42 
	#RX_OFFSET
 0xc60

	)

43 
	#RX_QWORD
 0xc6

	)

45 #i‚de‡
GEN_ASM


46 
uöt32_t
 
	tgrf
[8];

47 
uöt32_t
 
	tmrf
[8];

48 
uöt8_t
 
	t¸
[12];

49 
uöt32_t
 
	t§
;

51 
	#DWORD8
(
x
Ë{x, x, x, x, x, x, x, x}

	)

53 c⁄° 
grf
 
	g¥Ÿocﬁ_vîsi⁄
 = 
DWORD8
(
DEBUG_PROTOCOL_VERSION
);

54 c⁄° 
grf
 
	geu_msg
 = 
DWORD8
(
STATE_EU_MSG
);

55 c⁄° 
grf
 
	g˝u_ack
 = 
DWORD8
(
STATE_CPU_ACK
);

57 
	seu_°©e
 {

58 
mrf
 
	mm_ªgs
[15];

59 
grf
 
	mg_ªgs
[16];

60 
grf
 
	m∑d
;

63 
¸
 
	m¸0
;

64 
§
 
	m§0
;

65 
uöt32_t
 
	mbìf_∑d
[4];

66 
uöt8_t
 
	m∑d2
[992 + 1024];

69 
grf
 
	mvîsi⁄
;

70 
grf
 
	m°©e_magic
;

71 
grf
 
	meu_tx
;

72 
grf
 
	meu_rx
;

74 
uöt8_t
 
	m∑d3
[896];

75 } 
__©åibuã__
((
∑cked
));

77 
ölöe
 

78 
	$¥öt_ªg
(
uöt8_t
 
ªg
[32]) {

79 
uöt32_t
 *
dw‹ds
 = (uöt32_à*)
ªg
;

80 
	`¥ötf
("%08x %08x %08x %08x %08x %08x %08x %08x",

81 
dw‹ds
[7], dwords[6], dwords[5], dwords[4],

82 
dw‹ds
[3], dwords[2], dwords[1], dwords[0]);

83 
	}
}

85 
ölöe
 

86 
	$¥öt_¸eg
(
uöt8_t
 
ªg
[12]) {

87 
uöt32_t
 *
dw‹ds
 = (uöt32_à*)
ªg
;

88 
	`¥ötf
("%08x %08x %08x", 
dw‹ds
[2], dwords[1], dwords[0]);

89 
	}
}

	@drmtest.c

29 #ifde‡
HAVE_LIBGEN_H


30 
	~<libgí.h
>

32 
	~<°dio.h
>

33 
	~<f˙é.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<°rög.h
>

37 
	~<sys/mm™.h
>

38 
	~<sig«l.h
>

39 
	~<pcüc˚ss.h
>

40 
	~<°dlib.h
>

41 
	~<uni°d.h
>

42 
	~<sys/waô.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sysˇŒ.h
>

45 
	~<sys/ut¢ame.h
>

46 
	~<ãrmios.h
>

48 
	~"drmã°.h
"

49 
	~"i915_drm.h
"

50 
	~"öãl_chù£t.h
"

51 
	~"öãl_io.h
"

52 
	~"igt_debugfs.h
"

53 
	~"igt_gt.h
"

54 
	~"igt_kmod.h
"

55 
	~"vîsi⁄.h
"

56 
	~"c⁄fig.h
"

57 
	~"öãl_ªg.h
"

58 
	~"io˘l_wøµîs.h
"

59 
	~"igt_dummylﬂd.h
"

76 
uöt16_t
 
	g__drm_devi˚_id
;

78 
	$__gë_drm_devi˚_«me
(
fd
, *
«me
)

80 
drm_vîsi⁄_t
 
vîsi⁄
;

82 
	`mem£t
(&
vîsi⁄
, 0, (version));

83 
vîsi⁄
.
«me_Àn
 = 4;

84 
vîsi⁄
.
«me
 =Çame;

86 i‡(!
	`drmIo˘l
(
fd
, 
DRM_IOCTL_VERSION
, &
vîsi⁄
)){

91 
	}
}

93 
boﬁ
 
	$__is_devi˚
(
fd
, c⁄° *
ex≥˘
)

95 
«me
[5] = "";

97 i‡(
	`__gë_drm_devi˚_«me
(
fd
, 
«me
))

98  
Ál£
;

100  
	`°rcmp
(
ex≥˘
, 
«me
) == 0;

101 
	}
}

103 
boﬁ
 
	$is_i915_devi˚
(
fd
)

105  
	`__is_devi˚
(
fd
, "i915");

106 
	}
}

108 
boﬁ
 
	$is_vc4_devi˚
(
fd
)

110  
	`__is_devi˚
(
fd
, "vc4");

111 
	}
}

113 
boﬁ
 
	$is_vgem_devi˚
(
fd
)

115  
	`__is_devi˚
(
fd
, "vgem");

116 
	}
}

118 
boﬁ
 
	$is_vútio_devi˚
(
fd
)

120  
	`__is_devi˚
(
fd
, "virt");

121 
	}
}

123 
boﬁ
 
	$is_amd_devi˚
(
fd
)

125  
	`__is_devi˚
(
fd
, "amdg");

126 
	}
}

128 
boﬁ
 
	$has_known_öãl_chù£t
(
fd
)

130 
drm_i915_gë∑øm
 
gp
;

131 
devid
 = 0;

133 
	`mem£t
(&
gp
, 0, (gp));

134 
gp
.
∑øm
 = 
I915_PARAM_CHIPSET_ID
;

135 
gp
.
vÆue
 = &
devid
;

137 i‡(
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp)))

138  
Ál£
;

140 i‡(!
	`öãl_gí
(
devid
))

141  
Ál£
;

143 
__drm_devi˚_id
 = 
devid
;

144  
åue
;

145 
	}
}

147 
	#LOCAL_I915_EXEC_VEBOX
 (4 << 0)

	)

160 
	$gem_quõs˚¡_gpu
(
fd
)

162 
uöt32_t
 
bbe
 = 
MI_BATCH_BUFFER_END
;

163 
drm_i915_gem_execbuf„r2
 
execbuf
;

164 
drm_i915_gem_exec_obje˘2
 
obj
;

165 
rög
;

167 
	`igt_ãrmö©e_•ö_b©ches
();

169 
	`mem£t
(&
obj
, 0, (obj));

170 
obj
.
h™dÀ
 = 
	`gem_¸óã
(
fd
, 4096);

171 
	`gem_wrôe
(
fd
, 
obj
.
h™dÀ
, 0, &
bbe
, (&bbe));

173 
	`mem£t
(&
execbuf
, 0, (execbuf));

174 
execbuf
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(&
obj
);

175 
execbuf
.
buf„r_cou¡
 = 1;

177 
rög
 = 0;Ñing < 1<<6;Ñing++) {

178 
execbuf
.
Êags
 = 
rög
;

179 
	`__gem_execbuf
(
fd
, &
execbuf
);

182 i‡(
	`gem_has_bsd2
(
fd
)) {

183 
execbuf
.
Êags
 = 
I915_EXEC_BSD
 | (2 << 13);

184 
	`__gem_execbuf
(
fd
, &
execbuf
);

187 
	`gem_sync
(
fd
, 
obj
.
h™dÀ
);

188 
	`gem_˛o£
(
fd
, 
obj
.
h™dÀ
);

190 
	`igt_dr›_ˇches_£t
(
fd
, 
DROP_RETIRE
 | 
DROP_IDLE
 | 
DROP_FREED
);

191 
	}
}

202 
	$drm_gë_ˇrd
()

204 *
«me
;

205 
i
, 
fd
;

207 
i
 = 0; i < 16; i++) {

208 
ªt
;

210 
ªt
 = 
	`a•rötf
(&
«me
, "/dev/dri/ˇrd%u", 
i
);

211 
	`igt_as£π
(
ªt
 != -1);

213 
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

214 
	`‰ì
(
«me
);

216 i‡(
fd
 == -1)

219 i‡(!
	`is_i915_devi˚
(
fd
Ë|| !
	`has_known_öãl_chù£t
(fd)) {

220 
	`˛o£
(
fd
);

224 
	`˛o£
(
fd
);

225  
i
;

228 
	`igt_skù
("No intel gpu found\n");

231 
	}
}

233 
	$mod¥obe
(c⁄° *
drivî
)

235  
	`igt_kmod_lﬂd
(
drivî
, "");

236 
	}
}

247 
	$__drm_›í_drivî
(
chù£t
)

249 i‡(
chù£t
 & 
DRIVER_VGEM
)

250 
	`mod¥obe
("vgem");

252 
i
 = 0; i < 16; i++) {

253 
«me
[80];

254 
fd
;

256 
	`•rötf
(
«me
, "/dev/dri/ˇrd%u", 
i
);

257 
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

258 i‡(
fd
 == -1)

261 i‡(
chù£t
 & 
DRIVER_INTEL
 && 
	`is_i915_devi˚
(
fd
) &&

262 
	`has_known_öãl_chù£t
(
fd
))

263  
fd
;

265 i‡(
chù£t
 & 
DRIVER_VC4
 &&

266 
	`is_vc4_devi˚
(
fd
))

267  
fd
;

269 i‡(
chù£t
 & 
DRIVER_VGEM
 &&

270 
	`is_vgem_devi˚
(
fd
))

271  
fd
;

273 i‡(
chù£t
 & 
DRIVER_VIRTIO
 &&

274 
	`is_vútio_devi˚
(
fd
))

275  
fd
;

277 i‡(
chù£t
 & 
DRIVER_AMDGPU
 && 
	`is_amd_devi˚
(
fd
))

278  
fd
;

281 i‡(
chù£t
 =
DRIVER_ANY
 && !
	`is_vgem_devi˚
(
fd
))

282  
fd
;

284 
	`˛o£
(
fd
);

288 
	}
}

290 
	$__drm_›í_drivî_ªndî
(
chù£t
)

292 *
«me
;

293 
i
, 
fd
;

295 
i
 = 128; i < (128 + 16); i++) {

296 
ªt
;

298 
ªt
 = 
	`a•rötf
(&
«me
, "/dev/dri/ªndîD%u", 
i
);

299 
	`igt_as£π
(
ªt
 != -1);

301 
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

302 
	`‰ì
(
«me
);

304 i‡(
fd
 == -1)

307 i‡(!
	`is_i915_devi˚
(
fd
Ë|| !
	`has_known_öãl_chù£t
(fd)) {

308 
	`˛o£
(
fd
);

309 
fd
 = -1;

313  
fd
;

316  
fd
;

317 
	}
}

319 
	g©_exô_drm_fd
 = -1;

320 
	g©_exô_drm_ªndî_fd
 = -1;

322 
	$quõs˚¡_gpu_©_exô
(
sig
)

324 i‡(
©_exô_drm_fd
 < 0)

327 
	`gem_quõs˚¡_gpu
(
©_exô_drm_fd
);

328 
	`˛o£
(
©_exô_drm_fd
);

329 
©_exô_drm_fd
 = -1;

330 
	}
}

332 
	$quõs˚¡_gpu_©_exô_ªndî
(
sig
)

334 i‡(
©_exô_drm_ªndî_fd
 < 0)

337 
	`gem_quõs˚¡_gpu
(
©_exô_drm_ªndî_fd
);

338 
	`˛o£
(
©_exô_drm_ªndî_fd
);

339 
©_exô_drm_ªndî_fd
 = -1;

340 
	}
}

342 c⁄° *
	$chù£t_to_°r
(
chù£t
)

344 
chù£t
) {

345 
DRIVER_INTEL
:

347 
DRIVER_VC4
:

349 
DRIVER_VGEM
:

351 
DRIVER_VIRTIO
:

353 
DRIVER_AMDGPU
:

355 
DRIVER_ANY
:

360 
	}
}

371 
	$drm_›í_drivî
(
chù£t
)

373 
›í_cou¡
;

374 
fd
;

376 
fd
 = 
	`__drm_›í_drivî
(
chù£t
);

377 
	`igt_skù_⁄_f
(
fd
<0, "No known gpu found for chipset flags 0x%u (%s)\n",

378 
chù£t
, 
	`chù£t_to_°r
(chipset));

384 i‡(
	`is_i915_devi˚
(
fd
)) {

385 i‡(
	`__sync_„tch_™d_add
(&
›í_cou¡
, 1) == 0) {

386 
	`gem_quõs˚¡_gpu
(
fd
);

388 
©_exô_drm_fd
 = 
	`__drm_›í_drivî
(
chù£t
);

389 
	`igt_ö°Æl_exô_h™dÀr
(
quõs˚¡_gpu_©_exô
);

393  
fd
;

394 
	}
}

405 
	$drm_›í_drivî_ma°î
(
chù£t
)

407 
fd
 = 
	`drm_›í_drivî
(
chù£t
);

409 
	`igt_ªquúe_f
(
	`drmSëMa°î
(
fd
) == 0, "Can't become DRM master, "

412  
fd
;

413 
	}
}

424 
	$drm_›í_drivî_ªndî
(
chù£t
)

426 
›í_cou¡
;

427 
fd
 = 
	`__drm_›í_drivî_ªndî
(
chù£t
);

430 i‡(
fd
 == -1)

431  
	`drm_›í_drivî
(
chù£t
);

433 i‡(
	`__sync_„tch_™d_add
(&
›í_cou¡
, 1))

434  
fd
;

436 
©_exô_drm_ªndî_fd
 = 
	`__drm_›í_drivî
(
chù£t
);

437 if(
chù£t
 & 
DRIVER_INTEL
){

438 
	`gem_quõs˚¡_gpu
(
fd
);

439 
	`igt_ö°Æl_exô_h™dÀr
(
quõs˚¡_gpu_©_exô_ªndî
);

442  
fd
;

443 
	}
}

445 
	$igt_ªquúe_öãl
(
fd
)

447 
	`igt_ªquúe
(
	`is_i915_devi˚
(
fd
Ë&& 
	`has_known_öãl_chù£t
(fd));

448 
	}
}

	@drmtest.h

28 #i‚de‡
DRMTEST_H


29 
	#DRMTEST_H


	)

31 
	~<uni°d.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°döt.h
>

34 
	~<sys/mm™.h
>

35 
	~<î∫o.h
>

37 
	~<xf86drm.h
>

39 
	~"öãl_b©chbuf„r.h
"

41 
	#DRIVER_INTEL
 (1 << 0)

	)

42 
	#DRIVER_VC4
 (1 << 1)

	)

43 
	#DRIVER_VGEM
 (1 << 2)

	)

44 
	#DRIVER_VIRTIO
 (1 << 3)

	)

45 
	#DRIVER_AMDGPU
 (1 << 4)

	)

52 
	#DRIVER_ANY
 ~(
DRIVER_VGEM
)

	)

55 #ifde‡
ANDROID


56 #i‡(!(
deföed
 
HAVE_MMAP64
)Ë&& (!(deföed 
__x86_64__
))

57 * 
__mm≠2
(*, 
size_t
, , , , 
off_t
);

61 
	#mm≠64
 
igt_mm≠64


	)

62 
ölöe
 *
	$igt_mm≠64
(*
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
,

63 
fd
, 
off64_t
 
off£t
)

65  
	`__mm≠2
(
addr
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
, 
off£t
 >> 12);

66 
	}
}

76 
	#ARRAY_SIZE
(
¨r
Ë(◊º)/◊º[0]))

	)

85 
	#ALIGN
(
v
, 
a
Ë(((vË+ (a)-1Ë& ~(◊)-1))

	)

87 
drm_gë_ˇrd
();

88 
drm_›í_drivî
(
chù£t
);

89 
drm_›í_drivî_ma°î
(
chù£t
);

90 
drm_›í_drivî_ªndî
(
chù£t
);

91 
__drm_›í_drivî
(
chù£t
);

93 
gem_quõs˚¡_gpu
(
fd
);

95 
igt_ªquúe_öãl
(
fd
);

97 
boﬁ
 
is_i915_devi˚
(
fd
);

107 
	#do_‹_dõ
(
x
Ë
	`igt_as£π
((xË=0)

	)

118 
	#do_io˘l
(
fd
, 
ioc
, 
ioc_d©a
) do { \

119 
	`igt_as£π_eq
(
	`igt_io˘l
((
fd
), (
ioc
), (
ioc_d©a
)), 0); \

120 
î∫o
 = 0; \

121 } 0)

	)

133 
	#do_io˘l_îr
(
fd
, 
ioc
, 
ioc_d©a
, 
îr
) do { \

134 
	`igt_as£π_eq
(
	`igt_io˘l
((
fd
), (
ioc
), (
ioc_d©a
)), -1); \

135 
	`igt_as£π_eq
(
î∫o
, 
îr
); \

136 
î∫o
 = 0; \

137 } 0)

	)

	@dummy.c

	@gen6_render.h

1 #i‚de‡
GEN6_RENDER_H


2 
	#GEN6_RENDER_H


	)

4 
	~<°döt.h
>

6 
	#GEN6_3D
(
Pùñöe
,
Opcode
,
Sub›code
) ((3 << 29) | \

7 ((
Pùñöe
) << 27) | \

8 ((
Opcode
) << 24) | \

9 ((
Sub›code
Ë<< 16))

	)

11 
	#GEN6_STATE_BASE_ADDRESS
 
	`GEN6_3D
(0, 1, 1)

	)

12 
	#GEN6_STATE_SIP
 
	`GEN6_3D
(0, 1, 2)

	)

14 
	#GEN6_PIPELINE_SELECT
 
	`GEN6_3D
(1, 1, 4)

	)

16 
	#GEN6_MEDIA_STATE_POINTERS
 
	`GEN6_3D
(2, 0, 0)

	)

17 
	#GEN6_MEDIA_OBJECT
 
	`GEN6_3D
(2, 1, 0)

	)

19 
	#GEN6_3DSTATE_BINDING_TABLE_POINTERS
 
	`GEN6_3D
(3, 0, 1)

	)

20 
	#GEN6_3DSTATE_BINDING_TABLE_MODIFY_PS
 (1 << 12)

	)

21 
	#GEN6_3DSTATE_BINDING_TABLE_MODIFY_GS
 (1 << 9Ë

	)

22 
	#GEN6_3DSTATE_BINDING_TABLE_MODIFY_VS
 (1 << 8Ë

	)

24 
	#GEN6_3DSTATE_VERTEX_BUFFERS
 
	`GEN6_3D
(3, 0, 8)

	)

25 
	#GEN6_3DSTATE_VERTEX_ELEMENTS
 
	`GEN6_3D
(3, 0, 9)

	)

26 
	#GEN6_3DSTATE_INDEX_BUFFER
 
	`GEN6_3D
(3, 0, 0xa)

	)

27 
	#GEN6_3DSTATE_VF_STATISTICS
 
	`GEN6_3D
(1, 0, 0xb)

	)

29 
	#GEN6_3DSTATE_DRAWING_RECTANGLE
 
	`GEN6_3D
(3, 1, 0)

	)

30 
	#GEN6_3DSTATE_CONSTANT_COLOR
 
	`GEN6_3D
(3, 1, 1)

	)

31 
	#GEN6_3DSTATE_SAMPLER_PALETTE_LOAD
 
	`GEN6_3D
(3, 1, 2)

	)

32 
	#GEN6_3DSTATE_CHROMA_KEY
 
	`GEN6_3D
(3, 1, 4)

	)

33 
	#GEN6_3DSTATE_DEPTH_BUFFER
 
	`GEN6_3D
(3, 1, 5)

	)

34 
	#GEN6_3DSTATE_DEPTH_BUFFER_TYPE_SHIFT
 29

	)

35 
	#GEN6_3DSTATE_DEPTH_BUFFER_FORMAT_SHIFT
 18

	)

37 
	#GEN6_3DSTATE_POLY_STIPPLE_OFFSET
 
	`GEN6_3D
(3, 1, 6)

	)

38 
	#GEN6_3DSTATE_POLY_STIPPLE_PATTERN
 
	`GEN6_3D
(3, 1, 7)

	)

39 
	#GEN6_3DSTATE_LINE_STIPPLE
 
	`GEN6_3D
(3, 1, 8)

	)

40 
	#GEN6_3DSTATE_GLOBAL_DEPTH_OFFSET_CLAMP
 
	`GEN6_3D
(3, 1, 9)

	)

42 
	#GEN6_3DSTATE_AA_LINE_PARAMS
 
	`GEN6_3D
(3, 1, 0xa)

	)

43 
	#GEN6_3DSTATE_GS_SVB_INDEX
 
	`GEN6_3D
(3, 1, 0xb)

	)

44 
	#GEN6_3DSTATE_MONOFILTER_SIZE
 
	`GEN6_3D
(3, 1, 0x11)

	)

45 
	#GEN6_3DPRIMITIVE
 
	`GEN6_3D
(3, 3, 0)

	)

47 
	#GEN6_3DSTATE_CLEAR_PARAMS
 
	`GEN6_3D
(3, 1, 0x10)

	)

49 
	#GEN6_3DSTATE_DEPTH_CLEAR_VALID
 (1 << 15)

	)

51 
	#GEN6_3DSTATE_SAMPLER_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x02)

	)

52 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_PS
 (1 << 12)

	)

53 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_GS
 (1 << 9)

	)

54 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_VS
 (1 << 8)

	)

56 
	#GEN6_3DSTATE_URB
 
	`GEN6_3D
(3, 0, 0x05)

	)

58 
	#GEN6_3DSTATE_URB_VS_SIZE_SHIFT
 16

	)

59 
	#GEN6_3DSTATE_URB_VS_ENTRIES_SHIFT
 0

	)

61 
	#GEN6_3DSTATE_URB_GS_ENTRIES_SHIFT
 8

	)

62 
	#GEN6_3DSTATE_URB_GS_SIZE_SHIFT
 0

	)

64 
	#GEN6_3DSTATE_VIEWPORT_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x0d)

	)

65 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_CC
 (1 << 12)

	)

66 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_SF
 (1 << 11)

	)

67 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_CLIP
 (1 << 10)

	)

69 
	#GEN6_3DSTATE_CC_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x0e)

	)

71 
	#GEN6_3DSTATE_VS
 
	`GEN6_3D
(3, 0, 0x10)

	)

73 
	#GEN6_3DSTATE_GS
 
	`GEN6_3D
(3, 0, 0x11)

	)

75 
	#GEN6_3DSTATE_GS_DISPATCH_START_GRF_SHIFT
 0

	)

77 
	#GEN6_3DSTATE_CLIP
 
	`GEN6_3D
(3, 0, 0x12)

	)

79 
	#GEN6_3DSTATE_SF
 
	`GEN6_3D
(3, 0, 0x13)

	)

81 
	#GEN6_3DSTATE_SF_NUM_OUTPUTS_SHIFT
 22

	)

82 
	#GEN6_3DSTATE_SF_URB_ENTRY_READ_LENGTH_SHIFT
 11

	)

83 
	#GEN6_3DSTATE_SF_URB_ENTRY_READ_OFFSET_SHIFT
 4

	)

86 
	#GEN6_3DSTATE_SF_CULL_BOTH
 (0 << 29)

	)

87 
	#GEN6_3DSTATE_SF_CULL_NONE
 (1 << 29)

	)

88 
	#GEN6_3DSTATE_SF_CULL_FRONT
 (2 << 29)

	)

89 
	#GEN6_3DSTATE_SF_CULL_BACK
 (3 << 29)

	)

91 
	#GEN6_3DSTATE_SF_TRI_PROVOKE_SHIFT
 29

	)

92 
	#GEN6_3DSTATE_SF_LINE_PROVOKE_SHIFT
 27

	)

93 
	#GEN6_3DSTATE_SF_TRIFAN_PROVOKE_SHIFT
 25

	)

94 
	#GEN6_3DSTATE_SF_VERTEX_SUB_PIXEL_PRECISION_SHIFT
 12

	)

96 
	#GEN6_3DSTATE_WM
 
	`GEN6_3D
(3, 0, 0x14)

	)

98 
	#GEN6_3DSTATE_WM_SAMPLER_COUNT_SHIFT
 27

	)

99 
	#GEN6_3DSTATE_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT
 18

	)

101 
	#GEN6_3DSTATE_WM_DISPATCH_START_GRF_0_SHIFT
 16

	)

103 
	#GEN6_3DSTATE_WM_MAX_THREADS_SHIFT
 25

	)

104 
	#GEN6_3DSTATE_WM_DISPATCH_ENABLE
 (1 << 19)

	)

105 
	#GEN6_3DSTATE_WM_16_DISPATCH_ENABLE
 (1 << 1)

	)

106 
	#GEN6_3DSTATE_WM_8_DISPATCH_ENABLE
 (1 << 0)

	)

108 
	#GEN6_3DSTATE_WM_NUM_SF_OUTPUTS_SHIFT
 20

	)

109 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 15)

	)

110 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 14)

	)

111 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 13)

	)

112 
	#GEN6_3DSTATE_WM_PERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 12)

	)

113 
	#GEN6_3DSTATE_WM_PERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 11)

	)

114 
	#GEN6_3DSTATE_WM_PERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 10)

	)

117 
	#GEN6_3DSTATE_CONSTANT_VS
 
	`GEN6_3D
(3, 0, 0x15)

	)

118 
	#GEN6_3DSTATE_CONSTANT_GS
 
	`GEN6_3D
(3, 0, 0x16)

	)

119 
	#GEN6_3DSTATE_CONSTANT_PS
 
	`GEN6_3D
(3, 0, 0x17)

	)

121 
	#GEN6_3DSTATE_SAMPLE_MASK
 
	`GEN6_3D
(3, 0, 0x18)

	)

123 
	#GEN6_3DSTATE_MULTISAMPLE
 
	`GEN6_3D
(3, 1, 0x0d)

	)

125 
	#GEN6_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 (0 << 4)

	)

126 
	#GEN6_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_UPPER_LEFT
 (1 << 4)

	)

127 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
 (0 << 1)

	)

128 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_4
 (2 << 1)

	)

129 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_8
 (3 << 1)

	)

131 
	#PIPELINE_SELECT_3D
 0

	)

132 
	#PIPELINE_SELECT_MEDIA
 1

	)

135 
	#BASE_ADDRESS_MODIFY
 (1 << 0)

	)

138 
	#GEN6_PIPE_CONTROL_NOWRITE
 (0 << 14)

	)

139 
	#GEN6_PIPE_CONTROL_WRITE_QWORD
 (1 << 14)

	)

140 
	#GEN6_PIPE_CONTROL_WRITE_DEPTH
 (2 << 14)

	)

141 
	#GEN6_PIPE_CONTROL_WRITE_TIME
 (3 << 14)

	)

142 
	#GEN6_PIPE_CONTROL_DEPTH_STALL
 (1 << 13)

	)

143 
	#GEN6_PIPE_CONTROL_WC_FLUSH
 (1 << 12)

	)

144 
	#GEN6_PIPE_CONTROL_IS_FLUSH
 (1 << 11)

	)

145 
	#GEN6_PIPE_CONTROL_TC_FLUSH
 (1 << 10)

	)

146 
	#GEN6_PIPE_CONTROL_NOTIFY_ENABLE
 (1 << 8)

	)

147 
	#GEN6_PIPE_CONTROL_GLOBAL_GTT
 (1 << 2)

	)

148 
	#GEN6_PIPE_CONTROL_LOCAL_PGTT
 (0 << 2)

	)

149 
	#GEN6_PIPE_CONTROL_DEPTH_CACHE_FLUSH
 (1 << 0)

	)

152 
	#VB0_BUFFER_INDEX_SHIFT
 26

	)

153 
	#VB0_VERTEXDATA
 (0 << 20)

	)

154 
	#VB0_INSTANCEDATA
 (1 << 20)

	)

155 
	#VB0_BUFFER_PITCH_SHIFT
 0

	)

156 
	#VB0_NULL_VERTEX_BUFFER
 (1 << 13)

	)

159 
	#VE0_VERTEX_BUFFER_INDEX_SHIFT
 26

	)

160 
	#VE0_VALID
 (1 << 25Ë

	)

161 
	#VE0_FORMAT_SHIFT
 16

	)

162 
	#VE0_OFFSET_SHIFT
 0

	)

163 
	#VE1_VFCOMPONENT_0_SHIFT
 28

	)

164 
	#VE1_VFCOMPONENT_1_SHIFT
 24

	)

165 
	#VE1_VFCOMPONENT_2_SHIFT
 20

	)

166 
	#VE1_VFCOMPONENT_3_SHIFT
 16

	)

167 
	#VE1_DESTINATION_ELEMENT_OFFSET_SHIFT
 0

	)

170 
	#GEN6_3DPRIMITIVE_VERTEX_SEQUENTIAL
 (0 << 15)

	)

171 
	#GEN6_3DPRIMITIVE_VERTEX_RANDOM
 (1 << 15)

	)

173 
	#GEN6_3DPRIMITIVE_TOPOLOGY_SHIFT
 10

	)

175 
	#GEN6_SVG_CTL
 0x7400

	)

177 
	#GEN6_SVG_CTL_GS_BA
 (0 << 8)

	)

178 
	#GEN6_SVG_CTL_SS_BA
 (1 << 8)

	)

179 
	#GEN6_SVG_CTL_IO_BA
 (2 << 8)

	)

180 
	#GEN6_SVG_CTL_GS_AUB
 (3 << 8)

	)

181 
	#GEN6_SVG_CTL_IO_AUB
 (4 << 8)

	)

182 
	#GEN6_SVG_CTL_SIP
 (5 << 8)

	)

184 
	#GEN6_SVG_RDATA
 0x7404

	)

185 
	#GEN6_SVG_WORK_CTL
 0x7408

	)

187 
	#GEN6_VF_CTL
 0x7500

	)

189 
	#GEN6_VF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

190 
	#GEN6_VF_CTL_SNAPSHOT_MUX_SELECT_THREADID
 (0 << 8)

	)

191 
	#GEN6_VF_CTL_SNAPSHOT_MUX_SELECT_VF_DEBUG
 (1 << 8)

	)

192 
	#GEN6_VF_CTL_SNAPSHOT_TYPE_VERTEX_SEQUENCE
 (0 << 4)

	)

193 
	#GEN6_VF_CTL_SNAPSHOT_TYPE_VERTEX_INDEX
 (1 << 4)

	)

194 
	#GEN6_VF_CTL_SKIP_INITIAL_PRIMITIVES
 (1 << 3)

	)

195 
	#GEN6_VF_CTL_MAX_PRIMITIVES_LIMIT_ENABLE
 (1 << 2)

	)

196 
	#GEN6_VF_CTL_VERTEX_RANGE_LIMIT_ENABLE
 (1 << 1)

	)

197 
	#GEN6_VF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

199 
	#GEN6_VF_STRG_VAL
 0x7504

	)

200 
	#GEN6_VF_STR_VL_OVR
 0x7508

	)

201 
	#GEN6_VF_VC_OVR
 0x750c

	)

202 
	#GEN6_VF_STR_PSKIP
 0x7510

	)

203 
	#GEN6_VF_MAX_PRIM
 0x7514

	)

204 
	#GEN6_VF_RDATA
 0x7518

	)

206 
	#GEN6_VS_CTL
 0x7600

	)

207 
	#GEN6_VS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

208 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VERTEX_0
 (0 << 8)

	)

209 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VERTEX_1
 (1 << 8)

	)

210 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VALID_COUNT
 (2 << 8)

	)

211 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VS_KERNEL_POINTER
 (3 << 8)

	)

212 
	#GEN6_VS_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

213 
	#GEN6_VS_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

214 
	#GEN6_VS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

216 
	#GEN6_VS_STRG_VAL
 0x7604

	)

217 
	#GEN6_VS_RDATA
 0x7608

	)

219 
	#GEN6_SF_CTL
 0x7b00

	)

220 
	#GEN6_SF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

221 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_0_FF_ID
 (0 << 8)

	)

222 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_0_REL_COUNT
 (1 << 8)

	)

223 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_1_FF_ID
 (2 << 8)

	)

224 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_1_REL_COUNT
 (3 << 8)

	)

225 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_2_FF_ID
 (4 << 8)

	)

226 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_2_REL_COUNT
 (5 << 8)

	)

227 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_COUNT
 (6 << 8)

	)

228 
	#GEN6_SF_CTL_SNAPSHOT_MUX_SF_KERNEL_POINTER
 (7 << 8)

	)

229 
	#GEN6_SF_CTL_MIN_MAX_PRIMITIVE_RANGE_ENABLE
 (1 << 4)

	)

230 
	#GEN6_SF_CTL_DEBUG_CLIP_RECTANGLE_ENABLE
 (1 << 3)

	)

231 
	#GEN6_SF_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

232 
	#GEN6_SF_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

233 
	#GEN6_SF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

235 
	#GEN6_SF_STRG_VAL
 0x7b04

	)

236 
	#GEN6_SF_RDATA
 0x7b18

	)

238 
	#GEN6_WIZ_CTL
 0x7c00

	)

239 
	#GEN6_WIZ_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

240 
	#GEN6_WIZ_CTL_SUBSPAN_INSTANCE_SHIFT
 16

	)

241 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_WIZ_KERNEL_POINTER
 (0 << 8)

	)

242 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_SUBSPAN_INSTANCE
 (1 << 8)

	)

243 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_PRIMITIVE_SEQUENCE
 (2 << 8)

	)

244 
	#GEN6_WIZ_CTL_SINGLE_SUBSPAN_DISPATCH
 (1 << 6)

	)

245 
	#GEN6_WIZ_CTL_IGNORE_COLOR_SCOREBOARD_STALLS
 (1 << 5)

	)

246 
	#GEN6_WIZ_CTL_ENABLE_SUBSPAN_INSTANCE_COMPARE
 (1 << 4)

	)

247 
	#GEN6_WIZ_CTL_USE_UPSTREAM_SNAPSHOT_FLAG
 (1 << 3)

	)

248 
	#GEN6_WIZ_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

249 
	#GEN6_WIZ_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

250 
	#GEN6_WIZ_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

252 
	#GEN6_WIZ_STRG_VAL
 0x7c04

	)

253 
	#GEN6_WIZ_RDATA
 0x7c18

	)

255 
	#GEN6_TS_CTL
 0x7e00

	)

256 
	#GEN6_TS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

257 
	#GEN6_TS_CTL_SNAPSHOT_MESSAGE_ERROR
 (0 << 8)

	)

258 
	#GEN6_TS_CTL_SNAPSHOT_INTERFACE_DESCRIPTOR
 (3 << 8)

	)

259 
	#GEN6_TS_CTL_SNAPSHOT_ALL_CHILD_THREADS
 (1 << 2)

	)

260 
	#GEN6_TS_CTL_SNAPSHOT_ALL_ROOT_THREADS
 (1 << 1)

	)

261 
	#GEN6_TS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

263 
	#GEN6_TS_STRG_VAL
 0x7e04

	)

264 
	#GEN6_TS_RDATA
 0x7e08

	)

266 
	#GEN6_TD_CTL_MUX_SHIFT
 8

	)

267 
	#GEN6_TD_CTL_EXTERNAL_HALT_R0_DEBUG_MATCH
 (1 << 7)

	)

268 
	#GEN6_TD_CTL_FORCE_EXTERNAL_HALT
 (1 << 6)

	)

269 
	#GEN6_TD_CTL_EXCEPTION_MASK_OVERRIDE
 (1 << 5)

	)

270 
	#GEN6_TD_CTL_FORCE_THREAD_BREAKPOINT_ENABLE
 (1 << 4)

	)

271 
	#GEN6_TD_CTL_BREAKPOINT_ENABLE
 (1 << 2)

	)

272 
	#GEN6_TD_CTL2
 0x8004

	)

273 
	#GEN6_TD_CTL2_ILLEGAL_OPCODE_EXCEPTION_OVERRIDE
 (1 << 28)

	)

274 
	#GEN6_TD_CTL2_MASKSTACK_EXCEPTION_OVERRIDE
 (1 << 26)

	)

275 
	#GEN6_TD_CTL2_SOFTWARE_EXCEPTION_OVERRIDE
 (1 << 25)

	)

276 
	#GEN6_TD_CTL2_ACTIVE_THREAD_LIMIT_SHIFT
 16

	)

277 
	#GEN6_TD_CTL2_ACTIVE_THREAD_LIMIT_ENABLE
 (1 << 8)

	)

278 
	#GEN6_TD_CTL2_THREAD_SPAWNER_EXECUTION_MASK_ENABLE
 (1 << 7)

	)

279 
	#GEN6_TD_CTL2_WIZ_EXECUTION_MASK_ENABLE
 (1 << 6)

	)

280 
	#GEN6_TD_CTL2_SF_EXECUTION_MASK_ENABLE
 (1 << 5)

	)

281 
	#GEN6_TD_CTL2_CLIPPER_EXECUTION_MASK_ENABLE
 (1 << 4)

	)

282 
	#GEN6_TD_CTL2_GS_EXECUTION_MASK_ENABLE
 (1 << 3)

	)

283 
	#GEN6_TD_CTL2_VS_EXECUTION_MASK_ENABLE
 (1 << 0)

	)

284 
	#GEN6_TD_VF_VS_EMSK
 0x8008

	)

285 
	#GEN6_TD_GS_EMSK
 0x800c

	)

286 
	#GEN6_TD_CLIP_EMSK
 0x8010

	)

287 
	#GEN6_TD_SF_EMSK
 0x8014

	)

288 
	#GEN6_TD_WIZ_EMSK
 0x8018

	)

289 
	#GEN6_TD_0_6_EHTRG_VAL
 0x801c

	)

290 
	#GEN6_TD_0_7_EHTRG_VAL
 0x8020

	)

291 
	#GEN6_TD_0_6_EHTRG_MSK
 0x8024

	)

292 
	#GEN6_TD_0_7_EHTRG_MSK
 0x8028

	)

293 
	#GEN6_TD_RDATA
 0x802c

	)

294 
	#GEN6_TD_TS_EMSK
 0x8030

	)

296 
	#GEN6_EU_CTL
 0x8800

	)

297 
	#GEN6_EU_CTL_SELECT_SHIFT
 16

	)

298 
	#GEN6_EU_CTL_DATA_MUX_SHIFT
 8

	)

299 
	#GEN6_EU_ATT_0
 0x8810

	)

300 
	#GEN6_EU_ATT_1
 0x8814

	)

301 
	#GEN6_EU_ATT_DATA_0
 0x8820

	)

302 
	#GEN6_EU_ATT_DATA_1
 0x8824

	)

303 
	#GEN6_EU_ATT_CLR_0
 0x8830

	)

304 
	#GEN6_EU_ATT_CLR_1
 0x8834

	)

305 
	#GEN6_EU_RDATA
 0x8840

	)

307 
	#GEN6_PIPE_CONTROL
 
	`GEN6_3D
(3, 2, 0)

	)

309 
	#GEN6_3DPRIMITIVE
 
	`GEN6_3D
(3, 3, 0)

	)

311 
	#GEN6_3DSTATE_CLEAR_PARAMS
 
	`GEN6_3D
(3, 1, 0x10)

	)

313 
	#GEN6_3DSTATE_DEPTH_CLEAR_VALID
 (1 << 15)

	)

316 
	#GEN6_3DSTATE_SAMPLER_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x02)

	)

317 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_PS
 (1 << 12)

	)

318 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_GS
 (1 << 9)

	)

319 
	#GEN6_3DSTATE_SAMPLER_STATE_MODIFY_VS
 (1 << 8)

	)

321 
	#GEN6_3DSTATE_URB
 
	`GEN6_3D
(3, 0, 0x05)

	)

323 
	#GEN6_3DSTATE_URB_VS_SIZE_SHIFT
 16

	)

324 
	#GEN6_3DSTATE_URB_VS_ENTRIES_SHIFT
 0

	)

326 
	#GEN6_3DSTATE_URB_GS_ENTRIES_SHIFT
 8

	)

327 
	#GEN6_3DSTATE_URB_GS_SIZE_SHIFT
 0

	)

329 
	#GEN6_3DSTATE_VIEWPORT_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x0d)

	)

330 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_CC
 (1 << 12)

	)

331 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_SF
 (1 << 11)

	)

332 
	#GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_CLIP
 (1 << 10)

	)

334 
	#GEN6_3DSTATE_CC_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x0e)

	)

336 
	#GEN6_3DSTATE_VS
 
	`GEN6_3D
(3, 0, 0x10)

	)

338 
	#GEN6_3DSTATE_GS
 
	`GEN6_3D
(3, 0, 0x11)

	)

340 
	#GEN6_3DSTATE_GS_DISPATCH_START_GRF_SHIFT
 0

	)

342 
	#GEN6_3DSTATE_CLIP
 
	`GEN6_3D
(3, 0, 0x12)

	)

344 
	#GEN6_3DSTATE_SF
 
	`GEN6_3D
(3, 0, 0x13)

	)

346 
	#GEN6_3DSTATE_SF_NUM_OUTPUTS_SHIFT
 22

	)

347 
	#GEN6_3DSTATE_SF_URB_ENTRY_READ_LENGTH_SHIFT
 11

	)

348 
	#GEN6_3DSTATE_SF_URB_ENTRY_READ_OFFSET_SHIFT
 4

	)

351 
	#GEN6_3DSTATE_SF_CULL_BOTH
 (0 << 29)

	)

352 
	#GEN6_3DSTATE_SF_CULL_NONE
 (1 << 29)

	)

353 
	#GEN6_3DSTATE_SF_CULL_FRONT
 (2 << 29)

	)

354 
	#GEN6_3DSTATE_SF_CULL_BACK
 (3 << 29)

	)

356 
	#GEN6_3DSTATE_SF_TRI_PROVOKE_SHIFT
 29

	)

357 
	#GEN6_3DSTATE_SF_LINE_PROVOKE_SHIFT
 27

	)

358 
	#GEN6_3DSTATE_SF_TRIFAN_PROVOKE_SHIFT
 25

	)

361 
	#GEN6_3DSTATE_WM
 
	`GEN6_3D
(3, 0, 0x14)

	)

363 
	#GEN6_3DSTATE_WM_SAMPLER_COUNT_SHIFT
 27

	)

364 
	#GEN6_3DSTATE_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT
 18

	)

366 
	#GEN6_3DSTATE_WM_DISPATCH_START_GRF_0_SHIFT
 16

	)

368 
	#GEN6_3DSTATE_WM_MAX_THREADS_SHIFT
 25

	)

369 
	#GEN6_3DSTATE_WM_DISPATCH_ENABLE
 (1 << 19)

	)

370 
	#GEN6_3DSTATE_WM_16_DISPATCH_ENABLE
 (1 << 1)

	)

371 
	#GEN6_3DSTATE_WM_8_DISPATCH_ENABLE
 (1 << 0)

	)

373 
	#GEN6_3DSTATE_WM_NUM_SF_OUTPUTS_SHIFT
 20

	)

374 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 15)

	)

375 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 14)

	)

376 
	#GEN6_3DSTATE_WM_NONPERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 13)

	)

377 
	#GEN6_3DSTATE_WM_PERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 12)

	)

378 
	#GEN6_3DSTATE_WM_PERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 11)

	)

379 
	#GEN6_3DSTATE_WM_PERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 10)

	)

382 
	#GEN6_3DSTATE_CONSTANT_VS
 
	`GEN6_3D
(3, 0, 0x15)

	)

383 
	#GEN6_3DSTATE_CONSTANT_GS
 
	`GEN6_3D
(3, 0, 0x16)

	)

384 
	#GEN6_3DSTATE_CONSTANT_PS
 
	`GEN6_3D
(3, 0, 0x17)

	)

386 
	#GEN6_3DSTATE_SAMPLE_MASK
 
	`GEN6_3D
(3, 0, 0x18)

	)

388 
	#GEN6_3DSTATE_MULTISAMPLE
 
	`GEN6_3D
(3, 1, 0x0d)

	)

390 
	#GEN6_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 (0 << 4)

	)

391 
	#GEN6_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_UPPER_LEFT
 (1 << 4)

	)

392 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
 (0 << 1)

	)

393 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_4
 (2 << 1)

	)

394 
	#GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_8
 (3 << 1)

	)

396 
	#PIPELINE_SELECT_3D
 0

	)

397 
	#PIPELINE_SELECT_MEDIA
 1

	)

399 
	#UF0_CS_REALLOC
 (1 << 13)

	)

400 
	#UF0_VFE_REALLOC
 (1 << 12)

	)

401 
	#UF0_SF_REALLOC
 (1 << 11)

	)

402 
	#UF0_CLIP_REALLOC
 (1 << 10)

	)

403 
	#UF0_GS_REALLOC
 (1 << 9)

	)

404 
	#UF0_VS_REALLOC
 (1 << 8)

	)

405 
	#UF1_CLIP_FENCE_SHIFT
 20

	)

406 
	#UF1_GS_FENCE_SHIFT
 10

	)

407 
	#UF1_VS_FENCE_SHIFT
 0

	)

408 
	#UF2_CS_FENCE_SHIFT
 20

	)

409 
	#UF2_VFE_FENCE_SHIFT
 10

	)

410 
	#UF2_SF_FENCE_SHIFT
 0

	)

413 
	#BASE_ADDRESS_MODIFY
 (1 << 0)

	)

414 
	#BUFFER_SIZE_MODIFY
 (1 << 0)

	)

417 
	#GEN6_GS_DISABLE
 0

	)

418 
	#GEN6_GS_ENABLE
 1

	)

419 
	#GEN6_CLIP_DISABLE
 0

	)

420 
	#GEN6_CLIP_ENABLE
 1

	)

423 
	#GEN6_PIPE_CONTROL_NOWRITE
 (0 << 14)

	)

424 
	#GEN6_PIPE_CONTROL_WRITE_QWORD
 (1 << 14)

	)

425 
	#GEN6_PIPE_CONTROL_WRITE_DEPTH
 (2 << 14)

	)

426 
	#GEN6_PIPE_CONTROL_WRITE_TIME
 (3 << 14)

	)

427 
	#GEN6_PIPE_CONTROL_DEPTH_STALL
 (1 << 13)

	)

428 
	#GEN6_PIPE_CONTROL_WC_FLUSH
 (1 << 12)

	)

429 
	#GEN6_PIPE_CONTROL_IS_FLUSH
 (1 << 11)

	)

430 
	#GEN6_PIPE_CONTROL_TC_FLUSH
 (1 << 10)

	)

431 
	#GEN6_PIPE_CONTROL_NOTIFY_ENABLE
 (1 << 8)

	)

432 
	#GEN6_PIPE_CONTROL_GLOBAL_GTT
 (1 << 2)

	)

433 
	#GEN6_PIPE_CONTROL_LOCAL_PGTT
 (0 << 2)

	)

434 
	#GEN6_PIPE_CONTROL_DEPTH_CACHE_FLUSH
 (1 << 0)

	)

437 
	#GEN6_3DPRIMITIVE_VERTEX_SEQUENTIAL
 (0 << 15)

	)

438 
	#GEN6_3DPRIMITIVE_VERTEX_RANDOM
 (1 << 15)

	)

440 
	#GEN6_3DPRIMITIVE_TOPOLOGY_SHIFT
 10

	)

442 
	#GEN6_SVG_CTL
 0x7400

	)

444 
	#GEN6_SVG_CTL_GS_BA
 (0 << 8)

	)

445 
	#GEN6_SVG_CTL_SS_BA
 (1 << 8)

	)

446 
	#GEN6_SVG_CTL_IO_BA
 (2 << 8)

	)

447 
	#GEN6_SVG_CTL_GS_AUB
 (3 << 8)

	)

448 
	#GEN6_SVG_CTL_IO_AUB
 (4 << 8)

	)

449 
	#GEN6_SVG_CTL_SIP
 (5 << 8)

	)

451 
	#GEN6_SVG_RDATA
 0x7404

	)

452 
	#GEN6_SVG_WORK_CTL
 0x7408

	)

454 
	#GEN6_VF_CTL
 0x7500

	)

456 
	#GEN6_VF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

457 
	#GEN6_VF_CTL_SNAPSHOT_MUX_SELECT_THREADID
 (0 << 8)

	)

458 
	#GEN6_VF_CTL_SNAPSHOT_MUX_SELECT_VF_DEBUG
 (1 << 8)

	)

459 
	#GEN6_VF_CTL_SNAPSHOT_TYPE_VERTEX_SEQUENCE
 (0 << 4)

	)

460 
	#GEN6_VF_CTL_SNAPSHOT_TYPE_VERTEX_INDEX
 (1 << 4)

	)

461 
	#GEN6_VF_CTL_SKIP_INITIAL_PRIMITIVES
 (1 << 3)

	)

462 
	#GEN6_VF_CTL_MAX_PRIMITIVES_LIMIT_ENABLE
 (1 << 2)

	)

463 
	#GEN6_VF_CTL_VERTEX_RANGE_LIMIT_ENABLE
 (1 << 1)

	)

464 
	#GEN6_VF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

466 
	#GEN6_VF_STRG_VAL
 0x7504

	)

467 
	#GEN6_VF_STR_VL_OVR
 0x7508

	)

468 
	#GEN6_VF_VC_OVR
 0x750c

	)

469 
	#GEN6_VF_STR_PSKIP
 0x7510

	)

470 
	#GEN6_VF_MAX_PRIM
 0x7514

	)

471 
	#GEN6_VF_RDATA
 0x7518

	)

473 
	#GEN6_VS_CTL
 0x7600

	)

474 
	#GEN6_VS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

475 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VERTEX_0
 (0 << 8)

	)

476 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VERTEX_1
 (1 << 8)

	)

477 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VALID_COUNT
 (2 << 8)

	)

478 
	#GEN6_VS_CTL_SNAPSHOT_MUX_VS_KERNEL_POINTER
 (3 << 8)

	)

479 
	#GEN6_VS_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

480 
	#GEN6_VS_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

481 
	#GEN6_VS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

483 
	#GEN6_VS_STRG_VAL
 0x7604

	)

484 
	#GEN6_VS_RDATA
 0x7608

	)

486 
	#GEN6_SF_CTL
 0x7b00

	)

487 
	#GEN6_SF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

488 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_0_FF_ID
 (0 << 8)

	)

489 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_0_REL_COUNT
 (1 << 8)

	)

490 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_1_FF_ID
 (2 << 8)

	)

491 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_1_REL_COUNT
 (3 << 8)

	)

492 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_2_FF_ID
 (4 << 8)

	)

493 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_2_REL_COUNT
 (5 << 8)

	)

494 
	#GEN6_SF_CTL_SNAPSHOT_MUX_VERTEX_COUNT
 (6 << 8)

	)

495 
	#GEN6_SF_CTL_SNAPSHOT_MUX_SF_KERNEL_POINTER
 (7 << 8)

	)

496 
	#GEN6_SF_CTL_MIN_MAX_PRIMITIVE_RANGE_ENABLE
 (1 << 4)

	)

497 
	#GEN6_SF_CTL_DEBUG_CLIP_RECTANGLE_ENABLE
 (1 << 3)

	)

498 
	#GEN6_SF_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

499 
	#GEN6_SF_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

500 
	#GEN6_SF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

502 
	#GEN6_SF_STRG_VAL
 0x7b04

	)

503 
	#GEN6_SF_RDATA
 0x7b18

	)

505 
	#GEN6_WIZ_CTL
 0x7c00

	)

506 
	#GEN6_WIZ_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

507 
	#GEN6_WIZ_CTL_SUBSPAN_INSTANCE_SHIFT
 16

	)

508 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_WIZ_KERNEL_POINTER
 (0 << 8)

	)

509 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_SUBSPAN_INSTANCE
 (1 << 8)

	)

510 
	#GEN6_WIZ_CTL_SNAPSHOT_MUX_PRIMITIVE_SEQUENCE
 (2 << 8)

	)

511 
	#GEN6_WIZ_CTL_SINGLE_SUBSPAN_DISPATCH
 (1 << 6)

	)

512 
	#GEN6_WIZ_CTL_IGNORE_COLOR_SCOREBOARD_STALLS
 (1 << 5)

	)

513 
	#GEN6_WIZ_CTL_ENABLE_SUBSPAN_INSTANCE_COMPARE
 (1 << 4)

	)

514 
	#GEN6_WIZ_CTL_USE_UPSTREAM_SNAPSHOT_FLAG
 (1 << 3)

	)

515 
	#GEN6_WIZ_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

516 
	#GEN6_WIZ_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

517 
	#GEN6_WIZ_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

519 
	#GEN6_WIZ_STRG_VAL
 0x7c04

	)

520 
	#GEN6_WIZ_RDATA
 0x7c18

	)

522 
	#GEN6_TS_CTL
 0x7e00

	)

523 
	#GEN6_TS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

524 
	#GEN6_TS_CTL_SNAPSHOT_MESSAGE_ERROR
 (0 << 8)

	)

525 
	#GEN6_TS_CTL_SNAPSHOT_INTERFACE_DESCRIPTOR
 (3 << 8)

	)

526 
	#GEN6_TS_CTL_SNAPSHOT_ALL_CHILD_THREADS
 (1 << 2)

	)

527 
	#GEN6_TS_CTL_SNAPSHOT_ALL_ROOT_THREADS
 (1 << 1)

	)

528 
	#GEN6_TS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

530 
	#GEN6_TS_STRG_VAL
 0x7e04

	)

531 
	#GEN6_TS_RDATA
 0x7e08

	)

533 
	#GEN6_TD_CTL_MUX_SHIFT
 8

	)

534 
	#GEN6_TD_CTL_EXTERNAL_HALT_R0_DEBUG_MATCH
 (1 << 7)

	)

535 
	#GEN6_TD_CTL_FORCE_EXTERNAL_HALT
 (1 << 6)

	)

536 
	#GEN6_TD_CTL_EXCEPTION_MASK_OVERRIDE
 (1 << 5)

	)

537 
	#GEN6_TD_CTL_FORCE_THREAD_BREAKPOINT_ENABLE
 (1 << 4)

	)

538 
	#GEN6_TD_CTL_BREAKPOINT_ENABLE
 (1 << 2)

	)

539 
	#GEN6_TD_CTL2
 0x8004

	)

540 
	#GEN6_TD_CTL2_ILLEGAL_OPCODE_EXCEPTION_OVERRIDE
 (1 << 28)

	)

541 
	#GEN6_TD_CTL2_MASKSTACK_EXCEPTION_OVERRIDE
 (1 << 26)

	)

542 
	#GEN6_TD_CTL2_SOFTWARE_EXCEPTION_OVERRIDE
 (1 << 25)

	)

543 
	#GEN6_TD_CTL2_ACTIVE_THREAD_LIMIT_SHIFT
 16

	)

544 
	#GEN6_TD_CTL2_ACTIVE_THREAD_LIMIT_ENABLE
 (1 << 8)

	)

545 
	#GEN6_TD_CTL2_THREAD_SPAWNER_EXECUTION_MASK_ENABLE
 (1 << 7)

	)

546 
	#GEN6_TD_CTL2_WIZ_EXECUTION_MASK_ENABLE
 (1 << 6)

	)

547 
	#GEN6_TD_CTL2_SF_EXECUTION_MASK_ENABLE
 (1 << 5)

	)

548 
	#GEN6_TD_CTL2_CLIPPER_EXECUTION_MASK_ENABLE
 (1 << 4)

	)

549 
	#GEN6_TD_CTL2_GS_EXECUTION_MASK_ENABLE
 (1 << 3)

	)

550 
	#GEN6_TD_CTL2_VS_EXECUTION_MASK_ENABLE
 (1 << 0)

	)

551 
	#GEN6_TD_VF_VS_EMSK
 0x8008

	)

552 
	#GEN6_TD_GS_EMSK
 0x800c

	)

553 
	#GEN6_TD_CLIP_EMSK
 0x8010

	)

554 
	#GEN6_TD_SF_EMSK
 0x8014

	)

555 
	#GEN6_TD_WIZ_EMSK
 0x8018

	)

556 
	#GEN6_TD_0_6_EHTRG_VAL
 0x801c

	)

557 
	#GEN6_TD_0_7_EHTRG_VAL
 0x8020

	)

558 
	#GEN6_TD_0_6_EHTRG_MSK
 0x8024

	)

559 
	#GEN6_TD_0_7_EHTRG_MSK
 0x8028

	)

560 
	#GEN6_TD_RDATA
 0x802c

	)

561 
	#GEN6_TD_TS_EMSK
 0x8030

	)

563 
	#GEN6_EU_CTL
 0x8800

	)

564 
	#GEN6_EU_CTL_SELECT_SHIFT
 16

	)

565 
	#GEN6_EU_CTL_DATA_MUX_SHIFT
 8

	)

566 
	#GEN6_EU_ATT_0
 0x8810

	)

567 
	#GEN6_EU_ATT_1
 0x8814

	)

568 
	#GEN6_EU_ATT_DATA_0
 0x8820

	)

569 
	#GEN6_EU_ATT_DATA_1
 0x8824

	)

570 
	#GEN6_EU_ATT_CLR_0
 0x8830

	)

571 
	#GEN6_EU_ATT_CLR_1
 0x8834

	)

572 
	#GEN6_EU_RDATA
 0x8840

	)

576 
	#_3DOP_3DSTATE_PIPELINED
 0x0

	)

577 
	#_3DOP_3DSTATE_NONPIPELINED
 0x1

	)

578 
	#_3DOP_3DCONTROL
 0x2

	)

579 
	#_3DOP_3DPRIMITIVE
 0x3

	)

581 
	#_3DSTATE_PIPELINED_POINTERS
 0x00

	)

582 
	#_3DSTATE_BINDING_TABLE_POINTERS
 0x01

	)

583 
	#_3DSTATE_VERTEX_BUFFERS
 0x08

	)

584 
	#_3DSTATE_VERTEX_ELEMENTS
 0x09

	)

585 
	#_3DSTATE_INDEX_BUFFER
 0x0A

	)

586 
	#_3DSTATE_VF_STATISTICS
 0x0B

	)

587 
	#_3DSTATE_DRAWING_RECTANGLE
 0x00

	)

588 
	#_3DSTATE_CONSTANT_COLOR
 0x01

	)

589 
	#_3DSTATE_SAMPLER_PALETTE_LOAD
 0x02

	)

590 
	#_3DSTATE_CHROMA_KEY
 0x04

	)

591 
	#_3DSTATE_DEPTH_BUFFER
 0x05

	)

592 
	#_3DSTATE_POLY_STIPPLE_OFFSET
 0x06

	)

593 
	#_3DSTATE_POLY_STIPPLE_PATTERN
 0x07

	)

594 
	#_3DSTATE_LINE_STIPPLE
 0x08

	)

595 
	#_3DSTATE_GLOBAL_DEPTH_OFFSET_CLAMP
 0x09

	)

596 
	#_3DCONTROL
 0x00

	)

597 
	#_3DPRIMITIVE
 0x00

	)

599 
	#_3DPRIM_POINTLIST
 0x01

	)

600 
	#_3DPRIM_LINELIST
 0x02

	)

601 
	#_3DPRIM_LINESTRIP
 0x03

	)

602 
	#_3DPRIM_TRILIST
 0x04

	)

603 
	#_3DPRIM_TRISTRIP
 0x05

	)

604 
	#_3DPRIM_TRIFAN
 0x06

	)

605 
	#_3DPRIM_QUADLIST
 0x07

	)

606 
	#_3DPRIM_QUADSTRIP
 0x08

	)

607 
	#_3DPRIM_LINELIST_ADJ
 0x09

	)

608 
	#_3DPRIM_LINESTRIP_ADJ
 0x0A

	)

609 
	#_3DPRIM_TRILIST_ADJ
 0x0B

	)

610 
	#_3DPRIM_TRISTRIP_ADJ
 0x0C

	)

611 
	#_3DPRIM_TRISTRIP_REVERSE
 0x0D

	)

612 
	#_3DPRIM_POLYGON
 0x0E

	)

613 
	#_3DPRIM_RECTLIST
 0x0F

	)

614 
	#_3DPRIM_LINELOOP
 0x10

	)

615 
	#_3DPRIM_POINTLIST_BF
 0x11

	)

616 
	#_3DPRIM_LINESTRIP_CONT
 0x12

	)

617 
	#_3DPRIM_LINESTRIP_BF
 0x13

	)

618 
	#_3DPRIM_LINESTRIP_CONT_BF
 0x14

	)

619 
	#_3DPRIM_TRIFAN_NOSTIPPLE
 0x15

	)

621 
	#_3DPRIM_VERTEXBUFFER_ACCESS_SEQUENTIAL
 0

	)

622 
	#_3DPRIM_VERTEXBUFFER_ACCESS_RANDOM
 1

	)

624 
	#GEN6_ANISORATIO_2
 0

	)

625 
	#GEN6_ANISORATIO_4
 1

	)

626 
	#GEN6_ANISORATIO_6
 2

	)

627 
	#GEN6_ANISORATIO_8
 3

	)

628 
	#GEN6_ANISORATIO_10
 4

	)

629 
	#GEN6_ANISORATIO_12
 5

	)

630 
	#GEN6_ANISORATIO_14
 6

	)

631 
	#GEN6_ANISORATIO_16
 7

	)

633 
	#GEN6_BLENDFACTOR_ONE
 0x1

	)

634 
	#GEN6_BLENDFACTOR_SRC_COLOR
 0x2

	)

635 
	#GEN6_BLENDFACTOR_SRC_ALPHA
 0x3

	)

636 
	#GEN6_BLENDFACTOR_DST_ALPHA
 0x4

	)

637 
	#GEN6_BLENDFACTOR_DST_COLOR
 0x5

	)

638 
	#GEN6_BLENDFACTOR_SRC_ALPHA_SATURATE
 0x6

	)

639 
	#GEN6_BLENDFACTOR_CONST_COLOR
 0x7

	)

640 
	#GEN6_BLENDFACTOR_CONST_ALPHA
 0x8

	)

641 
	#GEN6_BLENDFACTOR_SRC1_COLOR
 0x9

	)

642 
	#GEN6_BLENDFACTOR_SRC1_ALPHA
 0x0A

	)

643 
	#GEN6_BLENDFACTOR_ZERO
 0x11

	)

644 
	#GEN6_BLENDFACTOR_INV_SRC_COLOR
 0x12

	)

645 
	#GEN6_BLENDFACTOR_INV_SRC_ALPHA
 0x13

	)

646 
	#GEN6_BLENDFACTOR_INV_DST_ALPHA
 0x14

	)

647 
	#GEN6_BLENDFACTOR_INV_DST_COLOR
 0x15

	)

648 
	#GEN6_BLENDFACTOR_INV_CONST_COLOR
 0x17

	)

649 
	#GEN6_BLENDFACTOR_INV_CONST_ALPHA
 0x18

	)

650 
	#GEN6_BLENDFACTOR_INV_SRC1_COLOR
 0x19

	)

651 
	#GEN6_BLENDFACTOR_INV_SRC1_ALPHA
 0x1A

	)

653 
	#GEN6_BLENDFUNCTION_ADD
 0

	)

654 
	#GEN6_BLENDFUNCTION_SUBTRACT
 1

	)

655 
	#GEN6_BLENDFUNCTION_REVERSE_SUBTRACT
 2

	)

656 
	#GEN6_BLENDFUNCTION_MIN
 3

	)

657 
	#GEN6_BLENDFUNCTION_MAX
 4

	)

659 
	#GEN6_ALPHATEST_FORMAT_UNORM8
 0

	)

660 
	#GEN6_ALPHATEST_FORMAT_FLOAT32
 1

	)

662 
	#GEN6_CHROMAKEY_KILL_ON_ANY_MATCH
 0

	)

663 
	#GEN6_CHROMAKEY_REPLACE_BLACK
 1

	)

665 
	#GEN6_CLIP_API_OGL
 0

	)

666 
	#GEN6_CLIP_API_DX
 1

	)

668 
	#GEN6_CLIPMODE_NORMAL
 0

	)

669 
	#GEN6_CLIPMODE_CLIP_ALL
 1

	)

670 
	#GEN6_CLIPMODE_CLIP_NON_REJECTED
 2

	)

671 
	#GEN6_CLIPMODE_REJECT_ALL
 3

	)

672 
	#GEN6_CLIPMODE_ACCEPT_ALL
 4

	)

674 
	#GEN6_CLIP_NDCSPACE
 0

	)

675 
	#GEN6_CLIP_SCREENSPACE
 1

	)

677 
	#GEN6_COMPAREFUNCTION_ALWAYS
 0

	)

678 
	#GEN6_COMPAREFUNCTION_NEVER
 1

	)

679 
	#GEN6_COMPAREFUNCTION_LESS
 2

	)

680 
	#GEN6_COMPAREFUNCTION_EQUAL
 3

	)

681 
	#GEN6_COMPAREFUNCTION_LEQUAL
 4

	)

682 
	#GEN6_COMPAREFUNCTION_GREATER
 5

	)

683 
	#GEN6_COMPAREFUNCTION_NOTEQUAL
 6

	)

684 
	#GEN6_COMPAREFUNCTION_GEQUAL
 7

	)

686 
	#GEN6_COVERAGE_PIXELS_HALF
 0

	)

687 
	#GEN6_COVERAGE_PIXELS_1
 1

	)

688 
	#GEN6_COVERAGE_PIXELS_2
 2

	)

689 
	#GEN6_COVERAGE_PIXELS_4
 3

	)

691 
	#GEN6_CULLMODE_BOTH
 0

	)

692 
	#GEN6_CULLMODE_NONE
 1

	)

693 
	#GEN6_CULLMODE_FRONT
 2

	)

694 
	#GEN6_CULLMODE_BACK
 3

	)

696 
	#GEN6_DEFAULTCOLOR_R8G8B8A8_UNORM
 0

	)

697 
	#GEN6_DEFAULTCOLOR_R32G32B32A32_FLOAT
 1

	)

699 
	#GEN6_DEPTHFORMAT_D32_FLOAT_S8X24_UINT
 0

	)

700 
	#GEN6_DEPTHFORMAT_D32_FLOAT
 1

	)

701 
	#GEN6_DEPTHFORMAT_D24_UNORM_S8_UINT
 2

	)

702 
	#GEN6_DEPTHFORMAT_D16_UNORM
 5

	)

704 
	#GEN6_FLOATING_POINT_IEEE_754
 0

	)

705 
	#GEN6_FLOATING_POINT_NON_IEEE_754
 1

	)

707 
	#GEN6_FRONTWINDING_CW
 0

	)

708 
	#GEN6_FRONTWINDING_CCW
 1

	)

710 
	#GEN6_INDEX_BYTE
 0

	)

711 
	#GEN6_INDEX_WORD
 1

	)

712 
	#GEN6_INDEX_DWORD
 2

	)

714 
	#GEN6_LOGICOPFUNCTION_CLEAR
 0

	)

715 
	#GEN6_LOGICOPFUNCTION_NOR
 1

	)

716 
	#GEN6_LOGICOPFUNCTION_AND_INVERTED
 2

	)

717 
	#GEN6_LOGICOPFUNCTION_COPY_INVERTED
 3

	)

718 
	#GEN6_LOGICOPFUNCTION_AND_REVERSE
 4

	)

719 
	#GEN6_LOGICOPFUNCTION_INVERT
 5

	)

720 
	#GEN6_LOGICOPFUNCTION_XOR
 6

	)

721 
	#GEN6_LOGICOPFUNCTION_NAND
 7

	)

722 
	#GEN6_LOGICOPFUNCTION_AND
 8

	)

723 
	#GEN6_LOGICOPFUNCTION_EQUIV
 9

	)

724 
	#GEN6_LOGICOPFUNCTION_NOOP
 10

	)

725 
	#GEN6_LOGICOPFUNCTION_OR_INVERTED
 11

	)

726 
	#GEN6_LOGICOPFUNCTION_COPY
 12

	)

727 
	#GEN6_LOGICOPFUNCTION_OR_REVERSE
 13

	)

728 
	#GEN6_LOGICOPFUNCTION_OR
 14

	)

729 
	#GEN6_LOGICOPFUNCTION_SET
 15

	)

731 
	#GEN6_MAPFILTER_NEAREST
 0x0

	)

732 
	#GEN6_MAPFILTER_LINEAR
 0x1

	)

733 
	#GEN6_MAPFILTER_ANISOTROPIC
 0x2

	)

735 
	#GEN6_MIPFILTER_NONE
 0

	)

736 
	#GEN6_MIPFILTER_NEAREST
 1

	)

737 
	#GEN6_MIPFILTER_LINEAR
 3

	)

739 
	#GEN6_POLYGON_FRONT_FACING
 0

	)

740 
	#GEN6_POLYGON_BACK_FACING
 1

	)

742 
	#GEN6_PREFILTER_ALWAYS
 0x0

	)

743 
	#GEN6_PREFILTER_NEVER
 0x1

	)

744 
	#GEN6_PREFILTER_LESS
 0x2

	)

745 
	#GEN6_PREFILTER_EQUAL
 0x3

	)

746 
	#GEN6_PREFILTER_LEQUAL
 0x4

	)

747 
	#GEN6_PREFILTER_GREATER
 0x5

	)

748 
	#GEN6_PREFILTER_NOTEQUAL
 0x6

	)

749 
	#GEN6_PREFILTER_GEQUAL
 0x7

	)

751 
	#GEN6_PROVOKING_VERTEX_0
 0

	)

752 
	#GEN6_PROVOKING_VERTEX_1
 1

	)

753 
	#GEN6_PROVOKING_VERTEX_2
 2

	)

755 
	#GEN6_RASTRULE_UPPER_LEFT
 0

	)

756 
	#GEN6_RASTRULE_UPPER_RIGHT
 1

	)

758 
	#GEN6_RENDERTARGET_CLAMPRANGE_UNORM
 0

	)

759 
	#GEN6_RENDERTARGET_CLAMPRANGE_SNORM
 1

	)

760 
	#GEN6_RENDERTARGET_CLAMPRANGE_FORMAT
 2

	)

762 
	#GEN6_STENCILOP_KEEP
 0

	)

763 
	#GEN6_STENCILOP_ZERO
 1

	)

764 
	#GEN6_STENCILOP_REPLACE
 2

	)

765 
	#GEN6_STENCILOP_INCRSAT
 3

	)

766 
	#GEN6_STENCILOP_DECRSAT
 4

	)

767 
	#GEN6_STENCILOP_INCR
 5

	)

768 
	#GEN6_STENCILOP_DECR
 6

	)

769 
	#GEN6_STENCILOP_INVERT
 7

	)

771 
	#GEN6_SURFACE_MIPMAPLAYOUT_BELOW
 0

	)

772 
	#GEN6_SURFACE_MIPMAPLAYOUT_RIGHT
 1

	)

774 
	#GEN6_SURFACEFORMAT_R32G32B32A32_FLOAT
 0x000

	)

775 
	#GEN6_SURFACEFORMAT_R32G32B32A32_SINT
 0x001

	)

776 
	#GEN6_SURFACEFORMAT_R32G32B32A32_UINT
 0x002

	)

777 
	#GEN6_SURFACEFORMAT_R32G32B32A32_UNORM
 0x003

	)

778 
	#GEN6_SURFACEFORMAT_R32G32B32A32_SNORM
 0x004

	)

779 
	#GEN6_SURFACEFORMAT_R64G64_FLOAT
 0x005

	)

780 
	#GEN6_SURFACEFORMAT_R32G32B32X32_FLOAT
 0x006

	)

781 
	#GEN6_SURFACEFORMAT_R32G32B32A32_SSCALED
 0x007

	)

782 
	#GEN6_SURFACEFORMAT_R32G32B32A32_USCALED
 0x008

	)

783 
	#GEN6_SURFACEFORMAT_R32G32B32_FLOAT
 0x040

	)

784 
	#GEN6_SURFACEFORMAT_R32G32B32_SINT
 0x041

	)

785 
	#GEN6_SURFACEFORMAT_R32G32B32_UINT
 0x042

	)

786 
	#GEN6_SURFACEFORMAT_R32G32B32_UNORM
 0x043

	)

787 
	#GEN6_SURFACEFORMAT_R32G32B32_SNORM
 0x044

	)

788 
	#GEN6_SURFACEFORMAT_R32G32B32_SSCALED
 0x045

	)

789 
	#GEN6_SURFACEFORMAT_R32G32B32_USCALED
 0x046

	)

790 
	#GEN6_SURFACEFORMAT_R16G16B16A16_UNORM
 0x080

	)

791 
	#GEN6_SURFACEFORMAT_R16G16B16A16_SNORM
 0x081

	)

792 
	#GEN6_SURFACEFORMAT_R16G16B16A16_SINT
 0x082

	)

793 
	#GEN6_SURFACEFORMAT_R16G16B16A16_UINT
 0x083

	)

794 
	#GEN6_SURFACEFORMAT_R16G16B16A16_FLOAT
 0x084

	)

795 
	#GEN6_SURFACEFORMAT_R32G32_FLOAT
 0x085

	)

796 
	#GEN6_SURFACEFORMAT_R32G32_SINT
 0x086

	)

797 
	#GEN6_SURFACEFORMAT_R32G32_UINT
 0x087

	)

798 
	#GEN6_SURFACEFORMAT_R32_FLOAT_X8X24_TYPELESS
 0x088

	)

799 
	#GEN6_SURFACEFORMAT_X32_TYPELESS_G8X24_UINT
 0x089

	)

800 
	#GEN6_SURFACEFORMAT_L32A32_FLOAT
 0x08A

	)

801 
	#GEN6_SURFACEFORMAT_R32G32_UNORM
 0x08B

	)

802 
	#GEN6_SURFACEFORMAT_R32G32_SNORM
 0x08C

	)

803 
	#GEN6_SURFACEFORMAT_R64_FLOAT
 0x08D

	)

804 
	#GEN6_SURFACEFORMAT_R16G16B16X16_UNORM
 0x08E

	)

805 
	#GEN6_SURFACEFORMAT_R16G16B16X16_FLOAT
 0x08F

	)

806 
	#GEN6_SURFACEFORMAT_A32X32_FLOAT
 0x090

	)

807 
	#GEN6_SURFACEFORMAT_L32X32_FLOAT
 0x091

	)

808 
	#GEN6_SURFACEFORMAT_I32X32_FLOAT
 0x092

	)

809 
	#GEN6_SURFACEFORMAT_R16G16B16A16_SSCALED
 0x093

	)

810 
	#GEN6_SURFACEFORMAT_R16G16B16A16_USCALED
 0x094

	)

811 
	#GEN6_SURFACEFORMAT_R32G32_SSCALED
 0x095

	)

812 
	#GEN6_SURFACEFORMAT_R32G32_USCALED
 0x096

	)

813 
	#GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
 0x0C0

	)

814 
	#GEN6_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB
 0x0C1

	)

815 
	#GEN6_SURFACEFORMAT_R10G10B10A2_UNORM
 0x0C2

	)

816 
	#GEN6_SURFACEFORMAT_R10G10B10A2_UNORM_SRGB
 0x0C3

	)

817 
	#GEN6_SURFACEFORMAT_R10G10B10A2_UINT
 0x0C4

	)

818 
	#GEN6_SURFACEFORMAT_R10G10B10_SNORM_A2_UNORM
 0x0C5

	)

819 
	#GEN6_SURFACEFORMAT_R8G8B8A8_UNORM
 0x0C7

	)

820 
	#GEN6_SURFACEFORMAT_R8G8B8A8_UNORM_SRGB
 0x0C8

	)

821 
	#GEN6_SURFACEFORMAT_R8G8B8A8_SNORM
 0x0C9

	)

822 
	#GEN6_SURFACEFORMAT_R8G8B8A8_SINT
 0x0CA

	)

823 
	#GEN6_SURFACEFORMAT_R8G8B8A8_UINT
 0x0CB

	)

824 
	#GEN6_SURFACEFORMAT_R16G16_UNORM
 0x0CC

	)

825 
	#GEN6_SURFACEFORMAT_R16G16_SNORM
 0x0CD

	)

826 
	#GEN6_SURFACEFORMAT_R16G16_SINT
 0x0CE

	)

827 
	#GEN6_SURFACEFORMAT_R16G16_UINT
 0x0CF

	)

828 
	#GEN6_SURFACEFORMAT_R16G16_FLOAT
 0x0D0

	)

829 
	#GEN6_SURFACEFORMAT_B10G10R10A2_UNORM
 0x0D1

	)

830 
	#GEN6_SURFACEFORMAT_B10G10R10A2_UNORM_SRGB
 0x0D2

	)

831 
	#GEN6_SURFACEFORMAT_R11G11B10_FLOAT
 0x0D3

	)

832 
	#GEN6_SURFACEFORMAT_R32_SINT
 0x0D6

	)

833 
	#GEN6_SURFACEFORMAT_R32_UINT
 0x0D7

	)

834 
	#GEN6_SURFACEFORMAT_R32_FLOAT
 0x0D8

	)

835 
	#GEN6_SURFACEFORMAT_R24_UNORM_X8_TYPELESS
 0x0D9

	)

836 
	#GEN6_SURFACEFORMAT_X24_TYPELESS_G8_UINT
 0x0DA

	)

837 
	#GEN6_SURFACEFORMAT_L16A16_UNORM
 0x0DF

	)

838 
	#GEN6_SURFACEFORMAT_I24X8_UNORM
 0x0E0

	)

839 
	#GEN6_SURFACEFORMAT_L24X8_UNORM
 0x0E1

	)

840 
	#GEN6_SURFACEFORMAT_A24X8_UNORM
 0x0E2

	)

841 
	#GEN6_SURFACEFORMAT_I32_FLOAT
 0x0E3

	)

842 
	#GEN6_SURFACEFORMAT_L32_FLOAT
 0x0E4

	)

843 
	#GEN6_SURFACEFORMAT_A32_FLOAT
 0x0E5

	)

844 
	#GEN6_SURFACEFORMAT_B8G8R8X8_UNORM
 0x0E9

	)

845 
	#GEN6_SURFACEFORMAT_B8G8R8X8_UNORM_SRGB
 0x0EA

	)

846 
	#GEN6_SURFACEFORMAT_R8G8B8X8_UNORM
 0x0EB

	)

847 
	#GEN6_SURFACEFORMAT_R8G8B8X8_UNORM_SRGB
 0x0EC

	)

848 
	#GEN6_SURFACEFORMAT_R9G9B9E5_SHAREDEXP
 0x0ED

	)

849 
	#GEN6_SURFACEFORMAT_B10G10R10X2_UNORM
 0x0EE

	)

850 
	#GEN6_SURFACEFORMAT_L16A16_FLOAT
 0x0F0

	)

851 
	#GEN6_SURFACEFORMAT_R32_UNORM
 0x0F1

	)

852 
	#GEN6_SURFACEFORMAT_R32_SNORM
 0x0F2

	)

853 
	#GEN6_SURFACEFORMAT_R10G10B10X2_USCALED
 0x0F3

	)

854 
	#GEN6_SURFACEFORMAT_R8G8B8A8_SSCALED
 0x0F4

	)

855 
	#GEN6_SURFACEFORMAT_R8G8B8A8_USCALED
 0x0F5

	)

856 
	#GEN6_SURFACEFORMAT_R16G16_SSCALED
 0x0F6

	)

857 
	#GEN6_SURFACEFORMAT_R16G16_USCALED
 0x0F7

	)

858 
	#GEN6_SURFACEFORMAT_R32_SSCALED
 0x0F8

	)

859 
	#GEN6_SURFACEFORMAT_R32_USCALED
 0x0F9

	)

860 
	#GEN6_SURFACEFORMAT_B5G6R5_UNORM
 0x100

	)

861 
	#GEN6_SURFACEFORMAT_B5G6R5_UNORM_SRGB
 0x101

	)

862 
	#GEN6_SURFACEFORMAT_B5G5R5A1_UNORM
 0x102

	)

863 
	#GEN6_SURFACEFORMAT_B5G5R5A1_UNORM_SRGB
 0x103

	)

864 
	#GEN6_SURFACEFORMAT_B4G4R4A4_UNORM
 0x104

	)

865 
	#GEN6_SURFACEFORMAT_B4G4R4A4_UNORM_SRGB
 0x105

	)

866 
	#GEN6_SURFACEFORMAT_R8G8_UNORM
 0x106

	)

867 
	#GEN6_SURFACEFORMAT_R8G8_SNORM
 0x107

	)

868 
	#GEN6_SURFACEFORMAT_R8G8_SINT
 0x108

	)

869 
	#GEN6_SURFACEFORMAT_R8G8_UINT
 0x109

	)

870 
	#GEN6_SURFACEFORMAT_R16_UNORM
 0x10A

	)

871 
	#GEN6_SURFACEFORMAT_R16_SNORM
 0x10B

	)

872 
	#GEN6_SURFACEFORMAT_R16_SINT
 0x10C

	)

873 
	#GEN6_SURFACEFORMAT_R16_UINT
 0x10D

	)

874 
	#GEN6_SURFACEFORMAT_R16_FLOAT
 0x10E

	)

875 
	#GEN6_SURFACEFORMAT_I16_UNORM
 0x111

	)

876 
	#GEN6_SURFACEFORMAT_L16_UNORM
 0x112

	)

877 
	#GEN6_SURFACEFORMAT_A16_UNORM
 0x113

	)

878 
	#GEN6_SURFACEFORMAT_L8A8_UNORM
 0x114

	)

879 
	#GEN6_SURFACEFORMAT_I16_FLOAT
 0x115

	)

880 
	#GEN6_SURFACEFORMAT_L16_FLOAT
 0x116

	)

881 
	#GEN6_SURFACEFORMAT_A16_FLOAT
 0x117

	)

882 
	#GEN6_SURFACEFORMAT_R5G5_SNORM_B6_UNORM
 0x119

	)

883 
	#GEN6_SURFACEFORMAT_B5G5R5X1_UNORM
 0x11A

	)

884 
	#GEN6_SURFACEFORMAT_B5G5R5X1_UNORM_SRGB
 0x11B

	)

885 
	#GEN6_SURFACEFORMAT_R8G8_SSCALED
 0x11C

	)

886 
	#GEN6_SURFACEFORMAT_R8G8_USCALED
 0x11D

	)

887 
	#GEN6_SURFACEFORMAT_R16_SSCALED
 0x11E

	)

888 
	#GEN6_SURFACEFORMAT_R16_USCALED
 0x11F

	)

889 
	#GEN6_SURFACEFORMAT_R8_UNORM
 0x140

	)

890 
	#GEN6_SURFACEFORMAT_R8_SNORM
 0x141

	)

891 
	#GEN6_SURFACEFORMAT_R8_SINT
 0x142

	)

892 
	#GEN6_SURFACEFORMAT_R8_UINT
 0x143

	)

893 
	#GEN6_SURFACEFORMAT_A8_UNORM
 0x144

	)

894 
	#GEN6_SURFACEFORMAT_I8_UNORM
 0x145

	)

895 
	#GEN6_SURFACEFORMAT_L8_UNORM
 0x146

	)

896 
	#GEN6_SURFACEFORMAT_P4A4_UNORM
 0x147

	)

897 
	#GEN6_SURFACEFORMAT_A4P4_UNORM
 0x148

	)

898 
	#GEN6_SURFACEFORMAT_R8_SSCALED
 0x149

	)

899 
	#GEN6_SURFACEFORMAT_R8_USCALED
 0x14A

	)

900 
	#GEN6_SURFACEFORMAT_R1_UINT
 0x181

	)

901 
	#GEN6_SURFACEFORMAT_YCRCB_NORMAL
 0x182

	)

902 
	#GEN6_SURFACEFORMAT_YCRCB_SWAPUVY
 0x183

	)

903 
	#GEN6_SURFACEFORMAT_BC1_UNORM
 0x186

	)

904 
	#GEN6_SURFACEFORMAT_BC2_UNORM
 0x187

	)

905 
	#GEN6_SURFACEFORMAT_BC3_UNORM
 0x188

	)

906 
	#GEN6_SURFACEFORMAT_BC4_UNORM
 0x189

	)

907 
	#GEN6_SURFACEFORMAT_BC5_UNORM
 0x18A

	)

908 
	#GEN6_SURFACEFORMAT_BC1_UNORM_SRGB
 0x18B

	)

909 
	#GEN6_SURFACEFORMAT_BC2_UNORM_SRGB
 0x18C

	)

910 
	#GEN6_SURFACEFORMAT_BC3_UNORM_SRGB
 0x18D

	)

911 
	#GEN6_SURFACEFORMAT_MONO8
 0x18E

	)

912 
	#GEN6_SURFACEFORMAT_YCRCB_SWAPUV
 0x18F

	)

913 
	#GEN6_SURFACEFORMAT_YCRCB_SWAPY
 0x190

	)

914 
	#GEN6_SURFACEFORMAT_DXT1_RGB
 0x191

	)

915 
	#GEN6_SURFACEFORMAT_FXT1
 0x192

	)

916 
	#GEN6_SURFACEFORMAT_R8G8B8_UNORM
 0x193

	)

917 
	#GEN6_SURFACEFORMAT_R8G8B8_SNORM
 0x194

	)

918 
	#GEN6_SURFACEFORMAT_R8G8B8_SSCALED
 0x195

	)

919 
	#GEN6_SURFACEFORMAT_R8G8B8_USCALED
 0x196

	)

920 
	#GEN6_SURFACEFORMAT_R64G64B64A64_FLOAT
 0x197

	)

921 
	#GEN6_SURFACEFORMAT_R64G64B64_FLOAT
 0x198

	)

922 
	#GEN6_SURFACEFORMAT_BC4_SNORM
 0x199

	)

923 
	#GEN6_SURFACEFORMAT_BC5_SNORM
 0x19A

	)

924 
	#GEN6_SURFACEFORMAT_R16G16B16_UNORM
 0x19C

	)

925 
	#GEN6_SURFACEFORMAT_R16G16B16_SNORM
 0x19D

	)

926 
	#GEN6_SURFACEFORMAT_R16G16B16_SSCALED
 0x19E

	)

927 
	#GEN6_SURFACEFORMAT_R16G16B16_USCALED
 0x19F

	)

929 
	#GEN6_SURFACERETURNFORMAT_FLOAT32
 0

	)

930 
	#GEN6_SURFACERETURNFORMAT_S1
 1

	)

932 
	#GEN6_SURFACE_1D
 0

	)

933 
	#GEN6_SURFACE_2D
 1

	)

934 
	#GEN6_SURFACE_3D
 2

	)

935 
	#GEN6_SURFACE_CUBE
 3

	)

936 
	#GEN6_SURFACE_BUFFER
 4

	)

937 
	#GEN6_SURFACE_NULL
 7

	)

939 
	#GEN6_BORDER_COLOR_MODE_DEFAULT
 0

	)

940 
	#GEN6_BORDER_COLOR_MODE_LEGACY
 1

	)

942 
	#GEN6_TEXCOORDMODE_WRAP
 0

	)

943 
	#GEN6_TEXCOORDMODE_MIRROR
 1

	)

944 
	#GEN6_TEXCOORDMODE_CLAMP
 2

	)

945 
	#GEN6_TEXCOORDMODE_CUBE
 3

	)

946 
	#GEN6_TEXCOORDMODE_CLAMP_BORDER
 4

	)

947 
	#GEN6_TEXCOORDMODE_MIRROR_ONCE
 5

	)

949 
	#GEN6_THREAD_PRIORITY_NORMAL
 0

	)

950 
	#GEN6_THREAD_PRIORITY_HIGH
 1

	)

952 
	#GEN6_TILEWALK_XMAJOR
 0

	)

953 
	#GEN6_TILEWALK_YMAJOR
 1

	)

955 
	#GEN6_VERTEX_SUBPIXEL_PRECISION_8BITS
 0

	)

956 
	#GEN6_VERTEX_SUBPIXEL_PRECISION_4BITS
 1

	)

958 
	#GEN6_VERTEXBUFFER_ACCESS_VERTEXDATA
 0

	)

959 
	#GEN6_VERTEXBUFFER_ACCESS_INSTANCEDATA
 1

	)

961 
	#GEN6_VFCOMPONENT_NOSTORE
 0

	)

962 
	#GEN6_VFCOMPONENT_STORE_SRC
 1

	)

963 
	#GEN6_VFCOMPONENT_STORE_0
 2

	)

964 
	#GEN6_VFCOMPONENT_STORE_1_FLT
 3

	)

965 
	#GEN6_VFCOMPONENT_STORE_1_INT
 4

	)

966 
	#GEN6_VFCOMPONENT_STORE_VID
 5

	)

967 
	#GEN6_VFCOMPONENT_STORE_IID
 6

	)

968 
	#GEN6_VFCOMPONENT_STORE_PID
 7

	)

975 
	#GEN6_ALIGN_1
 0

	)

976 
	#GEN6_ALIGN_16
 1

	)

978 
	#GEN6_ADDRESS_DIRECT
 0

	)

979 
	#GEN6_ADDRESS_REGISTER_INDIRECT_REGISTER
 1

	)

981 
	#GEN6_CHANNEL_X
 0

	)

982 
	#GEN6_CHANNEL_Y
 1

	)

983 
	#GEN6_CHANNEL_Z
 2

	)

984 
	#GEN6_CHANNEL_W
 3

	)

986 
	#GEN6_COMPRESSION_NONE
 0

	)

987 
	#GEN6_COMPRESSION_2NDHALF
 1

	)

988 
	#GEN6_COMPRESSION_COMPRESSED
 2

	)

990 
	#GEN6_CONDITIONAL_NONE
 0

	)

991 
	#GEN6_CONDITIONAL_Z
 1

	)

992 
	#GEN6_CONDITIONAL_NZ
 2

	)

993 
	#GEN6_CONDITIONAL_EQ
 1

	)

994 
	#GEN6_CONDITIONAL_NEQ
 2

	)

995 
	#GEN6_CONDITIONAL_G
 3

	)

996 
	#GEN6_CONDITIONAL_GE
 4

	)

997 
	#GEN6_CONDITIONAL_L
 5

	)

998 
	#GEN6_CONDITIONAL_LE
 6

	)

999 
	#GEN6_CONDITIONAL_C
 7

	)

1000 
	#GEN6_CONDITIONAL_O
 8

	)

1002 
	#GEN6_DEBUG_NONE
 0

	)

1003 
	#GEN6_DEBUG_BREAKPOINT
 1

	)

1005 
	#GEN6_DEPENDENCY_NORMAL
 0

	)

1006 
	#GEN6_DEPENDENCY_NOTCLEARED
 1

	)

1007 
	#GEN6_DEPENDENCY_NOTCHECKED
 2

	)

1008 
	#GEN6_DEPENDENCY_DISABLE
 3

	)

1010 
	#GEN6_EXECUTE_1
 0

	)

1011 
	#GEN6_EXECUTE_2
 1

	)

1012 
	#GEN6_EXECUTE_4
 2

	)

1013 
	#GEN6_EXECUTE_8
 3

	)

1014 
	#GEN6_EXECUTE_16
 4

	)

1015 
	#GEN6_EXECUTE_32
 5

	)

1017 
	#GEN6_HORIZONTAL_STRIDE_0
 0

	)

1018 
	#GEN6_HORIZONTAL_STRIDE_1
 1

	)

1019 
	#GEN6_HORIZONTAL_STRIDE_2
 2

	)

1020 
	#GEN6_HORIZONTAL_STRIDE_4
 3

	)

1022 
	#GEN6_INSTRUCTION_NORMAL
 0

	)

1023 
	#GEN6_INSTRUCTION_SATURATE
 1

	)

1025 
	#GEN6_MASK_ENABLE
 0

	)

1026 
	#GEN6_MASK_DISABLE
 1

	)

1028 
	#GEN6_OPCODE_MOV
 1

	)

1029 
	#GEN6_OPCODE_SEL
 2

	)

1030 
	#GEN6_OPCODE_NOT
 4

	)

1031 
	#GEN6_OPCODE_AND
 5

	)

1032 
	#GEN6_OPCODE_OR
 6

	)

1033 
	#GEN6_OPCODE_XOR
 7

	)

1034 
	#GEN6_OPCODE_SHR
 8

	)

1035 
	#GEN6_OPCODE_SHL
 9

	)

1036 
	#GEN6_OPCODE_RSR
 10

	)

1037 
	#GEN6_OPCODE_RSL
 11

	)

1038 
	#GEN6_OPCODE_ASR
 12

	)

1039 
	#GEN6_OPCODE_CMP
 16

	)

1040 
	#GEN6_OPCODE_JMPI
 32

	)

1041 
	#GEN6_OPCODE_IF
 34

	)

1042 
	#GEN6_OPCODE_IFF
 35

	)

1043 
	#GEN6_OPCODE_ELSE
 36

	)

1044 
	#GEN6_OPCODE_ENDIF
 37

	)

1045 
	#GEN6_OPCODE_DO
 38

	)

1046 
	#GEN6_OPCODE_WHILE
 39

	)

1047 
	#GEN6_OPCODE_BREAK
 40

	)

1048 
	#GEN6_OPCODE_CONTINUE
 41

	)

1049 
	#GEN6_OPCODE_HALT
 42

	)

1050 
	#GEN6_OPCODE_MSAVE
 44

	)

1051 
	#GEN6_OPCODE_MRESTORE
 45

	)

1052 
	#GEN6_OPCODE_PUSH
 46

	)

1053 
	#GEN6_OPCODE_POP
 47

	)

1054 
	#GEN6_OPCODE_WAIT
 48

	)

1055 
	#GEN6_OPCODE_SEND
 49

	)

1056 
	#GEN6_OPCODE_ADD
 64

	)

1057 
	#GEN6_OPCODE_MUL
 65

	)

1058 
	#GEN6_OPCODE_AVG
 66

	)

1059 
	#GEN6_OPCODE_FRC
 67

	)

1060 
	#GEN6_OPCODE_RNDU
 68

	)

1061 
	#GEN6_OPCODE_RNDD
 69

	)

1062 
	#GEN6_OPCODE_RNDE
 70

	)

1063 
	#GEN6_OPCODE_RNDZ
 71

	)

1064 
	#GEN6_OPCODE_MAC
 72

	)

1065 
	#GEN6_OPCODE_MACH
 73

	)

1066 
	#GEN6_OPCODE_LZD
 74

	)

1067 
	#GEN6_OPCODE_SAD2
 80

	)

1068 
	#GEN6_OPCODE_SADA2
 81

	)

1069 
	#GEN6_OPCODE_DP4
 84

	)

1070 
	#GEN6_OPCODE_DPH
 85

	)

1071 
	#GEN6_OPCODE_DP3
 86

	)

1072 
	#GEN6_OPCODE_DP2
 87

	)

1073 
	#GEN6_OPCODE_DPA2
 88

	)

1074 
	#GEN6_OPCODE_LINE
 89

	)

1075 
	#GEN6_OPCODE_NOP
 126

	)

1077 
	#GEN6_PREDICATE_NONE
 0

	)

1078 
	#GEN6_PREDICATE_NORMAL
 1

	)

1079 
	#GEN6_PREDICATE_ALIGN1_ANYV
 2

	)

1080 
	#GEN6_PREDICATE_ALIGN1_ALLV
 3

	)

1081 
	#GEN6_PREDICATE_ALIGN1_ANY2H
 4

	)

1082 
	#GEN6_PREDICATE_ALIGN1_ALL2H
 5

	)

1083 
	#GEN6_PREDICATE_ALIGN1_ANY4H
 6

	)

1084 
	#GEN6_PREDICATE_ALIGN1_ALL4H
 7

	)

1085 
	#GEN6_PREDICATE_ALIGN1_ANY8H
 8

	)

1086 
	#GEN6_PREDICATE_ALIGN1_ALL8H
 9

	)

1087 
	#GEN6_PREDICATE_ALIGN1_ANY16H
 10

	)

1088 
	#GEN6_PREDICATE_ALIGN1_ALL16H
 11

	)

1089 
	#GEN6_PREDICATE_ALIGN16_REPLICATE_X
 2

	)

1090 
	#GEN6_PREDICATE_ALIGN16_REPLICATE_Y
 3

	)

1091 
	#GEN6_PREDICATE_ALIGN16_REPLICATE_Z
 4

	)

1092 
	#GEN6_PREDICATE_ALIGN16_REPLICATE_W
 5

	)

1093 
	#GEN6_PREDICATE_ALIGN16_ANY4H
 6

	)

1094 
	#GEN6_PREDICATE_ALIGN16_ALL4H
 7

	)

1096 
	#GEN6_ARCHITECTURE_REGISTER_FILE
 0

	)

1097 
	#GEN6_GENERAL_REGISTER_FILE
 1

	)

1098 
	#GEN6_MESSAGE_REGISTER_FILE
 2

	)

1099 
	#GEN6_IMMEDIATE_VALUE
 3

	)

1101 
	#GEN6_REGISTER_TYPE_UD
 0

	)

1102 
	#GEN6_REGISTER_TYPE_D
 1

	)

1103 
	#GEN6_REGISTER_TYPE_UW
 2

	)

1104 
	#GEN6_REGISTER_TYPE_W
 3

	)

1105 
	#GEN6_REGISTER_TYPE_UB
 4

	)

1106 
	#GEN6_REGISTER_TYPE_B
 5

	)

1107 
	#GEN6_REGISTER_TYPE_VF
 5

	)

1108 
	#GEN6_REGISTER_TYPE_HF
 6

	)

1109 
	#GEN6_REGISTER_TYPE_V
 6

	)

1110 
	#GEN6_REGISTER_TYPE_F
 7

	)

1112 
	#GEN6_ARF_NULL
 0x00

	)

1113 
	#GEN6_ARF_ADDRESS
 0x10

	)

1114 
	#GEN6_ARF_ACCUMULATOR
 0x20

	)

1115 
	#GEN6_ARF_FLAG
 0x30

	)

1116 
	#GEN6_ARF_MASK
 0x40

	)

1117 
	#GEN6_ARF_MASK_STACK
 0x50

	)

1118 
	#GEN6_ARF_MASK_STACK_DEPTH
 0x60

	)

1119 
	#GEN6_ARF_STATE
 0x70

	)

1120 
	#GEN6_ARF_CONTROL
 0x80

	)

1121 
	#GEN6_ARF_NOTIFICATION_COUNT
 0x90

	)

1122 
	#GEN6_ARF_IP
 0xA0

	)

1124 
	#GEN6_AMASK
 0

	)

1125 
	#GEN6_IMASK
 1

	)

1126 
	#GEN6_LMASK
 2

	)

1127 
	#GEN6_CMASK
 3

	)

1131 
	#GEN6_THREAD_NORMAL
 0

	)

1132 
	#GEN6_THREAD_ATOMIC
 1

	)

1133 
	#GEN6_THREAD_SWITCH
 2

	)

1135 
	#GEN6_VERTICAL_STRIDE_0
 0

	)

1136 
	#GEN6_VERTICAL_STRIDE_1
 1

	)

1137 
	#GEN6_VERTICAL_STRIDE_2
 2

	)

1138 
	#GEN6_VERTICAL_STRIDE_4
 3

	)

1139 
	#GEN6_VERTICAL_STRIDE_8
 4

	)

1140 
	#GEN6_VERTICAL_STRIDE_16
 5

	)

1141 
	#GEN6_VERTICAL_STRIDE_32
 6

	)

1142 
	#GEN6_VERTICAL_STRIDE_64
 7

	)

1143 
	#GEN6_VERTICAL_STRIDE_128
 8

	)

1144 
	#GEN6_VERTICAL_STRIDE_256
 9

	)

1145 
	#GEN6_VERTICAL_STRIDE_ONE_DIMENSIONAL
 0xF

	)

1147 
	#GEN6_WIDTH_1
 0

	)

1148 
	#GEN6_WIDTH_2
 1

	)

1149 
	#GEN6_WIDTH_4
 2

	)

1150 
	#GEN6_WIDTH_8
 3

	)

1151 
	#GEN6_WIDTH_16
 4

	)

1153 
	#GEN6_STATELESS_BUFFER_BOUNDARY_1K
 0

	)

1154 
	#GEN6_STATELESS_BUFFER_BOUNDARY_2K
 1

	)

1155 
	#GEN6_STATELESS_BUFFER_BOUNDARY_4K
 2

	)

1156 
	#GEN6_STATELESS_BUFFER_BOUNDARY_8K
 3

	)

1157 
	#GEN6_STATELESS_BUFFER_BOUNDARY_16K
 4

	)

1158 
	#GEN6_STATELESS_BUFFER_BOUNDARY_32K
 5

	)

1159 
	#GEN6_STATELESS_BUFFER_BOUNDARY_64K
 6

	)

1160 
	#GEN6_STATELESS_BUFFER_BOUNDARY_128K
 7

	)

1161 
	#GEN6_STATELESS_BUFFER_BOUNDARY_256K
 8

	)

1162 
	#GEN6_STATELESS_BUFFER_BOUNDARY_512K
 9

	)

1163 
	#GEN6_STATELESS_BUFFER_BOUNDARY_1M
 10

	)

1164 
	#GEN6_STATELESS_BUFFER_BOUNDARY_2M
 11

	)

1166 
	#GEN6_POLYGON_FACING_FRONT
 0

	)

1167 
	#GEN6_POLYGON_FACING_BACK
 1

	)

1169 
	#GEN6_MESSAGE_TARGET_NULL
 0

	)

1170 
	#GEN6_MESSAGE_TARGET_MATH
 1

	)

1171 
	#GEN6_MESSAGE_TARGET_SAMPLER
 2

	)

1172 
	#GEN6_MESSAGE_TARGET_GATEWAY
 3

	)

1173 
	#GEN6_MESSAGE_TARGET_DATAPORT_READ
 4

	)

1174 
	#GEN6_MESSAGE_TARGET_DATAPORT_WRITE
 5

	)

1175 
	#GEN6_MESSAGE_TARGET_URB
 6

	)

1176 
	#GEN6_MESSAGE_TARGET_THREAD_SPAWNER
 7

	)

1178 
	#GEN6_SAMPLER_RETURN_FORMAT_FLOAT32
 0

	)

1179 
	#GEN6_SAMPLER_RETURN_FORMAT_UINT32
 2

	)

1180 
	#GEN6_SAMPLER_RETURN_FORMAT_SINT32
 3

	)

1182 
	#GEN6_SAMPLER_MESSAGE_SIMD8_SAMPLE
 0

	)

1183 
	#GEN6_SAMPLER_MESSAGE_SIMD16_SAMPLE
 0

	)

1184 
	#GEN6_SAMPLER_MESSAGE_SIMD16_SAMPLE_BIAS
 0

	)

1185 
	#GEN6_SAMPLER_MESSAGE_SIMD8_KILLPIX
 1

	)

1186 
	#GEN6_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_LOD
 1

	)

1187 
	#GEN6_SAMPLER_MESSAGE_SIMD16_SAMPLE_LOD
 1

	)

1188 
	#GEN6_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_GRADIENTS
 2

	)

1189 
	#GEN6_SAMPLER_MESSAGE_SIMD8_SAMPLE_GRADIENTS
 2

	)

1190 
	#GEN6_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_COMPARE
 0

	)

1191 
	#GEN6_SAMPLER_MESSAGE_SIMD16_SAMPLE_COMPARE
 2

	)

1192 
	#GEN6_SAMPLER_MESSAGE_SIMD4X2_RESINFO
 2

	)

1193 
	#GEN6_SAMPLER_MESSAGE_SIMD8_RESINFO
 2

	)

1194 
	#GEN6_SAMPLER_MESSAGE_SIMD16_RESINFO
 2

	)

1195 
	#GEN6_SAMPLER_MESSAGE_SIMD4X2_LD
 3

	)

1196 
	#GEN6_SAMPLER_MESSAGE_SIMD8_LD
 3

	)

1197 
	#GEN6_SAMPLER_MESSAGE_SIMD16_LD
 3

	)

1199 
	#GEN6_DATAPORT_OWORD_BLOCK_1_OWORDLOW
 0

	)

1200 
	#GEN6_DATAPORT_OWORD_BLOCK_1_OWORDHIGH
 1

	)

1201 
	#GEN6_DATAPORT_OWORD_BLOCK_2_OWORDS
 2

	)

1202 
	#GEN6_DATAPORT_OWORD_BLOCK_4_OWORDS
 3

	)

1203 
	#GEN6_DATAPORT_OWORD_BLOCK_8_OWORDS
 4

	)

1205 
	#GEN6_DATAPORT_OWORD_DUAL_BLOCK_1OWORD
 0

	)

1206 
	#GEN6_DATAPORT_OWORD_DUAL_BLOCK_4OWORDS
 2

	)

1208 
	#GEN6_DATAPORT_DWORD_SCATTERED_BLOCK_8DWORDS
 2

	)

1209 
	#GEN6_DATAPORT_DWORD_SCATTERED_BLOCK_16DWORDS
 3

	)

1211 
	#GEN6_DATAPORT_READ_MESSAGE_OWORD_BLOCK_READ
 0

	)

1212 
	#GEN6_DATAPORT_READ_MESSAGE_OWORD_DUAL_BLOCK_READ
 1

	)

1213 
	#GEN6_DATAPORT_READ_MESSAGE_DWORD_BLOCK_READ
 2

	)

1214 
	#GEN6_DATAPORT_READ_MESSAGE_DWORD_SCATTERED_READ
 3

	)

1216 
	#GEN6_DATAPORT_READ_TARGET_DATA_CACHE
 0

	)

1217 
	#GEN6_DATAPORT_READ_TARGET_RENDER_CACHE
 1

	)

1218 
	#GEN6_DATAPORT_READ_TARGET_SAMPLER_CACHE
 2

	)

1220 
	#GEN6_DATAPORT_RENDER_TARGET_WRITE_SIMD16_SINGLE_SOURCE
 0

	)

1221 
	#GEN6_DATAPORT_RENDER_TARGET_WRITE_SIMD16_SINGLE_SOURCE_REPLICATED
 1

	)

1222 
	#GEN6_DATAPORT_RENDER_TARGET_WRITE_SIMD8_DUAL_SOURCE_SUBSPAN01
 2

	)

1223 
	#GEN6_DATAPORT_RENDER_TARGET_WRITE_SIMD8_DUAL_SOURCE_SUBSPAN23
 3

	)

1224 
	#GEN6_DATAPORT_RENDER_TARGET_WRITE_SIMD8_SINGLE_SOURCE_SUBSPAN01
 4

	)

1226 
	#GEN6_DATAPORT_WRITE_MESSAGE_OWORD_BLOCK_WRITE
 0

	)

1227 
	#GEN6_DATAPORT_WRITE_MESSAGE_OWORD_DUAL_BLOCK_WRITE
 1

	)

1228 
	#GEN6_DATAPORT_WRITE_MESSAGE_DWORD_BLOCK_WRITE
 2

	)

1229 
	#GEN6_DATAPORT_WRITE_MESSAGE_DWORD_SCATTERED_WRITE
 3

	)

1230 
	#GEN6_DATAPORT_WRITE_MESSAGE_RENDER_TARGET_WRITE
 4

	)

1231 
	#GEN6_DATAPORT_WRITE_MESSAGE_STREAMED_VERTEX_BUFFER_WRITE
 5

	)

1232 
	#GEN6_DATAPORT_WRITE_MESSAGE_FLUSH_RENDER_CACHE
 7

	)

1234 
	#GEN6_MATH_FUNCTION_INV
 1

	)

1235 
	#GEN6_MATH_FUNCTION_LOG
 2

	)

1236 
	#GEN6_MATH_FUNCTION_EXP
 3

	)

1237 
	#GEN6_MATH_FUNCTION_SQRT
 4

	)

1238 
	#GEN6_MATH_FUNCTION_RSQ
 5

	)

1239 
	#GEN6_MATH_FUNCTION_SIN
 6

	)

1240 
	#GEN6_MATH_FUNCTION_COS
 7

	)

1241 
	#GEN6_MATH_FUNCTION_SINCOS
 8

	)

1242 
	#GEN6_MATH_FUNCTION_TAN
 9

	)

1243 
	#GEN6_MATH_FUNCTION_POW
 10

	)

1244 
	#GEN6_MATH_FUNCTION_INT_DIV_QUOTIENT_AND_REMAINDER
 11

	)

1245 
	#GEN6_MATH_FUNCTION_INT_DIV_QUOTIENT
 12

	)

1246 
	#GEN6_MATH_FUNCTION_INT_DIV_REMAINDER
 13

	)

1248 
	#GEN6_MATH_INTEGER_UNSIGNED
 0

	)

1249 
	#GEN6_MATH_INTEGER_SIGNED
 1

	)

1251 
	#GEN6_MATH_PRECISION_FULL
 0

	)

1252 
	#GEN6_MATH_PRECISION_PARTIAL
 1

	)

1254 
	#GEN6_MATH_SATURATE_NONE
 0

	)

1255 
	#GEN6_MATH_SATURATE_SATURATE
 1

	)

1257 
	#GEN6_MATH_DATA_VECTOR
 0

	)

1258 
	#GEN6_MATH_DATA_SCALAR
 1

	)

1260 
	#GEN6_URB_OPCODE_WRITE
 0

	)

1262 
	#GEN6_URB_SWIZZLE_NONE
 0

	)

1263 
	#GEN6_URB_SWIZZLE_INTERLEAVE
 1

	)

1264 
	#GEN6_URB_SWIZZLE_TRANSPOSE
 2

	)

1266 
	#GEN6_SCRATCH_SPACE_SIZE_1K
 0

	)

1267 
	#GEN6_SCRATCH_SPACE_SIZE_2K
 1

	)

1268 
	#GEN6_SCRATCH_SPACE_SIZE_4K
 2

	)

1269 
	#GEN6_SCRATCH_SPACE_SIZE_8K
 3

	)

1270 
	#GEN6_SCRATCH_SPACE_SIZE_16K
 4

	)

1271 
	#GEN6_SCRATCH_SPACE_SIZE_32K
 5

	)

1272 
	#GEN6_SCRATCH_SPACE_SIZE_64K
 6

	)

1273 
	#GEN6_SCRATCH_SPACE_SIZE_128K
 7

	)

1274 
	#GEN6_SCRATCH_SPACE_SIZE_256K
 8

	)

1275 
	#GEN6_SCRATCH_SPACE_SIZE_512K
 9

	)

1276 
	#GEN6_SCRATCH_SPACE_SIZE_1M
 10

	)

1277 
	#GEN6_SCRATCH_SPACE_SIZE_2M
 11

	)

1291 
	sgí6_ßm∂î_deÁu…_b‹dî_cﬁ‹
 {

1292 
	mcﬁ‹
[4];

1295 
	sgí6_ßm∂î_Àgacy_b‹dî_cﬁ‹
 {

1296 
uöt8_t
 
	mcﬁ‹
[4];

1299 
	sgí6_ßm∂î_°©e
 {

1301 
uöt32_t
 
	mshadow_fun˘i⁄
:3;

1302 
uöt32_t
 
	mlod_büs
:11;

1303 
uöt32_t
 
	mmö_fûãr
:3;

1304 
uöt32_t
 
	mmag_fûãr
:3;

1305 
uöt32_t
 
	mmù_fûãr
:2;

1306 
uöt32_t
 
	mba£_Àvñ
:5;

1307 
uöt32_t
 
	m∑d
:1;

1308 
uöt32_t
 
	mlod_¥e˛amp
:1;

1309 
uöt32_t
 
	mb‹dî_cﬁ‹_mode
:1;

1310 
uöt32_t
 
	m∑d0
:1;

1311 
uöt32_t
 
	mdißbÀ
:1;

1312 } 
	mss0
;

1315 
uöt32_t
 
	mr_wøp_mode
:3;

1316 
uöt32_t
 
	mt_wøp_mode
:3;

1317 
uöt32_t
 
	ms_wøp_mode
:3;

1318 
uöt32_t
 
	m∑d
:3;

1319 
uöt32_t
 
	mmax_lod
:10;

1320 
uöt32_t
 
	mmö_lod
:10;

1321 } 
	mss1
;

1324 
uöt32_t
 
	mb‹dî_cﬁ‹
;

1325 } 
	mss2
;

1328 
uöt32_t
 
	m∑d
:19;

1329 
uöt32_t
 
	mmax_™iso
:3;

1330 
uöt32_t
 
	mchroma_key_mode
:1;

1331 
uöt32_t
 
	mchroma_key_ödex
:2;

1332 
uöt32_t
 
	mchroma_key_íabÀ
:1;

1333 
uöt32_t
 
	mm⁄ochrome_fûãr_width
:3;

1334 
uöt32_t
 
	mm⁄ochrome_fûãr_height
:3;

1335 } 
	mss3
;

1338 
	sgí6_bÀnd_°©e
 {

1340 
uöt32_t
 
	mde°_bÀnd_Á˘‹
:5;

1341 
uöt32_t
 
	msour˚_bÀnd_Á˘‹
:5;

1342 
uöt32_t
 
	m∑d3
:1;

1343 
uöt32_t
 
	mbÀnd_func
:3;

1344 
uöt32_t
 
	m∑d2
:1;

1345 
uöt32_t
 
	mü_de°_bÀnd_Á˘‹
:5;

1346 
uöt32_t
 
	mü_sour˚_bÀnd_Á˘‹
:5;

1347 
uöt32_t
 
	m∑d1
:1;

1348 
uöt32_t
 
	mü_bÀnd_func
:3;

1349 
uöt32_t
 
	m∑d0
:1;

1350 
uöt32_t
 
	mü_bÀnd_íabÀ
:1;

1351 
uöt32_t
 
	mbÀnd_íabÀ
:1;

1352 } 
	mbÀnd0
;

1355 
uöt32_t
 
	mpo°_bÀnd_˛amp_íabÀ
:1;

1356 
uöt32_t
 
	m¥e_bÀnd_˛amp_íabÀ
:1;

1357 
uöt32_t
 
	m˛amp_ønge
:2;

1358 
uöt32_t
 
	m∑d0
:4;

1359 
uöt32_t
 
	mx_dôhî_off£t
:2;

1360 
uöt32_t
 
	my_dôhî_off£t
:2;

1361 
uöt32_t
 
	mdôhî_íabÀ
:1;

1362 
uöt32_t
 
	mÆpha_ã°_func
:3;

1363 
uöt32_t
 
	mÆpha_ã°_íabÀ
:1;

1364 
uöt32_t
 
	m∑d1
:1;

1365 
uöt32_t
 
	mlogic_›_func
:4;

1366 
uöt32_t
 
	mlogic_›_íabÀ
:1;

1367 
uöt32_t
 
	m∑d2
:1;

1368 
uöt32_t
 
	mwrôe_dißbÀ_b
:1;

1369 
uöt32_t
 
	mwrôe_dißbÀ_g
:1;

1370 
uöt32_t
 
	mwrôe_dißbÀ_r
:1;

1371 
uöt32_t
 
	mwrôe_dißbÀ_a
:1;

1372 
uöt32_t
 
	m∑d3
:1;

1373 
uöt32_t
 
	mÆpha_to_covîage_dôhî
:1;

1374 
uöt32_t
 
	mÆpha_to_⁄e
:1;

1375 
uöt32_t
 
	mÆpha_to_covîage
:1;

1376 } 
	mbÀnd1
;

1379 
	sgí6_cﬁ‹_ˇlc_°©e
 {

1381 
uöt32_t
 
	mÆpha_ã°_f‹m©
:1;

1382 
uöt32_t
 
	m∑d0
:14;

1383 
uöt32_t
 
	mround_dißbÀ
:1;

1384 
uöt32_t
 
	mbf_°ícû_ªf
:8;

1385 
uöt32_t
 
	m°ícû_ªf
:8;

1386 } 
	mcc0
;

1389 
	mÆpha_ªf_f
;

1391 
uöt32_t
 
	mui
:8;

1392 
uöt32_t
 
	m∑d0
:24;

1393 } 
	mÆpha_ªf_fi
;

1394 } 
	mcc1
;

1396 
	mc⁄°™t_r
;

1397 
	mc⁄°™t_g
;

1398 
	mc⁄°™t_b
;

1399 
	mc⁄°™t_a
;

1402 
	sgí6_dïth_°ícû_°©e
 {

1404 
uöt32_t
 
	m∑d0
:3;

1405 
uöt32_t
 
	mbf_°ícû_∑ss_dïth_∑ss_›
:3;

1406 
uöt32_t
 
	mbf_°ícû_∑ss_dïth_Áû_›
:3;

1407 
uöt32_t
 
	mbf_°ícû_Áû_›
:3;

1408 
uöt32_t
 
	mbf_°ícû_func
:3;

1409 
uöt32_t
 
	mbf_°ícû_íabÀ
:1;

1410 
uöt32_t
 
	m∑d1
:2;

1411 
uöt32_t
 
	m°ícû_wrôe_íabÀ
:1;

1412 
uöt32_t
 
	m°ícû_∑ss_dïth_∑ss_›
:3;

1413 
uöt32_t
 
	m°ícû_∑ss_dïth_Áû_›
:3;

1414 
uöt32_t
 
	m°ícû_Áû_›
:3;

1415 
uöt32_t
 
	m°ícû_func
:3;

1416 
uöt32_t
 
	m°ícû_íabÀ
:1;

1417 } 
	mds0
;

1420 
uöt32_t
 
	mbf_°ícû_wrôe_mask
:8;

1421 
uöt32_t
 
	mbf_°ícû_ã°_mask
:8;

1422 
uöt32_t
 
	m°ícû_wrôe_mask
:8;

1423 
uöt32_t
 
	m°ícû_ã°_mask
:8;

1424 } 
	mds1
;

1427 
uöt32_t
 
	m∑d0
:26;

1428 
uöt32_t
 
	mdïth_wrôe_íabÀ
:1;

1429 
uöt32_t
 
	mdïth_ã°_func
:3;

1430 
uöt32_t
 
	m∑d1
:1;

1431 
uöt32_t
 
	mdïth_ã°_íabÀ
:1;

1432 } 
	mds2
;

1435 
	sgí6_surÁ˚_°©e
 {

1437 
uöt32_t
 
	mcube_pos_z
:1;

1438 
uöt32_t
 
	mcube_√g_z
:1;

1439 
uöt32_t
 
	mcube_pos_y
:1;

1440 
uöt32_t
 
	mcube_√g_y
:1;

1441 
uöt32_t
 
	mcube_pos_x
:1;

1442 
uöt32_t
 
	mcube_√g_x
:1;

1443 
uöt32_t
 
	m∑d
:3;

1444 
uöt32_t
 
	mªndî_ˇche_ªad_mode
:1;

1445 
uöt32_t
 
	mmùm≠_œyout_mode
:1;

1446 
uöt32_t
 
	mvît_löe_°ride_ofs
:1;

1447 
uöt32_t
 
	mvît_löe_°ride
:1;

1448 
uöt32_t
 
	mcﬁ‹_bÀnd
:1;

1449 
uöt32_t
 
	mwrôedißbÀ_blue
:1;

1450 
uöt32_t
 
	mwrôedißbÀ_gªí
:1;

1451 
uöt32_t
 
	mwrôedißbÀ_ªd
:1;

1452 
uöt32_t
 
	mwrôedißbÀ_Æpha
:1;

1453 
uöt32_t
 
	msurÁ˚_f‹m©
:9;

1454 
uöt32_t
 
	md©a_ªtu∫_f‹m©
:1;

1455 
uöt32_t
 
	m∑d0
:1;

1456 
uöt32_t
 
	msurÁ˚_ty≥
:3;

1457 } 
	mss0
;

1460 
uöt32_t
 
	mba£_addr
;

1461 } 
	mss1
;

1464 
uöt32_t
 
	mªndî_èrgë_rŸ©i⁄
:2;

1465 
uöt32_t
 
	mmù_cou¡
:4;

1466 
uöt32_t
 
	mwidth
:13;

1467 
uöt32_t
 
	mheight
:13;

1468 } 
	mss2
;

1471 
uöt32_t
 
	mtûe_wÆk
:1;

1472 
uöt32_t
 
	mtûed_surÁ˚
:1;

1473 
uöt32_t
 
	m∑d
:1;

1474 
uöt32_t
 
	mpôch
:18;

1475 
uöt32_t
 
	mdïth
:11;

1476 } 
	mss3
;

1479 
uöt32_t
 
	m∑d
:19;

1480 
uöt32_t
 
	mmö_¨øy_ñt
:9;

1481 
uöt32_t
 
	mmö_lod
:4;

1482 } 
	mss4
;

1485 
uöt32_t
 
	m∑d
:20;

1486 
uöt32_t
 
	my_off£t
:4;

1487 
uöt32_t
 
	m∑d2
:1;

1488 
uöt32_t
 
	mx_off£t
:7;

1489 } 
	mss5
;

1492 
	sgí6_cc_võwp‹t
 {

1493 
	mmö_dïth
;

1494 
	mmax_dïth
;

1498 
	mSAMPLER_FILTER_NEAREST
 = 0,

1499 
	mSAMPLER_FILTER_BILINEAR
,

1500 
	mFILTER_COUNT


1501 } 
	tßm∂î_fûãr_t
;

1504 
	mSAMPLER_EXTEND_NONE
 = 0,

1505 
	mSAMPLER_EXTEND_REPEAT
,

1506 
	mSAMPLER_EXTEND_PAD
,

1507 
	mSAMPLER_EXTEND_REFLECT
,

1508 
	mEXTEND_COUNT


1509 } 
	tßm∂î_exãnd_t
;

	@gen7_media.h

1 #i‚de‡
GEN7_MEDIA_H


2 
	#GEN7_MEDIA_H


	)

4 
	~<°döt.h
>

6 
	#GEN7_SURFACEFORMAT_R32G32B32A32_FLOAT
 0x000

	)

7 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SINT
 0x001

	)

8 
	#GEN7_SURFACEFORMAT_R32G32B32A32_UINT
 0x002

	)

9 
	#GEN7_SURFACEFORMAT_R32G32B32A32_UNORM
 0x003

	)

10 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SNORM
 0x004

	)

11 
	#GEN7_SURFACEFORMAT_R64G64_FLOAT
 0x005

	)

12 
	#GEN7_SURFACEFORMAT_R32G32B32X32_FLOAT
 0x006

	)

13 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SSCALED
 0x007

	)

14 
	#GEN7_SURFACEFORMAT_R32G32B32A32_USCALED
 0x008

	)

15 
	#GEN7_SURFACEFORMAT_R32G32B32_FLOAT
 0x040

	)

16 
	#GEN7_SURFACEFORMAT_R32G32B32_SINT
 0x041

	)

17 
	#GEN7_SURFACEFORMAT_R32G32B32_UINT
 0x042

	)

18 
	#GEN7_SURFACEFORMAT_R32G32B32_UNORM
 0x043

	)

19 
	#GEN7_SURFACEFORMAT_R32G32B32_SNORM
 0x044

	)

20 
	#GEN7_SURFACEFORMAT_R32G32B32_SSCALED
 0x045

	)

21 
	#GEN7_SURFACEFORMAT_R32G32B32_USCALED
 0x046

	)

22 
	#GEN7_SURFACEFORMAT_R16G16B16A16_UNORM
 0x080

	)

23 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SNORM
 0x081

	)

24 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SINT
 0x082

	)

25 
	#GEN7_SURFACEFORMAT_R16G16B16A16_UINT
 0x083

	)

26 
	#GEN7_SURFACEFORMAT_R16G16B16A16_FLOAT
 0x084

	)

27 
	#GEN7_SURFACEFORMAT_R32G32_FLOAT
 0x085

	)

28 
	#GEN7_SURFACEFORMAT_R32G32_SINT
 0x086

	)

29 
	#GEN7_SURFACEFORMAT_R32G32_UINT
 0x087

	)

30 
	#GEN7_SURFACEFORMAT_R32_FLOAT_X8X24_TYPELESS
 0x088

	)

31 
	#GEN7_SURFACEFORMAT_X32_TYPELESS_G8X24_UINT
 0x089

	)

32 
	#GEN7_SURFACEFORMAT_L32A32_FLOAT
 0x08A

	)

33 
	#GEN7_SURFACEFORMAT_R32G32_UNORM
 0x08B

	)

34 
	#GEN7_SURFACEFORMAT_R32G32_SNORM
 0x08C

	)

35 
	#GEN7_SURFACEFORMAT_R64_FLOAT
 0x08D

	)

36 
	#GEN7_SURFACEFORMAT_R16G16B16X16_UNORM
 0x08E

	)

37 
	#GEN7_SURFACEFORMAT_R16G16B16X16_FLOAT
 0x08F

	)

38 
	#GEN7_SURFACEFORMAT_A32X32_FLOAT
 0x090

	)

39 
	#GEN7_SURFACEFORMAT_L32X32_FLOAT
 0x091

	)

40 
	#GEN7_SURFACEFORMAT_I32X32_FLOAT
 0x092

	)

41 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SSCALED
 0x093

	)

42 
	#GEN7_SURFACEFORMAT_R16G16B16A16_USCALED
 0x094

	)

43 
	#GEN7_SURFACEFORMAT_R32G32_SSCALED
 0x095

	)

44 
	#GEN7_SURFACEFORMAT_R32G32_USCALED
 0x096

	)

45 
	#GEN7_SURFACEFORMAT_B8G8R8A8_UNORM
 0x0C0

	)

46 
	#GEN7_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB
 0x0C1

	)

47 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UNORM
 0x0C2

	)

48 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UNORM_SRGB
 0x0C3

	)

49 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UINT
 0x0C4

	)

50 
	#GEN7_SURFACEFORMAT_R10G10B10_SNORM_A2_UNORM
 0x0C5

	)

51 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UNORM
 0x0C7

	)

52 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UNORM_SRGB
 0x0C8

	)

53 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SNORM
 0x0C9

	)

54 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SINT
 0x0CA

	)

55 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UINT
 0x0CB

	)

56 
	#GEN7_SURFACEFORMAT_R16G16_UNORM
 0x0CC

	)

57 
	#GEN7_SURFACEFORMAT_R16G16_SNORM
 0x0CD

	)

58 
	#GEN7_SURFACEFORMAT_R16G16_SINT
 0x0CE

	)

59 
	#GEN7_SURFACEFORMAT_R16G16_UINT
 0x0CF

	)

60 
	#GEN7_SURFACEFORMAT_R16G16_FLOAT
 0x0D0

	)

61 
	#GEN7_SURFACEFORMAT_B10G10R10A2_UNORM
 0x0D1

	)

62 
	#GEN7_SURFACEFORMAT_B10G10R10A2_UNORM_SRGB
 0x0D2

	)

63 
	#GEN7_SURFACEFORMAT_R11G11B10_FLOAT
 0x0D3

	)

64 
	#GEN7_SURFACEFORMAT_R32_SINT
 0x0D6

	)

65 
	#GEN7_SURFACEFORMAT_R32_UINT
 0x0D7

	)

66 
	#GEN7_SURFACEFORMAT_R32_FLOAT
 0x0D8

	)

67 
	#GEN7_SURFACEFORMAT_R24_UNORM_X8_TYPELESS
 0x0D9

	)

68 
	#GEN7_SURFACEFORMAT_X24_TYPELESS_G8_UINT
 0x0DA

	)

69 
	#GEN7_SURFACEFORMAT_L16A16_UNORM
 0x0DF

	)

70 
	#GEN7_SURFACEFORMAT_I24X8_UNORM
 0x0E0

	)

71 
	#GEN7_SURFACEFORMAT_L24X8_UNORM
 0x0E1

	)

72 
	#GEN7_SURFACEFORMAT_A24X8_UNORM
 0x0E2

	)

73 
	#GEN7_SURFACEFORMAT_I32_FLOAT
 0x0E3

	)

74 
	#GEN7_SURFACEFORMAT_L32_FLOAT
 0x0E4

	)

75 
	#GEN7_SURFACEFORMAT_A32_FLOAT
 0x0E5

	)

76 
	#GEN7_SURFACEFORMAT_B8G8R8X8_UNORM
 0x0E9

	)

77 
	#GEN7_SURFACEFORMAT_B8G8R8X8_UNORM_SRGB
 0x0EA

	)

78 
	#GEN7_SURFACEFORMAT_R8G8B8X8_UNORM
 0x0EB

	)

79 
	#GEN7_SURFACEFORMAT_R8G8B8X8_UNORM_SRGB
 0x0EC

	)

80 
	#GEN7_SURFACEFORMAT_R9G9B9E5_SHAREDEXP
 0x0ED

	)

81 
	#GEN7_SURFACEFORMAT_B10G10R10X2_UNORM
 0x0EE

	)

82 
	#GEN7_SURFACEFORMAT_L16A16_FLOAT
 0x0F0

	)

83 
	#GEN7_SURFACEFORMAT_R32_UNORM
 0x0F1

	)

84 
	#GEN7_SURFACEFORMAT_R32_SNORM
 0x0F2

	)

85 
	#GEN7_SURFACEFORMAT_R10G10B10X2_USCALED
 0x0F3

	)

86 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SSCALED
 0x0F4

	)

87 
	#GEN7_SURFACEFORMAT_R8G8B8A8_USCALED
 0x0F5

	)

88 
	#GEN7_SURFACEFORMAT_R16G16_SSCALED
 0x0F6

	)

89 
	#GEN7_SURFACEFORMAT_R16G16_USCALED
 0x0F7

	)

90 
	#GEN7_SURFACEFORMAT_R32_SSCALED
 0x0F8

	)

91 
	#GEN7_SURFACEFORMAT_R32_USCALED
 0x0F9

	)

92 
	#GEN7_SURFACEFORMAT_B5G6R5_UNORM
 0x100

	)

93 
	#GEN7_SURFACEFORMAT_B5G6R5_UNORM_SRGB
 0x101

	)

94 
	#GEN7_SURFACEFORMAT_B5G5R5A1_UNORM
 0x102

	)

95 
	#GEN7_SURFACEFORMAT_B5G5R5A1_UNORM_SRGB
 0x103

	)

96 
	#GEN7_SURFACEFORMAT_B4G4R4A4_UNORM
 0x104

	)

97 
	#GEN7_SURFACEFORMAT_B4G4R4A4_UNORM_SRGB
 0x105

	)

98 
	#GEN7_SURFACEFORMAT_R8G8_UNORM
 0x106

	)

99 
	#GEN7_SURFACEFORMAT_R8G8_SNORM
 0x107

	)

100 
	#GEN7_SURFACEFORMAT_R8G8_SINT
 0x108

	)

101 
	#GEN7_SURFACEFORMAT_R8G8_UINT
 0x109

	)

102 
	#GEN7_SURFACEFORMAT_R16_UNORM
 0x10A

	)

103 
	#GEN7_SURFACEFORMAT_R16_SNORM
 0x10B

	)

104 
	#GEN7_SURFACEFORMAT_R16_SINT
 0x10C

	)

105 
	#GEN7_SURFACEFORMAT_R16_UINT
 0x10D

	)

106 
	#GEN7_SURFACEFORMAT_R16_FLOAT
 0x10E

	)

107 
	#GEN7_SURFACEFORMAT_I16_UNORM
 0x111

	)

108 
	#GEN7_SURFACEFORMAT_L16_UNORM
 0x112

	)

109 
	#GEN7_SURFACEFORMAT_A16_UNORM
 0x113

	)

110 
	#GEN7_SURFACEFORMAT_L8A8_UNORM
 0x114

	)

111 
	#GEN7_SURFACEFORMAT_I16_FLOAT
 0x115

	)

112 
	#GEN7_SURFACEFORMAT_L16_FLOAT
 0x116

	)

113 
	#GEN7_SURFACEFORMAT_A16_FLOAT
 0x117

	)

114 
	#GEN7_SURFACEFORMAT_R5G5_SNORM_B6_UNORM
 0x119

	)

115 
	#GEN7_SURFACEFORMAT_B5G5R5X1_UNORM
 0x11A

	)

116 
	#GEN7_SURFACEFORMAT_B5G5R5X1_UNORM_SRGB
 0x11B

	)

117 
	#GEN7_SURFACEFORMAT_R8G8_SSCALED
 0x11C

	)

118 
	#GEN7_SURFACEFORMAT_R8G8_USCALED
 0x11D

	)

119 
	#GEN7_SURFACEFORMAT_R16_SSCALED
 0x11E

	)

120 
	#GEN7_SURFACEFORMAT_R16_USCALED
 0x11F

	)

121 
	#GEN7_SURFACEFORMAT_R8_UNORM
 0x140

	)

122 
	#GEN7_SURFACEFORMAT_R8_SNORM
 0x141

	)

123 
	#GEN7_SURFACEFORMAT_R8_SINT
 0x142

	)

124 
	#GEN7_SURFACEFORMAT_R8_UINT
 0x143

	)

125 
	#GEN7_SURFACEFORMAT_A8_UNORM
 0x144

	)

126 
	#GEN7_SURFACEFORMAT_I8_UNORM
 0x145

	)

127 
	#GEN7_SURFACEFORMAT_L8_UNORM
 0x146

	)

128 
	#GEN7_SURFACEFORMAT_P4A4_UNORM
 0x147

	)

129 
	#GEN7_SURFACEFORMAT_A4P4_UNORM
 0x148

	)

130 
	#GEN7_SURFACEFORMAT_R8_SSCALED
 0x149

	)

131 
	#GEN7_SURFACEFORMAT_R8_USCALED
 0x14A

	)

132 
	#GEN7_SURFACEFORMAT_R1_UINT
 0x181

	)

133 
	#GEN7_SURFACEFORMAT_YCRCB_NORMAL
 0x182

	)

134 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPUVY
 0x183

	)

135 
	#GEN7_SURFACEFORMAT_BC1_UNORM
 0x186

	)

136 
	#GEN7_SURFACEFORMAT_BC2_UNORM
 0x187

	)

137 
	#GEN7_SURFACEFORMAT_BC3_UNORM
 0x188

	)

138 
	#GEN7_SURFACEFORMAT_BC4_UNORM
 0x189

	)

139 
	#GEN7_SURFACEFORMAT_BC5_UNORM
 0x18A

	)

140 
	#GEN7_SURFACEFORMAT_BC1_UNORM_SRGB
 0x18B

	)

141 
	#GEN7_SURFACEFORMAT_BC2_UNORM_SRGB
 0x18C

	)

142 
	#GEN7_SURFACEFORMAT_BC3_UNORM_SRGB
 0x18D

	)

143 
	#GEN7_SURFACEFORMAT_MONO8
 0x18E

	)

144 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPUV
 0x18F

	)

145 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPY
 0x190

	)

146 
	#GEN7_SURFACEFORMAT_DXT1_RGB
 0x191

	)

147 
	#GEN7_SURFACEFORMAT_FXT1
 0x192

	)

148 
	#GEN7_SURFACEFORMAT_R8G8B8_UNORM
 0x193

	)

149 
	#GEN7_SURFACEFORMAT_R8G8B8_SNORM
 0x194

	)

150 
	#GEN7_SURFACEFORMAT_R8G8B8_SSCALED
 0x195

	)

151 
	#GEN7_SURFACEFORMAT_R8G8B8_USCALED
 0x196

	)

152 
	#GEN7_SURFACEFORMAT_R64G64B64A64_FLOAT
 0x197

	)

153 
	#GEN7_SURFACEFORMAT_R64G64B64_FLOAT
 0x198

	)

154 
	#GEN7_SURFACEFORMAT_BC4_SNORM
 0x199

	)

155 
	#GEN7_SURFACEFORMAT_BC5_SNORM
 0x19A

	)

156 
	#GEN7_SURFACEFORMAT_R16G16B16_UNORM
 0x19C

	)

157 
	#GEN7_SURFACEFORMAT_R16G16B16_SNORM
 0x19D

	)

158 
	#GEN7_SURFACEFORMAT_R16G16B16_SSCALED
 0x19E

	)

159 
	#GEN7_SURFACEFORMAT_R16G16B16_USCALED
 0x19F

	)

161 
	#GEN7_SURFACERETURNFORMAT_FLOAT32
 0

	)

162 
	#GEN7_SURFACERETURNFORMAT_S1
 1

	)

164 
	#GEN7_SURFACE_1D
 0

	)

165 
	#GEN7_SURFACE_2D
 1

	)

166 
	#GEN7_SURFACE_3D
 2

	)

167 
	#GEN7_SURFACE_CUBE
 3

	)

168 
	#GEN7_SURFACE_BUFFER
 4

	)

169 
	#GEN7_SURFACE_NULL
 7

	)

171 
	#GEN7_FLOATING_POINT_IEEE_754
 0

	)

172 
	#GEN7_FLOATING_POINT_NON_IEEE_754
 1

	)

174 
	#GFXPIPE
(
Pùñöe
,
Opcode
,
Sub›code
) ((3 << 29) | \

175 ((
Pùñöe
) << 27) | \

176 ((
Opcode
) << 24) | \

177 ((
Sub›code
Ë<< 16))

	)

179 
	#GEN7_PIPELINE_SELECT
 
	`GFXPIPE
(1, 1, 4)

	)

180 
	#PIPELINE_SELECT_3D
 (0 << 0)

	)

181 
	#PIPELINE_SELECT_MEDIA
 (1 << 0)

	)

182 
	#PIPELINE_SELECT_GPGPU
 (2 << 0)

	)

184 
	#GEN7_STATE_BASE_ADDRESS
 
	`GFXPIPE
(0, 1, 1)

	)

185 
	#BASE_ADDRESS_MODIFY
 (1 << 0)

	)

187 
	#GEN7_MEDIA_VFE_STATE
 
	`GFXPIPE
(2, 0, 0)

	)

188 
	#GEN7_MEDIA_CURBE_LOAD
 
	`GFXPIPE
(2, 0, 1)

	)

189 
	#GEN7_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 
	`GFXPIPE
(2, 0, 2)

	)

190 
	#GEN7_MEDIA_OBJECT
 
	`GFXPIPE
(2, 1, 0)

	)

191 
	#GEN7_GPGPU_WALKER
 
	`GFXPIPE
(2, 1, 5)

	)

193 
	sgí7_öãrÁ˚_des¸ùt‹_d©a


196 
uöt32_t
 
	m∑d0
:6;

197 
uöt32_t
 
	mkî√l_°¨t_poöãr
:26;

198 } 
	mdesc0
;

201 
uöt32_t
 
	m∑d0
:7;

202 
uöt32_t
 
	mso·w¨e_ex˚±i⁄_íabÀ
:1;

203 
uöt32_t
 
	m∑d1
:3;

204 
uöt32_t
 
	mmask°ack_ex˚±i⁄_íabÀ
:1;

205 
uöt32_t
 
	m∑d2
:1;

206 
uöt32_t
 
	mûÀgÆ_›code_ex˚±i⁄_íabÀ
:1;

207 
uöt32_t
 
	m∑d3
:2;

208 
uöt32_t
 
	mÊﬂtög_poöt_mode
:1;

209 
uöt32_t
 
	mthªad_¥i‹ôy
:1;

210 
uöt32_t
 
	msögÀ_¥ogøm_Êow
:1;

211 
uöt32_t
 
	m∑d4
:13;

212 } 
	mdesc1
;

215 
uöt32_t
 
	m∑d0
:2;

216 
uöt32_t
 
	mßm∂î_cou¡
:3;

217 
uöt32_t
 
	mßm∂î_°©e_poöãr
:27;

218 } 
	mdesc2
;

221 
uöt32_t
 
	mbödög_èbÀ_íåy_cou¡
:5;

222 
uöt32_t
 
	mbödög_èbÀ_poöãr
:27;

223 } 
	mdesc3
;

226 
uöt32_t
 
	mc⁄°™t_urb_íåy_ªad_off£t
:16;

227 
uöt32_t
 
	mc⁄°™t_urb_íåy_ªad_Àngth
:16;

228 } 
	mdesc4
;

231 
uöt32_t
 
	mnum_thªads
:8;

232 
uöt32_t
 
	mb¨rõr_ªtu∫_byã
:8;

233 
uöt32_t
 
	msh¨ed_loˇl_mem‹y_size
:5;

234 
uöt32_t
 
	mb¨rõr_íabÀ
:1;

235 
uöt32_t
 
	mroundög_mode
:2;

236 
uöt32_t
 
	mb¨rõr_ªtu∫_grf_off£t
:8;

237 } 
	mdesc5
;

240 
uöt32_t
 
	m¸oss_thªad_c⁄°™t_d©a_ªad_Àngth
:8;

241 
uöt32_t
 
	m∑d0
:24;

242 } 
	mdesc6
;

245 
uöt32_t
 
	m∑d0
;

246 } 
	mdesc7
;

249 
	sgí7_surÁ˚_°©e


252 
uöt32_t
 
	mcube_pos_z
:1;

253 
uöt32_t
 
	mcube_√g_z
:1;

254 
uöt32_t
 
	mcube_pos_y
:1;

255 
uöt32_t
 
	mcube_√g_y
:1;

256 
uöt32_t
 
	mcube_pos_x
:1;

257 
uöt32_t
 
	mcube_√g_x
:1;

258 
uöt32_t
 
	m∑d2
:2;

259 
uöt32_t
 
	mªndî_ˇche_ªad_wrôe
:1;

260 
uöt32_t
 
	m∑d1
:1;

261 
uöt32_t
 
	msurÁ˚_¨øy_•acög
:1;

262 
uöt32_t
 
	mvît_löe_°ride_ofs
:1;

263 
uöt32_t
 
	mvît_löe_°ride
:1;

264 
uöt32_t
 
	mtûed_mode
:2;

265 
uöt32_t
 
	mh‹iz⁄èl_Æignmít
:1;

266 
uöt32_t
 
	mvîtiˇl_Æignmít
:2;

267 
uöt32_t
 
	msurÁ˚_f‹m©
:9;

268 
uöt32_t
 
	m∑d0
:1;

269 
uöt32_t
 
	mis_¨øy
:1;

270 
uöt32_t
 
	msurÁ˚_ty≥
:3;

271 } 
	mss0
;

274 
uöt32_t
 
	mba£_addr
;

275 } 
	mss1
;

278 
uöt32_t
 
	mwidth
:14;

279 
uöt32_t
 
	m∑d1
:2;

280 
uöt32_t
 
	mheight
:14;

281 
uöt32_t
 
	m∑d0
:2;

282 } 
	mss2
;

285 
uöt32_t
 
	mpôch
:18;

286 
uöt32_t
 
	m∑d
:3;

287 
uöt32_t
 
	mdïth
:11;

288 } 
	mss3
;

291 
uöt32_t
 
	mmu…ißm∂e_posôi⁄_∑Àâe_ödex
:3;

292 
uöt32_t
 
	mnum_mu…ißm∂es
:3;

293 
uöt32_t
 
	mmu…ißm∂ed_surÁ˚_°‹age_f‹m©
:1;

294 
uöt32_t
 
	mªndî_èrgë_võw_exã¡
:11;

295 
uöt32_t
 
	mmö_¨øy_ñt
:11;

296 
uöt32_t
 
	mrŸ©i⁄
:2;

297 
uöt32_t
 
	m∑d0
:1;

298 } 
	mss4
;

301 
uöt32_t
 
	mmù_cou¡
:4;

302 
uöt32_t
 
	mmö_lod
:4;

303 
uöt32_t
 
	m∑d1
:12;

304 
uöt32_t
 
	my_off£t
:4;

305 
uöt32_t
 
	m∑d0
:1;

306 
uöt32_t
 
	mx_off£t
:7;

307 } 
	mss5
;

310 
uöt32_t
 
	m∑d
;

311 } 
	mss6
;

314 
uöt32_t
 
	mªsour˚_mö_lod
:12;

315 
uöt32_t
 
	m∑d0
:4;

316 
uöt32_t
 
	mshadî_ch™ñ_£À˘_a
:3;

317 
uöt32_t
 
	mshadî_ch™ñ_£À˘_b
:3;

318 
uöt32_t
 
	mshadî_ch™ñ_£À˘_g
:3;

319 
uöt32_t
 
	mshadî_ch™ñ_£À˘_r
:3;

320 
uöt32_t
 
	mÆpha_˛ór_cﬁ‹
:1;

321 
uöt32_t
 
	mblue_˛ór_cﬁ‹
:1;

322 
uöt32_t
 
	mgªí_˛ór_cﬁ‹
:1;

323 
uöt32_t
 
	mªd_˛ór_cﬁ‹
:1;

324 } 
	mss7
;

	@gen7_render.h

1 #i‚de‡
GEN7_RENDER_H


2 
	#GEN7_RENDER_H


	)

4 
	~<°döt.h
>

6 
	#INTEL_MASK
(
high
, 
low
Ë(((1 << ((highË- (lowË+ 1)Ë- 1Ë<< (low))

	)

8 
	#GEN7_3D
(
Pùñöe
,
Opcode
,
Sub›code
) ((3 << 29) | \

9 ((
Pùñöe
) << 27) | \

10 ((
Opcode
) << 24) | \

11 ((
Sub›code
Ë<< 16))

	)

13 
	#GEN7_STATE_BASE_ADDRESS
 
	`GEN7_3D
(0, 1, 1)

	)

14 
	#GEN7_STATE_SIP
 
	`GEN7_3D
(0, 1, 2)

	)

16 
	#GEN7_PIPELINE_SELECT
 
	`GEN7_3D
(1, 1, 4)

	)

18 
	#GEN7_MEDIA_STATE_POINTERS
 
	`GEN7_3D
(2, 0, 0)

	)

19 
	#GEN7_MEDIA_OBJECT
 
	`GEN7_3D
(2, 1, 0)

	)

21 
	#GEN7_3DSTATE_VERTEX_BUFFERS
 
	`GEN7_3D
(3, 0, 8)

	)

22 
	#GEN7_3DSTATE_VERTEX_ELEMENTS
 
	`GEN7_3D
(3, 0, 9)

	)

23 
	#GEN7_3DSTATE_INDEX_BUFFER
 
	`GEN7_3D
(3, 0, 0xa)

	)

24 
	#GEN7_3DSTATE_VF_STATISTICS
 
	`GEN7_3D
(3, 0, 0xb)

	)

26 
	#GEN7_3DSTATE_DRAWING_RECTANGLE
 
	`GEN7_3D
(3, 1, 0)

	)

27 
	#GEN7_3DSTATE_CONSTANT_COLOR
 
	`GEN7_3D
(3, 1, 1)

	)

28 
	#GEN7_3DSTATE_SAMPLER_PALETTE_LOAD
 
	`GEN7_3D
(3, 1, 2)

	)

29 
	#GEN7_3DSTATE_CHROMA_KEY
 
	`GEN7_3D
(3, 1, 4)

	)

31 
	#GEN7_3DSTATE_POLY_STIPPLE_OFFSET
 
	`GEN7_3D
(3, 1, 6)

	)

32 
	#GEN7_3DSTATE_POLY_STIPPLE_PATTERN
 
	`GEN7_3D
(3, 1, 7)

	)

33 
	#GEN7_3DSTATE_LINE_STIPPLE
 
	`GEN7_3D
(3, 1, 8)

	)

34 
	#GEN7_3DSTATE_GLOBAL_DEPTH_OFFSET_CLAMP
 
	`GEN7_3D
(3, 1, 9)

	)

36 
	#GEN7_3DSTATE_AA_LINE_PARAMS
 
	`GEN7_3D
(3, 1, 0xa)

	)

37 
	#GEN7_3DSTATE_GS_SVB_INDEX
 
	`GEN7_3D
(3, 1, 0xb)

	)

39 
	#GEN7_3DPRIMITIVE
 
	`GEN7_3D
(3, 3, 0)

	)

41 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS
 
	`GEN7_3D
(3, 0, 0x02)

	)

42 
	#GEN7_3DSTATE_SAMPLER_STATE_MODIFY_PS
 (1 << 12)

	)

43 
	#GEN7_3DSTATE_SAMPLER_STATE_MODIFY_GS
 (1 << 9)

	)

44 
	#GEN7_3DSTATE_SAMPLER_STATE_MODIFY_VS
 (1 << 8)

	)

46 
	#GEN7_3DSTATE_URB
 
	`GEN7_3D
(3, 0, 0x05)

	)

48 
	#GEN7_3DSTATE_URB_VS_SIZE_SHIFT
 16

	)

49 
	#GEN7_3DSTATE_URB_VS_ENTRIES_SHIFT
 0

	)

51 
	#GEN7_3DSTATE_URB_GS_ENTRIES_SHIFT
 8

	)

52 
	#GEN7_3DSTATE_URB_GS_SIZE_SHIFT
 0

	)

54 
	#GEN7_3DSTATE_VIEWPORT_STATE_POINTERS
 
	`GEN7_3D
(3, 0, 0x0d)

	)

55 
	#GEN7_3DSTATE_VIEWPORT_STATE_MODIFY_CC
 (1 << 12)

	)

56 
	#GEN7_3DSTATE_VIEWPORT_STATE_MODIFY_SF
 (1 << 11)

	)

57 
	#GEN7_3DSTATE_VIEWPORT_STATE_MODIFY_CLIP
 (1 << 10)

	)

59 
	#GEN7_3DSTATE_CC_STATE_POINTERS
 
	`GEN7_3D
(3, 0, 0x0e)

	)

61 
	#GEN7_3DSTATE_VS
 
	`GEN7_3D
(3, 0, 0x10)

	)

63 
	#GEN7_3DSTATE_GS
 
	`GEN7_3D
(3, 0, 0x11)

	)

65 
	#GEN7_3DSTATE_GS_DISPATCH_START_GRF_SHIFT
 0

	)

67 
	#GEN7_3DSTATE_CLIP
 
	`GEN7_3D
(3, 0, 0x12)

	)

69 
	#GEN7_3DSTATE_SF
 
	`GEN7_3D
(3, 0, 0x13)

	)

71 
	#GEN7_3DSTATE_SF_NUM_OUTPUTS_SHIFT
 22

	)

72 
	#GEN7_3DSTATE_SF_URB_ENTRY_READ_LENGTH_SHIFT
 11

	)

73 
	#GEN7_3DSTATE_SF_URB_ENTRY_READ_OFFSET_SHIFT
 4

	)

76 
	#GEN7_3DSTATE_SF_CULL_BOTH
 (0 << 29)

	)

77 
	#GEN7_3DSTATE_SF_CULL_NONE
 (1 << 29)

	)

78 
	#GEN7_3DSTATE_SF_CULL_FRONT
 (2 << 29)

	)

79 
	#GEN7_3DSTATE_SF_CULL_BACK
 (3 << 29)

	)

81 
	#GEN7_3DSTATE_SF_TRI_PROVOKE_SHIFT
 29

	)

82 
	#GEN7_3DSTATE_SF_LINE_PROVOKE_SHIFT
 27

	)

83 
	#GEN7_3DSTATE_SF_TRIFAN_PROVOKE_SHIFT
 25

	)

85 
	#GEN7_3DSTATE_WM
 
	`GEN7_3D
(3, 0, 0x14)

	)

87 
	#GEN7_WM_STATISTICS_ENABLE
 (1 << 31)

	)

88 
	#GEN7_WM_DEPTH_CLEAR
 (1 << 30)

	)

89 
	#GEN7_WM_DISPATCH_ENABLE
 (1 << 29)

	)

90 
	#GEN7_WM_DEPTH_RESOLVE
 (1 << 28)

	)

91 
	#GEN7_WM_HIERARCHICAL_DEPTH_RESOLVE
 (1 << 27)

	)

92 
	#GEN7_WM_KILL_ENABLE
 (1 << 25)

	)

93 
	#GEN7_WM_PSCDEPTH_OFF
 (0 << 23)

	)

94 
	#GEN7_WM_PSCDEPTH_ON
 (1 << 23)

	)

95 
	#GEN7_WM_PSCDEPTH_ON_GE
 (2 << 23)

	)

96 
	#GEN7_WM_PSCDEPTH_ON_LE
 (3 << 23)

	)

97 
	#GEN7_WM_USES_SOURCE_DEPTH
 (1 << 20)

	)

98 
	#GEN7_WM_USES_SOURCE_W
 (1 << 19)

	)

99 
	#GEN7_WM_POSITION_ZW_PIXEL
 (0 << 17)

	)

100 
	#GEN7_WM_POSITION_ZW_CENTROID
 (2 << 17)

	)

101 
	#GEN7_WM_POSITION_ZW_SAMPLE
 (3 << 17)

	)

102 
	#GEN7_WM_NONPERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 16)

	)

103 
	#GEN7_WM_NONPERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 15)

	)

104 
	#GEN7_WM_NONPERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 14)

	)

105 
	#GEN7_WM_PERSPECTIVE_SAMPLE_BARYCENTRIC
 (1 << 13)

	)

106 
	#GEN7_WM_PERSPECTIVE_CENTROID_BARYCENTRIC
 (1 << 12)

	)

107 
	#GEN7_WM_PERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 11)

	)

108 
	#GEN7_WM_USES_INPUT_COVERAGE_MASK
 (1 << 10)

	)

109 
	#GEN7_WM_LINE_END_CAP_AA_WIDTH_0_5
 (0 << 8)

	)

110 
	#GEN7_WM_LINE_END_CAP_AA_WIDTH_1_0
 (1 << 8)

	)

111 
	#GEN7_WM_LINE_END_CAP_AA_WIDTH_2_0
 (2 << 8)

	)

112 
	#GEN7_WM_LINE_END_CAP_AA_WIDTH_4_0
 (3 << 8)

	)

113 
	#GEN7_WM_LINE_AA_WIDTH_0_5
 (0 << 6)

	)

114 
	#GEN7_WM_LINE_AA_WIDTH_1_0
 (1 << 6)

	)

115 
	#GEN7_WM_LINE_AA_WIDTH_2_0
 (2 << 6)

	)

116 
	#GEN7_WM_LINE_AA_WIDTH_4_0
 (3 << 6)

	)

117 
	#GEN7_WM_POLYGON_STIPPLE_ENABLE
 (1 << 4)

	)

118 
	#GEN7_WM_LINE_STIPPLE_ENABLE
 (1 << 3)

	)

119 
	#GEN7_WM_POINT_RASTRULE_UPPER_RIGHT
 (1 << 2)

	)

120 
	#GEN7_WM_MSRAST_OFF_PIXEL
 (0 << 0)

	)

121 
	#GEN7_WM_MSRAST_OFF_PATTERN
 (1 << 0)

	)

122 
	#GEN7_WM_MSRAST_ON_PIXEL
 (2 << 0)

	)

123 
	#GEN7_WM_MSRAST_ON_PATTERN
 (3 << 0)

	)

125 
	#GEN7_WM_MSDISPMODE_PERPIXEL
 (1 << 31)

	)

128 
	#GEN7_3DSTATE_CONSTANT_VS
 
	`GEN7_3D
(3, 0, 0x15)

	)

129 
	#GEN7_3DSTATE_CONSTANT_GS
 
	`GEN7_3D
(3, 0, 0x16)

	)

130 
	#GEN7_3DSTATE_CONSTANT_PS
 
	`GEN7_3D
(3, 0, 0x17)

	)

132 
	#GEN7_3DSTATE_SAMPLE_MASK
 
	`GEN7_3D
(3, 0, 0x18)

	)

134 
	#GEN7_3DSTATE_MULTISAMPLE
 
	`GEN7_3D
(3, 1, 0x0d)

	)

136 
	#GEN7_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 (0 << 4)

	)

137 
	#GEN7_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_UPPER_LEFT
 (1 << 4)

	)

138 
	#GEN7_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
 (0 << 1)

	)

139 
	#GEN7_3DSTATE_MULTISAMPLE_NUMSAMPLES_4
 (2 << 1)

	)

140 
	#GEN7_3DSTATE_MULTISAMPLE_NUMSAMPLES_8
 (3 << 1)

	)

142 
	#PIPELINE_SELECT_3D
 0

	)

143 
	#PIPELINE_SELECT_MEDIA
 1

	)

146 
	#BASE_ADDRESS_MODIFY
 (1 << 0)

	)

149 
	#GEN7_PIPE_CONTROL
 
	`GEN7_3D
(3, 2, 0)

	)

150 
	#GEN7_PIPE_CONTROL_CS_STALL
 (1 << 20)

	)

151 
	#GEN7_PIPE_CONTROL_NOWRITE
 (0 << 14)

	)

152 
	#GEN7_PIPE_CONTROL_WRITE_QWORD
 (1 << 14)

	)

153 
	#GEN7_PIPE_CONTROL_WRITE_DEPTH
 (2 << 14)

	)

154 
	#GEN7_PIPE_CONTROL_WRITE_TIME
 (3 << 14)

	)

155 
	#GEN7_PIPE_CONTROL_DEPTH_STALL
 (1 << 13)

	)

156 
	#GEN7_PIPE_CONTROL_WC_FLUSH
 (1 << 12)

	)

157 
	#GEN7_PIPE_CONTROL_IS_FLUSH
 (1 << 11)

	)

158 
	#GEN7_PIPE_CONTROL_TC_FLUSH
 (1 << 10)

	)

159 
	#GEN7_PIPE_CONTROL_NOTIFY_ENABLE
 (1 << 8)

	)

160 
	#GEN7_PIPE_CONTROL_GLOBAL_GTT
 (1 << 2)

	)

161 
	#GEN7_PIPE_CONTROL_LOCAL_PGTT
 (0 << 2)

	)

162 
	#GEN7_PIPE_CONTROL_STALL_AT_SCOREBOARD
 (1 << 1)

	)

163 
	#GEN7_PIPE_CONTROL_DEPTH_CACHE_FLUSH
 (1 << 0)

	)

166 
	#GEN7_VB0_BUFFER_INDEX_SHIFT
 26

	)

167 
	#GEN7_VB0_VERTEXDATA
 (0 << 20)

	)

168 
	#GEN7_VB0_INSTANCEDATA
 (1 << 20)

	)

169 
	#GEN7_VB0_BUFFER_PITCH_SHIFT
 0

	)

170 
	#GEN7_VB0_NULL_VERTEX_BUFFER
 (1 << 13)

	)

171 
	#GEN7_VB0_ADDRESS_MODIFY_ENABLE
 (1 << 14)

	)

174 
	#GEN7_VE0_VERTEX_BUFFER_INDEX_SHIFT
 26

	)

175 
	#GEN7_VE0_VALID
 (1 << 25)

	)

176 
	#GEN7_VE0_FORMAT_SHIFT
 16

	)

177 
	#GEN7_VE0_OFFSET_SHIFT
 0

	)

178 
	#GEN7_VE1_VFCOMPONENT_0_SHIFT
 28

	)

179 
	#GEN7_VE1_VFCOMPONENT_1_SHIFT
 24

	)

180 
	#GEN7_VE1_VFCOMPONENT_2_SHIFT
 20

	)

181 
	#GEN7_VE1_VFCOMPONENT_3_SHIFT
 16

	)

182 
	#GEN7_VE1_DESTINATION_ELEMENT_OFFSET_SHIFT
 0

	)

185 
	#GEN7_3DPRIMITIVE_VERTEX_SEQUENTIAL
 (0 << 15)

	)

186 
	#GEN7_3DPRIMITIVE_VERTEX_RANDOM
 (1 << 15)

	)

188 
	#GEN7_SVG_CTL
 0x7400

	)

190 
	#GEN7_SVG_CTL_GS_BA
 (0 << 8)

	)

191 
	#GEN7_SVG_CTL_SS_BA
 (1 << 8)

	)

192 
	#GEN7_SVG_CTL_IO_BA
 (2 << 8)

	)

193 
	#GEN7_SVG_CTL_GS_AUB
 (3 << 8)

	)

194 
	#GEN7_SVG_CTL_IO_AUB
 (4 << 8)

	)

195 
	#GEN7_SVG_CTL_SIP
 (5 << 8)

	)

197 
	#GEN7_VF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

198 
	#GEN7_VF_CTL_SNAPSHOT_MUX_SELECT_THREADID
 (0 << 8)

	)

199 
	#GEN7_VF_CTL_SNAPSHOT_MUX_SELECT_VF_DEBUG
 (1 << 8)

	)

200 
	#GEN7_VF_CTL_SNAPSHOT_TYPE_VERTEX_SEQUENCE
 (0 << 4)

	)

201 
	#GEN7_VF_CTL_SNAPSHOT_TYPE_VERTEX_INDEX
 (1 << 4)

	)

202 
	#GEN7_VF_CTL_SKIP_INITIAL_PRIMITIVES
 (1 << 3)

	)

203 
	#GEN7_VF_CTL_MAX_PRIMITIVES_LIMIT_ENABLE
 (1 << 2)

	)

204 
	#GEN7_VF_CTL_VERTEX_RANGE_LIMIT_ENABLE
 (1 << 1)

	)

205 
	#GEN7_VF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

207 
	#GEN7_VF_STRG_VAL
 0x7504

	)

208 
	#GEN7_VF_STR_VL_OVR
 0x7508

	)

209 
	#GEN7_VF_VC_OVR
 0x750c

	)

210 
	#GEN7_VF_STR_PSKIP
 0x7510

	)

211 
	#GEN7_VF_MAX_PRIM
 0x7514

	)

212 
	#GEN7_VF_RDATA
 0x7518

	)

214 
	#GEN7_VS_CTL
 0x7600

	)

215 
	#GEN7_VS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

216 
	#GEN7_VS_CTL_SNAPSHOT_MUX_VERTEX_0
 (0 << 8)

	)

217 
	#GEN7_VS_CTL_SNAPSHOT_MUX_VERTEX_1
 (1 << 8)

	)

218 
	#GEN7_VS_CTL_SNAPSHOT_MUX_VALID_COUNT
 (2 << 8)

	)

219 
	#GEN7_VS_CTL_SNAPSHOT_MUX_VS_KERNEL_POINTER
 (3 << 8)

	)

220 
	#GEN7_VS_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

221 
	#GEN7_VS_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

222 
	#GEN7_VS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

224 
	#GEN7_VS_STRG_VAL
 0x7604

	)

225 
	#GEN7_VS_RDATA
 0x7608

	)

227 
	#GEN7_SF_CTL
 0x7b00

	)

228 
	#GEN7_SF_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

229 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_0_FF_ID
 (0 << 8)

	)

230 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_0_REL_COUNT
 (1 << 8)

	)

231 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_1_FF_ID
 (2 << 8)

	)

232 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_1_REL_COUNT
 (3 << 8)

	)

233 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_2_FF_ID
 (4 << 8)

	)

234 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_2_REL_COUNT
 (5 << 8)

	)

235 
	#GEN7_SF_CTL_SNAPSHOT_MUX_VERTEX_COUNT
 (6 << 8)

	)

236 
	#GEN7_SF_CTL_SNAPSHOT_MUX_SF_KERNEL_POINTER
 (7 << 8)

	)

237 
	#GEN7_SF_CTL_MIN_MAX_PRIMITIVE_RANGE_ENABLE
 (1 << 4)

	)

238 
	#GEN7_SF_CTL_DEBUG_CLIP_RECTANGLE_ENABLE
 (1 << 3)

	)

239 
	#GEN7_SF_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

240 
	#GEN7_SF_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

241 
	#GEN7_SF_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

243 
	#GEN7_SF_STRG_VAL
 0x7b04

	)

244 
	#GEN7_SF_RDATA
 0x7b18

	)

246 
	#GEN7_WIZ_CTL
 0x7c00

	)

247 
	#GEN7_WIZ_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

248 
	#GEN7_WIZ_CTL_SUBSPAN_INSTANCE_SHIFT
 16

	)

249 
	#GEN7_WIZ_CTL_SNAPSHOT_MUX_WIZ_KERNEL_POINTER
 (0 << 8)

	)

250 
	#GEN7_WIZ_CTL_SNAPSHOT_MUX_SUBSPAN_INSTANCE
 (1 << 8)

	)

251 
	#GEN7_WIZ_CTL_SNAPSHOT_MUX_PRIMITIVE_SEQUENCE
 (2 << 8)

	)

252 
	#GEN7_WIZ_CTL_SINGLE_SUBSPAN_DISPATCH
 (1 << 6)

	)

253 
	#GEN7_WIZ_CTL_IGNORE_COLOR_SCOREBOARD_STALLS
 (1 << 5)

	)

254 
	#GEN7_WIZ_CTL_ENABLE_SUBSPAN_INSTANCE_COMPARE
 (1 << 4)

	)

255 
	#GEN7_WIZ_CTL_USE_UPSTREAM_SNAPSHOT_FLAG
 (1 << 3)

	)

256 
	#GEN7_WIZ_CTL_SNAPSHOT_ALL_THREADS
 (1 << 2)

	)

257 
	#GEN7_WIZ_CTL_THREAD_SNAPSHOT_ENABLE
 (1 << 1)

	)

258 
	#GEN7_WIZ_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

260 
	#GEN7_WIZ_STRG_VAL
 0x7c04

	)

261 
	#GEN7_WIZ_RDATA
 0x7c18

	)

263 
	#GEN7_TS_CTL
 0x7e00

	)

264 
	#GEN7_TS_CTL_SNAPSHOT_COMPLETE
 (1 << 31)

	)

265 
	#GEN7_TS_CTL_SNAPSHOT_MESSAGE_ERROR
 (0 << 8)

	)

266 
	#GEN7_TS_CTL_SNAPSHOT_INTERFACE_DESCRIPTOR
 (3 << 8)

	)

267 
	#GEN7_TS_CTL_SNAPSHOT_ALL_CHILD_THREADS
 (1 << 2)

	)

268 
	#GEN7_TS_CTL_SNAPSHOT_ALL_ROOT_THREADS
 (1 << 1)

	)

269 
	#GEN7_TS_CTL_SNAPSHOT_ENABLE
 (1 << 0)

	)

271 
	#GEN7_TS_STRG_VAL
 0x7e04

	)

272 
	#GEN7_TS_RDATA
 0x7e08

	)

274 
	#GEN7_TD_CTL
 0x8000

	)

275 
	#GEN7_TD_CTL_MUX_SHIFT
 8

	)

276 
	#GEN7_TD_CTL_EXTERNAL_HALT_R0_DEBUG_MATCH
 (1 << 7)

	)

277 
	#GEN7_TD_CTL_FORCE_EXTERNAL_HALT
 (1 << 6)

	)

278 
	#GEN7_TD_CTL_EXCEPTION_MASK_OVERRIDE
 (1 << 5)

	)

279 
	#GEN7_TD_CTL_FORCE_THREAD_BREAKPOINT_ENABLE
 (1 << 4)

	)

280 
	#GEN7_TD_CTL_BREAKPOINT_ENABLE
 (1 << 2)

	)

281 
	#GEN7_TD_CTL2
 0x8004

	)

282 
	#GEN7_TD_CTL2_ILLEGAL_OPCODE_EXCEPTION_OVERRIDE
 (1 << 28)

	)

283 
	#GEN7_TD_CTL2_MASKSTACK_EXCEPTION_OVERRIDE
 (1 << 26)

	)

284 
	#GEN7_TD_CTL2_SOFTWARE_EXCEPTION_OVERRIDE
 (1 << 25)

	)

285 
	#GEN7_TD_CTL2_ACTIVE_THREAD_LIMIT_SHIFT
 16

	)

286 
	#GEN7_TD_CTL2_ACTIVE_THREAD_LIMIT_ENABLE
 (1 << 8)

	)

287 
	#GEN7_TD_CTL2_THREAD_SPAWNER_EXECUTION_MASK_ENABLE
 (1 << 7)

	)

288 
	#GEN7_TD_CTL2_WIZ_EXECUTION_MASK_ENABLE
 (1 << 6)

	)

289 
	#GEN7_TD_CTL2_SF_EXECUTION_MASK_ENABLE
 (1 << 5)

	)

290 
	#GEN7_TD_CTL2_CLIPPER_EXECUTION_MASK_ENABLE
 (1 << 4)

	)

291 
	#GEN7_TD_CTL2_GS_EXECUTION_MASK_ENABLE
 (1 << 3)

	)

292 
	#GEN7_TD_CTL2_VS_EXECUTION_MASK_ENABLE
 (1 << 0)

	)

293 
	#GEN7_TD_VF_VS_EMSK
 0x8008

	)

294 
	#GEN7_TD_GS_EMSK
 0x800c

	)

295 
	#GEN7_TD_CLIP_EMSK
 0x8010

	)

296 
	#GEN7_TD_SF_EMSK
 0x8014

	)

297 
	#GEN7_TD_WIZ_EMSK
 0x8018

	)

298 
	#GEN7_TD_0_6_EHTRG_VAL
 0x801c

	)

299 
	#GEN7_TD_0_7_EHTRG_VAL
 0x8020

	)

300 
	#GEN7_TD_0_6_EHTRG_MSK
 0x8024

	)

301 
	#GEN7_TD_0_7_EHTRG_MSK
 0x8028

	)

302 
	#GEN7_TD_RDATA
 0x802c

	)

303 
	#GEN7_TD_TS_EMSK
 0x8030

	)

305 
	#GEN7_EU_CTL
 0x8800

	)

306 
	#GEN7_EU_CTL_SELECT_SHIFT
 16

	)

307 
	#GEN7_EU_CTL_DATA_MUX_SHIFT
 8

	)

308 
	#GEN7_EU_ATT_0
 0x8810

	)

309 
	#GEN7_EU_ATT_1
 0x8814

	)

310 
	#GEN7_EU_ATT_DATA_0
 0x8820

	)

311 
	#GEN7_EU_ATT_DATA_1
 0x8824

	)

312 
	#GEN7_EU_ATT_CLR_0
 0x8830

	)

313 
	#GEN7_EU_ATT_CLR_1
 0x8834

	)

314 
	#GEN7_EU_RDATA
 0x8840

	)

316 
	#_3DPRIM_POINTLIST
 0x01

	)

317 
	#_3DPRIM_LINELIST
 0x02

	)

318 
	#_3DPRIM_LINESTRIP
 0x03

	)

319 
	#_3DPRIM_TRILIST
 0x04

	)

320 
	#_3DPRIM_TRISTRIP
 0x05

	)

321 
	#_3DPRIM_TRIFAN
 0x06

	)

322 
	#_3DPRIM_QUADLIST
 0x07

	)

323 
	#_3DPRIM_QUADSTRIP
 0x08

	)

324 
	#_3DPRIM_LINELIST_ADJ
 0x09

	)

325 
	#_3DPRIM_LINESTRIP_ADJ
 0x0A

	)

326 
	#_3DPRIM_TRILIST_ADJ
 0x0B

	)

327 
	#_3DPRIM_TRISTRIP_ADJ
 0x0C

	)

328 
	#_3DPRIM_TRISTRIP_REVERSE
 0x0D

	)

329 
	#_3DPRIM_POLYGON
 0x0E

	)

330 
	#_3DPRIM_RECTLIST
 0x0F

	)

331 
	#_3DPRIM_LINELOOP
 0x10

	)

332 
	#_3DPRIM_POINTLIST_BF
 0x11

	)

333 
	#_3DPRIM_LINESTRIP_CONT
 0x12

	)

334 
	#_3DPRIM_LINESTRIP_BF
 0x13

	)

335 
	#_3DPRIM_LINESTRIP_CONT_BF
 0x14

	)

336 
	#_3DPRIM_TRIFAN_NOSTIPPLE
 0x15

	)

338 
	#_3DPRIM_VERTEXBUFFER_ACCESS_SEQUENTIAL
 0

	)

339 
	#_3DPRIM_VERTEXBUFFER_ACCESS_RANDOM
 1

	)

341 
	#GEN7_ANISORATIO_2
 0

	)

342 
	#GEN7_ANISORATIO_4
 1

	)

343 
	#GEN7_ANISORATIO_6
 2

	)

344 
	#GEN7_ANISORATIO_8
 3

	)

345 
	#GEN7_ANISORATIO_10
 4

	)

346 
	#GEN7_ANISORATIO_12
 5

	)

347 
	#GEN7_ANISORATIO_14
 6

	)

348 
	#GEN7_ANISORATIO_16
 7

	)

350 
	#GEN7_BLENDFACTOR_ONE
 0x1

	)

351 
	#GEN7_BLENDFACTOR_SRC_COLOR
 0x2

	)

352 
	#GEN7_BLENDFACTOR_SRC_ALPHA
 0x3

	)

353 
	#GEN7_BLENDFACTOR_DST_ALPHA
 0x4

	)

354 
	#GEN7_BLENDFACTOR_DST_COLOR
 0x5

	)

355 
	#GEN7_BLENDFACTOR_SRC_ALPHA_SATURATE
 0x6

	)

356 
	#GEN7_BLENDFACTOR_CONST_COLOR
 0x7

	)

357 
	#GEN7_BLENDFACTOR_CONST_ALPHA
 0x8

	)

358 
	#GEN7_BLENDFACTOR_SRC1_COLOR
 0x9

	)

359 
	#GEN7_BLENDFACTOR_SRC1_ALPHA
 0x0A

	)

360 
	#GEN7_BLENDFACTOR_ZERO
 0x11

	)

361 
	#GEN7_BLENDFACTOR_INV_SRC_COLOR
 0x12

	)

362 
	#GEN7_BLENDFACTOR_INV_SRC_ALPHA
 0x13

	)

363 
	#GEN7_BLENDFACTOR_INV_DST_ALPHA
 0x14

	)

364 
	#GEN7_BLENDFACTOR_INV_DST_COLOR
 0x15

	)

365 
	#GEN7_BLENDFACTOR_INV_CONST_COLOR
 0x17

	)

366 
	#GEN7_BLENDFACTOR_INV_CONST_ALPHA
 0x18

	)

367 
	#GEN7_BLENDFACTOR_INV_SRC1_COLOR
 0x19

	)

368 
	#GEN7_BLENDFACTOR_INV_SRC1_ALPHA
 0x1A

	)

370 
	#GEN7_BLENDFUNCTION_ADD
 0

	)

371 
	#GEN7_BLENDFUNCTION_SUBTRACT
 1

	)

372 
	#GEN7_BLENDFUNCTION_REVERSE_SUBTRACT
 2

	)

373 
	#GEN7_BLENDFUNCTION_MIN
 3

	)

374 
	#GEN7_BLENDFUNCTION_MAX
 4

	)

376 
	#GEN7_ALPHATEST_FORMAT_UNORM8
 0

	)

377 
	#GEN7_ALPHATEST_FORMAT_FLOAT32
 1

	)

379 
	#GEN7_CHROMAKEY_KILL_ON_ANY_MATCH
 0

	)

380 
	#GEN7_CHROMAKEY_REPLACE_BLACK
 1

	)

382 
	#GEN7_CLIP_API_OGL
 0

	)

383 
	#GEN7_CLIP_API_DX
 1

	)

385 
	#GEN7_CLIPMODE_NORMAL
 0

	)

386 
	#GEN7_CLIPMODE_CLIP_ALL
 1

	)

387 
	#GEN7_CLIPMODE_CLIP_NON_REJECTED
 2

	)

388 
	#GEN7_CLIPMODE_REJECT_ALL
 3

	)

389 
	#GEN7_CLIPMODE_ACCEPT_ALL
 4

	)

391 
	#GEN7_CLIP_NDCSPACE
 0

	)

392 
	#GEN7_CLIP_SCREENSPACE
 1

	)

394 
	#GEN7_COMPAREFUNCTION_ALWAYS
 0

	)

395 
	#GEN7_COMPAREFUNCTION_NEVER
 1

	)

396 
	#GEN7_COMPAREFUNCTION_LESS
 2

	)

397 
	#GEN7_COMPAREFUNCTION_EQUAL
 3

	)

398 
	#GEN7_COMPAREFUNCTION_LEQUAL
 4

	)

399 
	#GEN7_COMPAREFUNCTION_GREATER
 5

	)

400 
	#GEN7_COMPAREFUNCTION_NOTEQUAL
 6

	)

401 
	#GEN7_COMPAREFUNCTION_GEQUAL
 7

	)

403 
	#GEN7_COVERAGE_PIXELS_HALF
 0

	)

404 
	#GEN7_COVERAGE_PIXELS_1
 1

	)

405 
	#GEN7_COVERAGE_PIXELS_2
 2

	)

406 
	#GEN7_COVERAGE_PIXELS_4
 3

	)

408 
	#GEN7_CULLMODE_BOTH
 0

	)

409 
	#GEN7_CULLMODE_NONE
 1

	)

410 
	#GEN7_CULLMODE_FRONT
 2

	)

411 
	#GEN7_CULLMODE_BACK
 3

	)

413 
	#GEN7_DEFAULTCOLOR_R8G8B8A8_UNORM
 0

	)

414 
	#GEN7_DEFAULTCOLOR_R32G32B32A32_FLOAT
 1

	)

416 
	#GEN7_DEPTHFORMAT_D32_FLOAT_S8X24_UINT
 0

	)

417 
	#GEN7_DEPTHFORMAT_D32_FLOAT
 1

	)

418 
	#GEN7_DEPTHFORMAT_D24_UNORM_S8_UINT
 2

	)

419 
	#GEN7_DEPTHFORMAT_D16_UNORM
 5

	)

421 
	#GEN7_FLOATING_POINT_IEEE_754
 0

	)

422 
	#GEN7_FLOATING_POINT_NON_IEEE_754
 1

	)

424 
	#GEN7_FRONTWINDING_CW
 0

	)

425 
	#GEN7_FRONTWINDING_CCW
 1

	)

427 
	#GEN7_INDEX_BYTE
 0

	)

428 
	#GEN7_INDEX_WORD
 1

	)

429 
	#GEN7_INDEX_DWORD
 2

	)

431 
	#GEN7_LOGICOPFUNCTION_CLEAR
 0

	)

432 
	#GEN7_LOGICOPFUNCTION_NOR
 1

	)

433 
	#GEN7_LOGICOPFUNCTION_AND_INVERTED
 2

	)

434 
	#GEN7_LOGICOPFUNCTION_COPY_INVERTED
 3

	)

435 
	#GEN7_LOGICOPFUNCTION_AND_REVERSE
 4

	)

436 
	#GEN7_LOGICOPFUNCTION_INVERT
 5

	)

437 
	#GEN7_LOGICOPFUNCTION_XOR
 6

	)

438 
	#GEN7_LOGICOPFUNCTION_NAND
 7

	)

439 
	#GEN7_LOGICOPFUNCTION_AND
 8

	)

440 
	#GEN7_LOGICOPFUNCTION_EQUIV
 9

	)

441 
	#GEN7_LOGICOPFUNCTION_NOOP
 10

	)

442 
	#GEN7_LOGICOPFUNCTION_OR_INVERTED
 11

	)

443 
	#GEN7_LOGICOPFUNCTION_COPY
 12

	)

444 
	#GEN7_LOGICOPFUNCTION_OR_REVERSE
 13

	)

445 
	#GEN7_LOGICOPFUNCTION_OR
 14

	)

446 
	#GEN7_LOGICOPFUNCTION_SET
 15

	)

448 
	#GEN7_MAPFILTER_NEAREST
 0x0

	)

449 
	#GEN7_MAPFILTER_LINEAR
 0x1

	)

450 
	#GEN7_MAPFILTER_ANISOTROPIC
 0x2

	)

452 
	#GEN7_MIPFILTER_NONE
 0

	)

453 
	#GEN7_MIPFILTER_NEAREST
 1

	)

454 
	#GEN7_MIPFILTER_LINEAR
 3

	)

456 
	#GEN7_POLYGON_FRONT_FACING
 0

	)

457 
	#GEN7_POLYGON_BACK_FACING
 1

	)

459 
	#GEN7_PREFILTER_ALWAYS
 0x0

	)

460 
	#GEN7_PREFILTER_NEVER
 0x1

	)

461 
	#GEN7_PREFILTER_LESS
 0x2

	)

462 
	#GEN7_PREFILTER_EQUAL
 0x3

	)

463 
	#GEN7_PREFILTER_LEQUAL
 0x4

	)

464 
	#GEN7_PREFILTER_GREATER
 0x5

	)

465 
	#GEN7_PREFILTER_NOTEQUAL
 0x6

	)

466 
	#GEN7_PREFILTER_GEQUAL
 0x7

	)

468 
	#GEN7_PROVOKING_VERTEX_0
 0

	)

469 
	#GEN7_PROVOKING_VERTEX_1
 1

	)

470 
	#GEN7_PROVOKING_VERTEX_2
 2

	)

472 
	#GEN7_RASTRULE_UPPER_LEFT
 0

	)

473 
	#GEN7_RASTRULE_UPPER_RIGHT
 1

	)

475 
	#GEN7_RENDERTARGET_CLAMPRANGE_UNORM
 0

	)

476 
	#GEN7_RENDERTARGET_CLAMPRANGE_SNORM
 1

	)

477 
	#GEN7_RENDERTARGET_CLAMPRANGE_FORMAT
 2

	)

479 
	#GEN7_STENCILOP_KEEP
 0

	)

480 
	#GEN7_STENCILOP_ZERO
 1

	)

481 
	#GEN7_STENCILOP_REPLACE
 2

	)

482 
	#GEN7_STENCILOP_INCRSAT
 3

	)

483 
	#GEN7_STENCILOP_DECRSAT
 4

	)

484 
	#GEN7_STENCILOP_INCR
 5

	)

485 
	#GEN7_STENCILOP_DECR
 6

	)

486 
	#GEN7_STENCILOP_INVERT
 7

	)

488 
	#GEN7_SURFACE_MIPMAPLAYOUT_BELOW
 0

	)

489 
	#GEN7_SURFACE_MIPMAPLAYOUT_RIGHT
 1

	)

491 
	#GEN7_SURFACEFORMAT_R32G32B32A32_FLOAT
 0x000

	)

492 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SINT
 0x001

	)

493 
	#GEN7_SURFACEFORMAT_R32G32B32A32_UINT
 0x002

	)

494 
	#GEN7_SURFACEFORMAT_R32G32B32A32_UNORM
 0x003

	)

495 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SNORM
 0x004

	)

496 
	#GEN7_SURFACEFORMAT_R64G64_FLOAT
 0x005

	)

497 
	#GEN7_SURFACEFORMAT_R32G32B32X32_FLOAT
 0x006

	)

498 
	#GEN7_SURFACEFORMAT_R32G32B32A32_SSCALED
 0x007

	)

499 
	#GEN7_SURFACEFORMAT_R32G32B32A32_USCALED
 0x008

	)

500 
	#GEN7_SURFACEFORMAT_R32G32B32_FLOAT
 0x040

	)

501 
	#GEN7_SURFACEFORMAT_R32G32B32_SINT
 0x041

	)

502 
	#GEN7_SURFACEFORMAT_R32G32B32_UINT
 0x042

	)

503 
	#GEN7_SURFACEFORMAT_R32G32B32_UNORM
 0x043

	)

504 
	#GEN7_SURFACEFORMAT_R32G32B32_SNORM
 0x044

	)

505 
	#GEN7_SURFACEFORMAT_R32G32B32_SSCALED
 0x045

	)

506 
	#GEN7_SURFACEFORMAT_R32G32B32_USCALED
 0x046

	)

507 
	#GEN7_SURFACEFORMAT_R16G16B16A16_UNORM
 0x080

	)

508 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SNORM
 0x081

	)

509 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SINT
 0x082

	)

510 
	#GEN7_SURFACEFORMAT_R16G16B16A16_UINT
 0x083

	)

511 
	#GEN7_SURFACEFORMAT_R16G16B16A16_FLOAT
 0x084

	)

512 
	#GEN7_SURFACEFORMAT_R32G32_FLOAT
 0x085

	)

513 
	#GEN7_SURFACEFORMAT_R32G32_SINT
 0x086

	)

514 
	#GEN7_SURFACEFORMAT_R32G32_UINT
 0x087

	)

515 
	#GEN7_SURFACEFORMAT_R32_FLOAT_X8X24_TYPELESS
 0x088

	)

516 
	#GEN7_SURFACEFORMAT_X32_TYPELESS_G8X24_UINT
 0x089

	)

517 
	#GEN7_SURFACEFORMAT_L32A32_FLOAT
 0x08A

	)

518 
	#GEN7_SURFACEFORMAT_R32G32_UNORM
 0x08B

	)

519 
	#GEN7_SURFACEFORMAT_R32G32_SNORM
 0x08C

	)

520 
	#GEN7_SURFACEFORMAT_R64_FLOAT
 0x08D

	)

521 
	#GEN7_SURFACEFORMAT_R16G16B16X16_UNORM
 0x08E

	)

522 
	#GEN7_SURFACEFORMAT_R16G16B16X16_FLOAT
 0x08F

	)

523 
	#GEN7_SURFACEFORMAT_A32X32_FLOAT
 0x090

	)

524 
	#GEN7_SURFACEFORMAT_L32X32_FLOAT
 0x091

	)

525 
	#GEN7_SURFACEFORMAT_I32X32_FLOAT
 0x092

	)

526 
	#GEN7_SURFACEFORMAT_R16G16B16A16_SSCALED
 0x093

	)

527 
	#GEN7_SURFACEFORMAT_R16G16B16A16_USCALED
 0x094

	)

528 
	#GEN7_SURFACEFORMAT_R32G32_SSCALED
 0x095

	)

529 
	#GEN7_SURFACEFORMAT_R32G32_USCALED
 0x096

	)

530 
	#GEN7_SURFACEFORMAT_B8G8R8A8_UNORM
 0x0C0

	)

531 
	#GEN7_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB
 0x0C1

	)

532 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UNORM
 0x0C2

	)

533 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UNORM_SRGB
 0x0C3

	)

534 
	#GEN7_SURFACEFORMAT_R10G10B10A2_UINT
 0x0C4

	)

535 
	#GEN7_SURFACEFORMAT_R10G10B10_SNORM_A2_UNORM
 0x0C5

	)

536 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UNORM
 0x0C7

	)

537 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UNORM_SRGB
 0x0C8

	)

538 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SNORM
 0x0C9

	)

539 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SINT
 0x0CA

	)

540 
	#GEN7_SURFACEFORMAT_R8G8B8A8_UINT
 0x0CB

	)

541 
	#GEN7_SURFACEFORMAT_R16G16_UNORM
 0x0CC

	)

542 
	#GEN7_SURFACEFORMAT_R16G16_SNORM
 0x0CD

	)

543 
	#GEN7_SURFACEFORMAT_R16G16_SINT
 0x0CE

	)

544 
	#GEN7_SURFACEFORMAT_R16G16_UINT
 0x0CF

	)

545 
	#GEN7_SURFACEFORMAT_R16G16_FLOAT
 0x0D0

	)

546 
	#GEN7_SURFACEFORMAT_B10G10R10A2_UNORM
 0x0D1

	)

547 
	#GEN7_SURFACEFORMAT_B10G10R10A2_UNORM_SRGB
 0x0D2

	)

548 
	#GEN7_SURFACEFORMAT_R11G11B10_FLOAT
 0x0D3

	)

549 
	#GEN7_SURFACEFORMAT_R32_SINT
 0x0D6

	)

550 
	#GEN7_SURFACEFORMAT_R32_UINT
 0x0D7

	)

551 
	#GEN7_SURFACEFORMAT_R32_FLOAT
 0x0D8

	)

552 
	#GEN7_SURFACEFORMAT_R24_UNORM_X8_TYPELESS
 0x0D9

	)

553 
	#GEN7_SURFACEFORMAT_X24_TYPELESS_G8_UINT
 0x0DA

	)

554 
	#GEN7_SURFACEFORMAT_L16A16_UNORM
 0x0DF

	)

555 
	#GEN7_SURFACEFORMAT_I24X8_UNORM
 0x0E0

	)

556 
	#GEN7_SURFACEFORMAT_L24X8_UNORM
 0x0E1

	)

557 
	#GEN7_SURFACEFORMAT_A24X8_UNORM
 0x0E2

	)

558 
	#GEN7_SURFACEFORMAT_I32_FLOAT
 0x0E3

	)

559 
	#GEN7_SURFACEFORMAT_L32_FLOAT
 0x0E4

	)

560 
	#GEN7_SURFACEFORMAT_A32_FLOAT
 0x0E5

	)

561 
	#GEN7_SURFACEFORMAT_B8G8R8X8_UNORM
 0x0E9

	)

562 
	#GEN7_SURFACEFORMAT_B8G8R8X8_UNORM_SRGB
 0x0EA

	)

563 
	#GEN7_SURFACEFORMAT_R8G8B8X8_UNORM
 0x0EB

	)

564 
	#GEN7_SURFACEFORMAT_R8G8B8X8_UNORM_SRGB
 0x0EC

	)

565 
	#GEN7_SURFACEFORMAT_R9G9B9E5_SHAREDEXP
 0x0ED

	)

566 
	#GEN7_SURFACEFORMAT_B10G10R10X2_UNORM
 0x0EE

	)

567 
	#GEN7_SURFACEFORMAT_L16A16_FLOAT
 0x0F0

	)

568 
	#GEN7_SURFACEFORMAT_R32_UNORM
 0x0F1

	)

569 
	#GEN7_SURFACEFORMAT_R32_SNORM
 0x0F2

	)

570 
	#GEN7_SURFACEFORMAT_R10G10B10X2_USCALED
 0x0F3

	)

571 
	#GEN7_SURFACEFORMAT_R8G8B8A8_SSCALED
 0x0F4

	)

572 
	#GEN7_SURFACEFORMAT_R8G8B8A8_USCALED
 0x0F5

	)

573 
	#GEN7_SURFACEFORMAT_R16G16_SSCALED
 0x0F6

	)

574 
	#GEN7_SURFACEFORMAT_R16G16_USCALED
 0x0F7

	)

575 
	#GEN7_SURFACEFORMAT_R32_SSCALED
 0x0F8

	)

576 
	#GEN7_SURFACEFORMAT_R32_USCALED
 0x0F9

	)

577 
	#GEN7_SURFACEFORMAT_B5G6R5_UNORM
 0x100

	)

578 
	#GEN7_SURFACEFORMAT_B5G6R5_UNORM_SRGB
 0x101

	)

579 
	#GEN7_SURFACEFORMAT_B5G5R5A1_UNORM
 0x102

	)

580 
	#GEN7_SURFACEFORMAT_B5G5R5A1_UNORM_SRGB
 0x103

	)

581 
	#GEN7_SURFACEFORMAT_B4G4R4A4_UNORM
 0x104

	)

582 
	#GEN7_SURFACEFORMAT_B4G4R4A4_UNORM_SRGB
 0x105

	)

583 
	#GEN7_SURFACEFORMAT_R8G8_UNORM
 0x106

	)

584 
	#GEN7_SURFACEFORMAT_R8G8_SNORM
 0x107

	)

585 
	#GEN7_SURFACEFORMAT_R8G8_SINT
 0x108

	)

586 
	#GEN7_SURFACEFORMAT_R8G8_UINT
 0x109

	)

587 
	#GEN7_SURFACEFORMAT_R16_UNORM
 0x10A

	)

588 
	#GEN7_SURFACEFORMAT_R16_SNORM
 0x10B

	)

589 
	#GEN7_SURFACEFORMAT_R16_SINT
 0x10C

	)

590 
	#GEN7_SURFACEFORMAT_R16_UINT
 0x10D

	)

591 
	#GEN7_SURFACEFORMAT_R16_FLOAT
 0x10E

	)

592 
	#GEN7_SURFACEFORMAT_I16_UNORM
 0x111

	)

593 
	#GEN7_SURFACEFORMAT_L16_UNORM
 0x112

	)

594 
	#GEN7_SURFACEFORMAT_A16_UNORM
 0x113

	)

595 
	#GEN7_SURFACEFORMAT_L8A8_UNORM
 0x114

	)

596 
	#GEN7_SURFACEFORMAT_I16_FLOAT
 0x115

	)

597 
	#GEN7_SURFACEFORMAT_L16_FLOAT
 0x116

	)

598 
	#GEN7_SURFACEFORMAT_A16_FLOAT
 0x117

	)

599 
	#GEN7_SURFACEFORMAT_R5G5_SNORM_B6_UNORM
 0x119

	)

600 
	#GEN7_SURFACEFORMAT_B5G5R5X1_UNORM
 0x11A

	)

601 
	#GEN7_SURFACEFORMAT_B5G5R5X1_UNORM_SRGB
 0x11B

	)

602 
	#GEN7_SURFACEFORMAT_R8G8_SSCALED
 0x11C

	)

603 
	#GEN7_SURFACEFORMAT_R8G8_USCALED
 0x11D

	)

604 
	#GEN7_SURFACEFORMAT_R16_SSCALED
 0x11E

	)

605 
	#GEN7_SURFACEFORMAT_R16_USCALED
 0x11F

	)

606 
	#GEN7_SURFACEFORMAT_R8_UNORM
 0x140

	)

607 
	#GEN7_SURFACEFORMAT_R8_SNORM
 0x141

	)

608 
	#GEN7_SURFACEFORMAT_R8_SINT
 0x142

	)

609 
	#GEN7_SURFACEFORMAT_R8_UINT
 0x143

	)

610 
	#GEN7_SURFACEFORMAT_A8_UNORM
 0x144

	)

611 
	#GEN7_SURFACEFORMAT_I8_UNORM
 0x145

	)

612 
	#GEN7_SURFACEFORMAT_L8_UNORM
 0x146

	)

613 
	#GEN7_SURFACEFORMAT_P4A4_UNORM
 0x147

	)

614 
	#GEN7_SURFACEFORMAT_A4P4_UNORM
 0x148

	)

615 
	#GEN7_SURFACEFORMAT_R8_SSCALED
 0x149

	)

616 
	#GEN7_SURFACEFORMAT_R8_USCALED
 0x14A

	)

617 
	#GEN7_SURFACEFORMAT_R1_UINT
 0x181

	)

618 
	#GEN7_SURFACEFORMAT_YCRCB_NORMAL
 0x182

	)

619 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPUVY
 0x183

	)

620 
	#GEN7_SURFACEFORMAT_BC1_UNORM
 0x186

	)

621 
	#GEN7_SURFACEFORMAT_BC2_UNORM
 0x187

	)

622 
	#GEN7_SURFACEFORMAT_BC3_UNORM
 0x188

	)

623 
	#GEN7_SURFACEFORMAT_BC4_UNORM
 0x189

	)

624 
	#GEN7_SURFACEFORMAT_BC5_UNORM
 0x18A

	)

625 
	#GEN7_SURFACEFORMAT_BC1_UNORM_SRGB
 0x18B

	)

626 
	#GEN7_SURFACEFORMAT_BC2_UNORM_SRGB
 0x18C

	)

627 
	#GEN7_SURFACEFORMAT_BC3_UNORM_SRGB
 0x18D

	)

628 
	#GEN7_SURFACEFORMAT_MONO8
 0x18E

	)

629 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPUV
 0x18F

	)

630 
	#GEN7_SURFACEFORMAT_YCRCB_SWAPY
 0x190

	)

631 
	#GEN7_SURFACEFORMAT_DXT1_RGB
 0x191

	)

632 
	#GEN7_SURFACEFORMAT_FXT1
 0x192

	)

633 
	#GEN7_SURFACEFORMAT_R8G8B8_UNORM
 0x193

	)

634 
	#GEN7_SURFACEFORMAT_R8G8B8_SNORM
 0x194

	)

635 
	#GEN7_SURFACEFORMAT_R8G8B8_SSCALED
 0x195

	)

636 
	#GEN7_SURFACEFORMAT_R8G8B8_USCALED
 0x196

	)

637 
	#GEN7_SURFACEFORMAT_R64G64B64A64_FLOAT
 0x197

	)

638 
	#GEN7_SURFACEFORMAT_R64G64B64_FLOAT
 0x198

	)

639 
	#GEN7_SURFACEFORMAT_BC4_SNORM
 0x199

	)

640 
	#GEN7_SURFACEFORMAT_BC5_SNORM
 0x19A

	)

641 
	#GEN7_SURFACEFORMAT_R16G16B16_UNORM
 0x19C

	)

642 
	#GEN7_SURFACEFORMAT_R16G16B16_SNORM
 0x19D

	)

643 
	#GEN7_SURFACEFORMAT_R16G16B16_SSCALED
 0x19E

	)

644 
	#GEN7_SURFACEFORMAT_R16G16B16_USCALED
 0x19F

	)

646 
	#GEN7_SURFACERETURNFORMAT_FLOAT32
 0

	)

647 
	#GEN7_SURFACERETURNFORMAT_S1
 1

	)

649 
	#GEN7_SURFACE_1D
 0

	)

650 
	#GEN7_SURFACE_2D
 1

	)

651 
	#GEN7_SURFACE_3D
 2

	)

652 
	#GEN7_SURFACE_CUBE
 3

	)

653 
	#GEN7_SURFACE_BUFFER
 4

	)

654 
	#GEN7_SURFACE_NULL
 7

	)

656 
	#GEN7_BORDER_COLOR_MODE_DEFAULT
 0

	)

657 
	#GEN7_BORDER_COLOR_MODE_LEGACY
 1

	)

659 
	#GEN7_TEXCOORDMODE_WRAP
 0

	)

660 
	#GEN7_TEXCOORDMODE_MIRROR
 1

	)

661 
	#GEN7_TEXCOORDMODE_CLAMP
 2

	)

662 
	#GEN7_TEXCOORDMODE_CUBE
 3

	)

663 
	#GEN7_TEXCOORDMODE_CLAMP_BORDER
 4

	)

664 
	#GEN7_TEXCOORDMODE_MIRROR_ONCE
 5

	)

666 
	#GEN7_THREAD_PRIORITY_NORMAL
 0

	)

667 
	#GEN7_THREAD_PRIORITY_HIGH
 1

	)

669 
	#GEN7_TILEWALK_XMAJOR
 0

	)

670 
	#GEN7_TILEWALK_YMAJOR
 1

	)

672 
	#GEN7_VERTEX_SUBPIXEL_PRECISION_8BITS
 0

	)

673 
	#GEN7_VERTEX_SUBPIXEL_PRECISION_4BITS
 1

	)

675 
	#GEN7_VERTEXBUFFER_ACCESS_VERTEXDATA
 0

	)

676 
	#GEN7_VERTEXBUFFER_ACCESS_INSTANCEDATA
 1

	)

678 
	#GEN7_VFCOMPONENT_NOSTORE
 0

	)

679 
	#GEN7_VFCOMPONENT_STORE_SRC
 1

	)

680 
	#GEN7_VFCOMPONENT_STORE_0
 2

	)

681 
	#GEN7_VFCOMPONENT_STORE_1_FLT
 3

	)

682 
	#GEN7_VFCOMPONENT_STORE_1_INT
 4

	)

683 
	#GEN7_VFCOMPONENT_STORE_VID
 5

	)

684 
	#GEN7_VFCOMPONENT_STORE_IID
 6

	)

685 
	#GEN7_VFCOMPONENT_STORE_PID
 7

	)

691 
	#GEN7_ALIGN_1
 0

	)

692 
	#GEN7_ALIGN_16
 1

	)

694 
	#GEN7_ADDRESS_DIRECT
 0

	)

695 
	#GEN7_ADDRESS_REGISTER_INDIRECT_REGISTER
 1

	)

697 
	#GEN7_CHANNEL_X
 0

	)

698 
	#GEN7_CHANNEL_Y
 1

	)

699 
	#GEN7_CHANNEL_Z
 2

	)

700 
	#GEN7_CHANNEL_W
 3

	)

702 
	#GEN7_COMPRESSION_NONE
 0

	)

703 
	#GEN7_COMPRESSION_2NDHALF
 1

	)

704 
	#GEN7_COMPRESSION_COMPRESSED
 2

	)

706 
	#GEN7_CONDITIONAL_NONE
 0

	)

707 
	#GEN7_CONDITIONAL_Z
 1

	)

708 
	#GEN7_CONDITIONAL_NZ
 2

	)

709 
	#GEN7_CONDITIONAL_EQ
 1

	)

710 
	#GEN7_CONDITIONAL_NEQ
 2

	)

711 
	#GEN7_CONDITIONAL_G
 3

	)

712 
	#GEN7_CONDITIONAL_GE
 4

	)

713 
	#GEN7_CONDITIONAL_L
 5

	)

714 
	#GEN7_CONDITIONAL_LE
 6

	)

715 
	#GEN7_CONDITIONAL_C
 7

	)

716 
	#GEN7_CONDITIONAL_O
 8

	)

718 
	#GEN7_DEBUG_NONE
 0

	)

719 
	#GEN7_DEBUG_BREAKPOINT
 1

	)

721 
	#GEN7_DEPENDENCY_NORMAL
 0

	)

722 
	#GEN7_DEPENDENCY_NOTCLEARED
 1

	)

723 
	#GEN7_DEPENDENCY_NOTCHECKED
 2

	)

724 
	#GEN7_DEPENDENCY_DISABLE
 3

	)

726 
	#GEN7_EXECUTE_1
 0

	)

727 
	#GEN7_EXECUTE_2
 1

	)

728 
	#GEN7_EXECUTE_4
 2

	)

729 
	#GEN7_EXECUTE_8
 3

	)

730 
	#GEN7_EXECUTE_16
 4

	)

731 
	#GEN7_EXECUTE_32
 5

	)

733 
	#GEN7_HORIZONTAL_STRIDE_0
 0

	)

734 
	#GEN7_HORIZONTAL_STRIDE_1
 1

	)

735 
	#GEN7_HORIZONTAL_STRIDE_2
 2

	)

736 
	#GEN7_HORIZONTAL_STRIDE_4
 3

	)

738 
	#GEN7_INSTRUCTION_NORMAL
 0

	)

739 
	#GEN7_INSTRUCTION_SATURATE
 1

	)

741 
	#INTEL_MASK_ENABLE
 0

	)

742 
	#INTEL_MASK_DISABLE
 1

	)

744 
	#GEN7_OPCODE_MOV
 1

	)

745 
	#GEN7_OPCODE_SEL
 2

	)

746 
	#GEN7_OPCODE_NOT
 4

	)

747 
	#GEN7_OPCODE_AND
 5

	)

748 
	#GEN7_OPCODE_OR
 6

	)

749 
	#GEN7_OPCODE_XOR
 7

	)

750 
	#GEN7_OPCODE_SHR
 8

	)

751 
	#GEN7_OPCODE_SHL
 9

	)

752 
	#GEN7_OPCODE_RSR
 10

	)

753 
	#GEN7_OPCODE_RSL
 11

	)

754 
	#GEN7_OPCODE_ASR
 12

	)

755 
	#GEN7_OPCODE_CMP
 16

	)

756 
	#GEN7_OPCODE_JMPI
 32

	)

757 
	#GEN7_OPCODE_IF
 34

	)

758 
	#GEN7_OPCODE_IFF
 35

	)

759 
	#GEN7_OPCODE_ELSE
 36

	)

760 
	#GEN7_OPCODE_ENDIF
 37

	)

761 
	#GEN7_OPCODE_DO
 38

	)

762 
	#GEN7_OPCODE_WHILE
 39

	)

763 
	#GEN7_OPCODE_BREAK
 40

	)

764 
	#GEN7_OPCODE_CONTINUE
 41

	)

765 
	#GEN7_OPCODE_HALT
 42

	)

766 
	#GEN7_OPCODE_MSAVE
 44

	)

767 
	#GEN7_OPCODE_MRESTORE
 45

	)

768 
	#GEN7_OPCODE_PUSH
 46

	)

769 
	#GEN7_OPCODE_POP
 47

	)

770 
	#GEN7_OPCODE_WAIT
 48

	)

771 
	#GEN7_OPCODE_SEND
 49

	)

772 
	#GEN7_OPCODE_ADD
 64

	)

773 
	#GEN7_OPCODE_MUL
 65

	)

774 
	#GEN7_OPCODE_AVG
 66

	)

775 
	#GEN7_OPCODE_FRC
 67

	)

776 
	#GEN7_OPCODE_RNDU
 68

	)

777 
	#GEN7_OPCODE_RNDD
 69

	)

778 
	#GEN7_OPCODE_RNDE
 70

	)

779 
	#GEN7_OPCODE_RNDZ
 71

	)

780 
	#GEN7_OPCODE_MAC
 72

	)

781 
	#GEN7_OPCODE_MACH
 73

	)

782 
	#GEN7_OPCODE_LZD
 74

	)

783 
	#GEN7_OPCODE_SAD2
 80

	)

784 
	#GEN7_OPCODE_SADA2
 81

	)

785 
	#GEN7_OPCODE_DP4
 84

	)

786 
	#GEN7_OPCODE_DPH
 85

	)

787 
	#GEN7_OPCODE_DP3
 86

	)

788 
	#GEN7_OPCODE_DP2
 87

	)

789 
	#GEN7_OPCODE_DPA2
 88

	)

790 
	#GEN7_OPCODE_LINE
 89

	)

791 
	#GEN7_OPCODE_NOP
 126

	)

793 
	#GEN7_PREDICATE_NONE
 0

	)

794 
	#GEN7_PREDICATE_NORMAL
 1

	)

795 
	#GEN7_PREDICATE_ALIGN1_ANYV
 2

	)

796 
	#GEN7_PREDICATE_ALIGN1_ALLV
 3

	)

797 
	#GEN7_PREDICATE_ALIGN1_ANY2H
 4

	)

798 
	#GEN7_PREDICATE_ALIGN1_ALL2H
 5

	)

799 
	#GEN7_PREDICATE_ALIGN1_ANY4H
 6

	)

800 
	#GEN7_PREDICATE_ALIGN1_ALL4H
 7

	)

801 
	#GEN7_PREDICATE_ALIGN1_ANY8H
 8

	)

802 
	#GEN7_PREDICATE_ALIGN1_ALL8H
 9

	)

803 
	#GEN7_PREDICATE_ALIGN1_ANY16H
 10

	)

804 
	#GEN7_PREDICATE_ALIGN1_ALL16H
 11

	)

805 
	#GEN7_PREDICATE_ALIGN16_REPLICATE_X
 2

	)

806 
	#GEN7_PREDICATE_ALIGN16_REPLICATE_Y
 3

	)

807 
	#GEN7_PREDICATE_ALIGN16_REPLICATE_Z
 4

	)

808 
	#GEN7_PREDICATE_ALIGN16_REPLICATE_W
 5

	)

809 
	#GEN7_PREDICATE_ALIGN16_ANY4H
 6

	)

810 
	#GEN7_PREDICATE_ALIGN16_ALL4H
 7

	)

812 
	#GEN7_ARCHITECTURE_REGISTER_FILE
 0

	)

813 
	#GEN7_GENERAL_REGISTER_FILE
 1

	)

814 
	#GEN7_MESSAGE_REGISTER_FILE
 2

	)

815 
	#GEN7_IMMEDIATE_VALUE
 3

	)

817 
	#GEN7_REGISTER_TYPE_UD
 0

	)

818 
	#GEN7_REGISTER_TYPE_D
 1

	)

819 
	#GEN7_REGISTER_TYPE_UW
 2

	)

820 
	#GEN7_REGISTER_TYPE_W
 3

	)

821 
	#GEN7_REGISTER_TYPE_UB
 4

	)

822 
	#GEN7_REGISTER_TYPE_B
 5

	)

823 
	#GEN7_REGISTER_TYPE_VF
 5

	)

824 
	#GEN7_REGISTER_TYPE_HF
 6

	)

825 
	#GEN7_REGISTER_TYPE_V
 6

	)

826 
	#GEN7_REGISTER_TYPE_F
 7

	)

828 
	#GEN7_ARF_NULL
 0x00

	)

829 
	#GEN7_ARF_ADDRESS
 0x10

	)

830 
	#GEN7_ARF_ACCUMULATOR
 0x20

	)

831 
	#GEN7_ARF_FLAG
 0x30

	)

832 
	#GEN7_ARF_MASK
 0x40

	)

833 
	#GEN7_ARF_MASK_STACK
 0x50

	)

834 
	#GEN7_ARF_MASK_STACK_DEPTH
 0x60

	)

835 
	#GEN7_ARF_STATE
 0x70

	)

836 
	#GEN7_ARF_CONTROL
 0x80

	)

837 
	#GEN7_ARF_NOTIFICATION_COUNT
 0x90

	)

838 
	#GEN7_ARF_IP
 0xA0

	)

840 
	#GEN7_AMASK
 0

	)

841 
	#GEN7_IMASK
 1

	)

842 
	#GEN7_LMASK
 2

	)

843 
	#GEN7_CMASK
 3

	)

845 
	#GEN7_THREAD_NORMAL
 0

	)

846 
	#GEN7_THREAD_ATOMIC
 1

	)

847 
	#GEN7_THREAD_SWITCH
 2

	)

849 
	#GEN7_VERTICAL_STRIDE_0
 0

	)

850 
	#GEN7_VERTICAL_STRIDE_1
 1

	)

851 
	#GEN7_VERTICAL_STRIDE_2
 2

	)

852 
	#GEN7_VERTICAL_STRIDE_4
 3

	)

853 
	#GEN7_VERTICAL_STRIDE_8
 4

	)

854 
	#GEN7_VERTICAL_STRIDE_16
 5

	)

855 
	#GEN7_VERTICAL_STRIDE_32
 6

	)

856 
	#GEN7_VERTICAL_STRIDE_64
 7

	)

857 
	#GEN7_VERTICAL_STRIDE_128
 8

	)

858 
	#GEN7_VERTICAL_STRIDE_256
 9

	)

859 
	#GEN7_VERTICAL_STRIDE_ONE_DIMENSIONAL
 0xF

	)

861 
	#GEN7_WIDTH_1
 0

	)

862 
	#GEN7_WIDTH_2
 1

	)

863 
	#GEN7_WIDTH_4
 2

	)

864 
	#GEN7_WIDTH_8
 3

	)

865 
	#GEN7_WIDTH_16
 4

	)

867 
	#GEN7_STATELESS_BUFFER_BOUNDARY_1K
 0

	)

868 
	#GEN7_STATELESS_BUFFER_BOUNDARY_2K
 1

	)

869 
	#GEN7_STATELESS_BUFFER_BOUNDARY_4K
 2

	)

870 
	#GEN7_STATELESS_BUFFER_BOUNDARY_8K
 3

	)

871 
	#GEN7_STATELESS_BUFFER_BOUNDARY_16K
 4

	)

872 
	#GEN7_STATELESS_BUFFER_BOUNDARY_32K
 5

	)

873 
	#GEN7_STATELESS_BUFFER_BOUNDARY_64K
 6

	)

874 
	#GEN7_STATELESS_BUFFER_BOUNDARY_128K
 7

	)

875 
	#GEN7_STATELESS_BUFFER_BOUNDARY_256K
 8

	)

876 
	#GEN7_STATELESS_BUFFER_BOUNDARY_512K
 9

	)

877 
	#GEN7_STATELESS_BUFFER_BOUNDARY_1M
 10

	)

878 
	#GEN7_STATELESS_BUFFER_BOUNDARY_2M
 11

	)

880 
	#GEN7_POLYGON_FACING_FRONT
 0

	)

881 
	#GEN7_POLYGON_FACING_BACK
 1

	)

883 
	#GEN7_MESSAGE_TARGET_NULL
 0

	)

884 
	#GEN7_MESSAGE_TARGET_MATH
 1

	)

885 
	#GEN7_MESSAGE_TARGET_SAMPLER
 2

	)

886 
	#GEN7_MESSAGE_TARGET_GATEWAY
 3

	)

887 
	#GEN7_MESSAGE_TARGET_DATAPORT_READ
 4

	)

888 
	#GEN7_MESSAGE_TARGET_DATAPORT_WRITE
 5

	)

889 
	#GEN7_MESSAGE_TARGET_URB
 6

	)

890 
	#GEN7_MESSAGE_TARGET_THREAD_SPAWNER
 7

	)

892 
	#GEN7_SAMPLER_RETURN_FORMAT_FLOAT32
 0

	)

893 
	#GEN7_SAMPLER_RETURN_FORMAT_UINT32
 2

	)

894 
	#GEN7_SAMPLER_RETURN_FORMAT_SINT32
 3

	)

896 
	#GEN7_SAMPLER_MESSAGE_SIMD8_SAMPLE
 0

	)

897 
	#GEN7_SAMPLER_MESSAGE_SIMD16_SAMPLE
 0

	)

898 
	#GEN7_SAMPLER_MESSAGE_SIMD16_SAMPLE_BIAS
 0

	)

899 
	#GEN7_SAMPLER_MESSAGE_SIMD8_KILLPIX
 1

	)

900 
	#GEN7_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_LOD
 1

	)

901 
	#GEN7_SAMPLER_MESSAGE_SIMD16_SAMPLE_LOD
 1

	)

902 
	#GEN7_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_GRADIENTS
 2

	)

903 
	#GEN7_SAMPLER_MESSAGE_SIMD8_SAMPLE_GRADIENTS
 2

	)

904 
	#GEN7_SAMPLER_MESSAGE_SIMD4X2_SAMPLE_COMPARE
 0

	)

905 
	#GEN7_SAMPLER_MESSAGE_SIMD16_SAMPLE_COMPARE
 2

	)

906 
	#GEN7_SAMPLER_MESSAGE_SIMD4X2_RESINFO
 2

	)

907 
	#GEN7_SAMPLER_MESSAGE_SIMD8_RESINFO
 2

	)

908 
	#GEN7_SAMPLER_MESSAGE_SIMD16_RESINFO
 2

	)

909 
	#GEN7_SAMPLER_MESSAGE_SIMD4X2_LD
 3

	)

910 
	#GEN7_SAMPLER_MESSAGE_SIMD8_LD
 3

	)

911 
	#GEN7_SAMPLER_MESSAGE_SIMD16_LD
 3

	)

913 
	#GEN7_DATAPORT_OWORD_BLOCK_1_OWORDLOW
 0

	)

914 
	#GEN7_DATAPORT_OWORD_BLOCK_1_OWORDHIGH
 1

	)

915 
	#GEN7_DATAPORT_OWORD_BLOCK_2_OWORDS
 2

	)

916 
	#GEN7_DATAPORT_OWORD_BLOCK_4_OWORDS
 3

	)

917 
	#GEN7_DATAPORT_OWORD_BLOCK_8_OWORDS
 4

	)

919 
	#GEN7_DATAPORT_OWORD_DUAL_BLOCK_1OWORD
 0

	)

920 
	#GEN7_DATAPORT_OWORD_DUAL_BLOCK_4OWORDS
 2

	)

922 
	#GEN7_DATAPORT_DWORD_SCATTERED_BLOCK_8DWORDS
 2

	)

923 
	#GEN7_DATAPORT_DWORD_SCATTERED_BLOCK_16DWORDS
 3

	)

925 
	#GEN7_DATAPORT_READ_MESSAGE_OWORD_BLOCK_READ
 0

	)

926 
	#GEN7_DATAPORT_READ_MESSAGE_OWORD_DUAL_BLOCK_READ
 1

	)

927 
	#GEN7_DATAPORT_READ_MESSAGE_DWORD_BLOCK_READ
 2

	)

928 
	#GEN7_DATAPORT_READ_MESSAGE_DWORD_SCATTERED_READ
 3

	)

930 
	#GEN7_DATAPORT_READ_TARGET_DATA_CACHE
 0

	)

931 
	#GEN7_DATAPORT_READ_TARGET_RENDER_CACHE
 1

	)

932 
	#GEN7_DATAPORT_READ_TARGET_SAMPLER_CACHE
 2

	)

934 
	#GEN7_DATAPORT_RENDER_TARGET_WRITE_SIMD16_SINGLE_SOURCE
 0

	)

935 
	#GEN7_DATAPORT_RENDER_TARGET_WRITE_SIMD16_SINGLE_SOURCE_REPLICATED
 1

	)

936 
	#GEN7_DATAPORT_RENDER_TARGET_WRITE_SIMD8_DUAL_SOURCE_SUBSPAN01
 2

	)

937 
	#GEN7_DATAPORT_RENDER_TARGET_WRITE_SIMD8_DUAL_SOURCE_SUBSPAN23
 3

	)

938 
	#GEN7_DATAPORT_RENDER_TARGET_WRITE_SIMD8_SINGLE_SOURCE_SUBSPAN01
 4

	)

940 
	#GEN7_DATAPORT_WRITE_MESSAGE_OWORD_BLOCK_WRITE
 0

	)

941 
	#GEN7_DATAPORT_WRITE_MESSAGE_OWORD_DUAL_BLOCK_WRITE
 1

	)

942 
	#GEN7_DATAPORT_WRITE_MESSAGE_DWORD_BLOCK_WRITE
 2

	)

943 
	#GEN7_DATAPORT_WRITE_MESSAGE_DWORD_SCATTERED_WRITE
 3

	)

944 
	#GEN7_DATAPORT_WRITE_MESSAGE_RENDER_TARGET_WRITE
 4

	)

945 
	#GEN7_DATAPORT_WRITE_MESSAGE_STREAMED_VERTEX_BUFFER_WRITE
 5

	)

946 
	#GEN7_DATAPORT_WRITE_MESSAGE_FLUSH_RENDER_CACHE
 7

	)

948 
	#GEN7_MATH_FUNCTION_INV
 1

	)

949 
	#GEN7_MATH_FUNCTION_LOG
 2

	)

950 
	#GEN7_MATH_FUNCTION_EXP
 3

	)

951 
	#GEN7_MATH_FUNCTION_SQRT
 4

	)

952 
	#GEN7_MATH_FUNCTION_RSQ
 5

	)

953 
	#GEN7_MATH_FUNCTION_SIN
 6

	)

954 
	#GEN7_MATH_FUNCTION_COS
 7

	)

955 
	#GEN7_MATH_FUNCTION_SINCOS
 8

	)

956 
	#GEN7_MATH_FUNCTION_TAN
 9

	)

957 
	#GEN7_MATH_FUNCTION_POW
 10

	)

958 
	#GEN7_MATH_FUNCTION_INT_DIV_QUOTIENT_AND_REMAINDER
 11

	)

959 
	#GEN7_MATH_FUNCTION_INT_DIV_QUOTIENT
 12

	)

960 
	#GEN7_MATH_FUNCTION_INT_DIV_REMAINDER
 13

	)

962 
	#GEN7_MATH_INTEGER_UNSIGNED
 0

	)

963 
	#GEN7_MATH_INTEGER_SIGNED
 1

	)

965 
	#GEN7_MATH_PRECISION_FULL
 0

	)

966 
	#GEN7_MATH_PRECISION_PARTIAL
 1

	)

968 
	#GEN7_MATH_SATURATE_NONE
 0

	)

969 
	#GEN7_MATH_SATURATE_SATURATE
 1

	)

971 
	#GEN7_MATH_DATA_VECTOR
 0

	)

972 
	#GEN7_MATH_DATA_SCALAR
 1

	)

974 
	#GEN7_URB_OPCODE_WRITE
 0

	)

976 
	#GEN7_URB_SWIZZLE_NONE
 0

	)

977 
	#GEN7_URB_SWIZZLE_INTERLEAVE
 1

	)

978 
	#GEN7_URB_SWIZZLE_TRANSPOSE
 2

	)

980 
	#GEN7_SCRATCH_SPACE_SIZE_1K
 0

	)

981 
	#GEN7_SCRATCH_SPACE_SIZE_2K
 1

	)

982 
	#GEN7_SCRATCH_SPACE_SIZE_4K
 2

	)

983 
	#GEN7_SCRATCH_SPACE_SIZE_8K
 3

	)

984 
	#GEN7_SCRATCH_SPACE_SIZE_16K
 4

	)

985 
	#GEN7_SCRATCH_SPACE_SIZE_32K
 5

	)

986 
	#GEN7_SCRATCH_SPACE_SIZE_64K
 6

	)

987 
	#GEN7_SCRATCH_SPACE_SIZE_128K
 7

	)

988 
	#GEN7_SCRATCH_SPACE_SIZE_256K
 8

	)

989 
	#GEN7_SCRATCH_SPACE_SIZE_512K
 9

	)

990 
	#GEN7_SCRATCH_SPACE_SIZE_1M
 10

	)

991 
	#GEN7_SCRATCH_SPACE_SIZE_2M
 11

	)

1005 
	sgí7_ßm∂î_deÁu…_b‹dî_cﬁ‹
 {

1006 
	mcﬁ‹
[4];

1009 
	sgí7_ßm∂î_Àgacy_b‹dî_cﬁ‹
 {

1010 
uöt8_t
 
	mcﬁ‹
[4];

1013 
	sgí7_bÀnd_°©e
 {

1015 
uöt32_t
 
	mde°_bÀnd_Á˘‹
:5;

1016 
uöt32_t
 
	msour˚_bÀnd_Á˘‹
:5;

1017 
uöt32_t
 
	m∑d3
:1;

1018 
uöt32_t
 
	mbÀnd_func
:3;

1019 
uöt32_t
 
	m∑d2
:1;

1020 
uöt32_t
 
	mü_de°_bÀnd_Á˘‹
:5;

1021 
uöt32_t
 
	mü_sour˚_bÀnd_Á˘‹
:5;

1022 
uöt32_t
 
	m∑d1
:1;

1023 
uöt32_t
 
	mü_bÀnd_func
:3;

1024 
uöt32_t
 
	m∑d0
:1;

1025 
uöt32_t
 
	mü_bÀnd_íabÀ
:1;

1026 
uöt32_t
 
	mbÀnd_íabÀ
:1;

1027 } 
	mbÀnd0
;

1030 
uöt32_t
 
	mpo°_bÀnd_˛amp_íabÀ
:1;

1031 
uöt32_t
 
	m¥e_bÀnd_˛amp_íabÀ
:1;

1032 
uöt32_t
 
	m˛amp_ønge
:2;

1033 
uöt32_t
 
	m∑d0
:4;

1034 
uöt32_t
 
	mx_dôhî_off£t
:2;

1035 
uöt32_t
 
	my_dôhî_off£t
:2;

1036 
uöt32_t
 
	mdôhî_íabÀ
:1;

1037 
uöt32_t
 
	mÆpha_ã°_func
:3;

1038 
uöt32_t
 
	mÆpha_ã°_íabÀ
:1;

1039 
uöt32_t
 
	m∑d1
:1;

1040 
uöt32_t
 
	mlogic_›_func
:4;

1041 
uöt32_t
 
	mlogic_›_íabÀ
:1;

1042 
uöt32_t
 
	m∑d2
:1;

1043 
uöt32_t
 
	mwrôe_dißbÀ_b
:1;

1044 
uöt32_t
 
	mwrôe_dißbÀ_g
:1;

1045 
uöt32_t
 
	mwrôe_dißbÀ_r
:1;

1046 
uöt32_t
 
	mwrôe_dißbÀ_a
:1;

1047 
uöt32_t
 
	m∑d3
:1;

1048 
uöt32_t
 
	mÆpha_to_covîage_dôhî
:1;

1049 
uöt32_t
 
	mÆpha_to_⁄e
:1;

1050 
uöt32_t
 
	mÆpha_to_covîage
:1;

1051 } 
	mbÀnd1
;

1054 
	sgí7_cﬁ‹_ˇlc_°©e
 {

1056 
uöt32_t
 
	mÆpha_ã°_f‹m©
:1;

1057 
uöt32_t
 
	m∑d0
:14;

1058 
uöt32_t
 
	mround_dißbÀ
:1;

1059 
uöt32_t
 
	mbf_°ícû_ªf
:8;

1060 
uöt32_t
 
	m°ícû_ªf
:8;

1061 } 
	mcc0
;

1064 
	mÆpha_ªf_f
;

1066 
uöt32_t
 
	mui
:8;

1067 
uöt32_t
 
	m∑d0
:24;

1068 } 
	mÆpha_ªf_fi
;

1069 } 
	mcc1
;

1071 
	mc⁄°™t_r
;

1072 
	mc⁄°™t_g
;

1073 
	mc⁄°™t_b
;

1074 
	mc⁄°™t_a
;

1077 
	sgí7_dïth_°ícû_°©e
 {

1079 
uöt32_t
 
	m∑d0
:3;

1080 
uöt32_t
 
	mbf_°ícû_∑ss_dïth_∑ss_›
:3;

1081 
uöt32_t
 
	mbf_°ícû_∑ss_dïth_Áû_›
:3;

1082 
uöt32_t
 
	mbf_°ícû_Áû_›
:3;

1083 
uöt32_t
 
	mbf_°ícû_func
:3;

1084 
uöt32_t
 
	mbf_°ícû_íabÀ
:1;

1085 
uöt32_t
 
	m∑d1
:2;

1086 
uöt32_t
 
	m°ícû_wrôe_íabÀ
:1;

1087 
uöt32_t
 
	m°ícû_∑ss_dïth_∑ss_›
:3;

1088 
uöt32_t
 
	m°ícû_∑ss_dïth_Áû_›
:3;

1089 
uöt32_t
 
	m°ícû_Áû_›
:3;

1090 
uöt32_t
 
	m°ícû_func
:3;

1091 
uöt32_t
 
	m°ícû_íabÀ
:1;

1092 } 
	mds0
;

1095 
uöt32_t
 
	mbf_°ícû_wrôe_mask
:8;

1096 
uöt32_t
 
	mbf_°ícû_ã°_mask
:8;

1097 
uöt32_t
 
	m°ícû_wrôe_mask
:8;

1098 
uöt32_t
 
	m°ícû_ã°_mask
:8;

1099 } 
	mds1
;

1102 
uöt32_t
 
	m∑d0
:26;

1103 
uöt32_t
 
	mdïth_wrôe_íabÀ
:1;

1104 
uöt32_t
 
	mdïth_ã°_func
:3;

1105 
uöt32_t
 
	m∑d1
:1;

1106 
uöt32_t
 
	mdïth_ã°_íabÀ
:1;

1107 } 
	mds2
;

1110 
	sgí7_surÁ˚_°©e
 {

1112 
	mcube_pos_z
:1;

1113 
	mcube_√g_z
:1;

1114 
	mcube_pos_y
:1;

1115 
	mcube_√g_y
:1;

1116 
	mcube_pos_x
:1;

1117 
	mcube_√g_x
:1;

1118 
	m∑d2
:2;

1119 
	mªndî_ˇche_ªad_wrôe
:1;

1120 
	m∑d1
:1;

1121 
	msurÁ˚_¨øy_•acög
:1;

1122 
	mvît_löe_°ride_ofs
:1;

1123 
	mvît_löe_°ride
:1;

1124 
	mtûe_wÆk
:1;

1125 
	mtûed_surÁ˚
:1;

1126 
	mh‹iz⁄èl_Æignmít
:1;

1127 
	mvîtiˇl_Æignmít
:2;

1128 
	msurÁ˚_f‹m©
:9;

1129 
	m∑d0
:1;

1130 
	mis_¨øy
:1;

1131 
	msurÁ˚_ty≥
:3;

1132 } 
	mss0
;

1135 
	mba£_addr
;

1136 } 
	mss1
;

1139 
	mwidth
:14;

1140 
	m∑d1
:2;

1141 
	mheight
:14;

1142 
	m∑d0
:2;

1143 } 
	mss2
;

1146 
	mpôch
:18;

1147 
	m∑d
:3;

1148 
	mdïth
:11;

1149 } 
	mss3
;

1152 
	mmu…ißm∂e_posôi⁄_∑Àâe_ödex
:3;

1153 
	mnum_mu…ißm∂es
:3;

1154 
	mmu…ißm∂ed_surÁ˚_°‹age_f‹m©
:1;

1155 
	mªndî_èrgë_võw_exã¡
:11;

1156 
	mmö_¨øy_ñt
:11;

1157 
	mrŸ©i⁄
:2;

1158 
	m∑d0
:1;

1159 } 
	mss4
;

1162 
	mmù_cou¡
:4;

1163 
	mmö_lod
:4;

1164 
	m∑d1
:12;

1165 
	my_off£t
:4;

1166 
	m∑d0
:1;

1167 
	mx_off£t
:7;

1168 } 
	mss5
;

1171 
	m∑d
;

1172 } 
	mss6
;

1175 
	mªsour˚_mö_lod
:12;

1176 
	m∑d0
:16;

1177 
	mÆpha_˛ór_cﬁ‹
:1;

1178 
	mblue_˛ór_cﬁ‹
:1;

1179 
	mgªí_˛ór_cﬁ‹
:1;

1180 
	mªd_˛ór_cﬁ‹
:1;

1181 } 
	mss7
;

1184 
	sgí7_ßm∂î_°©e
 {

1186 
	m™iso_Æg‹ôhm
:1;

1187 
	mlod_büs
:13;

1188 
	mmö_fûãr
:3;

1189 
	mmag_fûãr
:3;

1190 
	mmù_fûãr
:2;

1191 
	mba£_Àvñ
:5;

1192 
	m∑d1
:1;

1193 
	mlod_¥e˛amp
:1;

1194 
	mdeÁu…_cﬁ‹_mode
:1;

1195 
	m∑d0
:1;

1196 
	mdißbÀ
:1;

1197 } 
	mss0
;

1200 
	mcube_c⁄åﬁ_mode
:1;

1201 
	mshadow_fun˘i⁄
:3;

1202 
	m∑d
:4;

1203 
	mmax_lod
:12;

1204 
	mmö_lod
:12;

1205 } 
	mss1
;

1208 
	m∑d
:5;

1209 
	mdeÁu…_cﬁ‹_poöãr
:27;

1210 } 
	mss2
;

1213 
	mr_wøp_mode
:3;

1214 
	mt_wøp_mode
:3;

1215 
	ms_wøp_mode
:3;

1216 
	m∑d
:1;

1217 
	mn⁄_n‹mÆized_co‹d
:1;

1218 
	måûöór_quÆôy
:2;

1219 
	maddªss_round
:6;

1220 
	mmax_™iso
:3;

1221 
	mchroma_key_mode
:1;

1222 
	mchroma_key_ödex
:2;

1223 
	mchroma_key_íabÀ
:1;

1224 
	m∑d0
:6;

1225 } 
	mss3
;

1229 
	#GEN7_SURFACE_RC_READ_WRITE
 (1 << 8)

	)

1230 
	#GEN7_SURFACE_TILED
 (1 << 14)

	)

1231 
	#GEN7_SURFACE_TILED_Y
 (1 << 13)

	)

1232 
	#GEN7_SURFACE_FORMAT_SHIFT
 18

	)

1233 
	#GEN7_SURFACE_TYPE_SHIFT
 29

	)

1236 
	#GEN7_SURFACE_HEIGHT_SHIFT
 16

	)

1237 
	#GEN7_SURFACE_WIDTH_SHIFT
 0

	)

1240 
	#GEN7_SURFACE_DEPTH_SHIFT
 21

	)

1241 
	#GEN7_SURFACE_PITCH_SHIFT
 0

	)

1243 
	#HSW_SWIZZLE_ZERO
 0

	)

1244 
	#HSW_SWIZZLE_ONE
 1

	)

1245 
	#HSW_SWIZZLE_RED
 4

	)

1246 
	#HSW_SWIZZLE_GREEN
 5

	)

1247 
	#HSW_SWIZZLE_BLUE
 6

	)

1248 
	#HSW_SWIZZLE_ALPHA
 7

	)

1249 
	#__HSW_SURFACE_SWIZZLE
(
r
,
g
,
b
,
a
) \

1250 ((
a
Ë<< 16 | (
b
Ë<< 19 | (
g
Ë<< 22 | (
r
Ë<< 25)

	)

1251 
	#HSW_SURFACE_SWIZZLE
(
r
,
g
,
b
,
a
) \

1252 
	`__HSW_SURFACE_SWIZZLE
(
HSW_SWIZZLE_
##
r
, HSW_SWIZZLE_##
g
, HSW_SWIZZLE_##
b
, HSW_SWIZZLE_##
a
)

	)

1256 
	#GEN7_VB0_ADDRESS_MODIFYENABLE
 (1 << 14)

	)

1260 
	#GEN7_3DPRIM_VERTEXBUFFER_ACCESS_SEQUENTIAL
 (0 << 8)

	)

1261 
	#GEN7_3DPRIM_VERTEXBUFFER_ACCESS_RANDOM
 (1 << 8)

	)

1263 
	#GEN7_3DSTATE_CLEAR_PARAMS
 
	`GEN7_3D
(3, 0, 0x04)

	)

1264 
	#GEN7_3DSTATE_DEPTH_BUFFER
 
	`GEN7_3D
(3, 0, 0x05)

	)

1265 
	#GEN7_3DSTATE_DEPTH_BUFFER_TYPE_SHIFT
 29

	)

1266 
	#GEN7_3DSTATE_DEPTH_BUFFER_FORMAT_SHIFT
 18

	)

1268 
	#GEN7_3DSTATE_DEPTH_CLEAR_VALID
 (1 << 15)

	)

1270 
	#GEN7_3DSTATE_CONSTANT_HS
 
	`GEN7_3D
(3, 0, 0x19)

	)

1271 
	#GEN7_3DSTATE_CONSTANT_DS
 
	`GEN7_3D
(3, 0, 0x1a)

	)

1273 
	#GEN7_3DSTATE_HS
 
	`GEN7_3D
(3, 0, 0x1b)

	)

1274 
	#GEN7_3DSTATE_TE
 
	`GEN7_3D
(3, 0, 0x1c)

	)

1275 
	#GEN7_3DSTATE_DS
 
	`GEN7_3D
(3, 0, 0x1d)

	)

1276 
	#GEN7_3DSTATE_STREAMOUT
 
	`GEN7_3D
(3, 0, 0x1e)

	)

1277 
	#GEN7_3DSTATE_SBE
 
	`GEN7_3D
(3, 0, 0x1f)

	)

1280 
	#GEN7_SBE_SWIZZLE_CONTROL_MODE
 (1 << 28)

	)

1281 
	#GEN7_SBE_NUM_OUTPUTS_SHIFT
 22

	)

1282 
	#GEN7_SBE_SWIZZLE_ENABLE
 (1 << 21)

	)

1283 
	#GEN7_SBE_POINT_SPRITE_LOWERLEFT
 (1 << 20)

	)

1284 
	#GEN7_SBE_URB_ENTRY_READ_LENGTH_SHIFT
 11

	)

1285 
	#GEN7_SBE_URB_ENTRY_READ_OFFSET_SHIFT
 4

	)

1287 
	#GEN7_3DSTATE_PS
 
	`GEN7_3D
(3, 0, 0x20)

	)

1290 
	#GEN7_PS_SPF_MODE
 (1 << 31)

	)

1291 
	#GEN7_PS_VECTOR_MASK_ENABLE
 (1 << 30)

	)

1292 
	#GEN7_PS_SAMPLER_COUNT_SHIFT
 27

	)

1293 
	#GEN7_PS_BINDING_TABLE_ENTRY_COUNT_SHIFT
 18

	)

1294 
	#GEN7_PS_FLOATING_POINT_MODE_IEEE_754
 (0 << 16)

	)

1295 
	#GEN7_PS_FLOATING_POINT_MODE_ALT
 (1 << 16)

	)

1298 
	#IVB_PS_MAX_THREADS_SHIFT
 24

	)

1299 
	#HSW_PS_MAX_THREADS_SHIFT
 23

	)

1300 
	#HSW_PS_SAMPLE_MASK_SHIFT
 12

	)

1301 
	#GEN7_PS_PUSH_CONSTANT_ENABLE
 (1 << 11)

	)

1302 
	#GEN7_PS_ATTRIBUTE_ENABLE
 (1 << 10)

	)

1303 
	#GEN7_PS_OMASK_TO_RENDER_TARGET
 (1 << 9)

	)

1304 
	#GEN7_PS_DUAL_SOURCE_BLEND_ENABLE
 (1 << 7)

	)

1305 
	#GEN7_PS_POSOFFSET_NONE
 (0 << 3)

	)

1306 
	#GEN7_PS_POSOFFSET_CENTROID
 (2 << 3)

	)

1307 
	#GEN7_PS_POSOFFSET_SAMPLE
 (3 << 3)

	)

1308 
	#GEN7_PS_32_DISPATCH_ENABLE
 (1 << 2)

	)

1309 
	#GEN7_PS_16_DISPATCH_ENABLE
 (1 << 1)

	)

1310 
	#GEN7_PS_8_DISPATCH_ENABLE
 (1 << 0)

	)

1312 
	#GEN7_PS_DISPATCH_START_GRF_SHIFT_0
 16

	)

1313 
	#GEN7_PS_DISPATCH_START_GRF_SHIFT_1
 8

	)

1314 
	#GEN7_PS_DISPATCH_START_GRF_SHIFT_2
 0

	)

1318 
	#GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CL
 
	`GEN7_3D
(3, 0, 0x21)

	)

1319 
	#GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_CC
 
	`GEN7_3D
(3, 0, 0x23)

	)

1321 
	#GEN7_3DSTATE_BLEND_STATE_POINTERS
 
	`GEN7_3D
(3, 0, 0x24)

	)

1322 
	#GEN7_3DSTATE_DEPTH_STENCIL_STATE_POINTERS
 
	`GEN7_3D
(3, 0, 0x25)

	)

1324 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_VS
 
	`GEN7_3D
(3, 0, 0x26)

	)

1325 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_HS
 
	`GEN7_3D
(3, 0, 0x27)

	)

1326 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_DS
 
	`GEN7_3D
(3, 0, 0x28)

	)

1327 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_GS
 
	`GEN7_3D
(3, 0, 0x29)

	)

1328 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_PS
 
	`GEN7_3D
(3, 0, 0x2a)

	)

1330 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_VS
 
	`GEN7_3D
(3, 0, 0x2b)

	)

1331 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_GS
 
	`GEN7_3D
(3, 0, 0x2e)

	)

1332 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_PS
 
	`GEN7_3D
(3, 0, 0x2f)

	)

1334 
	#GEN7_3DSTATE_URB_VS
 
	`GEN7_3D
(3, 0, 0x30)

	)

1335 
	#GEN7_3DSTATE_URB_HS
 
	`GEN7_3D
(3, 0, 0x31)

	)

1336 
	#GEN7_3DSTATE_URB_DS
 
	`GEN7_3D
(3, 0, 0x32)

	)

1337 
	#GEN7_3DSTATE_URB_GS
 
	`GEN7_3D
(3, 0, 0x33)

	)

1339 
	#GEN7_URB_ENTRY_NUMBER_SHIFT
 0

	)

1340 
	#GEN7_URB_ENTRY_SIZE_SHIFT
 16

	)

1341 
	#GEN7_URB_STARTING_ADDRESS_SHIFT
 25

	)

1343 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_VS
 
	`GEN7_3D
(3, 1, 0x12)

	)

1344 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_PS
 
	`GEN7_3D
(3, 1, 0x16)

	)

1346 
	#GEN7_PUSH_CONSTANT_BUFFER_OFFSET_SHIFT
 16

	)

1348 
	sgí7_cc_võwp‹t
 {

1349 
	mmö_dïth
;

1350 
	mmax_dïth
;

1354 
	mSAMPLER_FILTER_NEAREST
 = 0,

1355 
	mSAMPLER_FILTER_BILINEAR
,

1356 
	mFILTER_COUNT


1357 } 
	tßm∂î_fûãr_t
;

1360 
	mSAMPLER_EXTEND_NONE
 = 0,

1361 
	mSAMPLER_EXTEND_REPEAT
,

1362 
	mSAMPLER_EXTEND_PAD
,

1363 
	mSAMPLER_EXTEND_REFLECT
,

1364 
	mEXTEND_COUNT


1365 } 
	tßm∂î_exãnd_t
;

	@gen8_media.h

1 #i‚de‡
GEN8_MEDIA_H


2 
	#GEN8_MEDIA_H


	)

4 
	~<°döt.h
>

6 
	#GEN8_SURFACEFORMAT_R32G32B32A32_FLOAT
 0x000

	)

7 
	#GEN8_SURFACEFORMAT_R32G32B32A32_SINT
 0x001

	)

8 
	#GEN8_SURFACEFORMAT_R32G32B32A32_UINT
 0x002

	)

9 
	#GEN8_SURFACEFORMAT_R32G32B32A32_UNORM
 0x003

	)

10 
	#GEN8_SURFACEFORMAT_R32G32B32A32_SNORM
 0x004

	)

11 
	#GEN8_SURFACEFORMAT_R64G64_FLOAT
 0x005

	)

12 
	#GEN8_SURFACEFORMAT_R32G32B32X32_FLOAT
 0x006

	)

13 
	#GEN8_SURFACEFORMAT_R32G32B32A32_SSCALED
 0x007

	)

14 
	#GEN8_SURFACEFORMAT_R32G32B32A32_USCALED
 0x008

	)

15 
	#GEN8_SURFACEFORMAT_R32G32B32_FLOAT
 0x040

	)

16 
	#GEN8_SURFACEFORMAT_R32G32B32_SINT
 0x041

	)

17 
	#GEN8_SURFACEFORMAT_R32G32B32_UINT
 0x042

	)

18 
	#GEN8_SURFACEFORMAT_R32G32B32_UNORM
 0x043

	)

19 
	#GEN8_SURFACEFORMAT_R32G32B32_SNORM
 0x044

	)

20 
	#GEN8_SURFACEFORMAT_R32G32B32_SSCALED
 0x045

	)

21 
	#GEN8_SURFACEFORMAT_R32G32B32_USCALED
 0x046

	)

22 
	#GEN8_SURFACEFORMAT_R16G16B16A16_UNORM
 0x080

	)

23 
	#GEN8_SURFACEFORMAT_R16G16B16A16_SNORM
 0x081

	)

24 
	#GEN8_SURFACEFORMAT_R16G16B16A16_SINT
 0x082

	)

25 
	#GEN8_SURFACEFORMAT_R16G16B16A16_UINT
 0x083

	)

26 
	#GEN8_SURFACEFORMAT_R16G16B16A16_FLOAT
 0x084

	)

27 
	#GEN8_SURFACEFORMAT_R32G32_FLOAT
 0x085

	)

28 
	#GEN8_SURFACEFORMAT_R32G32_SINT
 0x086

	)

29 
	#GEN8_SURFACEFORMAT_R32G32_UINT
 0x087

	)

30 
	#GEN8_SURFACEFORMAT_R32_FLOAT_X8X24_TYPELESS
 0x088

	)

31 
	#GEN8_SURFACEFORMAT_X32_TYPELESS_G8X24_UINT
 0x089

	)

32 
	#GEN8_SURFACEFORMAT_L32A32_FLOAT
 0x08A

	)

33 
	#GEN8_SURFACEFORMAT_R32G32_UNORM
 0x08B

	)

34 
	#GEN8_SURFACEFORMAT_R32G32_SNORM
 0x08C

	)

35 
	#GEN8_SURFACEFORMAT_R64_FLOAT
 0x08D

	)

36 
	#GEN8_SURFACEFORMAT_R16G16B16X16_UNORM
 0x08E

	)

37 
	#GEN8_SURFACEFORMAT_R16G16B16X16_FLOAT
 0x08F

	)

38 
	#GEN8_SURFACEFORMAT_A32X32_FLOAT
 0x090

	)

39 
	#GEN8_SURFACEFORMAT_L32X32_FLOAT
 0x091

	)

40 
	#GEN8_SURFACEFORMAT_I32X32_FLOAT
 0x092

	)

41 
	#GEN8_SURFACEFORMAT_R16G16B16A16_SSCALED
 0x093

	)

42 
	#GEN8_SURFACEFORMAT_R16G16B16A16_USCALED
 0x094

	)

43 
	#GEN8_SURFACEFORMAT_R32G32_SSCALED
 0x095

	)

44 
	#GEN8_SURFACEFORMAT_R32G32_USCALED
 0x096

	)

45 
	#GEN8_SURFACEFORMAT_B8G8R8A8_UNORM
 0x0C0

	)

46 
	#GEN8_SURFACEFORMAT_B8G8R8A8_UNORM_SRGB
 0x0C1

	)

47 
	#GEN8_SURFACEFORMAT_R10G10B10A2_UNORM
 0x0C2

	)

48 
	#GEN8_SURFACEFORMAT_R10G10B10A2_UNORM_SRGB
 0x0C3

	)

49 
	#GEN8_SURFACEFORMAT_R10G10B10A2_UINT
 0x0C4

	)

50 
	#GEN8_SURFACEFORMAT_R10G10B10_SNORM_A2_UNORM
 0x0C5

	)

51 
	#GEN8_SURFACEFORMAT_R8G8B8A8_UNORM
 0x0C7

	)

52 
	#GEN8_SURFACEFORMAT_R8G8B8A8_UNORM_SRGB
 0x0C8

	)

53 
	#GEN8_SURFACEFORMAT_R8G8B8A8_SNORM
 0x0C9

	)

54 
	#GEN8_SURFACEFORMAT_R8G8B8A8_SINT
 0x0CA

	)

55 
	#GEN8_SURFACEFORMAT_R8G8B8A8_UINT
 0x0CB

	)

56 
	#GEN8_SURFACEFORMAT_R16G16_UNORM
 0x0CC

	)

57 
	#GEN8_SURFACEFORMAT_R16G16_SNORM
 0x0CD

	)

58 
	#GEN8_SURFACEFORMAT_R16G16_SINT
 0x0CE

	)

59 
	#GEN8_SURFACEFORMAT_R16G16_UINT
 0x0CF

	)

60 
	#GEN8_SURFACEFORMAT_R16G16_FLOAT
 0x0D0

	)

61 
	#GEN8_SURFACEFORMAT_B10G10R10A2_UNORM
 0x0D1

	)

62 
	#GEN8_SURFACEFORMAT_B10G10R10A2_UNORM_SRGB
 0x0D2

	)

63 
	#GEN8_SURFACEFORMAT_R11G11B10_FLOAT
 0x0D3

	)

64 
	#GEN8_SURFACEFORMAT_R32_SINT
 0x0D6

	)

65 
	#GEN8_SURFACEFORMAT_R32_UINT
 0x0D7

	)

66 
	#GEN8_SURFACEFORMAT_R32_FLOAT
 0x0D8

	)

67 
	#GEN8_SURFACEFORMAT_R24_UNORM_X8_TYPELESS
 0x0D9

	)

68 
	#GEN8_SURFACEFORMAT_X24_TYPELESS_G8_UINT
 0x0DA

	)

69 
	#GEN8_SURFACEFORMAT_L16A16_UNORM
 0x0DF

	)

70 
	#GEN8_SURFACEFORMAT_I24X8_UNORM
 0x0E0

	)

71 
	#GEN8_SURFACEFORMAT_L24X8_UNORM
 0x0E1

	)

72 
	#GEN8_SURFACEFORMAT_A24X8_UNORM
 0x0E2

	)

73 
	#GEN8_SURFACEFORMAT_I32_FLOAT
 0x0E3

	)

74 
	#GEN8_SURFACEFORMAT_L32_FLOAT
 0x0E4

	)

75 
	#GEN8_SURFACEFORMAT_A32_FLOAT
 0x0E5

	)

76 
	#GEN8_SURFACEFORMAT_B8G8R8X8_UNORM
 0x0E9

	)

77 
	#GEN8_SURFACEFORMAT_B8G8R8X8_UNORM_SRGB
 0x0EA

	)

78 
	#GEN8_SURFACEFORMAT_R8G8B8X8_UNORM
 0x0EB

	)

79 
	#GEN8_SURFACEFORMAT_R8G8B8X8_UNORM_SRGB
 0x0EC

	)

80 
	#GEN8_SURFACEFORMAT_R9G9B9E5_SHAREDEXP
 0x0ED

	)

81 
	#GEN8_SURFACEFORMAT_B10G10R10X2_UNORM
 0x0EE

	)

82 
	#GEN8_SURFACEFORMAT_L16A16_FLOAT
 0x0F0

	)

83 
	#GEN8_SURFACEFORMAT_R32_UNORM
 0x0F1

	)

84 
	#GEN8_SURFACEFORMAT_R32_SNORM
 0x0F2

	)

85 
	#GEN8_SURFACEFORMAT_R10G10B10X2_USCALED
 0x0F3

	)

86 
	#GEN8_SURFACEFORMAT_R8G8B8A8_SSCALED
 0x0F4

	)

87 
	#GEN8_SURFACEFORMAT_R8G8B8A8_USCALED
 0x0F5

	)

88 
	#GEN8_SURFACEFORMAT_R16G16_SSCALED
 0x0F6

	)

89 
	#GEN8_SURFACEFORMAT_R16G16_USCALED
 0x0F7

	)

90 
	#GEN8_SURFACEFORMAT_R32_SSCALED
 0x0F8

	)

91 
	#GEN8_SURFACEFORMAT_R32_USCALED
 0x0F9

	)

92 
	#GEN8_SURFACEFORMAT_B5G6R5_UNORM
 0x100

	)

93 
	#GEN8_SURFACEFORMAT_B5G6R5_UNORM_SRGB
 0x101

	)

94 
	#GEN8_SURFACEFORMAT_B5G5R5A1_UNORM
 0x102

	)

95 
	#GEN8_SURFACEFORMAT_B5G5R5A1_UNORM_SRGB
 0x103

	)

96 
	#GEN8_SURFACEFORMAT_B4G4R4A4_UNORM
 0x104

	)

97 
	#GEN8_SURFACEFORMAT_B4G4R4A4_UNORM_SRGB
 0x105

	)

98 
	#GEN8_SURFACEFORMAT_R8G8_UNORM
 0x106

	)

99 
	#GEN8_SURFACEFORMAT_R8G8_SNORM
 0x107

	)

100 
	#GEN8_SURFACEFORMAT_R8G8_SINT
 0x108

	)

101 
	#GEN8_SURFACEFORMAT_R8G8_UINT
 0x109

	)

102 
	#GEN8_SURFACEFORMAT_R16_UNORM
 0x10A

	)

103 
	#GEN8_SURFACEFORMAT_R16_SNORM
 0x10B

	)

104 
	#GEN8_SURFACEFORMAT_R16_SINT
 0x10C

	)

105 
	#GEN8_SURFACEFORMAT_R16_UINT
 0x10D

	)

106 
	#GEN8_SURFACEFORMAT_R16_FLOAT
 0x10E

	)

107 
	#GEN8_SURFACEFORMAT_I16_UNORM
 0x111

	)

108 
	#GEN8_SURFACEFORMAT_L16_UNORM
 0x112

	)

109 
	#GEN8_SURFACEFORMAT_A16_UNORM
 0x113

	)

110 
	#GEN8_SURFACEFORMAT_L8A8_UNORM
 0x114

	)

111 
	#GEN8_SURFACEFORMAT_I16_FLOAT
 0x115

	)

112 
	#GEN8_SURFACEFORMAT_L16_FLOAT
 0x116

	)

113 
	#GEN8_SURFACEFORMAT_A16_FLOAT
 0x117

	)

114 
	#GEN8_SURFACEFORMAT_R5G5_SNORM_B6_UNORM
 0x119

	)

115 
	#GEN8_SURFACEFORMAT_B5G5R5X1_UNORM
 0x11A

	)

116 
	#GEN8_SURFACEFORMAT_B5G5R5X1_UNORM_SRGB
 0x11B

	)

117 
	#GEN8_SURFACEFORMAT_R8G8_SSCALED
 0x11C

	)

118 
	#GEN8_SURFACEFORMAT_R8G8_USCALED
 0x11D

	)

119 
	#GEN8_SURFACEFORMAT_R16_SSCALED
 0x11E

	)

120 
	#GEN8_SURFACEFORMAT_R16_USCALED
 0x11F

	)

121 
	#GEN8_SURFACEFORMAT_R8_UNORM
 0x140

	)

122 
	#GEN8_SURFACEFORMAT_R8_SNORM
 0x141

	)

123 
	#GEN8_SURFACEFORMAT_R8_SINT
 0x142

	)

124 
	#GEN8_SURFACEFORMAT_R8_UINT
 0x143

	)

125 
	#GEN8_SURFACEFORMAT_A8_UNORM
 0x144

	)

126 
	#GEN8_SURFACEFORMAT_I8_UNORM
 0x145

	)

127 
	#GEN8_SURFACEFORMAT_L8_UNORM
 0x146

	)

128 
	#GEN8_SURFACEFORMAT_P4A4_UNORM
 0x147

	)

129 
	#GEN8_SURFACEFORMAT_A4P4_UNORM
 0x148

	)

130 
	#GEN8_SURFACEFORMAT_R8_SSCALED
 0x149

	)

131 
	#GEN8_SURFACEFORMAT_R8_USCALED
 0x14A

	)

132 
	#GEN8_SURFACEFORMAT_R1_UINT
 0x181

	)

133 
	#GEN8_SURFACEFORMAT_YCRCB_NORMAL
 0x182

	)

134 
	#GEN8_SURFACEFORMAT_YCRCB_SWAPUVY
 0x183

	)

135 
	#GEN8_SURFACEFORMAT_BC1_UNORM
 0x186

	)

136 
	#GEN8_SURFACEFORMAT_BC2_UNORM
 0x187

	)

137 
	#GEN8_SURFACEFORMAT_BC3_UNORM
 0x188

	)

138 
	#GEN8_SURFACEFORMAT_BC4_UNORM
 0x189

	)

139 
	#GEN8_SURFACEFORMAT_BC5_UNORM
 0x18A

	)

140 
	#GEN8_SURFACEFORMAT_BC1_UNORM_SRGB
 0x18B

	)

141 
	#GEN8_SURFACEFORMAT_BC2_UNORM_SRGB
 0x18C

	)

142 
	#GEN8_SURFACEFORMAT_BC3_UNORM_SRGB
 0x18D

	)

143 
	#GEN8_SURFACEFORMAT_MONO8
 0x18E

	)

144 
	#GEN8_SURFACEFORMAT_YCRCB_SWAPUV
 0x18F

	)

145 
	#GEN8_SURFACEFORMAT_YCRCB_SWAPY
 0x190

	)

146 
	#GEN8_SURFACEFORMAT_DXT1_RGB
 0x191

	)

147 
	#GEN8_SURFACEFORMAT_FXT1
 0x192

	)

148 
	#GEN8_SURFACEFORMAT_R8G8B8_UNORM
 0x193

	)

149 
	#GEN8_SURFACEFORMAT_R8G8B8_SNORM
 0x194

	)

150 
	#GEN8_SURFACEFORMAT_R8G8B8_SSCALED
 0x195

	)

151 
	#GEN8_SURFACEFORMAT_R8G8B8_USCALED
 0x196

	)

152 
	#GEN8_SURFACEFORMAT_R64G64B64A64_FLOAT
 0x197

	)

153 
	#GEN8_SURFACEFORMAT_R64G64B64_FLOAT
 0x198

	)

154 
	#GEN8_SURFACEFORMAT_BC4_SNORM
 0x199

	)

155 
	#GEN8_SURFACEFORMAT_BC5_SNORM
 0x19A

	)

156 
	#GEN8_SURFACEFORMAT_R16G16B16_UNORM
 0x19C

	)

157 
	#GEN8_SURFACEFORMAT_R16G16B16_SNORM
 0x19D

	)

158 
	#GEN8_SURFACEFORMAT_R16G16B16_SSCALED
 0x19E

	)

159 
	#GEN8_SURFACEFORMAT_R16G16B16_USCALED
 0x19F

	)

161 
	#GEN8_SURFACERETURNFORMAT_FLOAT32
 0

	)

162 
	#GEN8_SURFACERETURNFORMAT_S1
 1

	)

164 
	#GEN8_SURFACE_1D
 0

	)

165 
	#GEN8_SURFACE_2D
 1

	)

166 
	#GEN8_SURFACE_3D
 2

	)

167 
	#GEN8_SURFACE_CUBE
 3

	)

168 
	#GEN8_SURFACE_BUFFER
 4

	)

169 
	#GEN8_SURFACE_NULL
 7

	)

171 
	#GEN8_FLOATING_POINT_IEEE_754
 0

	)

172 
	#GEN8_FLOATING_POINT_NON_IEEE_754
 1

	)

174 
	#GFXPIPE
(
Pùñöe
,
Opcode
,
Sub›code
) ((3 << 29) | \

175 ((
Pùñöe
) << 27) | \

176 ((
Opcode
) << 24) | \

177 ((
Sub›code
Ë<< 16))

	)

179 
	#GEN8_PIPELINE_SELECT
 
	`GFXPIPE
(1, 1, 4)

	)

180 
	#PIPELINE_SELECT_3D
 (0 << 0)

	)

181 
	#PIPELINE_SELECT_MEDIA
 (1 << 0)

	)

183 
	#GEN8_STATE_BASE_ADDRESS
 
	`GFXPIPE
(0, 1, 1)

	)

184 
	#BASE_ADDRESS_MODIFY
 (1 << 0)

	)

186 
	#GEN8_MEDIA_VFE_STATE
 
	`GFXPIPE
(2, 0, 0)

	)

187 
	#GEN8_MEDIA_CURBE_LOAD
 
	`GFXPIPE
(2, 0, 1)

	)

188 
	#GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 
	`GFXPIPE
(2, 0, 2)

	)

189 
	#GEN8_MEDIA_STATE_FLUSH
 
	`GFXPIPE
(2, 0, 4)

	)

190 
	#GEN8_MEDIA_OBJECT
 
	`GFXPIPE
(2, 1, 0)

	)

192 
	sgí8_öãrÁ˚_des¸ùt‹_d©a


195 
uöt32_t
 
	m∑d0
:6;

196 
uöt32_t
 
	mkî√l_°¨t_poöãr
:26;

197 } 
	mdesc0
;

200 
uöt32_t
 
	mkî√l_°¨t_poöãr_high
:16;

201 
uöt32_t
 
	m∑d0
:16;

202 } 
	mdesc1
;

205 
uöt32_t
 
	m∑d0
:7;

206 
uöt32_t
 
	mso·w¨e_ex˚±i⁄_íabÀ
:1;

207 
uöt32_t
 
	m∑d1
:3;

208 
uöt32_t
 
	mmask°ack_ex˚±i⁄_íabÀ
:1;

209 
uöt32_t
 
	m∑d2
:1;

210 
uöt32_t
 
	mûÀgÆ_›code_ex˚±i⁄_íabÀ
:1;

211 
uöt32_t
 
	m∑d3
:2;

212 
uöt32_t
 
	mÊﬂtög_poöt_mode
:1;

213 
uöt32_t
 
	mthªad_¥i‹ôy
:1;

214 
uöt32_t
 
	msögÀ_¥ogøm_Êow
:1;

215 
uöt32_t
 
	mdí‹m_mode
:1;

216 
uöt32_t
 
	m∑d4
:12;

217 } 
	mdesc2
;

220 
uöt32_t
 
	m∑d0
:2;

221 
uöt32_t
 
	mßm∂î_cou¡
:3;

222 
uöt32_t
 
	mßm∂î_°©e_poöãr
:27;

223 } 
	mdesc3
;

226 
uöt32_t
 
	mbödög_èbÀ_íåy_cou¡
:5;

227 
uöt32_t
 
	mbödög_èbÀ_poöãr
:11;

228 
uöt32_t
 
	m∑d0
: 16;

229 } 
	mdesc4
;

232 
uöt32_t
 
	mc⁄°™t_urb_íåy_ªad_off£t
:16;

233 
uöt32_t
 
	mc⁄°™t_urb_íåy_ªad_Àngth
:16;

234 } 
	mdesc5
;

237 
uöt32_t
 
	mnum_thªads_ö_tg
:10;

238 
uöt32_t
 
	m∑d0
:5;

239 
uöt32_t
 
	mglobÆ_b¨rõr_íabÀ
:1;

240 
uöt32_t
 
	msh¨ed_loˇl_mem‹y_size
:5;

241 
uöt32_t
 
	mb¨rõr_íabÀ
:1;

242 
uöt32_t
 
	mroundög_mode
:2;

243 
uöt32_t
 
	m∑d1
:8;

244 } 
	mdesc6
;

247 
uöt32_t
 
	m¸oss_thªad_c⁄°™t_d©a_ªad_Àngth
:8;

248 
uöt32_t
 
	m∑d0
:24;

249 } 
	mdesc7
;

252 
	sgí8_surÁ˚_°©e


255 
uöt32_t
 
	mcube_pos_z
:1;

256 
uöt32_t
 
	mcube_√g_z
:1;

257 
uöt32_t
 
	mcube_pos_y
:1;

258 
uöt32_t
 
	mcube_√g_y
:1;

259 
uöt32_t
 
	mcube_pos_x
:1;

260 
uöt32_t
 
	mcube_√g_x
:1;

261 
uöt32_t
 
	mmedü_bound¨y_pixñ_mode
:2;

262 
uöt32_t
 
	mªndî_ˇche_ªad_wrôe
:1;

263 
uöt32_t
 
	mßm∂î_l2_by∑ss_dißbÀ
:1;

264 
uöt32_t
 
	mvît_löe_°ride_ofs
:1;

265 
uöt32_t
 
	mvît_löe_°ride
:1;

266 
uöt32_t
 
	mtûed_mode
:2;

267 
uöt32_t
 
	mh‹iz⁄èl_Æignmít
:2;

268 
uöt32_t
 
	mvîtiˇl_Æignmít
:2;

269 
uöt32_t
 
	msurÁ˚_f‹m©
:9;

270 
uöt32_t
 
	m∑d0
:1;

271 
uöt32_t
 
	mis_¨øy
:1;

272 
uöt32_t
 
	msurÁ˚_ty≥
:3;

273 } 
	mss0
;

276 
uöt32_t
 
	mqpôch
:15;

277 
uöt32_t
 
	m∑d1
:4;

278 
uöt32_t
 
	mba£_mù_Àvñ
:5;

279 
uöt32_t
 
	mmem‹y_obje˘_c⁄åﬁ
:7;

280 
uöt32_t
 
	m∑d0
:1;

281 } 
	mss1
;

284 
uöt32_t
 
	mwidth
:14;

285 
uöt32_t
 
	m∑d1
:2;

286 
uöt32_t
 
	mheight
:14;

287 
uöt32_t
 
	m∑d0
:2;

288 } 
	mss2
;

291 
uöt32_t
 
	mpôch
:18;

292 
uöt32_t
 
	m∑d
:3;

293 
uöt32_t
 
	mdïth
:11;

294 } 
	mss3
;

297 
uöt32_t
 
	mmu…ißm∂e_posôi⁄_∑Àâe_ödex
:3;

298 
uöt32_t
 
	mnum_mu…ißm∂es
:3;

299 
uöt32_t
 
	mmu…ißm∂ed_surÁ˚_°‹age_f‹m©
:1;

300 
uöt32_t
 
	mªndî_èrgë_võw_exã¡
:11;

301 
uöt32_t
 
	mmö_¨øy_ñt
:11;

302 
uöt32_t
 
	mrŸ©i⁄
:2;

303 
uöt32_t
 
	mf‹˚_ncmp_ªdu˚_ty≥
:1;

304 } 
	mss4
;

307 
uöt32_t
 
	mmù_cou¡
:4;

308 
uöt32_t
 
	mmö_lod
:4;

309 
uöt32_t
 
	m∑d3
:6;

310 
uöt32_t
 
	mcohîícy_ty≥
:1;

311 
uöt32_t
 
	m∑d2
:5;

312 
uöt32_t
 
	mewa_dißbÀ_f‹_cube
:1;

313 
uöt32_t
 
	my_off£t
:3;

314 
uöt32_t
 
	m∑d0
:1;

315 
uöt32_t
 
	mx_off£t
:7;

316 } 
	mss5
;

319 
uöt32_t
 
	m∑d
;

320 } 
	mss6
;

323 
uöt32_t
 
	mªsour˚_mö_lod
:12;

326 
uöt32_t
 
	m∑d0
:4;

327 
uöt32_t
 
	mshadî_ch™ñ_£À˘_a
:3;

328 
uöt32_t
 
	mshadî_ch™ñ_£À˘_b
:3;

329 
uöt32_t
 
	mshadî_ch™ñ_£À˘_g
:3;

330 
uöt32_t
 
	mshadî_ch™ñ_£À˘_r
:3;

332 
uöt32_t
 
	mÆpha_˛ór_cﬁ‹
:1;

333 
uöt32_t
 
	mblue_˛ór_cﬁ‹
:1;

334 
uöt32_t
 
	mgªí_˛ór_cﬁ‹
:1;

335 
uöt32_t
 
	mªd_˛ór_cﬁ‹
:1;

336 } 
	mss7
;

339 
uöt32_t
 
	mba£_addr
;

340 } 
	mss8
;

343 
uöt32_t
 
	mba£_addr_hi
:16;

344 
uöt32_t
 
	m∑d0
:16;

345 } 
	mss9
;

348 
uöt32_t
 
	m∑d0
:12;

349 
uöt32_t
 
	maux_ba£_addr
:20;

350 } 
	mss10
;

353 
uöt32_t
 
	maux_ba£_addr_hi
:16;

354 
uöt32_t
 
	m∑d
:16;

355 } 
	mss11
;

358 
uöt32_t
 
	mhiz_dïth_˛ór_vÆue
;

359 } 
	mss12
;

362 
uöt32_t
 
	mª£rved
;

363 } 
	mss13
;

366 
uöt32_t
 
	mª£rved
;

367 } 
	mss14
;

370 
uöt32_t
 
	mª£rved
;

371 } 
	mss15
;

375 
	#GEN9_PIPELINE_SELECTION_MASK
 (3 << 8)

	)

380 
	#GEN9_FORCE_MEDIA_AWAKE_DISABLE
 (0 << 5)

	)

381 
	#GEN9_FORCE_MEDIA_AWAKE_ENABLE
 (1 << 5)

	)

382 
	#GEN9_FORCE_MEDIA_AWAKE_MASK
 (1 << 13)

	)

384 
	#GEN9_SAMPLER_DOP_GATE_DISABLE
 (0 << 4)

	)

385 
	#GEN9_SAMPLER_DOP_GATE_ENABLE
 (1 << 4)

	)

386 
	#GEN9_SAMPLER_DOP_GATE_MASK
 (1 << 12)

	)

	@gen8_render.h

1 #i‚de‡
GEN8_RENDER_H


2 
	#GEN8_RENDER_H


	)

4 
	~"gí6_ªndî.h
"

6 
	#GEN7_3DSTATE_URB_VS
 (0x7830 << 16)

	)

7 
	#GEN7_3DSTATE_URB_HS
 (0x7831 << 16)

	)

8 
	#GEN7_3DSTATE_URB_DS
 (0x7832 << 16)

	)

9 
	#GEN7_3DSTATE_URB_GS
 (0x7833 << 16)

	)

11 
	#GEN7_WM_LEGACY_DIAMOND_LINE_RASTERIZATION
 (1 << 26)

	)

13 
	#GEN6_3DSTATE_SCISSOR_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0xf)

	)

14 
	#GEN7_3DSTATE_CLEAR_PARAMS
 
	`GEN6_3D
(3, 0, 0x04)

	)

15 
	#GEN7_3DSTATE_DEPTH_BUFFER
 
	`GEN6_3D
(3, 0, 0x05)

	)

16 
	#GEN7_3DSTATE_STENCIL_BUFFER
 
	`GEN6_3D
(3, 0, 0x06)

	)

17 
	#GEN7_3DSTATE_HIER_DEPTH_BUFFER
 
	`GEN6_3D
(3, 0, 0x07)

	)

18 
	#GEN8_3DSTATE_MULTISAMPLE
 
	`GEN6_3D
(3, 0, 0x0d)

	)

19 
	#GEN8_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 (0 << 4)

	)

20 
	#GEN8_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_UPPER_LEFT
 (1 << 4)

	)

21 
	#GEN8_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
 (0 << 1)

	)

22 
	#GEN8_3DSTATE_MULTISAMPLE_NUMSAMPLES_2
 (1 << 1)

	)

23 
	#GEN8_3DSTATE_MULTISAMPLE_NUMSAMPLES_4
 (2 << 1)

	)

24 
	#GEN8_3DSTATE_MULTISAMPLE_NUMSAMPLES_8
 (3 << 1)

	)

25 
	#GEN9_3DSTATE_MULTISAMPLE_NUMSAMPLES_16
 (4 << 1)

	)

27 
	#GEN8_3DSTATE_WM_HZ_OP
 
	`GEN6_3D
(3, 0, 0x52)

	)

29 
	#GEN8_3DSTATE_VF_INSTANCING
 
	`GEN6_3D
(3, 0, 0x49)

	)

30 
	#GEN7_3DSTATE_GS
 
	`GEN6_3D
(3, 0, 0x11)

	)

31 
	#GEN7_3DSTATE_CONSTANT_GS
 
	`GEN6_3D
(3, 0, 0x16)

	)

32 
	#GEN7_3DSTATE_CONSTANT_HS
 
	`GEN6_3D
(3, 0, 0x19)

	)

33 
	#GEN7_3DSTATE_CONSTANT_DS
 
	`GEN6_3D
(3, 0, 0x1a)

	)

34 
	#GEN7_3DSTATE_CONSTANT_PS
 
	`GEN6_3D
(3, 0, 0x17)

	)

35 
	#GEN7_3DSTATE_HS
 
	`GEN6_3D
(3, 0, 0x1b)

	)

36 
	#GEN7_3DSTATE_TE
 
	`GEN6_3D
(3, 0, 0x1c)

	)

37 
	#GEN7_3DSTATE_DS
 
	`GEN6_3D
(3, 0, 0x1d)

	)

38 
	#GEN7_3DSTATE_STREAMOUT
 
	`GEN6_3D
(3, 0, 0x1e)

	)

39 
	#GEN7_3DSTATE_SBE
 
	`GEN6_3D
(3, 0, 0x1f)

	)

40 
	#GEN8_SBE_FORCE_URB_ENTRY_READ_LENGTH
 (1 << 29)

	)

41 
	#GEN8_SBE_FORCE_URB_ENTRY_READ_OFFSET
 (1 << 28)

	)

42 
	#GEN7_SBE_NUM_OUTPUTS_SHIFT
 22

	)

43 
	#GEN7_SBE_URB_ENTRY_READ_LENGTH_SHIFT
 11

	)

44 
	#GEN8_SBE_URB_ENTRY_READ_OFFSET_SHIFT
 5

	)

45 
	#GEN8_3DSTATE_SBE_SWIZ
 
	`GEN6_3D
(3, 0, 0x51)

	)

46 
	#GEN8_3DSTATE_RASTER
 
	`GEN6_3D
(3, 0, 0x50)

	)

47 
	#GEN8_RASTER_FRONT_WINDING_CCW
 (1 << 21)

	)

48 
	#GEN8_RASTER_CULL_NONE
 (1 << 16)

	)

49 
	#GEN7_3DSTATE_PS
 
	`GEN6_3D
(3, 0, 0x20)

	)

50 
	#GEN7_PS_SPF_MODE
 (1 << 31)

	)

52 
	#GEN7_SF_POINT_WIDTH_FROM_SOURCE
 (1 << 11)

	)

54 
	#GEN7_VS_FLOATING_POINT_MODE_ALTERNATE
 (1 << 16)

	)

56 
	#GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CLIP
 \

57 
	`GEN6_3D
(3, 0, 0x21)

	)

58 
	#GEN8_3DSTATE_PS_BLEND
 
	`GEN6_3D
(3, 0, 0x4d)

	)

59 
	#GEN8_PS_BLEND_HAS_WRITEABLE_RT
 (1 << 30)

	)

60 
	#GEN8_3DSTATE_WM_DEPTH_STENCIL
 
	`GEN6_3D
(3, 0, 0x4e)

	)

61 
	#GEN8_3DSTATE_PS_EXTRA
 
	`GEN6_3D
(3,0, 0x4f)

	)

62 
	#GEN8_PSX_PIXEL_SHADER_VALID
 (1 << 31)

	)

63 
	#GEN8_PSX_ATTRIBUTE_ENABLE
 (1 << 8)

	)

65 
	#GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_CC
 
	`GEN6_3D
(3, 0, 0x23)

	)

66 
	#GEN7_3DSTATE_BLEND_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x24)

	)

67 
	#GEN7_3DSTATE_DS_STATE_POINTERS
 
	`GEN6_3D
(3, 0, 0x25)

	)

68 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_VS
 
	`GEN6_3D
(3, 0, 0x26)

	)

69 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_HS
 
	`GEN6_3D
(3, 0, 0x27)

	)

70 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_DS
 
	`GEN6_3D
(3, 0, 0x28)

	)

71 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_GS
 
	`GEN6_3D
(3, 0, 0x29)

	)

72 
	#GEN7_3DSTATE_BINDING_TABLE_POINTERS_PS
 
	`GEN6_3D
(3, 0, 0x2a)

	)

74 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_VS
 
	`GEN6_3D
(3, 0, 0x2b)

	)

75 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_HS
 
	`GEN6_3D
(3, 0, 0x2c)

	)

76 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_DS
 
	`GEN6_3D
(3, 0, 0x2d)

	)

77 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_GS
 
	`GEN6_3D
(3, 0, 0x2e)

	)

78 
	#GEN7_3DSTATE_SAMPLER_STATE_POINTERS_PS
 
	`GEN6_3D
(3, 0, 0x2f)

	)

80 
	#GEN8_3DSTATE_VF
 
	`GEN6_3D
(3, 0, 0x0c)

	)

81 
	#GEN8_3DSTATE_VF_TOPOLOGY
 
	`GEN6_3D
(3, 0, 0x4b)

	)

83 
	#GEN8_3DSTATE_BIND_TABLE_POOL_ALLOC
 
	`GEN6_3D
(3, 1, 0x19)

	)

84 
	#GEN8_3DSTATE_GATHER_POOL_ALLOC
 
	`GEN6_3D
(3, 1, 0x1a)

	)

85 
	#GEN8_3DSTATE_DX9_CONSTANT_BUFFER_POOL_ALLOC
 
	`GEN6_3D
(3, 1, 0x1b)

	)

86 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_VS
 
	`GEN6_3D
(3, 1, 0x12)

	)

87 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_HS
 
	`GEN6_3D
(3, 1, 0x13)

	)

88 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_DS
 
	`GEN6_3D
(3, 1, 0x14)

	)

89 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_GS
 
	`GEN6_3D
(3, 1, 0x15)

	)

90 
	#GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_PS
 
	`GEN6_3D
(3, 1, 0x16)

	)

92 
	#GEN8_3DSTATE_VF_SGVS
 
	`GEN6_3D
(3, 0, 0x4a)

	)

93 
	#GEN8_3DSTATE_SO_DECL_LIST
 
	`GEN6_3D
(3, 1, 0x17)

	)

94 
	#GEN8_3DSTATE_SO_BUFFER
 
	`GEN6_3D
(3, 1, 0x18)

	)

95 
	#GEN8_3DSTATE_POLY_STIPPLE_OFFSET
 
	`GEN6_3D
(3, 1, 0x06)

	)

96 
	#GEN8_3DSTATE_POLY_STIPPLE_PATTERN
 
	`GEN6_3D
(3, 1, 0x07)

	)

97 
	#GEN8_3DSTATE_SAMPLER_PALETTE_LOAD0
 
	`GEN6_3D
(3, 1, 0x02)

	)

98 
	#GEN8_3DSTATE_SAMPLER_PALETTE_LOAD1
 
	`GEN6_3D
(3, 1, 0x0c)

	)

101 
	#GEN7_VB0_BUFFER_ADDR_MOD_EN
 (1 << 14)

	)

102 
	#GEN7_3DSTATE_PS_PERSPECTIVE_PIXEL_BARYCENTRIC
 (1 << 11)

	)

103 
	#GEN7_3DSTATE_PS_ATTRIBUTE_ENABLED
 (1 << 10)

	)

106 
	#GEN8_3DSTATE_PS_MAX_THREADS_SHIFT
 23

	)

109 
	#GEN8_STATE_SIZE_PAGES
(
x
Ë((xË<< 12)

	)

112 
	sgí8_surÁ˚_°©e


115 
uöt32_t
 
	mcube_pos_z
:1;

116 
uöt32_t
 
	mcube_√g_z
:1;

117 
uöt32_t
 
	mcube_pos_y
:1;

118 
uöt32_t
 
	mcube_√g_y
:1;

119 
uöt32_t
 
	mcube_pos_x
:1;

120 
uöt32_t
 
	mcube_√g_x
:1;

121 
uöt32_t
 
	mmedü_bound¨y_pixñ_mode
:2;

122 
uöt32_t
 
	mªndî_ˇche_ªad_wrôe
:1;

123 
uöt32_t
 
	msm≠Àr_l2_by∑ss
:1;

124 
uöt32_t
 
	mvît_löe_°ride_ofs
:1;

125 
uöt32_t
 
	mvît_löe_°ride
:1;

126 
uöt32_t
 
	mtûed_mode
:2;

127 
uöt32_t
 
	mh‹iz⁄èl_Æignmít
:2;

128 
uöt32_t
 
	mvîtiˇl_Æignmít
:2;

129 
uöt32_t
 
	msurÁ˚_f‹m©
:9;

130 
uöt32_t
 
	m∑d0
:1;

131 
uöt32_t
 
	mis_¨øy
:1;

132 
uöt32_t
 
	msurÁ˚_ty≥
:3;

133 } 
	mss0
;

136 
uöt32_t
 
	mqpôch
:15;

137 
uöt32_t
 
	m∑d1
:4;

138 
uöt32_t
 
	mba£_mù_Àvñ
:5;

139 
uöt32_t
 
	mmem‹y_obje˘_c⁄åﬁ
:7;

140 
uöt32_t
 
	m∑d0
:1;

141 } 
	mss1
;

144 
uöt32_t
 
	mwidth
:14;

145 
uöt32_t
 
	m∑d1
:2;

146 
uöt32_t
 
	mheight
:14;

147 
uöt32_t
 
	m∑d0
:2;

148 } 
	mss2
;

151 
uöt32_t
 
	mpôch
:18;

152 
uöt32_t
 
	m∑d
:3;

153 
uöt32_t
 
	mdïth
:11;

154 } 
	mss3
;

157 
uöt32_t
 
	mmöimum_¨øy_ñemít
:27;

158 
uöt32_t
 
	m∑d0
:5;

159 } 
	mss4
;

162 
uöt32_t
 
	mmù_cou¡
:4;

163 
uöt32_t
 
	mmö_lod
:4;

164 
uöt32_t
 
	m∑d3
:6;

165 
uöt32_t
 
	mcohîícy_ty≥
:1;

166 
uöt32_t
 
	m∑d2
:5;

167 
uöt32_t
 
	mewa_dißbÀ_f‹_cube
:1;

168 
uöt32_t
 
	my_off£t
:3;

169 
uöt32_t
 
	m∑d0
:1;

170 
uöt32_t
 
	mx_off£t
:7;

171 } 
	mss5
;

174 
uöt32_t
 
	m∑d
;

175 } 
	mss6
;

178 
uöt32_t
 
	mªsour˚_mö_lod
:12;

181 
uöt32_t
 
	m∑d0
:4;

182 
uöt32_t
 
	mshadî_ch™ñ_£À˘_a
:3;

183 
uöt32_t
 
	mshadî_ch™ñ_£À˘_b
:3;

184 
uöt32_t
 
	mshadî_ch™ñ_£À˘_g
:3;

185 
uöt32_t
 
	mshadî_ch™ñ_£À˘_r
:3;

187 
uöt32_t
 
	mÆpha_˛ór_cﬁ‹
:1;

188 
uöt32_t
 
	mblue_˛ór_cﬁ‹
:1;

189 
uöt32_t
 
	mgªí_˛ór_cﬁ‹
:1;

190 
uöt32_t
 
	mªd_˛ór_cﬁ‹
:1;

191 } 
	mss7
;

194 
uöt32_t
 
	mba£_addr
;

195 } 
	mss8
;

198 
uöt32_t
 
	mba£_addr_hi
:16;

199 
uöt32_t
 
	m∑d0
:16;

200 } 
	mss9
;

203 
uöt32_t
 
	m∑d0
:12;

204 
uöt32_t
 
	maux_ba£_addr
:20;

205 } 
	mss10
;

208 
uöt32_t
 
	maux_ba£_addr_hi
:16;

209 
uöt32_t
 
	m∑d
:16;

210 } 
	mss11
;

213 
uöt32_t
 
	mhiz_dïth_˛ór_vÆue
;

214 } 
	mss12
;

217 
uöt32_t
 
	mª£rved
;

218 } 
	mss13
;

221 
uöt32_t
 
	mª£rved
;

222 } 
	mss14
;

225 
uöt32_t
 
	mª£rved
;

226 } 
	mss15
;

229 
	sgí8_ßm∂î_°©e


233 
uöt32_t
 
	m™iso_Æg‹ôhm
:1;

234 
uöt32_t
 
	mlod_büs
:13;

235 
uöt32_t
 
	mmö_fûãr
:3;

236 
uöt32_t
 
	mmag_fûãr
:3;

237 
uöt32_t
 
	mmù_fûãr
:2;

238 
uöt32_t
 
	mba£_Àvñ
:5;

239 
uöt32_t
 
	mlod_¥e˛amp
:2;

240 
uöt32_t
 
	mdeÁu…_cﬁ‹_mode
:1;

241 
uöt32_t
 
	m∑d0
:1;

242 
uöt32_t
 
	mdißbÀ
:1;

243 } 
	mss0
;

247 
uöt32_t
 
	mcube_c⁄åﬁ_mode
:1;

248 
uöt32_t
 
	mshadow_fun˘i⁄
:3;

249 
uöt32_t
 
	mchromakey_mode
:1;

250 
uöt32_t
 
	mchromakey_ödex
:2;

251 
uöt32_t
 
	mchromakey_íabÀ
:1;

252 
uöt32_t
 
	mmax_lod
:12;

253 
uöt32_t
 
	mmö_lod
:12;

254 } 
	mss1
;

258 
uöt32_t
 
	mlod_˛amp_mag_mode
:1;

259 
uöt32_t
 
	mÊexibÀ_fûãr_vÆign
:1;

260 
uöt32_t
 
	mÊexibÀ_fûãr_hÆign
:1;

261 
uöt32_t
 
	mÊexibÀ_fûãr_c€ff_size
:1;

262 
uöt32_t
 
	mÊexibÀ_fûãr_mode
:1;

263 
uöt32_t
 
	m∑d1
:1;

264 
uöt32_t
 
	mödúe˘_°©e_±r
:18;

265 
uöt32_t
 
	m∑d0
:2;

266 
uöt32_t
 
	m£p_fûãr_height
:2;

267 
uöt32_t
 
	m£p_fûãr_width
:2;

268 
uöt32_t
 
	m£p_fûãr_c€ff_èbÀ_size
:2;

269 } 
	mss2
;

273 
uöt32_t
 
	mr_wøp_mode
:3;

274 
uöt32_t
 
	mt_wøp_mode
:3;

275 
uöt32_t
 
	ms_wøp_mode
:3;

276 
uöt32_t
 
	m∑d
:1;

277 
uöt32_t
 
	mn⁄_n‹mÆized_co‹d
:1;

278 
uöt32_t
 
	måûöór_quÆôy
:2;

279 
uöt32_t
 
	maddªss_round
:6;

280 
uöt32_t
 
	mmax_™iso
:3;

281 
uöt32_t
 
	m∑d0
:2;

282 
uöt32_t
 
	mn⁄_£p_fûãr_foŸ¥öt_mask
:8;

283 } 
	mss3
;

286 
	sgí8_bÀnd_°©e
 {

288 
uöt32_t
 
	m∑d0
:19;

289 
uöt32_t
 
	my_dôhî_off£t
:2;

290 
uöt32_t
 
	mx_dôhî_off£t
:2;

291 
uöt32_t
 
	mdôhî_íabÀ
:1;

292 
uöt32_t
 
	mÆpha_ã°_func
:3;

293 
uöt32_t
 
	mÆpha_ã°
:1;

294 
uöt32_t
 
	mÆpha_to_covîage_dôhî
:1;

295 
uöt32_t
 
	mÆpha_to_⁄e
:1;

296 
uöt32_t
 
	mü_bÀnd
:1;

297 
uöt32_t
 
	mÆpha_to_covîage
:1;

298 } 
	mbs0
;

301 
uöt32_t
 
	mwrôe_dißbÀ_blue
:1;

302 
uöt32_t
 
	mwrôe_dißbÀ_gªí
:1;

303 
uöt32_t
 
	mwrôe_dißbÀ_ªd
:1;

304 
uöt32_t
 
	mwrôe_dißbÀ_Æpha
:1;

305 
uöt32_t
 
	m∑d1
:1;

306 
uöt32_t
 
	mÆpha_bÀnd_func
:3;

307 
uöt32_t
 
	mde°_Æpha_bÀnd_Á˘‹
:5;

308 
uöt32_t
 
	msour˚_Æpha_bÀnd_Á˘‹
:5;

309 
uöt32_t
 
	mcﬁ‹_bÀnd_func
:3;

310 
uöt32_t
 
	mde°_bÀnd_Á˘‹
:5;

311 
uöt32_t
 
	msour˚_bÀnd_Á˘‹
:5;

312 
uöt32_t
 
	mcﬁ‹_buf„r_bÀnd
:1;

313 
uöt32_t
 
	mpo°_bÀnd_cﬁ‹_˛amp
:1;

314 
uöt32_t
 
	m¥e_bÀnd_cﬁ‹_˛amp
:1;

315 
uöt32_t
 
	mcﬁ‹_˛amp_ønge
:2;

316 
uöt32_t
 
	m¥e_bÀnd_sour˚_⁄ly_˛amp
:1;

317 
uöt32_t
 
	m∑d0
:22;

318 
uöt32_t
 
	mlogic_›_func
:4;

319 
uöt32_t
 
	mlogic_›_íabÀ
:1;

320 } 
	mbs
[16];

323 
	sgí7_sf_˛ù_võwp‹t
 {

325 
	mm00
;

326 
	mm11
;

327 
	mm22
;

328 
	mm30
;

329 
	mm31
;

330 
	mm32
;

331 } 
	mvõwp‹t
;

333 
uöt32_t
 
	m∑d0
[2];

336 
	mxmö
;

337 
	mxmax
;

338 
	mymö
;

339 
	mymax
;

340 } 
	mgu¨db™d
;

342 
	m∑d1
[4];

345 
	sgí6_sciss‹_ª˘


347 
uöt32_t
 
	mxmö
:16;

348 
uöt32_t
 
	mymö
:16;

349 
uöt32_t
 
	mxmax
:16;

350 
uöt32_t
 
	mymax
:16;

	@gen9_render.h

1 #i‚de‡
GEN9_RENDER_H


2 
	#GEN9_RENDER_H


	)

4 
	~"gí8_ªndî.h
"

6 
	#GEN7_3DSTATE_VF
 
	`GEN6_3D
(3, 0, 0x0c)

	)

7 
	#GEN9_3DSTATE_COMPONENT_PACKING
 
	`GEN6_3D
(3, 0, 0x55)

	)

9 
	#GEN9_SBE_ACTIVE_COMPONENT_NONE
 0

	)

10 
	#GEN9_SBE_ACTIVE_COMPONENT_XY
 1

	)

11 
	#GEN9_SBE_ACTIVE_COMPONENT_XYZ
 2

	)

12 
	#GEN9_SBE_ACTIVE_COMPONENT_XYZW
 3

	)

14 
	#GEN9_PIPELINE_SELECTION_MASK
 (3 << 8)

	)

15 
	#GEN9_PIPELINE_SELECT
 (
	`GEN6_3D
(1, 1, 4Ë| (3 << 8))

	)

	@gpgpu_fill.c

28 
	~<öãl_bufmgr.h
>

29 
	~<i915_drm.h
>

31 
	~"öãl_ªg.h
"

32 
	~"drmã°.h
"

33 
	~"öãl_b©chbuf„r.h
"

34 
	~"gí7_medü.h
"

35 
	~"gí8_medü.h
"

36 
	~"gpgpu_fûl.h
"

39 c⁄° 
uöt32_t
 
	ggí7_gpgpu_kî√l
[][4] = {

52 c⁄° 
uöt32_t
 
	ggí8_gpgpu_kî√l
[][4] = {

65 c⁄° 
uöt32_t
 
	ggí9_gpgpu_kî√l
[][4] = {

78 
uöt32_t


79 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

81  
b©ch
->
±r
 - b©ch->
buf„r
;

82 
	}
}

84 
uöt32_t


85 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

87 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

88 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

89 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

90  
off£t
;

91 
	}
}

94 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

96 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

97 
b©ch
->
±r
 +
size
;

98  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

99 
	}
}

101 
uöt32_t


102 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

104  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

105 
	}
}

107 
uöt32_t


108 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
,

109 
uöt32_t
 
Æign
)

111  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

112 
	}
}

115 
	$gí7_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

117 
ªt
;

119 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

120 i‡(
ªt
 == 0)

121 
ªt
 = 
	`drm_öãl_bo_mrb_exec
(
b©ch
->
bo
, 
b©ch_íd
,

122 
NULL
, 0, 0, 0);

123 
	`igt_as£π
(
ªt
 == 0);

124 
	}
}

126 
uöt32_t


127 
	$gí7_fûl_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt8_t
 
cﬁ‹
)

129 
uöt8_t
 *
curbe_buf„r
;

130 
uöt32_t
 
off£t
;

132 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, (
uöt32_t
) * 8, 64);

133 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

134 *
curbe_buf„r
 = 
cﬁ‹
;

136  
off£t
;

137 
	}
}

139 
uöt32_t


140 
	$gí7_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

141 
igt_buf
 *
buf
,

142 
uöt32_t
 
f‹m©
,

143 
is_d°
)

145 
gí7_surÁ˚_°©e
 *
ss
;

146 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

147 
ªt
;

149 i‡(
is_d°
) {

150 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

152 
wrôe_domaö
 = 0;

153 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

156 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

157 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

159 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN7_SURFACE_2D
;

160 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

161 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

163 i‡(
buf
->
tûög
 =
I915_TILING_X
)

164 
ss
->
ss0
.
tûed_mode
 = 2;

165 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

166 
ss
->
ss0
.
tûed_mode
 = 3;

168 
ss
->
ss1
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

169 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

170 
	`b©ch_off£t
(
b©ch
, 
ss
) + 4,

171 
buf
->
bo
, 0,

172 
ªad_domaö
, 
wrôe_domaö
);

173 
	`igt_as£π
(
ªt
 == 0);

175 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

176 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

178 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

180 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

181 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

182 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

183 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

185  
off£t
;

186 
	}
}

188 
uöt32_t


189 
	$gí8_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

190 
igt_buf
 *
buf
,

191 
uöt32_t
 
f‹m©
,

192 
is_d°
)

194 
gí8_surÁ˚_°©e
 *
ss
;

195 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

196 
ªt
;

198 i‡(
is_d°
) {

199 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

201 
wrôe_domaö
 = 0;

202 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

205 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

206 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

208 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN8_SURFACE_2D
;

209 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

210 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

211 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

212 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

214 i‡(
buf
->
tûög
 =
I915_TILING_X
)

215 
ss
->
ss0
.
tûed_mode
 = 2;

216 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

217 
ss
->
ss0
.
tûed_mode
 = 3;

219 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

221 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

222 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

223 
buf
->
bo
, 0,

224 
ªad_domaö
, 
wrôe_domaö
);

225 
	`igt_as£π_eq
(
ªt
, 0);

227 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

228 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

229 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

231 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

232 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

233 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

234 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

236  
off£t
;

238 
	}
}

240 
uöt32_t


241 
	$gí7_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

242 
igt_buf
 *
d°
)

244 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

246 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

247 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

249 
bödög_èbÀ
[0] = 
	`gí7_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN7_SURFACEFORMAT_R8_UNORM
, 1);

251  
off£t
;

252 
	}
}

254 
uöt32_t


255 
	$gí8_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

256 
igt_buf
 *
d°
)

258 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

260 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

261 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

263 
bödög_èbÀ
[0] = 
	`gí8_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN8_SURFACEFORMAT_R8_UNORM
, 1);

265  
off£t
;

266 
	}
}

268 
uöt32_t


269 
	$gí7_fûl_gpgpu_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

270 c⁄° 
uöt32_t
 
kî√l
[][4],

271 
size_t
 
size
)

273 
uöt32_t
 
off£t
;

275 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

277  
off£t
;

278 
	}
}

280 
uöt32_t


281 
	$gí7_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
,

282 c⁄° 
uöt32_t
 
kî√l
[][4], 
size_t
 
size
)

284 
gí7_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

285 
uöt32_t
 
off£t
;

286 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

288 
bödög_èbÀ_off£t
 = 
	`gí7_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

289 
kî√l_off£t
 = 
	`gí7_fûl_gpgpu_kî√l
(
b©ch
, 
kî√l
, 
size
);

291 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

292 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

294 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

296 
idd
->
desc1
.
sögÀ_¥ogøm_Êow
 = 1;

297 
idd
->
desc1
.
Êﬂtög_poöt_mode
 = 
GEN7_FLOATING_POINT_IEEE_754
;

299 
idd
->
desc2
.
ßm∂î_cou¡
 = 0;

300 
idd
->
desc2
.
ßm∂î_°©e_poöãr
 = 0;

302 
idd
->
desc3
.
bödög_èbÀ_íåy_cou¡
 = 0;

303 
idd
->
desc3
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

305 
idd
->
desc4
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

306 
idd
->
desc4
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

308  
off£t
;

309 
	}
}

311 
uöt32_t


312 
	$gí8_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
,

313 c⁄° 
uöt32_t
 
kî√l
[][4], 
size_t
 
size
)

315 
gí8_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

316 
uöt32_t
 
off£t
;

317 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

319 
bödög_èbÀ_off£t
 = 
	`gí8_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

320 
kî√l_off£t
 = 
	`gí7_fûl_gpgpu_kî√l
(
b©ch
, 
kî√l
, 
size
);

322 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

323 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

325 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

327 
idd
->
desc2
.
sögÀ_¥ogøm_Êow
 = 1;

328 
idd
->
desc2
.
Êﬂtög_poöt_mode
 = 
GEN8_FLOATING_POINT_IEEE_754
;

330 
idd
->
desc3
.
ßm∂î_cou¡
 = 0;

331 
idd
->
desc3
.
ßm∂î_°©e_poöãr
 = 0;

333 
idd
->
desc4
.
bödög_èbÀ_íåy_cou¡
 = 0;

334 
idd
->
desc4
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

336 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

337 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

339  
off£t
;

340 
	}
}

343 
	$gí7_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

345 
	`OUT_BATCH
(
GEN7_STATE_BASE_ADDRESS
 | (10 - 2));

348 
	`OUT_BATCH
(0);

351 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

354 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

357 
	`OUT_BATCH
(0);

360 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

363 
	`OUT_BATCH
(0);

364 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

365 
	`OUT_BATCH
(0);

366 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

367 
	}
}

370 
	$gí8_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

372 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (16 - 2));

375 
	`OUT_BATCH
(0 | (0x78 << 4Ë| (0 << 1Ë| 
BASE_ADDRESS_MODIFY
);

376 
	`OUT_BATCH
(0);

379 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

382 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

385 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

386 0, 
BASE_ADDRESS_MODIFY
);

389 
	`OUT_BATCH
(0);

390 
	`OUT_BATCH
(0 );

393 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

396 
	`OUT_BATCH
(0xfffff000 | 1);

398 
	`OUT_BATCH
(1 << 12 | 1);

400 
	`OUT_BATCH
(0xfffff000 | 1);

402 
	`OUT_BATCH
(1 << 12 | 1);

403 
	}
}

406 
	$gí9_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

408 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (19 - 2));

411 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

412 
	`OUT_BATCH
(0);

415 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

418 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

421 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

422 0, 
BASE_ADDRESS_MODIFY
);

425 
	`OUT_BATCH
(0);

426 
	`OUT_BATCH
(0);

429 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

432 
	`OUT_BATCH
(0xfffff000 | 1);

434 
	`OUT_BATCH
(1 << 12 | 1);

436 
	`OUT_BATCH
(0xfffff000 | 1);

438 
	`OUT_BATCH
(1 << 12 | 1);

441 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

442 
	`OUT_BATCH
(0);

443 
	`OUT_BATCH
(0xfffff000);

444 
	}
}

447 
	$gí7_emô_v„_°©e_gpgpu
(
öãl_b©chbuf„r
 *
b©ch
)

449 
	`OUT_BATCH
(
GEN7_MEDIA_VFE_STATE
 | (8 - 2));

452 
	`OUT_BATCH
(0);

455 
	`OUT_BATCH
(1 << 16 |

459 
	`OUT_BATCH
(0);

462 
	`OUT_BATCH
(0 << 16 |

466 
	`OUT_BATCH
(0);

467 
	`OUT_BATCH
(0);

468 
	`OUT_BATCH
(0);

469 
	}
}

472 
	$gí8_emô_v„_°©e_gpgpu
(
öãl_b©chbuf„r
 *
b©ch
)

474 
	`OUT_BATCH
(
GEN8_MEDIA_VFE_STATE
 | (9 - 2));

477 
	`OUT_BATCH
(0);

478 
	`OUT_BATCH
(0);

481 
	`OUT_BATCH
(1 << 16 | 1 << 8);

483 
	`OUT_BATCH
(0);

486 
	`OUT_BATCH
(0 << 16 | 1);

489 
	`OUT_BATCH
(0);

490 
	`OUT_BATCH
(0);

491 
	`OUT_BATCH
(0);

492 
	}
}

495 
	$gí7_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

497 
	`OUT_BATCH
(
GEN7_MEDIA_CURBE_LOAD
 | (4 - 2));

498 
	`OUT_BATCH
(0);

500 
	`OUT_BATCH
(64);

502 
	`OUT_BATCH
(
curbe_buf„r
);

503 
	}
}

506 
	$gí7_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

508 
	`OUT_BATCH
(
GEN7_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

509 
	`OUT_BATCH
(0);

511 
	`OUT_BATCH
((
gí7_öãrÁ˚_des¸ùt‹_d©a
));

513 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

514 
	}
}

517 
	$gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

519 
	`OUT_BATCH
(
GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

520 
	`OUT_BATCH
(0);

522 
	`OUT_BATCH
((
gí8_öãrÁ˚_des¸ùt‹_d©a
));

524 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

525 
	}
}

528 
	$gí7_emô_gpgpu_wÆk
(
öãl_b©chbuf„r
 *
b©ch
,

529 
x
, 
y
,

530 
width
, 
height
)

532 
uöt32_t
 
x_dim
, 
y_dim
, 
tmp
, 
right_mask
;

545 
x_dim
 = (
width
 + 15) / 16;

546 
y_dim
 = 
height
;

548 
tmp
 = 
width
 & 15;

549 i‡(
tmp
 == 0)

550 
right_mask
 = (1 << 16) - 1;

552 
right_mask
 = (1 << 
tmp
) - 1;

554 
	`OUT_BATCH
(
GEN7_GPGPU_WALKER
 | 9);

557 
	`OUT_BATCH
(0);

560 
	`OUT_BATCH
(1 << 30 |

566 
	`OUT_BATCH
(0);

567 
	`OUT_BATCH
(
x_dim
);

570 
	`OUT_BATCH
(0);

571 
	`OUT_BATCH
(
y_dim
);

574 
	`OUT_BATCH
(0);

575 
	`OUT_BATCH
(1);

578 
	`OUT_BATCH
(
right_mask
);

581 
	`OUT_BATCH
(0xffffffff);

582 
	}
}

585 
	$gí8_emô_gpgpu_wÆk
(
öãl_b©chbuf„r
 *
b©ch
,

586 
x
, 
y
,

587 
width
, 
height
)

589 
uöt32_t
 
x_dim
, 
y_dim
, 
tmp
, 
right_mask
;

602 
x_dim
 = (
width
 + 15) / 16;

603 
y_dim
 = 
height
;

605 
tmp
 = 
width
 & 15;

606 i‡(
tmp
 == 0)

607 
right_mask
 = (1 << 16) - 1;

609 
right_mask
 = (1 << 
tmp
) - 1;

611 
	`OUT_BATCH
(
GEN7_GPGPU_WALKER
 | 13);

613 
	`OUT_BATCH
(0);

614 
	`OUT_BATCH
(0);

615 
	`OUT_BATCH
(0);

618 
	`OUT_BATCH
(1 << 30 |

624 
	`OUT_BATCH
(0);

625 
	`OUT_BATCH
(0);

626 
	`OUT_BATCH
(
x_dim
);

629 
	`OUT_BATCH
(0);

630 
	`OUT_BATCH
(0);

631 
	`OUT_BATCH
(
y_dim
);

634 
	`OUT_BATCH
(0);

635 
	`OUT_BATCH
(1);

638 
	`OUT_BATCH
(
right_mask
);

641 
	`OUT_BATCH
(0xffffffff);

642 
	}
}

664 
	#BATCH_STATE_SPLIT
 2048

	)

667 
	$gí7_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

668 
igt_buf
 *
d°
,

669 
x
, 
y
,

670 
width
, 
height
,

671 
uöt8_t
 
cﬁ‹
)

673 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

674 
uöt32_t
 
b©ch_íd
;

676 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

679 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

687 
curbe_buf„r
 = 
	`gí7_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

689 
öãrÁ˚_des¸ùt‹
 = 
	`gí7_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
,

690 
gí7_gpgpu_kî√l
,

691 (
gí7_gpgpu_kî√l
));

692 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

694 
b©ch
->
±r
 = b©ch->
buf„r
;

697 
	`OUT_BATCH
(
GEN7_PIPELINE_SELECT
 | 
PIPELINE_SELECT_GPGPU
);

699 
	`gí7_emô_°©e_ba£_addªss
(
b©ch
);

700 
	`gí7_emô_v„_°©e_gpgpu
(
b©ch
);

701 
	`gí7_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

702 
	`gí7_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

703 
	`gí7_emô_gpgpu_wÆk
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

705 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

707 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

708 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

710 
	`gí7_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

711 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

712 
	}
}

715 
	$gí8_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

716 
igt_buf
 *
d°
,

717 
x
, 
y
,

718 
width
, 
height
,

719 
uöt8_t
 
cﬁ‹
)

721 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

722 
uöt32_t
 
b©ch_íd
;

724 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

727 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

735 
curbe_buf„r
 = 
	`gí7_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

737 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
,

738 
gí8_gpgpu_kî√l
,

739 (
gí8_gpgpu_kî√l
));

740 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

742 
b©ch
->
±r
 = b©ch->
buf„r
;

745 
	`OUT_BATCH
(
GEN7_PIPELINE_SELECT
 | 
PIPELINE_SELECT_GPGPU
);

747 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

748 
	`gí8_emô_v„_°©e_gpgpu
(
b©ch
);

749 
	`gí7_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

750 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

751 
	`gí8_emô_gpgpu_wÆk
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

753 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

755 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

756 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

758 
	`gí7_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

759 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

760 
	}
}

763 
	$gí9_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

764 
igt_buf
 *
d°
,

765 
x
, 
y
,

766 
width
, 
height
,

767 
uöt8_t
 
cﬁ‹
)

769 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

770 
uöt32_t
 
b©ch_íd
;

772 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

775 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

783 
curbe_buf„r
 = 
	`gí7_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

785 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
,

786 
gí9_gpgpu_kî√l
,

787 (
gí9_gpgpu_kî√l
));

788 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

790 
b©ch
->
±r
 = b©ch->
buf„r
;

793 
	`OUT_BATCH
(
GEN7_PIPELINE_SELECT
 | 
PIPELINE_SELECT_GPGPU
);

795 
	`gí9_emô_°©e_ba£_addªss
(
b©ch
);

796 
	`gí8_emô_v„_°©e_gpgpu
(
b©ch
);

797 
	`gí7_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

798 
	`gí7_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

799 
	`gí8_emô_gpgpu_wÆk
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

801 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

803 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

804 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

806 
	`gí7_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

807 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

808 
	}
}

	@gpgpu_fill.h

27 #i‚de‡
GPGPU_FILL_H


28 
	#GPGPU_FILL_H


	)

31 
gí7_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

32 
igt_buf
 *
d°
,

33 
x
, 
y
,

34 
width
, 
height
,

35 
uöt8_t
 
cﬁ‹
);

38 
gí8_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

39 
igt_buf
 *
d°
,

40 
x
, 
y
,

41 
width
, 
height
,

42 
uöt8_t
 
cﬁ‹
);

45 
gí9_gpgpu_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

46 
igt_buf
 *
d°
,

47 
x
, 
y
,

48 
width
, 
height
,

49 
uöt8_t
 
cﬁ‹
);

	@i830_reg.h

28 #i‚de‡
_I830_REG_H_


29 
	#_I830_REG_H_


	)

31 
	#I830_SET_FIELD
–
v¨
, 
mask
, 
vÆue
 ) (v¨ &~(mask), v¨ |vÆue)

	)

34 
	#MI_FLUSH
 (0x04<<23)

	)

35 
	#MI_FLUSH_DW
 (0x26<<23)

	)

37 
	#MI_WRITE_DIRTY_STATE
 (1<<4)

	)

38 
	#MI_END_SCENE
 (1<<3)

	)

39 
	#MI_GLOBAL_SNAPSHOT_COUNT_RESET
 (1<<3)

	)

40 
	#MI_INHIBIT_RENDER_CACHE_FLUSH
 (1<<2)

	)

41 
	#MI_STATE_INSTRUCTION_CACHE_FLUSH
 (1<<1)

	)

42 
	#MI_INVALIDATE_MAP_CACHE
 (1<<0)

	)

44 
	#BRW_MI_GLOBAL_SNAPSHOT_RESET
 (1 << 3)

	)

46 
	#MI_COND_BATCH_BUFFER_END
 (0x36<<23 | 1)

	)

47 
	#MI_DO_COMPARE
 (1<<21)

	)

49 
	#MI_BATCH_BUFFER_END
 (0xA << 23)

	)

52 
	#MI_NOOP
 0x00

	)

53 
	#MI_NOOP_WRITE_ID
 (1<<22)

	)

54 
	#MI_NOOP_ID_MASK
 (1<<22 - 1)

	)

57 
	#MI_WAIT_FOR_EVENT
 (0x03<<23)

	)

58 
	#MI_WAIT_FOR_PIPEB_SVBLANK
 (1<<18)

	)

59 
	#MI_WAIT_FOR_PIPEA_SVBLANK
 (1<<17)

	)

60 
	#MI_WAIT_FOR_OVERLAY_FLIP
 (1<<16)

	)

61 
	#MI_WAIT_FOR_PIPEB_VBLANK
 (1<<7)

	)

62 
	#MI_WAIT_FOR_PIPEB_SCAN_LINE_WINDOW
 (1<<5)

	)

63 
	#MI_WAIT_FOR_PIPEA_VBLANK
 (1<<3)

	)

64 
	#MI_WAIT_FOR_PIPEA_SCAN_LINE_WINDOW
 (1<<1)

	)

67 
	#MI_LOAD_SCAN_LINES_INCL
 (0x12<<23)

	)

68 
	#MI_LOAD_SCAN_LINES_DISPLAY_PIPEA
 (0)

	)

69 
	#MI_LOAD_SCAN_LINES_DISPLAY_PIPEB
 (0x1<<20)

	)

72 
	#COLOR_BLT_CMD
 ((2<<29)|(0x40<<22)|(0x3))

	)

73 
	#COLOR_BLT_WRITE_ALPHA
 (1<<21)

	)

74 
	#COLOR_BLT_WRITE_RGB
 (1<<20)

	)

76 
	#XY_COLOR_BLT_WRITE_ALPHA
 (1<<21)

	)

77 
	#XY_COLOR_BLT_WRITE_RGB
 (1<<20)

	)

78 
	#XY_COLOR_BLT_TILED
 (1<<11)

	)

80 
	#XY_SETUP_CLIP_BLT_CMD
 ((2<<29)|(3<<22)|1)

	)

82 
	#XY_SRC_COPY_BLT_CMD
 ((2<<29)|(0x53<<22))

	)

83 
	#XY_SRC_COPY_BLT_WRITE_ALPHA
 (1<<21)

	)

84 
	#XY_SRC_COPY_BLT_WRITE_RGB
 (1<<20)

	)

85 
	#XY_SRC_COPY_BLT_SRC_TILED
 (1<<15)

	)

86 
	#XY_SRC_COPY_BLT_DST_TILED
 (1<<11)

	)

88 
	#SRC_COPY_BLT_CMD
 ((2<<29)|(0x43<<22)|0x4)

	)

89 
	#SRC_COPY_BLT_WRITE_ALPHA
 (1<<21)

	)

90 
	#SRC_COPY_BLT_WRITE_RGB
 (1<<20)

	)

92 
	#XY_PAT_BLT_IMMEDIATE
 ((2<<29)|(0x72<<22))

	)

94 
	#XY_MONO_PAT_BLT_CMD
 ((0x2<<29)|(0x52<<22)|0x7)

	)

95 
	#XY_MONO_PAT_VERT_SEED
 ((1<<10)|(1<<9)|(1<<8))

	)

96 
	#XY_MONO_PAT_HORT_SEED
 ((1<<14)|(1<<13)|(1<<12))

	)

97 
	#XY_MONO_PAT_BLT_WRITE_ALPHA
 (1<<21)

	)

98 
	#XY_MONO_PAT_BLT_WRITE_RGB
 (1<<20)

	)

100 
	#XY_MONO_SRC_BLT_CMD
 ((0x2<<29)|(0x54<<22)|(0x6))

	)

101 
	#XY_MONO_SRC_BLT_WRITE_ALPHA
 (1<<21)

	)

102 
	#XY_MONO_SRC_BLT_WRITE_RGB
 (1<<20)

	)

104 
	#CMD_3D
 (0x3<<29)

	)

106 
	#PRIM3D_INLINE
 (
CMD_3D
 | (0x1f<<24))

	)

107 
	#PRIM3D_TRILIST
 (0x0<<18)

	)

108 
	#PRIM3D_TRISTRIP
 (0x1<<18)

	)

109 
	#PRIM3D_TRISTRIP_RVRSE
 (0x2<<18)

	)

110 
	#PRIM3D_TRIFAN
 (0x3<<18)

	)

111 
	#PRIM3D_POLY
 (0x4<<18)

	)

112 
	#PRIM3D_LINELIST
 (0x5<<18)

	)

113 
	#PRIM3D_LINESTRIP
 (0x6<<18)

	)

114 
	#PRIM3D_RECTLIST
 (0x7<<18)

	)

115 
	#PRIM3D_POINTLIST
 (0x8<<18)

	)

116 
	#PRIM3D_DIB
 (0x9<<18)

	)

117 
	#PRIM3D_CLEAR_RECT
 (0xa<<18)

	)

118 
	#PRIM3D_ZONE_INIT
 (0xd<<18)

	)

119 
	#PRIM3D_MASK
 (0x1f<<18)

	)

121 
	#_3DSTATE_AA_CMD
 (
CMD_3D
 | (0x06<<24))

	)

122 
	#AA_LINE_ECAAR_WIDTH_ENABLE
 (1<<16)

	)

123 
	#AA_LINE_ECAAR_WIDTH_0_5
 0

	)

124 
	#AA_LINE_ECAAR_WIDTH_1_0
 (1<<14)

	)

125 
	#AA_LINE_ECAAR_WIDTH_2_0
 (2<<14)

	)

126 
	#AA_LINE_ECAAR_WIDTH_4_0
 (3<<14)

	)

127 
	#AA_LINE_REGION_WIDTH_ENABLE
 (1<<8)

	)

128 
	#AA_LINE_REGION_WIDTH_0_5
 0

	)

129 
	#AA_LINE_REGION_WIDTH_1_0
 (1<<6)

	)

130 
	#AA_LINE_REGION_WIDTH_2_0
 (2<<6)

	)

131 
	#AA_LINE_REGION_WIDTH_4_0
 (3<<6)

	)

132 
	#AA_LINE_ENABLE
 ((1<<1Ë| 1)

	)

133 
	#AA_LINE_DISABLE
 (1<<1)

	)

135 
	#_3DSTATE_BUF_INFO_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x8e<<16Ë| 1)

	)

137 
	#BUF_3D_ID_COLOR_BACK
 (0x3<<24)

	)

138 
	#BUF_3D_ID_DEPTH
 (0x7<<24)

	)

139 
	#BUF_3D_USE_FENCE
 (1<<23)

	)

140 
	#BUF_3D_TILED_SURFACE
 (1<<22)

	)

141 
	#BUF_3D_TILE_WALK_X
 0

	)

142 
	#BUF_3D_TILE_WALK_Y
 (1<<21)

	)

143 
	#BUF_3D_PITCH
(
x
Ë(((x)/4)<<2)

	)

145 
	#BUF_3D_ADDR
(
x
Ë((xË& ~0x3)

	)

147 
	#_3DSTATE_COLOR_FACTOR_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x1<<16))

	)

149 
	#_3DSTATE_COLOR_FACTOR_N_CMD
(
°age
Ë(
CMD_3D
 | (0x1d<<24) | \

150 ((0x90+(
°age
))<<16))

	)

152 
	#_3DSTATE_CONST_BLEND_COLOR_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x88<<16))

	)

154 
	#_3DSTATE_DFLT_DIFFUSE_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x99<<16))

	)

156 
	#_3DSTATE_DFLT_SPEC_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x9a<<16))

	)

158 
	#_3DSTATE_DFLT_Z_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x98<<16))

	)

160 
	#_3DSTATE_DST_BUF_VARS_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x85<<16))

	)

162 
	#DSTORG_HORT_BIAS
(
x
Ë((x)<<20)

	)

163 
	#DSTORG_VERT_BIAS
(
x
Ë((x)<<16)

	)

164 
	#COLOR_4_2_2_CHNL_WRT_ALL
 0

	)

165 
	#COLOR_4_2_2_CHNL_WRT_Y
 (1<<12)

	)

166 
	#COLOR_4_2_2_CHNL_WRT_CR
 (2<<12)

	)

167 
	#COLOR_4_2_2_CHNL_WRT_CB
 (3<<12)

	)

168 
	#COLOR_4_2_2_CHNL_WRT_CRCB
 (4<<12)

	)

169 
	#COLR_BUF_8BIT
 0

	)

170 
	#COLR_BUF_RGB555
 (1<<8)

	)

171 
	#COLR_BUF_RGB565
 (2<<8)

	)

172 
	#COLR_BUF_ARGB8888
 (3<<8)

	)

173 
	#COLR_BUF_ARGB4444
 (8<<8)

	)

174 
	#COLR_BUF_ARGB1555
 (9<<8)

	)

175 
	#DEPTH_IS_Z
 0

	)

176 
	#DEPTH_IS_W
 (1<<6)

	)

177 
	#DEPTH_FRMT_16_FIXED
 0

	)

178 
	#DEPTH_FRMT_16_FLOAT
 (1<<2)

	)

179 
	#DEPTH_FRMT_24_FIXED_8_OTHER
 (2<<2)

	)

180 
	#DEPTH_FRMT_24_FLOAT_8_OTHER
 (3<<2)

	)

181 
	#VERT_LINE_STRIDE_1
 (1<<1)

	)

182 
	#VERT_LINE_STRIDE_0
 0

	)

183 
	#VERT_LINE_STRIDE_OFS_1
 1

	)

184 
	#VERT_LINE_STRIDE_OFS_0
 0

	)

186 
	#_3DSTATE_DRAW_RECT_CMD
 (
CMD_3D
|(0x1d<<24)|(0x80<<16)|3)

	)

188 
	#DRAW_RECT_DIS_DEPTH_OFS
 (1<<30)

	)

189 
	#DRAW_DITHER_OFS_X
(
x
Ë((x)<<26)

	)

190 
	#DRAW_DITHER_OFS_Y
(
x
Ë((x)<<24)

	)

192 
	#DRAW_YMIN
(
x
Ë((x)<<16)

	)

193 
	#DRAW_XMIN
(
x
Ë(x)

	)

195 
	#DRAW_YMAX
(
x
Ë((x)<<16)

	)

196 
	#DRAW_XMAX
(
x
Ë(x)

	)

198 
	#DRAW_YORG
(
x
Ë((x)<<16)

	)

199 
	#DRAW_XORG
(
x
Ë(x)

	)

201 
	#_3DSTATE_ENABLES_1_CMD
 (
CMD_3D
|(0x3<<24))

	)

202 
	#ENABLE_LOGIC_OP_MASK
 ((1<<23)|(1<<22))

	)

203 
	#ENABLE_LOGIC_OP
 ((1<<23)|(1<<22))

	)

204 
	#DISABLE_LOGIC_OP
 (1<<23)

	)

205 
	#ENABLE_STENCIL_TEST
 ((1<<21)|(1<<20))

	)

206 
	#DISABLE_STENCIL_TEST
 (1<<21)

	)

207 
	#ENABLE_DEPTH_BIAS
 ((1<<11)|(1<<10))

	)

208 
	#DISABLE_DEPTH_BIAS
 (1<<11)

	)

209 
	#ENABLE_SPEC_ADD_MASK
 ((1<<9)|(1<<8))

	)

210 
	#ENABLE_SPEC_ADD
 ((1<<9)|(1<<8))

	)

211 
	#DISABLE_SPEC_ADD
 (1<<9)

	)

212 
	#ENABLE_DIS_FOG_MASK
 ((1<<7)|(1<<6))

	)

213 
	#ENABLE_FOG
 ((1<<7)|(1<<6))

	)

214 
	#DISABLE_FOG
 (1<<7)

	)

215 
	#ENABLE_DIS_ALPHA_TEST_MASK
 ((1<<5)|(1<<4))

	)

216 
	#ENABLE_ALPHA_TEST
 ((1<<5)|(1<<4))

	)

217 
	#DISABLE_ALPHA_TEST
 (1<<5)

	)

218 
	#ENABLE_DIS_CBLEND_MASK
 ((1<<3)|(1<<2))

	)

219 
	#ENABLE_COLOR_BLEND
 ((1<<3)|(1<<2))

	)

220 
	#DISABLE_COLOR_BLEND
 (1<<3)

	)

221 
	#ENABLE_DIS_DEPTH_TEST_MASK
 ((1<<1)|1)

	)

222 
	#ENABLE_DEPTH_TEST
 ((1<<1)|1)

	)

223 
	#DISABLE_DEPTH_TEST
 (1<<1)

	)

226 
	#_3DSTATE_ENABLES_2_CMD
 (
CMD_3D
|(0x4<<24))

	)

227 
	#ENABLE_STENCIL_WRITE
 ((1<<21)|(1<<20))

	)

228 
	#DISABLE_STENCIL_WRITE
 (1<<21)

	)

229 
	#ENABLE_TEX_CACHE
 ((1<<17)|(1<<16))

	)

230 
	#DISABLE_TEX_CACHE
 (1<<17)

	)

231 
	#ENABLE_DITHER
 ((1<<9)|(1<<8))

	)

232 
	#DISABLE_DITHER
 (1<<9)

	)

233 
	#ENABLE_COLOR_MASK
 (1<<10)

	)

234 
	#WRITEMASK_ALPHA
 (1<<7)

	)

235 
	#WRITEMASK_ALPHA_SHIFT
 7

	)

236 
	#WRITEMASK_RED
 (1<<6)

	)

237 
	#WRITEMASK_RED_SHIFT
 6

	)

238 
	#WRITEMASK_GREEN
 (1<<5)

	)

239 
	#WRITEMASK_GREEN_SHIFT
 5

	)

240 
	#WRITEMASK_BLUE
 (1<<4)

	)

241 
	#WRITEMASK_BLUE_SHIFT
 4

	)

242 
	#WRITEMASK_MASK
 ((1<<4)|(1<<5)|(1<<6)|(1<<7))

	)

243 
	#ENABLE_COLOR_WRITE
 ((1<<3)|(1<<2))

	)

244 
	#DISABLE_COLOR_WRITE
 (1<<3)

	)

245 
	#ENABLE_DIS_DEPTH_WRITE_MASK
 0x3

	)

246 
	#ENABLE_DEPTH_WRITE
 ((1<<1)|1)

	)

247 
	#DISABLE_DEPTH_WRITE
 (1<<1)

	)

250 
	#_3DSTATE_FOG_COLOR_CMD
 (
CMD_3D
|(0x15<<24))

	)

251 
	#FOG_COLOR_RED
(
x
Ë((x)<<16)

	)

252 
	#FOG_COLOR_GREEN
(
x
Ë((x)<<8)

	)

253 
	#FOG_COLOR_BLUE
(
x
Ë(x)

	)

256 
	#_3DSTATE_FOG_MODE_CMD
 (
CMD_3D
|(0x1d<<24)|(0x89<<16)|2)

	)

258 
	#FOGFUNC_ENABLE
 (1<<31)

	)

259 
	#FOGFUNC_VERTEX
 0

	)

260 
	#FOGFUNC_PIXEL_EXP
 (1<<28)

	)

261 
	#FOGFUNC_PIXEL_EXP2
 (2<<28)

	)

262 
	#FOGFUNC_PIXEL_LINEAR
 (3<<28)

	)

263 
	#FOGSRC_INDEX_Z
 (1<<27)

	)

264 
	#FOGSRC_INDEX_W
 ((1<<27)|(1<<25))

	)

265 
	#FOG_LINEAR_CONST
 (1<<24)

	)

266 
	#FOG_CONST_1
(
x
Ë((x)<<4)

	)

267 
	#ENABLE_FOG_DENSITY
 (1<<23)

	)

269 
	#FOG_CONST_2
(
x
Ë(x)

	)

271 
	#FOG_DENSITY
(
x
Ë(x)

	)

274 
	#_3DSTATE_INDPT_ALPHA_BLEND_CMD
 (
CMD_3D
|(0x0b<<24))

	)

275 
	#ENABLE_INDPT_ALPHA_BLEND
 ((1<<23)|(1<<22))

	)

276 
	#DISABLE_INDPT_ALPHA_BLEND
 (1<<23)

	)

277 
	#ALPHA_BLENDFUNC_MASK
 0x3f0000

	)

278 
	#ENABLE_ALPHA_BLENDFUNC
 (1<<21)

	)

279 
	#ABLENDFUNC_ADD
 0

	)

280 
	#ABLENDFUNC_SUB
 (1<<16)

	)

281 
	#ABLENDFUNC_RVSE_SUB
 (2<<16)

	)

282 
	#ABLENDFUNC_MIN
 (3<<16)

	)

283 
	#ABLENDFUNC_MAX
 (4<<16)

	)

284 
	#SRC_DST_ABLEND_MASK
 0xfff

	)

285 
	#ENABLE_SRC_ABLEND_FACTOR
 (1<<11)

	)

286 
	#SRC_ABLEND_FACT
(
x
Ë((x)<<6)

	)

287 
	#ENABLE_DST_ABLEND_FACTOR
 (1<<5)

	)

288 
	#DST_ABLEND_FACT
(
x
Ë(x)

	)

290 
	#BLENDFACTOR_ZERO
 0x01

	)

291 
	#BLENDFACTOR_ONE
 0x02

	)

292 
	#BLENDFACTOR_SRC_COLR
 0x03

	)

293 
	#BLENDFACTOR_INV_SRC_COLR
 0x04

	)

294 
	#BLENDFACTOR_SRC_ALPHA
 0x05

	)

295 
	#BLENDFACTOR_INV_SRC_ALPHA
 0x06

	)

296 
	#BLENDFACTOR_DST_ALPHA
 0x07

	)

297 
	#BLENDFACTOR_INV_DST_ALPHA
 0x08

	)

298 
	#BLENDFACTOR_DST_COLR
 0x09

	)

299 
	#BLENDFACTOR_INV_DST_COLR
 0x0a

	)

300 
	#BLENDFACTOR_SRC_ALPHA_SATURATE
 0x0b

	)

301 
	#BLENDFACTOR_CONST_COLOR
 0x0c

	)

302 
	#BLENDFACTOR_INV_CONST_COLOR
 0x0d

	)

303 
	#BLENDFACTOR_CONST_ALPHA
 0x0e

	)

304 
	#BLENDFACTOR_INV_CONST_ALPHA
 0x0f

	)

305 
	#BLENDFACTOR_MASK
 0x0f

	)

308 
	#_3DSTATE_MAP_BLEND_ARG_CMD
(
°age
Ë(
CMD_3D
|(0x0e<<24)|((°age)<<20))

	)

310 
	#TEXPIPE_COLOR
 0

	)

311 
	#TEXPIPE_ALPHA
 (1<<18)

	)

312 
	#TEXPIPE_KILL
 (2<<18)

	)

313 
	#TEXBLEND_ARG0
 0

	)

314 
	#TEXBLEND_ARG1
 (1<<15)

	)

315 
	#TEXBLEND_ARG2
 (2<<15)

	)

316 
	#TEXBLEND_ARG3
 (3<<15)

	)

317 
	#TEXBLENDARG_MODIFY_PARMS
 (1<<6)

	)

318 
	#TEXBLENDARG_REPLICATE_ALPHA
 (1<<5)

	)

319 
	#TEXBLENDARG_INV_ARG
 (1<<4)

	)

320 
	#TEXBLENDARG_ONE
 0

	)

321 
	#TEXBLENDARG_FACTOR
 0x01

	)

322 
	#TEXBLENDARG_ACCUM
 0x02

	)

323 
	#TEXBLENDARG_DIFFUSE
 0x03

	)

324 
	#TEXBLENDARG_SPEC
 0x04

	)

325 
	#TEXBLENDARG_CURRENT
 0x05

	)

326 
	#TEXBLENDARG_TEXEL0
 0x06

	)

327 
	#TEXBLENDARG_TEXEL1
 0x07

	)

328 
	#TEXBLENDARG_TEXEL2
 0x08

	)

329 
	#TEXBLENDARG_TEXEL3
 0x09

	)

330 
	#TEXBLENDARG_FACTOR_N
 0x0e

	)

333 
	#_3DSTATE_MAP_BLEND_OP_CMD
(
°age
Ë(
CMD_3D
|(0x0d<<24)|((°age)<<20))

	)

335 
	#TEXPIPE_COLOR
 0

	)

336 
	#TEXPIPE_ALPHA
 (1<<18)

	)

337 
	#TEXPIPE_KILL
 (2<<18)

	)

339 
	#ENABLE_TEXOUTPUT_WRT_SEL
 (1<<17)

	)

340 
	#TEXOP_OUTPUT_CURRENT
 0

	)

341 
	#TEXOP_OUTPUT_ACCUM
 (1<<15)

	)

342 
	#ENABLE_TEX_CNTRL_STAGE
 ((1<<12)|(1<<11))

	)

343 
	#DISABLE_TEX_CNTRL_STAGE
 (1<<12)

	)

344 
	#TEXOP_SCALE_SHIFT
 9

	)

345 
	#TEXOP_SCALE_1X
 (0 << 
TEXOP_SCALE_SHIFT
)

	)

346 
	#TEXOP_SCALE_2X
 (1 << 
TEXOP_SCALE_SHIFT
)

	)

347 
	#TEXOP_SCALE_4X
 (2 << 
TEXOP_SCALE_SHIFT
)

	)

348 
	#TEXOP_MODIFY_PARMS
 (1<<8)

	)

349 
	#TEXOP_LAST_STAGE
 (1<<7)

	)

350 
	#TEXBLENDOP_KILLPIXEL
 0x02

	)

351 
	#TEXBLENDOP_ARG1
 0x01

	)

352 
	#TEXBLENDOP_ARG2
 0x02

	)

353 
	#TEXBLENDOP_MODULATE
 0x03

	)

354 
	#TEXBLENDOP_ADD
 0x06

	)

355 
	#TEXBLENDOP_ADDSIGNED
 0x07

	)

356 
	#TEXBLENDOP_BLEND
 0x08

	)

357 
	#TEXBLENDOP_BLEND_AND_ADD
 0x09

	)

358 
	#TEXBLENDOP_SUBTRACT
 0x0a

	)

359 
	#TEXBLENDOP_DOT3
 0x0b

	)

360 
	#TEXBLENDOP_DOT4
 0x0c

	)

361 
	#TEXBLENDOP_MODULATE_AND_ADD
 0x0d

	)

362 
	#TEXBLENDOP_MODULATE_2X_AND_ADD
 0x0e

	)

363 
	#TEXBLENDOP_MODULATE_4X_AND_ADD
 0x0f

	)

368 
	#_3DSTATE_MAP_COORD_TRANSFORM
 ((3<<29)|(0x1d<<24)|(0x8c<<16))

	)

369 
	#DISABLE_TEX_TRANSFORM
 (1<<28)

	)

370 
	#TEXTURE_SET
(
x
Ë(x<<29)

	)

372 
	#_3DSTATE_VERTEX_TRANSFORM
 ((3<<29)|(0x1d<<24)|(0x8b<<16))

	)

373 
	#DISABLE_VIEWPORT_TRANSFORM
 (1<<31)

	)

374 
	#DISABLE_PERSPECTIVE_DIVIDE
 (1<<29)

	)

377 
	#_3DSTATE_MAP_COORD_SETBIND_CMD
 (
CMD_3D
|(0x1d<<24)|(0x02<<16))

	)

378 
	#TEXBIND_MASK3
 ((1<<15)|(1<<14)|(1<<13)|(1<<12))

	)

379 
	#TEXBIND_MASK2
 ((1<<11)|(1<<10)|(1<<9)|(1<<8))

	)

380 
	#TEXBIND_MASK1
 ((1<<7)|(1<<6)|(1<<5)|(1<<4))

	)

381 
	#TEXBIND_MASK0
 ((1<<3)|(1<<2)|(1<<1)|1)

	)

383 
	#TEXBIND_SET3
(
x
Ë((x)<<12)

	)

384 
	#TEXBIND_SET2
(
x
Ë((x)<<8)

	)

385 
	#TEXBIND_SET1
(
x
Ë((x)<<4)

	)

386 
	#TEXBIND_SET0
(
x
Ë(x)

	)

388 
	#TEXCOORDSRC_KEEP
 0

	)

389 
	#TEXCOORDSRC_DEFAULT
 0x01

	)

390 
	#TEXCOORDSRC_VTXSET_0
 0x08

	)

391 
	#TEXCOORDSRC_VTXSET_1
 0x09

	)

392 
	#TEXCOORDSRC_VTXSET_2
 0x0a

	)

393 
	#TEXCOORDSRC_VTXSET_3
 0x0b

	)

394 
	#TEXCOORDSRC_VTXSET_4
 0x0c

	)

395 
	#TEXCOORDSRC_VTXSET_5
 0x0d

	)

396 
	#TEXCOORDSRC_VTXSET_6
 0x0e

	)

397 
	#TEXCOORDSRC_VTXSET_7
 0x0f

	)

399 
	#MAP_UNIT
(
unô
Ë((unô)<<16)

	)

400 
	#MAP_UNIT_MASK
 (0x7<<16)

	)

403 
	#_3DSTATE_MAP_COORD_SET_CMD
 (
CMD_3D
|(0x1c<<24)|(0x01<<19))

	)

404 
	#TEXCOORD_SET
(
n
Ë(“)<<16)

	)

405 
	#ENABLE_TEXCOORD_PARAMS
 (1<<15)

	)

406 
	#TEXCOORDS_ARE_NORMAL
 (1<<14)

	)

407 
	#TEXCOORDS_ARE_IN_TEXELUNITS
 0

	)

408 
	#TEXCOORDTYPE_CARTESIAN
 0

	)

409 
	#TEXCOORDTYPE_HOMOGENEOUS
 (1<<11)

	)

410 
	#TEXCOORDTYPE_VECTOR
 (2<<11)

	)

411 
	#TEXCOORDTYPE_MASK
 (0x7<<11)

	)

412 
	#ENABLE_ADDR_V_CNTL
 (1<<7)

	)

413 
	#ENABLE_ADDR_U_CNTL
 (1<<3)

	)

414 
	#TEXCOORD_ADDR_V_MODE
(
x
Ë((x)<<4)

	)

415 
	#TEXCOORD_ADDR_U_MODE
(
x
Ë(x)

	)

416 
	#TEXCOORDMODE_WRAP
 0

	)

417 
	#TEXCOORDMODE_MIRROR
 1

	)

418 
	#TEXCOORDMODE_CLAMP
 2

	)

419 
	#TEXCOORDMODE_WRAP_SHORTEST
 3

	)

420 
	#TEXCOORDMODE_CLAMP_BORDER
 4

	)

421 
	#TEXCOORD_ADDR_V_MASK
 0x70

	)

422 
	#TEXCOORD_ADDR_U_MASK
 0x7

	)

425 
	#_3DSTATE_MAP_CUBE
 (
CMD_3D
|(0x1c<<24)|(0x0a<<19))

	)

426 
	#CUBE_NEGX_ENABLE
 (1<<5)

	)

427 
	#CUBE_POSX_ENABLE
 (1<<4)

	)

428 
	#CUBE_NEGY_ENABLE
 (1<<3)

	)

429 
	#CUBE_POSY_ENABLE
 (1<<2)

	)

430 
	#CUBE_NEGZ_ENABLE
 (1<<1)

	)

431 
	#CUBE_POSZ_ENABLE
 (1<<0)

	)

433 
	#_3DSTATE_MAP_INFO_CMD
 (
CMD_3D
|(0x1d<<24)|(0x0<<16)|3)

	)

434 
	#TEXMAP_INDEX
(
x
Ë((x)<<28)

	)

435 
	#MAP_SURFACE_8BIT
 (1<<24)

	)

436 
	#MAP_SURFACE_16BIT
 (2<<24)

	)

437 
	#MAP_SURFACE_32BIT
 (3<<24)

	)

438 
	#MAP_FORMAT_2D
 (0)

	)

439 
	#MAP_FORMAT_3D_CUBE
 (1<<11)

	)

442 
	#_3DSTATE_MODES_1_CMD
 (
CMD_3D
|(0x08<<24))

	)

443 
	#BLENDFUNC_MASK
 0x3f0000

	)

444 
	#ENABLE_COLR_BLND_FUNC
 (1<<21)

	)

445 
	#BLENDFUNC_ADD
 0

	)

446 
	#BLENDFUNC_SUB
 (1<<16)

	)

447 
	#BLENDFUNC_RVRSE_SUB
 (2<<16)

	)

448 
	#BLENDFUNC_MIN
 (3<<16)

	)

449 
	#BLENDFUNC_MAX
 (4<<16)

	)

450 
	#SRC_DST_BLND_MASK
 0xfff

	)

451 
	#ENABLE_SRC_BLND_FACTOR
 (1<<11)

	)

452 
	#ENABLE_DST_BLND_FACTOR
 (1<<5)

	)

453 
	#SRC_BLND_FACT
(
x
Ë((x)<<6)

	)

454 
	#DST_BLND_FACT
(
x
Ë(x)

	)

457 
	#_3DSTATE_MODES_2_CMD
 (
CMD_3D
|(0x0f<<24))

	)

458 
	#ENABLE_GLOBAL_DEPTH_BIAS
 (1<<22)

	)

459 
	#GLOBAL_DEPTH_BIAS
(
x
Ë((x)<<14)

	)

460 
	#ENABLE_ALPHA_TEST_FUNC
 (1<<13)

	)

461 
	#ENABLE_ALPHA_REF_VALUE
 (1<<8)

	)

462 
	#ALPHA_TEST_FUNC
(
x
Ë((x)<<9)

	)

463 
	#ALPHA_REF_VALUE
(
x
Ë(x)

	)

465 
	#ALPHA_TEST_REF_MASK
 0x3fff

	)

468 
	#_3DSTATE_MODES_3_CMD
 (
CMD_3D
|(0x02<<24))

	)

469 
	#DEPTH_TEST_FUNC_MASK
 0x1f0000

	)

470 
	#ENABLE_DEPTH_TEST_FUNC
 (1<<20)

	)

472 
	#DEPTH_TEST_FUNC
(
x
Ë((x)<<16)

	)

473 
	#ENABLE_ALPHA_SHADE_MODE
 (1<<11)

	)

474 
	#ENABLE_FOG_SHADE_MODE
 (1<<9)

	)

475 
	#ENABLE_SPEC_SHADE_MODE
 (1<<7)

	)

476 
	#ENABLE_COLOR_SHADE_MODE
 (1<<5)

	)

477 
	#ALPHA_SHADE_MODE
(
x
Ë((x)<<10)

	)

478 
	#FOG_SHADE_MODE
(
x
Ë((x)<<8)

	)

479 
	#SPEC_SHADE_MODE
(
x
Ë((x)<<6)

	)

480 
	#COLOR_SHADE_MODE
(
x
Ë((x)<<4)

	)

481 
	#CULLMODE_MASK
 0xf

	)

482 
	#ENABLE_CULL_MODE
 (1<<3)

	)

483 
	#CULLMODE_BOTH
 0

	)

484 
	#CULLMODE_NONE
 1

	)

485 
	#CULLMODE_CW
 2

	)

486 
	#CULLMODE_CCW
 3

	)

488 
	#SHADE_MODE_LINEAR
 0

	)

489 
	#SHADE_MODE_FLAT
 0x1

	)

492 
	#_3DSTATE_MODES_4_CMD
 (
CMD_3D
|(0x16<<24))

	)

493 
	#ENABLE_LOGIC_OP_FUNC
 (1<<23)

	)

494 
	#LOGIC_OP_FUNC
(
x
Ë((x)<<18)

	)

495 
	#LOGICOP_MASK
 ((1<<18)|(1<<19)|(1<<20)|(1<<21))

	)

496 
	#LOGICOP_CLEAR
 0

	)

497 
	#LOGICOP_NOR
 0x1

	)

498 
	#LOGICOP_AND_INV
 0x2

	)

499 
	#LOGICOP_COPY_INV
 0x3

	)

500 
	#LOGICOP_AND_RVRSE
 0x4

	)

501 
	#LOGICOP_INV
 0x5

	)

502 
	#LOGICOP_XOR
 0x6

	)

503 
	#LOGICOP_NAND
 0x7

	)

504 
	#LOGICOP_AND
 0x8

	)

505 
	#LOGICOP_EQUIV
 0x9

	)

506 
	#LOGICOP_NOOP
 0xa

	)

507 
	#LOGICOP_OR_INV
 0xb

	)

508 
	#LOGICOP_COPY
 0xc

	)

509 
	#LOGICOP_OR_RVRSE
 0xd

	)

510 
	#LOGICOP_OR
 0xe

	)

511 
	#LOGICOP_SET
 0xf

	)

512 
	#MODE4_ENABLE_STENCIL_TEST_MASK
 ((1<<17)|(0xff00))

	)

513 
	#ENABLE_STENCIL_TEST_MASK
 (1<<17)

	)

514 
	#STENCIL_TEST_MASK
(
x
Ë((x)<<8)

	)

515 
	#MODE4_ENABLE_STENCIL_WRITE_MASK
 ((1<<16)|(0x00ff))

	)

516 
	#ENABLE_STENCIL_WRITE_MASK
 (1<<16)

	)

517 
	#STENCIL_WRITE_MASK
(
x
Ë((x)&0xff)

	)

520 
	#_3DSTATE_MODES_5_CMD
 (
CMD_3D
|(0x0c<<24))

	)

521 
	#ENABLE_SPRITE_POINT_TEX
 (1<<23)

	)

522 
	#SPRITE_POINT_TEX_ON
 (1<<22)

	)

523 
	#SPRITE_POINT_TEX_OFF
 0

	)

524 
	#FLUSH_RENDER_CACHE
 (1<<18)

	)

525 
	#FLUSH_TEXTURE_CACHE
 (1<<16)

	)

526 
	#FIXED_LINE_WIDTH_MASK
 0xfc00

	)

527 
	#ENABLE_FIXED_LINE_WIDTH
 (1<<15)

	)

528 
	#FIXED_LINE_WIDTH
(
x
Ë((x)<<10)

	)

529 
	#FIXED_POINT_WIDTH_MASK
 0x3ff

	)

530 
	#ENABLE_FIXED_POINT_WIDTH
 (1<<9)

	)

531 
	#FIXED_POINT_WIDTH
(
x
Ë(x)

	)

534 
	#_3DSTATE_RASTER_RULES_CMD
 (
CMD_3D
|(0x07<<24))

	)

535 
	#ENABLE_POINT_RASTER_RULE
 (1<<15)

	)

536 
	#OGL_POINT_RASTER_RULE
 (1<<13)

	)

537 
	#ENABLE_LINE_STRIP_PROVOKE_VRTX
 (1<<8)

	)

538 
	#ENABLE_TRI_FAN_PROVOKE_VRTX
 (1<<5)

	)

539 
	#ENABLE_TRI_STRIP_PROVOKE_VRTX
 (1<<2)

	)

540 
	#LINE_STRIP_PROVOKE_VRTX
(
x
Ë((x)<<6)

	)

541 
	#TRI_FAN_PROVOKE_VRTX
(
x
Ë((x)<<3)

	)

542 
	#TRI_STRIP_PROVOKE_VRTX
(
x
Ë(x)

	)

545 
	#_3DSTATE_SCISSOR_ENABLE_CMD
 (
CMD_3D
|(0x1c<<24)|(0x10<<19))

	)

546 
	#ENABLE_SCISSOR_RECT
 ((1<<1Ë| 1)

	)

547 
	#DISABLE_SCISSOR_RECT
 (1<<1)

	)

550 
	#_3DSTATE_SCISSOR_RECT_0_CMD
 (
CMD_3D
|(0x1d<<24)|(0x81<<16)|1)

	)

552 
	#SCISSOR_RECT_0_YMIN
(
x
Ë((x)<<16)

	)

553 
	#SCISSOR_RECT_0_XMIN
(
x
Ë(x)

	)

555 
	#SCISSOR_RECT_0_YMAX
(
x
Ë((x)<<16)

	)

556 
	#SCISSOR_RECT_0_XMAX
(
x
Ë(x)

	)

559 
	#_3DSTATE_STENCIL_TEST_CMD
 (
CMD_3D
|(0x09<<24))

	)

560 
	#ENABLE_STENCIL_PARMS
 (1<<23)

	)

561 
	#STENCIL_OPS_MASK
 (0xffc000)

	)

562 
	#STENCIL_FAIL_OP
(
x
Ë((x)<<20)

	)

563 
	#STENCIL_PASS_DEPTH_FAIL_OP
(
x
Ë((x)<<17)

	)

564 
	#STENCIL_PASS_DEPTH_PASS_OP
(
x
Ë((x)<<14)

	)

566 
	#ENABLE_STENCIL_TEST_FUNC_MASK
 ((1<<13)|(1<<12)|(1<<11)|(1<<10)|(1<<9))

	)

567 
	#ENABLE_STENCIL_TEST_FUNC
 (1<<13)

	)

569 
	#STENCIL_TEST_FUNC
(
x
Ë((x)<<9)

	)

570 
	#STENCIL_REF_VALUE_MASK
 ((1<<8)|0xff)

	)

571 
	#ENABLE_STENCIL_REF_VALUE
 (1<<8)

	)

572 
	#STENCIL_REF_VALUE
(
x
Ë(x)

	)

575 
	#_3DSTATE_VFT0_CMD
 (
CMD_3D
|(0x05<<24))

	)

576 
	#VFT0_POINT_WIDTH
 (1<<12)

	)

577 
	#VFT0_TEX_COUNT_MASK
 (7<<8)

	)

578 
	#VFT0_TEX_COUNT_SHIFT
 8

	)

579 
	#VFT0_TEX_COUNT
(
x
Ë((x)<<8)

	)

580 
	#VFT0_SPEC
 (1<<7)

	)

581 
	#VFT0_DIFFUSE
 (1<<6)

	)

582 
	#VFT0_DEPTH_OFFSET
 (1<<5)

	)

583 
	#VFT0_XYZ
 (1<<1)

	)

584 
	#VFT0_XYZW
 (2<<1)

	)

585 
	#VFT0_XY
 (3<<1)

	)

586 
	#VFT0_XYW
 (4<<1)

	)

587 
	#VFT0_XYZW_MASK
 (7<<1)

	)

590 
	#_3DSTATE_VERTEX_FORMAT_2_CMD
 (
CMD_3D
|(0x0a<<24))

	)

591 
	#VFT1_TEX7_FMT
(
x
Ë((x)<<14)

	)

592 
	#VFT1_TEX6_FMT
(
x
Ë((x)<<12)

	)

593 
	#VFT1_TEX5_FMT
(
x
Ë((x)<<10)

	)

594 
	#VFT1_TEX4_FMT
(
x
Ë((x)<<8)

	)

595 
	#VFT1_TEX3_FMT
(
x
Ë((x)<<6)

	)

596 
	#VFT1_TEX2_FMT
(
x
Ë((x)<<4)

	)

597 
	#VFT1_TEX1_FMT
(
x
Ë((x)<<2)

	)

598 
	#VFT1_TEX0_FMT
(
x
Ë(x)

	)

599 
	#VFT1_TEX0_MASK
 3

	)

600 
	#VFT1_TEX1_SHIFT
 2

	)

601 
	#TEXCOORDFMT_2D
 0

	)

602 
	#TEXCOORDFMT_3D
 1

	)

603 
	#TEXCOORDFMT_4D
 2

	)

604 
	#TEXCOORDFMT_1D
 3

	)

608 
	#MLC_LOD_BIAS_MASK
 ((1<<7)-1)

	)

611 
	#_3DSTATE_VERTEX_TRANS_CMD
 (
CMD_3D
|(0x1d<<24)|(0x8b<<16)|0)

	)

612 
	#_3DSTATE_VERTEX_TRANS_MTX_CMD
 (
CMD_3D
|(0x1d<<24)|(0x8b<<16)|6)

	)

614 
	#ENABLE_VIEWPORT_TRANSFORM
 ((1<<31)|(1<<30))

	)

615 
	#DISABLE_VIEWPORT_TRANSFORM
 (1<<31)

	)

616 
	#ENABLE_PERSP_DIVIDE
 ((1<<29)|(1<<28))

	)

617 
	#DISABLE_PERSP_DIVIDE
 (1<<29)

	)

618 
	#VRTX_TRANS_LOAD_MATRICES
 0x7421

	)

619 
	#VRTX_TRANS_NO_LOAD_MATRICES
 0x0000

	)

623 
	#_3DSTATE_W_STATE_CMD
 (
CMD_3D
|(0x1d<<24)|(0x8d<<16)|1)

	)

625 
	#MAGIC_W_STATE_DWORD1
 0x00000008

	)

627 
	#WFAR_VALUE
(
x
Ë(x)

	)

631 
	#_3DSTATE_STIPPLE
 (
CMD_3D
|(0x1d<<24)|(0x83<<16))

	)

632 
	#ST1_ENABLE
 (1<<16)

	)

633 
	#ST1_MASK
 (0xffff)

	)

635 
	#_3DSTATE_LOAD_STATE_IMMEDIATE_1
 (
CMD_3D
|(0x1d<<24)|(0x04<<16))

	)

636 
	#I1_LOAD_S
(
n
Ë(1<<(“)+4))

	)

637 
	#S3_POINT_WIDTH_SHIFT
 23

	)

638 
	#S3_LINE_WIDTH_SHIFT
 19

	)

639 
	#S3_ALPHA_SHADE_MODE_SHIFT
 18

	)

640 
	#S3_FOG_SHADE_MODE_SHIFT
 17

	)

641 
	#S3_SPEC_SHADE_MODE_SHIFT
 16

	)

642 
	#S3_COLOR_SHADE_MODE_SHIFT
 15

	)

643 
	#S3_CULL_MODE_SHIFT
 13

	)

644 
	#S3_CULLMODE_BOTH
 (0)

	)

645 
	#S3_CULLMODE_NONE
 (1<<13)

	)

646 
	#S3_CULLMODE_CW
 (2<<13)

	)

647 
	#S3_CULLMODE_CCW
 (3<<13)

	)

648 
	#S3_POINT_WIDTH_PRESENT
 (1<<12)

	)

649 
	#S3_SPEC_FOG_PRESENT
 (1<<11)

	)

650 
	#S3_DIFFUSE_PRESENT
 (1<<10)

	)

651 
	#S3_DEPTH_OFFSET_PRESENT
 (1<<9)

	)

652 
	#S3_POSITION_SHIFT
 6

	)

653 
	#S3_VERTEXHAS_XYZ
 (1<<6)

	)

654 
	#S3_VERTEXHAS_XYZW
 (2<<6)

	)

655 
	#S3_VERTEXHAS_XY
 (3<<6)

	)

656 
	#S3_VERTEXHAS_XYW
 (4<<6)

	)

657 
	#S3_ENABLE_SPEC_ADD
 (1<<5)

	)

658 
	#S3_ENABLE_FOG
 (1<<4)

	)

659 
	#S3_ENABLE_LOCAL_DEPTH_BIAS
 (1<<3)

	)

660 
	#S3_ENABLE_SPRITE_POINT
 (1<<1)

	)

661 
	#S3_ENABLE_ANTIALIASING
 1

	)

662 
	#S8_ENABLE_ALPHA_TEST
 (1<<31)

	)

663 
	#S8_ALPHA_TEST_FUNC_SHIFT
 28

	)

664 
	#S8_ALPHA_REFVALUE_SHIFT
 20

	)

665 
	#S8_ENABLE_DEPTH_TEST
 (1<<19)

	)

666 
	#S8_DEPTH_TEST_FUNC_SHIFT
 16

	)

667 
	#S8_ENABLE_COLOR_BLEND
 (1<<15)

	)

668 
	#S8_COLOR_BLEND_FUNC_SHIFT
 12

	)

669 
	#S8_BLENDFUNC_ADD
 (0)

	)

670 
	#S8_BLENDFUNC_SUB
 (1<<12)

	)

671 
	#S8_BLENDFUNC_RVRSE_SUB
 (2<<12)

	)

672 
	#S8_BLENDFUNC_MIN
 (3<<12)

	)

673 
	#S8_BLENDFUNC_MAX
 (4<<12)

	)

674 
	#S8_SRC_BLEND_FACTOR_SHIFT
 8

	)

675 
	#S8_DST_BLEND_FACTOR_SHIFT
 4

	)

676 
	#S8_ENABLE_DEPTH_BUFFER_WRITE
 (1<<3)

	)

677 
	#S8_ENABLE_COLOR_BUFFER_WRITE
 (1<<2)

	)

679 
	#_3DSTATE_LOAD_STATE_IMMEDIATE_2
 (
CMD_3D
|(0x1d<<24)|(0x03<<16))

	)

680 
	#LOAD_TEXTURE_MAP
(
x
Ë(1<<((x)+11))

	)

681 
	#LOAD_TEXTURE_BLEND_STAGE
(
x
Ë(1<<((x)+7))

	)

682 
	#LOAD_GLOBAL_COLOR_FACTOR
 (1<<6)

	)

684 
	#TM0S0_ADDRESS_MASK
 0xfffffffc

	)

685 
	#TM0S0_USE_FENCE
 (1<<1)

	)

687 
	#TM0S1_HEIGHT_SHIFT
 21

	)

688 
	#TM0S1_WIDTH_SHIFT
 10

	)

689 
	#TM0S1_PALETTE_SELECT
 (1<<9)

	)

690 
	#TM0S1_MAPSURF_FORMAT_MASK
 (0x7 << 6)

	)

691 
	#TM0S1_MAPSURF_FORMAT_SHIFT
 6

	)

692 
	#MAPSURF_8BIT_INDEXED
 (0<<6)

	)

693 
	#MAPSURF_8BIT
 (1<<6)

	)

694 
	#MAPSURF_16BIT
 (2<<6)

	)

695 
	#MAPSURF_32BIT
 (3<<6)

	)

696 
	#MAPSURF_411
 (4<<6)

	)

697 
	#MAPSURF_422
 (5<<6)

	)

698 
	#MAPSURF_COMPRESSED
 (6<<6)

	)

699 
	#MAPSURF_4BIT_INDEXED
 (7<<6)

	)

700 
	#TM0S1_MT_FORMAT_MASK
 (0x7 << 3)

	)

701 
	#TM0S1_MT_FORMAT_SHIFT
 3

	)

702 
	#MT_4BIT_IDX_ARGB8888
 (7<<3Ë

	)

703 
	#MT_8BIT_IDX_RGB565
 (0<<3Ë

	)

704 
	#MT_8BIT_IDX_ARGB1555
 (1<<3)

	)

705 
	#MT_8BIT_IDX_ARGB4444
 (2<<3)

	)

706 
	#MT_8BIT_IDX_AY88
 (3<<3)

	)

707 
	#MT_8BIT_IDX_ABGR8888
 (4<<3)

	)

708 
	#MT_8BIT_IDX_BUMP_88DVDU
 (5<<3)

	)

709 
	#MT_8BIT_IDX_BUMP_655LDVDU
 (6<<3)

	)

710 
	#MT_8BIT_IDX_ARGB8888
 (7<<3)

	)

711 
	#MT_8BIT_I8
 (0<<3Ë

	)

712 
	#MT_8BIT_L8
 (1<<3)

	)

713 
	#MT_8BIT_A8
 (4<<3)

	)

714 
	#MT_16BIT_RGB565
 (0<<3Ë

	)

715 
	#MT_16BIT_ARGB1555
 (1<<3)

	)

716 
	#MT_16BIT_ARGB4444
 (2<<3)

	)

717 
	#MT_16BIT_AY88
 (3<<3)

	)

718 
	#MT_16BIT_DIB_ARGB1555_8888
 (4<<3)

	)

719 
	#MT_16BIT_BUMP_88DVDU
 (5<<3)

	)

720 
	#MT_16BIT_BUMP_655LDVDU
 (6<<3)

	)

721 
	#MT_16BIT_DIB_RGB565_8888
 (7<<3)

	)

722 
	#MT_32BIT_ARGB8888
 (0<<3Ë

	)

723 
	#MT_32BIT_ABGR8888
 (1<<3)

	)

724 
	#MT_32BIT_XRGB8888
 (2<<3)

	)

725 
	#MT_32BIT_XBGR8888
 (3<<3)

	)

726 
	#MT_32BIT_BUMP_XLDVDU_8888
 (6<<3)

	)

727 
	#MT_32BIT_DIB_8888
 (7<<3)

	)

728 
	#MT_411_YUV411
 (0<<3Ë

	)

729 
	#MT_422_YCRCB_SWAPY
 (0<<3Ë

	)

730 
	#MT_422_YCRCB_NORMAL
 (1<<3)

	)

731 
	#MT_422_YCRCB_SWAPUV
 (2<<3)

	)

732 
	#MT_422_YCRCB_SWAPUVY
 (3<<3)

	)

733 
	#MT_COMPRESS_DXT1
 (0<<3Ë

	)

734 
	#MT_COMPRESS_DXT2_3
 (1<<3)

	)

735 
	#MT_COMPRESS_DXT4_5
 (2<<3)

	)

736 
	#MT_COMPRESS_FXT1
 (3<<3)

	)

737 
	#TM0S1_COLORSPACE_CONVERSION
 (1 << 2)

	)

738 
	#TM0S1_TILED_SURFACE
 (1 << 1)

	)

739 
	#TM0S1_TILE_WALK
 (1 << 0)

	)

741 
	#TM0S2_PITCH_SHIFT
 21

	)

742 
	#TM0S2_CUBE_FACE_ENA_SHIFT
 15

	)

743 
	#TM0S2_CUBE_FACE_ENA_MASK
 (1<<15)

	)

744 
	#TM0S2_MAP_FORMAT
 (1<<14)

	)

745 
	#TM0S2_MAP_2D
 (0<<14)

	)

746 
	#TM0S2_MAP_3D_CUBE
 (1<<14)

	)

747 
	#TM0S2_VERTICAL_LINE_STRIDE
 (1<<13)

	)

748 
	#TM0S2_VERITCAL_LINE_STRIDE_OFF
 (1<<12)

	)

749 
	#TM0S2_OUTPUT_CHAN_SHIFT
 10

	)

750 
	#TM0S2_OUTPUT_CHAN_MASK
 (3<<10)

	)

752 
	#TM0S3_MIP_FILTER_MASK
 (0x3<<30)

	)

753 
	#TM0S3_MIP_FILTER_SHIFT
 30

	)

754 
	#MIPFILTER_NONE
 0

	)

755 
	#MIPFILTER_NEAREST
 1

	)

756 
	#MIPFILTER_LINEAR
 3

	)

757 
	#TM0S3_MAG_FILTER_MASK
 (0x3<<28)

	)

758 
	#TM0S3_MAG_FILTER_SHIFT
 28

	)

759 
	#TM0S3_MIN_FILTER_MASK
 (0x3<<26)

	)

760 
	#TM0S3_MIN_FILTER_SHIFT
 26

	)

761 
	#FILTER_NEAREST
 0

	)

762 
	#FILTER_LINEAR
 1

	)

763 
	#FILTER_ANISOTROPIC
 2

	)

765 
	#TM0S3_LOD_BIAS_SHIFT
 17

	)

766 
	#TM0S3_LOD_BIAS_MASK
 (0x1ff<<17)

	)

767 
	#TM0S3_MAX_MIP_SHIFT
 9

	)

768 
	#TM0S3_MAX_MIP_MASK
 (0xff<<9)

	)

769 
	#TM0S3_MIN_MIP_SHIFT
 3

	)

770 
	#TM0S3_MIN_MIP_MASK
 (0x3f<<3)

	)

771 
	#TM0S3_KILL_PIXEL
 (1<<2)

	)

772 
	#TM0S3_KEYED_FILTER
 (1<<1)

	)

773 
	#TM0S3_CHROMA_KEY
 (1<<0)

	)

776 
	#_3DSTATE_MAP_TEX_STREAM_CMD
 (
CMD_3D
|(0x1c<<24)|(0x05<<19))

	)

777 
	#DISABLE_TEX_STREAM_BUMP
 (1<<12)

	)

778 
	#ENABLE_TEX_STREAM_BUMP
 ((1<<12)|(1<<11))

	)

779 
	#TEX_MODIFY_UNIT_0
 0

	)

780 
	#TEX_MODIFY_UNIT_1
 (1<<8)

	)

781 
	#ENABLE_TEX_STREAM_COORD_SET
 (1<<7)

	)

782 
	#TEX_STREAM_COORD_SET
(
x
Ë((x)<<4)

	)

783 
	#ENABLE_TEX_STREAM_MAP_IDX
 (1<<3)

	)

784 
	#TEX_STREAM_MAP_IDX
(
x
Ë(x)

	)

786 
	#FLUSH_MAP_CACHE
 (1<<0)

	)

788 
	#_3DSTATE_MAP_FILTER_CMD
 (
CMD_3D
|(0x1c<<24)|(0x02<<19))

	)

789 
	#FILTER_TEXMAP_INDEX
(
x
Ë((xË<< 16)

	)

790 
	#MAG_MODE_FILTER_ENABLE
 (1 << 5)

	)

791 
	#MIN_MODE_FILTER_ENABLE
 (1 << 2)

	)

792 
	#MAG_MAPFILTER_NEAREST
 (0 << 3)

	)

793 
	#MAG_MAPFILTER_LINEAR
 (1 << 3)

	)

794 
	#MAG_MAPFILTER_ANISOTROPIC
 (2 << 3)

	)

795 
	#MIN_MAPFILTER_NEAREST
 (0)

	)

796 
	#MIN_MAPFILTER_LINEAR
 (1)

	)

797 
	#MIN_MAPFILTER_ANISOTROPIC
 (2)

	)

798 
	#ENABLE_KEYS
 (1<<15)

	)

799 
	#DISABLE_COLOR_KEY
 0

	)

800 
	#DISABLE_CHROMA_KEY
 0

	)

801 
	#DISABLE_KILL_PIXEL
 0

	)

802 
	#ENABLE_MIP_MODE_FILTER
 (1 << 9)

	)

803 
	#MIPFILTER_NONE
 0

	)

804 
	#MIPFILTER_NEAREST
 1

	)

805 
	#MIPFILTER_LINEAR
 3

	)

	@i915/gem_context.c

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

27 
	~"io˘l_wøµîs.h
"

28 
	~"drmã°.h
"

30 
	~"i915/gem_c⁄ãxt.h
"

56 
uöt32_t
 
	$gem_c⁄ãxt_¸óã
(
fd
)

58 
drm_i915_gem_c⁄ãxt_¸óã
 
¸óã
;

60 
	`mem£t
(&
¸óã
, 0, (create));

61 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_CONTEXT_CREATE
, &
¸óã
)) {

62 
îr
 = -
î∫o
;

63 
	`igt_skù_⁄
(
îr
 =-
ENODEV
 || 
î∫o
 =-
EINVAL
);

64 
	`igt_as£π_eq
(
îr
, 0);

66 
	`igt_as£π
(
¸óã
.
˘x_id
 != 0);

67 
î∫o
 = 0;

69  
¸óã
.
˘x_id
;

70 
	}
}

72 
	$__gem_c⁄ãxt_de°roy
(
fd
, 
uöt32_t
 
˘x_id
)

74 
drm_i915_gem_c⁄ãxt_de°roy
 
de°roy
;

75 
ªt
;

77 
	`mem£t
(&
de°roy
, 0, (destroy));

78 
de°roy
.
˘x_id
 = ctx_id;

80 
ªt
 = 
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_CONTEXT_DESTROY
, &
de°roy
);

81 i‡(
ªt
)

82  -
î∫o
;

84 
	}
}

93 
	$gem_c⁄ãxt_de°roy
(
fd
, 
uöt32_t
 
˘x_id
)

95 
drm_i915_gem_c⁄ãxt_de°roy
 
de°roy
;

97 
	`mem£t
(&
de°roy
, 0, (destroy));

98 
de°roy
.
˘x_id
 = ctx_id;

100 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_CONTEXT_DESTROY
, &
de°roy
);

101 
	}
}

103 
	$__gem_c⁄ãxt_gë_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
)

105 
	#LOCAL_I915_GEM_CONTEXT_GETPARAM
 0x34

	)

106 
	#LOCAL_IOCTL_I915_GEM_CONTEXT_GETPARAM
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
LOCAL_I915_GEM_CONTEXT_GETPARAM
, 
loˇl_i915_gem_c⁄ãxt_∑øm
)

	)

107 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CONTEXT_GETPARAM
, 
p
))

108  -
î∫o
;

110 
î∫o
 = 0;

112 
	}
}

122 
	$gem_c⁄ãxt_gë_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
)

124 
	`igt_as£π
(
	`__gem_c⁄ãxt_gë_∑øm
(
fd
, 
p
) == 0);

125 
	}
}

128 
	$__gem_c⁄ãxt_£t_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
)

130 
	#LOCAL_I915_GEM_CONTEXT_SETPARAM
 0x35

	)

131 
	#LOCAL_IOCTL_I915_GEM_CONTEXT_SETPARAM
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
LOCAL_I915_GEM_CONTEXT_SETPARAM
, 
loˇl_i915_gem_c⁄ãxt_∑øm
)

	)

132 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CONTEXT_SETPARAM
, 
p
))

133  -
î∫o
;

135 
î∫o
 = 0;

137 
	}
}

146 
	$gem_c⁄ãxt_£t_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
)

148 
	`igt_as£π
(
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, 
p
) == 0);

149 
	}
}

159 
	$gem_c⁄ãxt_ªquúe_∑øm
(
fd
, 
uöt64_t
 
∑øm
)

161 
loˇl_i915_gem_c⁄ãxt_∑øm
 
p
;

163 
p
.
c⁄ãxt
 = 0;

164 
p
.
∑øm
 =Öaram;

165 
p
.
vÆue
 = 0;

166 
p
.
size
 = 0;

168 
	`igt_ªquúe
(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CONTEXT_GETPARAM
, &
p
) == 0);

169 
	}
}

171 
	$gem_c⁄ãxt_ªquúe_b™«bÀ
(
fd
)

173 
has_b™_≥riod
 = -1;

174 
has_b™«bÀ
 = -1;

176 i‡(
has_b™«bÀ
 < 0) {

177 
loˇl_i915_gem_c⁄ãxt_∑øm
 
p
;

179 
p
.
c⁄ãxt
 = 0;

180 
p
.
∑øm
 = 
LOCAL_CONTEXT_PARAM_BANNABLE
;

181 
p
.
vÆue
 = 0;

182 
p
.
size
 = 0;

184 
has_b™«bÀ
 = 
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CONTEXT_GETPARAM
, &
p
) == 0;

187 i‡(
has_b™_≥riod
 < 0) {

188 
loˇl_i915_gem_c⁄ãxt_∑øm
 
p
;

190 
p
.
c⁄ãxt
 = 0;

191 
p
.
∑øm
 = 
LOCAL_CONTEXT_PARAM_BAN_PERIOD
;

192 
p
.
vÆue
 = 0;

193 
p
.
size
 = 0;

195 
has_b™_≥riod
 = 
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CONTEXT_GETPARAM
, &
p
) == 0;

198 
	`igt_ªquúe
(
has_b™_≥riod
 || 
has_b™«bÀ
);

199 
	}
}

201 
	#LOCAL_I915_CONTEXT_PARAM_PRIORITY
 0x6

	)

215 
	$__gem_c⁄ãxt_£t_¥i‹ôy
(
fd
, 
uöt32_t
 
˘x_id
, 
¥io
)

217 
loˇl_i915_gem_c⁄ãxt_∑øm
 
p
;

219 
	`mem£t
(&
p
, 0, (p));

220 
p
.
c⁄ãxt
 = 
˘x_id
;

221 
p
.
size
 = 0;

222 
p
.
∑øm
 = 
LOCAL_I915_CONTEXT_PARAM_PRIORITY
;

223 
p
.
vÆue
 = 
¥io
;

225  
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
p
);

226 
	}
}

236 
	$gem_c⁄ãxt_£t_¥i‹ôy
(
fd
, 
uöt32_t
 
˘x_id
, 
¥io
)

238 
	`igt_as£π
(
	`__gem_c⁄ãxt_£t_¥i‹ôy
(
fd
, 
˘x_id
, 
¥io
) == 0);

239 
	}
}

	@i915/gem_context.h

24 #i‚de‡
GEM_CONTEXT_H


25 
	#GEM_CONTEXT_H


	)

27 
uöt32_t
 
gem_c⁄ãxt_¸óã
(
fd
);

28 
gem_c⁄ãxt_de°roy
(
fd
, 
uöt32_t
 
˘x_id
);

29 
__gem_c⁄ãxt_de°roy
(
fd
, 
uöt32_t
 
˘x_id
);

30 
	sloˇl_i915_gem_c⁄ãxt_∑øm
 {

31 
uöt32_t
 
	mc⁄ãxt
;

32 
uöt32_t
 
	msize
;

33 
uöt64_t
 
	m∑øm
;

34 
	#LOCAL_CONTEXT_PARAM_BAN_PERIOD
 0x1

	)

35 
	#LOCAL_CONTEXT_PARAM_NO_ZEROMAP
 0x2

	)

36 
	#LOCAL_CONTEXT_PARAM_GTT_SIZE
 0x3

	)

37 
	#LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
 0x4

	)

38 
	#LOCAL_CONTEXT_PARAM_BANNABLE
 0x5

	)

39 
uöt64_t
 
	mvÆue
;

41 
gem_c⁄ãxt_ªquúe_b™«bÀ
(
fd
);

42 
gem_c⁄ãxt_ªquúe_∑øm
(
fd
, 
uöt64_t
 
∑øm
);

43 
gem_c⁄ãxt_gë_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
);

44 
gem_c⁄ãxt_£t_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
);

45 
__gem_c⁄ãxt_£t_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
);

46 
__gem_c⁄ãxt_gë_∑øm
(
fd
, 
loˇl_i915_gem_c⁄ãxt_∑øm
 *
p
);

48 
	#LOCAL_I915_CONTEXT_MAX_USER_PRIORITY
 1023

	)

49 
	#LOCAL_I915_CONTEXT_DEFAULT_PRIORITY
 0

	)

50 
	#LOCAL_I915_CONTEXT_MIN_USER_PRIORITY
 -1023

	)

51 
__gem_c⁄ãxt_£t_¥i‹ôy
(
fd
, 
uöt32_t
 
˘x
, 
¥io
);

52 
gem_c⁄ãxt_£t_¥i‹ôy
(
fd
, 
uöt32_t
 
˘x
, 
¥io
);

	@i915/gem_scheduler.c

24 
	~<î∫o.h
>

25 
	~<°rög.h
>

26 
	~<sys/io˘l.h
>

28 
	~"igt_c‹e.h
"

29 
	~"io˘l_wøµîs.h
"

31 
	~"i915/gem_scheduÀr.h
"

33 
	#LOCAL_I915_PARAM_HAS_SCHEDULER
 41

	)

50 
	$gem_scheduÀr_ˇ∑bûôy
(
fd
)

52 
ˇps
 = -1;

54 i‡(
ˇps
 < 0) {

55 
drm_i915_gë∑øm
 
gp
;

57 
	`mem£t
(&
gp
, 0, (gp));

58 
gp
.
∑øm
 = 
LOCAL_I915_PARAM_HAS_SCHEDULER
;

59 
gp
.
vÆue
 = &
ˇps
;

61 
ˇps
 = 0;

62 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp));

63 
î∫o
 = 0;

66  
ˇps
;

67 
	}
}

75 
boﬁ
 
	$gem_scheduÀr_íabÀd
(
fd
)

77  
	`gem_scheduÀr_ˇ∑bûôy
(
fd
) &

78 
LOCAL_I915_SCHEDULER_CAP_ENABLED
;

79 
	}
}

88 
boﬁ
 
	$gem_scheduÀr_has_˘x_¥i‹ôy
(
fd
)

90  
	`gem_scheduÀr_ˇ∑bûôy
(
fd
) &

91 
LOCAL_I915_SCHEDULER_CAP_PRIORITY
;

92 
	}
}

101 
boﬁ
 
	$gem_scheduÀr_has_¥ìm±i⁄
(
fd
)

103  
	`gem_scheduÀr_ˇ∑bûôy
(
fd
) &

104 
LOCAL_I915_SCHEDULER_CAP_PREEMPTION
;

105 
	}
}

113 
	$gem_scheduÀr_¥öt_ˇ∑bûôy
(
fd
)

115 
ˇps
 = 
	`gem_scheduÀr_ˇ∑bûôy
(
fd
);

117 i‡(!
ˇps
)

120 
	`igt_öfo
("Has kernel scheduler\n");

121 i‡(
ˇps
 & 
LOCAL_I915_SCHEDULER_CAP_PRIORITY
)

122 
	`igt_öfo
(" - WithÖriority sorting\n");

123 i‡(
ˇps
 & 
LOCAL_I915_SCHEDULER_CAP_PREEMPTION
)

124 
	`igt_öfo
(" - WithÖreemptionÉnabled\n");

125 
	}
}

	@i915/gem_scheduler.h

24 #i‚de‡
GEM_SCHEDULER_H


25 
	#GEM_SCHEDULER_H


	)

27 
	#LOCAL_I915_SCHEDULER_CAP_ENABLED
 (1 << 0)

	)

28 
	#LOCAL_I915_SCHEDULER_CAP_PRIORITY
 (1 << 1)

	)

29 
	#LOCAL_I915_SCHEDULER_CAP_PREEMPTION
 (1 << 2)

	)

31 
gem_scheduÀr_ˇ∑bûôy
(
fd
);

32 
boﬁ
 
gem_scheduÀr_íabÀd
(
fd
);

33 
boﬁ
 
gem_scheduÀr_has_˘x_¥i‹ôy
(
fd
);

34 
boﬁ
 
gem_scheduÀr_has_¥ìm±i⁄
(
fd
);

35 
gem_scheduÀr_¥öt_ˇ∑bûôy
(
fd
);

	@i915/gem_submission.c

24 
	~<°dboﬁ.h
>

26 
	~"igt_c‹e.h
"

27 
	~"igt_sysfs.h
"

29 
	~"i915/gem_submissi⁄.h
"

50 
	$gem_submissi⁄_mëhod
(
fd
)

52 
Êags
 = 0;

53 
boﬁ
 
a˘ive
;

54 
dú
;

56 
dú
 = 
	`igt_sysfs_›í_∑ømëîs
(
fd
);

57 i‡(
dú
 < 0)

60 
a˘ive
 = 
	`igt_sysfs_gë_boﬁón
(
dú
, "enable_guc_submission");

61 i‡(
a˘ive
) {

62 
Êags
 |
GEM_SUBMISSION_GUC
 | 
GEM_SUBMISSION_EXECLISTS
;

63 
out
;

66 
a˘ive
 = 
	`igt_sysfs_gë_boﬁón
(
dú
, "enable_execlists");

67 i‡(
a˘ive
) {

68 
Êags
 |
GEM_SUBMISSION_EXECLISTS
;

69 
out
;

72 
a˘ive
 = 
	`igt_sysfs_gë_boﬁón
(
dú
, "semaphores");

73 i‡(
a˘ive
) {

74 
Êags
 |
GEM_SUBMISSION_SEMAPHORES
;

77 
out
:

78 
	`˛o£
(
dú
);

79  
Êags
;

80 
	}
}

88 
	$gem_submissi⁄_¥öt_mëhod
(
fd
)

90 c⁄° 
Êags
 = 
	`gem_submissi⁄_mëhod
(
fd
);

92 i‡(
Êags
 & 
GEM_SUBMISSION_GUC
) {

93 
	`igt_öfo
("Using GuC submission\n");

97 i‡(
Êags
 & 
GEM_SUBMISSION_EXECLISTS
) {

98 
	`igt_öfo
("Using Execlists submission\n");

102 
	`igt_öfo
("Using Legacy submission%s\n",

103 
Êags
 & 
GEM_SUBMISSION_SEMAPHORES
 ? ", with semaphores" : "");

104 
	}
}

113 
boﬁ
 
	$gem_has_£m≠h‹es
(
fd
)

115  
	`gem_submissi⁄_mëhod
(
fd
Ë& 
GEM_SUBMISSION_SEMAPHORES
;

116 
	}
}

125 
boﬁ
 
	$gem_has_exe˛i°s
(
fd
)

127  
	`gem_submissi⁄_mëhod
(
fd
Ë& 
GEM_SUBMISSION_EXECLISTS
;

128 
	}
}

137 
boﬁ
 
	$gem_has_guc_submissi⁄
(
fd
)

139  
	`gem_submissi⁄_mëhod
(
fd
Ë& 
GEM_SUBMISSION_GUC
;

140 
	}
}

	@i915/gem_submission.h

24 #i‚de‡
GEM_SUBMISSION_H


25 
	#GEM_SUBMISSION_H


	)

27 
	#GEM_SUBMISSION_SEMAPHORES
 (1 << 0)

	)

28 
	#GEM_SUBMISSION_EXECLISTS
 (1 << 1)

	)

29 
	#GEM_SUBMISSION_GUC
 (1 << 2)

	)

30 
gem_submissi⁄_mëhod
(
fd
);

31 
gem_submissi⁄_¥öt_mëhod
(
fd
);

32 
boﬁ
 
gem_has_£m≠h‹es
(
fd
);

33 
boﬁ
 
gem_has_exe˛i°s
(
fd
);

34 
boﬁ
 
gem_has_guc_submissi⁄
(
fd
);

	@i915_3d.h

34 
	#_3DSTATE_PIXEL_SHADER_PROGRAM
 (
CMD_3D
|(0x1d<<24)|(0x5<<16))

	)

36 
	#REG_TYPE_R
 0

	)

41 
	#REG_TYPE_T
 1

	)

49 
	#REG_TYPE_CONST
 2

	)

56 
	#REG_TYPE_S
 3

	)

57 
	#REG_TYPE_OC
 4

	)

58 
	#REG_TYPE_OD
 5

	)

62 
	#REG_TYPE_U
 6

	)

63 
	#REG_TYPE_MASK
 0x7

	)

64 
	#REG_TYPE_SHIFT
 4

	)

65 
	#REG_NR_MASK
 0xf

	)

69 
	#T_TEX0
 0

	)

70 
	#T_TEX1
 1

	)

71 
	#T_TEX2
 2

	)

72 
	#T_TEX3
 3

	)

73 
	#T_TEX4
 4

	)

74 
	#T_TEX5
 5

	)

75 
	#T_TEX6
 6

	)

76 
	#T_TEX7
 7

	)

77 
	#T_DIFFUSE
 8

	)

78 
	#T_SPECULAR
 9

	)

79 
	#T_FOG_W
 10

	)

86 
	#A0_NOP
 (0x0<<24Ë

	)

87 
	#A0_ADD
 (0x1<<24Ë

	)

88 
	#A0_MOV
 (0x2<<24Ë

	)

89 
	#A0_MUL
 (0x3<<24Ë

	)

90 
	#A0_MAD
 (0x4<<24Ë

	)

91 
	#A0_DP2ADD
 (0x5<<24Ë

	)

92 
	#A0_DP3
 (0x6<<24Ë

	)

93 
	#A0_DP4
 (0x7<<24Ë

	)

94 
	#A0_FRC
 (0x8<<24Ë

	)

95 
	#A0_RCP
 (0x9<<24Ë

	)

96 
	#A0_RSQ
 (0xa<<24Ë

	)

97 
	#A0_EXP
 (0xb<<24Ë

	)

98 
	#A0_LOG
 (0xc<<24Ë

	)

99 
	#A0_CMP
 (0xd<<24Ë

	)

100 
	#A0_MIN
 (0xe<<24Ë

	)

101 
	#A0_MAX
 (0xf<<24Ë

	)

102 
	#A0_FLR
 (0x10<<24Ë

	)

103 
	#A0_MOD
 (0x11<<24Ë

	)

104 
	#A0_TRC
 (0x12<<24Ë

	)

105 
	#A0_SGE
 (0x13<<24Ë

	)

106 
	#A0_SLT
 (0x14<<24Ë

	)

107 
	#A0_DEST_SATURATE
 (1<<22)

	)

108 
	#A0_DEST_TYPE_SHIFT
 19

	)

110 
	#A0_DEST_NR_SHIFT
 14

	)

112 
	#A0_DEST_CHANNEL_X
 (1<<10)

	)

113 
	#A0_DEST_CHANNEL_Y
 (2<<10)

	)

114 
	#A0_DEST_CHANNEL_Z
 (4<<10)

	)

115 
	#A0_DEST_CHANNEL_W
 (8<<10)

	)

116 
	#A0_DEST_CHANNEL_ALL
 (0xf<<10)

	)

117 
	#A0_DEST_CHANNEL_SHIFT
 10

	)

118 
	#A0_SRC0_TYPE_SHIFT
 7

	)

119 
	#A0_SRC0_NR_SHIFT
 2

	)

121 
	#A0_DEST_CHANNEL_XY
 (
A0_DEST_CHANNEL_X
|
A0_DEST_CHANNEL_Y
)

	)

122 
	#A0_DEST_CHANNEL_XYZ
 (
A0_DEST_CHANNEL_XY
|
A0_DEST_CHANNEL_Z
)

	)

124 
	#SRC_X
 0

	)

125 
	#SRC_Y
 1

	)

126 
	#SRC_Z
 2

	)

127 
	#SRC_W
 3

	)

128 
	#SRC_ZERO
 4

	)

129 
	#SRC_ONE
 5

	)

131 
	#A1_SRC0_CHANNEL_X_NEGATE
 (1<<31)

	)

132 
	#A1_SRC0_CHANNEL_X_SHIFT
 28

	)

133 
	#A1_SRC0_CHANNEL_Y_NEGATE
 (1<<27)

	)

134 
	#A1_SRC0_CHANNEL_Y_SHIFT
 24

	)

135 
	#A1_SRC0_CHANNEL_Z_NEGATE
 (1<<23)

	)

136 
	#A1_SRC0_CHANNEL_Z_SHIFT
 20

	)

137 
	#A1_SRC0_CHANNEL_W_NEGATE
 (1<<19)

	)

138 
	#A1_SRC0_CHANNEL_W_SHIFT
 16

	)

139 
	#A1_SRC1_TYPE_SHIFT
 13

	)

140 
	#A1_SRC1_NR_SHIFT
 8

	)

141 
	#A1_SRC1_CHANNEL_X_NEGATE
 (1<<7)

	)

142 
	#A1_SRC1_CHANNEL_X_SHIFT
 4

	)

143 
	#A1_SRC1_CHANNEL_Y_NEGATE
 (1<<3)

	)

144 
	#A1_SRC1_CHANNEL_Y_SHIFT
 0

	)

146 
	#A2_SRC1_CHANNEL_Z_NEGATE
 (1<<31)

	)

147 
	#A2_SRC1_CHANNEL_Z_SHIFT
 28

	)

148 
	#A2_SRC1_CHANNEL_W_NEGATE
 (1<<27)

	)

149 
	#A2_SRC1_CHANNEL_W_SHIFT
 24

	)

150 
	#A2_SRC2_TYPE_SHIFT
 21

	)

151 
	#A2_SRC2_NR_SHIFT
 16

	)

152 
	#A2_SRC2_CHANNEL_X_NEGATE
 (1<<15)

	)

153 
	#A2_SRC2_CHANNEL_X_SHIFT
 12

	)

154 
	#A2_SRC2_CHANNEL_Y_NEGATE
 (1<<11)

	)

155 
	#A2_SRC2_CHANNEL_Y_SHIFT
 8

	)

156 
	#A2_SRC2_CHANNEL_Z_NEGATE
 (1<<7)

	)

157 
	#A2_SRC2_CHANNEL_Z_SHIFT
 4

	)

158 
	#A2_SRC2_CHANNEL_W_NEGATE
 (1<<3)

	)

159 
	#A2_SRC2_CHANNEL_W_SHIFT
 0

	)

162 
	#T0_TEXLD
 (0x15<<24Ë

	)

166 
	#T0_TEXLDP
 (0x16<<24Ë

	)

170 
	#T0_TEXLDB
 (0x17<<24Ë

	)

175 
	#T0_TEXKILL
 (0x18<<24Ë

	)

179 
	#T0_DEST_TYPE_SHIFT
 19

	)

188 
	#T0_DEST_NR_SHIFT
 14

	)

190 
	#T0_SAMPLER_NR_SHIFT
 0

	)

191 
	#T0_SAMPLER_NR_MASK
 (0xf<<0)

	)

193 
	#T1_ADDRESS_REG_TYPE_SHIFT
 24

	)

195 
	#T1_ADDRESS_REG_NR_SHIFT
 17

	)

196 
	#T2_MBZ
 0

	)

199 
	#D0_DCL
 (0x19<<24Ë

	)

202 
	#D0_SAMPLE_TYPE_SHIFT
 22

	)

203 
	#D0_SAMPLE_TYPE_2D
 (0x0<<22)

	)

204 
	#D0_SAMPLE_TYPE_CUBE
 (0x1<<22)

	)

205 
	#D0_SAMPLE_TYPE_VOLUME
 (0x2<<22)

	)

206 
	#D0_SAMPLE_TYPE_MASK
 (0x3<<22)

	)

208 
	#D0_TYPE_SHIFT
 19

	)

210 
	#D0_NR_SHIFT
 14

	)

212 
	#D0_CHANNEL_X
 (1<<10)

	)

213 
	#D0_CHANNEL_Y
 (2<<10)

	)

214 
	#D0_CHANNEL_Z
 (4<<10)

	)

215 
	#D0_CHANNEL_W
 (8<<10)

	)

216 
	#D0_CHANNEL_ALL
 (0xf<<10)

	)

217 
	#D0_CHANNEL_NONE
 (0<<10)

	)

219 
	#D0_CHANNEL_XY
 (
D0_CHANNEL_X
|
D0_CHANNEL_Y
)

	)

220 
	#D0_CHANNEL_XYZ
 (
D0_CHANNEL_XY
|
D0_CHANNEL_Z
)

	)

229 
	#D1_MBZ
 0

	)

230 
	#D2_MBZ
 0

	)

236 
	#MASK_X
 0x1

	)

237 
	#MASK_Y
 0x2

	)

238 
	#MASK_Z
 0x4

	)

239 
	#MASK_W
 0x8

	)

240 
	#MASK_XYZ
 (
MASK_X
 | 
MASK_Y
 | 
MASK_Z
)

	)

241 
	#MASK_XYZW
 (
MASK_XYZ
 | 
MASK_W
)

	)

242 
	#MASK_SATURATE
 0x10

	)

245 
	#FS_R0
 ((
REG_TYPE_R
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

246 
	#FS_R1
 ((
REG_TYPE_R
 << 
REG_TYPE_SHIFT
Ë| 1)

	)

247 
	#FS_R2
 ((
REG_TYPE_R
 << 
REG_TYPE_SHIFT
Ë| 2)

	)

248 
	#FS_R3
 ((
REG_TYPE_R
 << 
REG_TYPE_SHIFT
Ë| 3)

	)

251 
	#FS_T0
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

252 
	#FS_T1
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 1)

	)

253 
	#FS_T2
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 2)

	)

254 
	#FS_T3
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 3)

	)

255 
	#FS_T4
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 4)

	)

256 
	#FS_T5
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 5)

	)

257 
	#FS_T6
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 6)

	)

258 
	#FS_T7
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 7)

	)

259 
	#FS_T8
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 8)

	)

260 
	#FS_T9
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 9)

	)

261 
	#FS_T10
 ((
REG_TYPE_T
 << 
REG_TYPE_SHIFT
Ë| 10)

	)

264 
	#FS_C0
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

265 
	#FS_C1
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 1)

	)

266 
	#FS_C2
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 2)

	)

267 
	#FS_C3
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 3)

	)

268 
	#FS_C4
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 4)

	)

269 
	#FS_C5
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 5)

	)

270 
	#FS_C6
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 6)

	)

271 
	#FS_C7
 ((
REG_TYPE_CONST
 << 
REG_TYPE_SHIFT
Ë| 7)

	)

274 
	#FS_S0
 ((
REG_TYPE_S
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

275 
	#FS_S1
 ((
REG_TYPE_S
 << 
REG_TYPE_SHIFT
Ë| 1)

	)

276 
	#FS_S2
 ((
REG_TYPE_S
 << 
REG_TYPE_SHIFT
Ë| 2)

	)

277 
	#FS_S3
 ((
REG_TYPE_S
 << 
REG_TYPE_SHIFT
Ë| 3)

	)

280 
	#FS_OC
 ((
REG_TYPE_OC
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

283 
	#FS_OD
 ((
REG_TYPE_OD
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

286 
	#FS_U0
 ((
REG_TYPE_U
 << 
REG_TYPE_SHIFT
Ë| 0)

	)

287 
	#FS_U1
 ((
REG_TYPE_U
 << 
REG_TYPE_SHIFT
Ë| 1)

	)

288 
	#FS_U2
 ((
REG_TYPE_U
 << 
REG_TYPE_SHIFT
Ë| 2)

	)

289 
	#FS_U3
 ((
REG_TYPE_U
 << 
REG_TYPE_SHIFT
Ë| 3)

	)

291 
	#X_CHANNEL_SHIFT
 (
REG_TYPE_SHIFT
 + 3)

	)

292 
	#Y_CHANNEL_SHIFT
 (
X_CHANNEL_SHIFT
 + 4)

	)

293 
	#Z_CHANNEL_SHIFT
 (
Y_CHANNEL_SHIFT
 + 4)

	)

294 
	#W_CHANNEL_SHIFT
 (
Z_CHANNEL_SHIFT
 + 4)

	)

296 
	#REG_CHANNEL_MASK
 0xf

	)

298 
	#REG_NR
(
ªg
Ë(‘egË& 
REG_NR_MASK
)

	)

299 
	#REG_TYPE
(
ªg
Ë((‘egË>> 
REG_TYPE_SHIFT
Ë& 
REG_TYPE_MASK
)

	)

300 
	#REG_X
(
ªg
Ë((‘egË>> 
X_CHANNEL_SHIFT
Ë& 
REG_CHANNEL_MASK
)

	)

301 
	#REG_Y
(
ªg
Ë((‘egË>> 
Y_CHANNEL_SHIFT
Ë& 
REG_CHANNEL_MASK
)

	)

302 
	#REG_Z
(
ªg
Ë((‘egË>> 
Z_CHANNEL_SHIFT
Ë& 
REG_CHANNEL_MASK
)

	)

303 
	#REG_W
(
ªg
Ë((‘egË>> 
W_CHANNEL_SHIFT
Ë& 
REG_CHANNEL_MASK
)

	)

305 
	ei915_fs_ch™√l
 {

306 
	mX_CHANNEL_VAL
 = 0,

307 
	mY_CHANNEL_VAL
,

308 
	mZ_CHANNEL_VAL
,

309 
	mW_CHANNEL_VAL
,

310 
	mZERO_CHANNEL_VAL
,

311 
	mONE_CHANNEL_VAL
,

313 
	mNEG_X_CHANNEL_VAL
 = 
X_CHANNEL_VAL
 | 0x8,

314 
	mNEG_Y_CHANNEL_VAL
 = 
Y_CHANNEL_VAL
 | 0x8,

315 
	mNEG_Z_CHANNEL_VAL
 = 
Z_CHANNEL_VAL
 | 0x8,

316 
	mNEG_W_CHANNEL_VAL
 = 
W_CHANNEL_VAL
 | 0x8,

317 
	mNEG_ONE_CHANNEL_VAL
 = 
ONE_CHANNEL_VAL
 | 0x8

320 
	#i915_fs_›î™d
(
ªg
, 
x
, 
y
, 
z
, 
w
) \

321 (
ªg
) | \

322 (
x
##
_CHANNEL_VAL
 << 
X_CHANNEL_SHIFT
) | \

323 (
y
##
_CHANNEL_VAL
 << 
Y_CHANNEL_SHIFT
) | \

324 (
z
##
_CHANNEL_VAL
 << 
Z_CHANNEL_SHIFT
) | \

325 (
w
##
_CHANNEL_VAL
 << 
W_CHANNEL_SHIFT
)

	)

330 
	#i915_fs_›î™d_ªg
(
ªg
) \

331 
	`i915_fs_›î™d
(
ªg
, 
X
, 
Y
, 
Z
, 
W
)

	)

333 
	#i915_fs_›î™d_ªg_√g©e
(
ªg
) \

334 
	`i915_fs_›î™d
(
ªg
, 
NEG_X
, 
NEG_Y
, 
NEG_Z
, 
NEG_W
)

	)

339 
	#i915_fs_›î™d_zîo
(Ë
	`i915_fs_›î™d
(
FS_R0
, 
ZERO
, ZERO, ZERO, ZERO)

	)

344 
	#i915_fs_›î™d_n⁄e
(Ë
	`i915_fs_›î™d_zîo
()

	)

349 
	#i915_fs_›î™d_⁄e
(Ë
	`i915_fs_›î™d
(
FS_R0
, 
ONE
, ONE, ONE, ONE)

	)

351 
	#i915_gë_h¨dw¨e_ch™√l_vÆ
(
vÆ
, 
shi·
, 
√g©e
) \

352 (((
vÆ
 & 0x7Ë<< 
shi·
Ë| ((vÆ & 0x8Ë? 
√g©e
 : 0))

	)

357 
	#i915_fs_d˛
(
ªg
) \

359 
	`OUT_BATCH
(
D0_DCL
 | \

360 (
	`REG_TYPE
(
ªg
Ë<< 
D0_TYPE_SHIFT
) | \

361 (
	`REG_NR
(
ªg
Ë<< 
D0_NR_SHIFT
) | \

362 ((
	`REG_TYPE
(
ªg
Ë!
REG_TYPE_S
Ë? 
D0_CHANNEL_ALL
 : 0)); \

363 
	`OUT_BATCH
(0); \

364 
	`OUT_BATCH
(0); \

365 } 0)

	)

367 
	#i915_fs_ãxld
(
de°_ªg
, 
ßm∂î_ªg
, 
addªss_ªg
) \

369 
	`OUT_BATCH
(
T0_TEXLD
 | \

370 (
	`REG_TYPE
(
de°_ªg
Ë<< 
T0_DEST_TYPE_SHIFT
) | \

371 (
	`REG_NR
(
de°_ªg
Ë<< 
T0_DEST_NR_SHIFT
) | \

372 (
	`REG_NR
(
ßm∂î_ªg
Ë<< 
T0_SAMPLER_NR_SHIFT
)); \

373 
	`OUT_BATCH
((
	`REG_TYPE
(
addªss_ªg
Ë<< 
T1_ADDRESS_REG_TYPE_SHIFT
) | \

374 (
	`REG_NR
(
addªss_ªg
Ë<< 
T1_ADDRESS_REG_NR_SHIFT
)); \

375 
	`OUT_BATCH
(0); \

376 } 0)

	)

378 
	#i915_fs_ãxldp
(
de°_ªg
, 
ßm∂î_ªg
, 
addªss_ªg
) \

380 
	`OUT_BATCH
(
T0_TEXLDP
 | \

381 (
	`REG_TYPE
(
de°_ªg
Ë<< 
T0_DEST_TYPE_SHIFT
) | \

382 (
	`REG_NR
(
de°_ªg
Ë<< 
T0_DEST_NR_SHIFT
) | \

383 (
	`REG_NR
(
ßm∂î_ªg
Ë<< 
T0_SAMPLER_NR_SHIFT
)); \

384 
	`OUT_BATCH
((
	`REG_TYPE
(
addªss_ªg
Ë<< 
T1_ADDRESS_REG_TYPE_SHIFT
) | \

385 (
	`REG_NR
(
addªss_ªg
Ë<< 
T1_ADDRESS_REG_NR_SHIFT
)); \

386 
	`OUT_BATCH
(0); \

387 } 0)

	)

389 
	#i915_fs_¨ôh_masked
(
›
, 
de°_ªg
, 
de°_mask
, 
›î™d0
, 
›î™d1
, 
›î™d2
) \

390 
	`_i915_fs_¨ôh_masked
(
A0_
##
›
, 
de°_ªg
, 
de°_mask
, 
›î™d0
, 
›î™d1
, 
›î™d2
)

	)

392 
	#i915_fs_¨ôh
(
›
, 
de°_ªg
, 
›î™d0
, 
›î™d1
, 
›î™d2
) \

393 
	`_i915_fs_¨ôh
(
A0_
##
›
, 
de°_ªg
, 
›î™d0
, 
›î™d1
, 
›î™d2
)

	)

395 
	#_i915_fs_¨ôh_masked
(
cmd
, 
de°_ªg
, 
de°_mask
, 
›î™d0
, 
›î™d1
, 
›î™d2
) \

398 
	`OUT_BATCH
(
cmd
 | \

399 (
	`REG_TYPE
(
de°_ªg
Ë<< 
A0_DEST_TYPE_SHIFT
) | \

400 (
	`REG_NR
(
de°_ªg
Ë<< 
A0_DEST_NR_SHIFT
) | \

401 (((
de°_mask
Ë& ~
MASK_SATURATE
Ë<< 
A0_DEST_CHANNEL_SHIFT
) | \

402 (((
de°_mask
Ë& 
MASK_SATURATE
Ë? 
A0_DEST_SATURATE
 : 0) | \

404 (
	`REG_TYPE
(
›î™d0
Ë<< 
A0_SRC0_TYPE_SHIFT
) | \

405 (
	`REG_NR
(
›î™d0
Ë<< 
A0_SRC0_NR_SHIFT
)); \

406 
	`OUT_BATCH
(
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d0
), \

407 
A1_SRC0_CHANNEL_X_SHIFT
, \

408 
A1_SRC0_CHANNEL_X_NEGATE
) | \

409 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d0
), \

410 
A1_SRC0_CHANNEL_Y_SHIFT
, \

411 
A1_SRC0_CHANNEL_Y_NEGATE
) | \

412 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d0
), \

413 
A1_SRC0_CHANNEL_Z_SHIFT
, \

414 
A1_SRC0_CHANNEL_Z_NEGATE
) | \

415 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d0
), \

416 
A1_SRC0_CHANNEL_W_SHIFT
, \

417 
A1_SRC0_CHANNEL_W_NEGATE
) | \

419 (
	`REG_TYPE
(
›î™d1
Ë<< 
A1_SRC1_TYPE_SHIFT
) | \

420 (
	`REG_NR
(
›î™d1
Ë<< 
A1_SRC1_NR_SHIFT
) | \

421 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d1
), \

422 
A1_SRC1_CHANNEL_X_SHIFT
, \

423 
A1_SRC1_CHANNEL_X_NEGATE
) | \

424 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d1
), \

425 
A1_SRC1_CHANNEL_Y_SHIFT
, \

426 
A1_SRC1_CHANNEL_Y_NEGATE
)); \

427 
	`OUT_BATCH
(
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d1
), \

428 
A2_SRC1_CHANNEL_Z_SHIFT
, \

429 
A2_SRC1_CHANNEL_Z_NEGATE
) | \

430 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d1
), \

431 
A2_SRC1_CHANNEL_W_SHIFT
, \

432 
A2_SRC1_CHANNEL_W_NEGATE
) | \

434 (
	`REG_TYPE
(
›î™d2
Ë<< 
A2_SRC2_TYPE_SHIFT
) | \

435 (
	`REG_NR
(
›î™d2
Ë<< 
A2_SRC2_NR_SHIFT
) | \

436 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d2
), \

437 
A2_SRC2_CHANNEL_X_SHIFT
, \

438 
A2_SRC2_CHANNEL_X_NEGATE
) | \

439 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d2
), \

440 
A2_SRC2_CHANNEL_Y_SHIFT
, \

441 
A2_SRC2_CHANNEL_Y_NEGATE
) | \

442 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d2
), \

443 
A2_SRC2_CHANNEL_Z_SHIFT
, \

444 
A2_SRC2_CHANNEL_Z_NEGATE
) | \

445 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d2
), \

446 
A2_SRC2_CHANNEL_W_SHIFT
, \

447 
A2_SRC2_CHANNEL_W_NEGATE
)); \

448 } 0)

	)

450 
	#_i915_fs_¨ôh
(
cmd
, 
de°_ªg
, 
›î™d0
, 
›î™d1
, 
›î™d2
) do {\

452 
	`OUT_BATCH
(
cmd
 | \

453 (
	`REG_TYPE
(
de°_ªg
Ë<< 
A0_DEST_TYPE_SHIFT
) | \

454 (
	`REG_NR
(
de°_ªg
Ë<< 
A0_DEST_NR_SHIFT
) | \

455 (
A0_DEST_CHANNEL_ALL
) | \

457 (
	`REG_TYPE
(
›î™d0
Ë<< 
A0_SRC0_TYPE_SHIFT
) | \

458 (
	`REG_NR
(
›î™d0
Ë<< 
A0_SRC0_NR_SHIFT
)); \

459 
	`OUT_BATCH
(
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d0
), \

460 
A1_SRC0_CHANNEL_X_SHIFT
, \

461 
A1_SRC0_CHANNEL_X_NEGATE
) | \

462 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d0
), \

463 
A1_SRC0_CHANNEL_Y_SHIFT
, \

464 
A1_SRC0_CHANNEL_Y_NEGATE
) | \

465 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d0
), \

466 
A1_SRC0_CHANNEL_Z_SHIFT
, \

467 
A1_SRC0_CHANNEL_Z_NEGATE
) | \

468 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d0
), \

469 
A1_SRC0_CHANNEL_W_SHIFT
, \

470 
A1_SRC0_CHANNEL_W_NEGATE
) | \

472 (
	`REG_TYPE
(
›î™d1
Ë<< 
A1_SRC1_TYPE_SHIFT
) | \

473 (
	`REG_NR
(
›î™d1
Ë<< 
A1_SRC1_NR_SHIFT
) | \

474 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d1
), \

475 
A1_SRC1_CHANNEL_X_SHIFT
, \

476 
A1_SRC1_CHANNEL_X_NEGATE
) | \

477 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d1
), \

478 
A1_SRC1_CHANNEL_Y_SHIFT
, \

479 
A1_SRC1_CHANNEL_Y_NEGATE
)); \

480 
	`OUT_BATCH
(
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d1
), \

481 
A2_SRC1_CHANNEL_Z_SHIFT
, \

482 
A2_SRC1_CHANNEL_Z_NEGATE
) | \

483 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d1
), \

484 
A2_SRC1_CHANNEL_W_SHIFT
, \

485 
A2_SRC1_CHANNEL_W_NEGATE
) | \

487 (
	`REG_TYPE
(
›î™d2
Ë<< 
A2_SRC2_TYPE_SHIFT
) | \

488 (
	`REG_NR
(
›î™d2
Ë<< 
A2_SRC2_NR_SHIFT
) | \

489 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_X
(
›î™d2
), \

490 
A2_SRC2_CHANNEL_X_SHIFT
, \

491 
A2_SRC2_CHANNEL_X_NEGATE
) | \

492 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Y
(
›î™d2
), \

493 
A2_SRC2_CHANNEL_Y_SHIFT
, \

494 
A2_SRC2_CHANNEL_Y_NEGATE
) | \

495 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_Z
(
›î™d2
), \

496 
A2_SRC2_CHANNEL_Z_SHIFT
, \

497 
A2_SRC2_CHANNEL_Z_NEGATE
) | \

498 
	`i915_gë_h¨dw¨e_ch™√l_vÆ
(
	`REG_W
(
›î™d2
), \

499 
A2_SRC2_CHANNEL_W_SHIFT
, \

500 
A2_SRC2_CHANNEL_W_NEGATE
)); \

501 } 0)

	)

503 
	#i915_fs_mov
(
de°_ªg
, 
›î™d0
) \

504 
	`i915_fs_¨ôh
(
MOV
, 
de°_ªg
, \

505 
›î™d0
, \

506 
	`i915_fs_›î™d_n⁄e
(), \

507 
	`i915_fs_›î™d_n⁄e
())

	)

509 
	#i915_fs_mov_masked
(
de°_ªg
, 
de°_mask
, 
›î™d0
) \

510 
	`i915_fs_¨ôh_masked
 (
MOV
, 
de°_ªg
, 
de°_mask
, \

511 
›î™d0
, \

512 
	`i915_fs_›î™d_n⁄e
(), \

513 
	`i915_fs_›î™d_n⁄e
())

	)

516 
	#i915_fs_‰c
(
de°_ªg
, 
›î™d0
) \

517 
	`i915_fs_¨ôh
 (
FRC
, 
de°_ªg
, \

518 
›î™d0
, \

519 
	`i915_fs_›î™d_n⁄e
(), \

520 
	`i915_fs_›î™d_n⁄e
())

	)

523 
	#i915_fs_add
(
de°_ªg
, 
›î™d0
, 
›î™d1
) \

524 
	`i915_fs_¨ôh
 (
ADD
, 
de°_ªg
, \

525 
›î™d0
, 
›î™d1
, \

526 
	`i915_fs_›î™d_n⁄e
())

	)

529 
	#i915_fs_mul
(
de°_ªg
, 
›î™d0
, 
›î™d1
) \

530 
	`i915_fs_¨ôh
 (
MUL
, 
de°_ªg
, \

531 
›î™d0
, 
›î™d1
, \

532 
	`i915_fs_›î™d_n⁄e
())

	)

535 
	#i915_fs_rsq
(
de°_ªg
, 
de°_mask
, 
›î™d0
) \

537 i‡(
de°_mask
) { \

538 
	`i915_fs_¨ôh_masked
 (
RSQ
, 
de°_ªg
, 
de°_mask
, \

539 
›î™d0
, \

540 
	`i915_fs_›î™d_n⁄e
 (), \

541 
	`i915_fs_›î™d_n⁄e
 ()); \

543 
	`i915_fs_¨ôh
 (
RSQ
, 
de°_ªg
, \

544 
›î™d0
, \

545 
	`i915_fs_›î™d_n⁄e
 (), \

546 
	`i915_fs_›î™d_n⁄e
 ()); \

548 } 0)

	)

551 
	#i915_fs_mö
(
de°_ªg
, 
›î™d0
, 
›î™d1
) \

552 
	`i915_fs_¨ôh
 (
MIN
, 
de°_ªg
, \

553 
›î™d0
, 
›î™d1
, \

554 
	`i915_fs_›î™d_n⁄e
())

	)

557 
	#i915_fs_max
(
de°_ªg
, 
›î™d0
, 
›î™d1
) \

558 
	`i915_fs_¨ôh
 (
MAX
, 
de°_ªg
, \

559 
›î™d0
, 
›î™d1
, \

560 
	`i915_fs_›î™d_n⁄e
())

	)

562 
	#i915_fs_cmp
(
de°_ªg
, 
›î™d0
, 
›î™d1
, 
›î™d2
) \

563 
	`i915_fs_¨ôh
 (
CMP
, 
de°_ªg
, 
›î™d0
, 
›î™d1
, 
›î™d2
)

	)

566 
	#i915_fs_mad
(
de°_ªg
, 
de°_mask
, 
›0
, 
›1
, 
›2
) \

568 i‡(
de°_mask
) { \

569 
	`i915_fs_¨ôh_masked
 (
MAD
, 
de°_ªg
, 
de°_mask
, 
›0
, 
›1
, 
›2
); \

571 
	`i915_fs_¨ôh
 (
MAD
, 
de°_ªg
, 
›0
, 
›1
, 
›2
); \

573 } 0)

	)

575 
	#i915_fs_dp2add
(
de°_ªg
, 
de°_mask
, 
›0
, 
›1
, 
›2
) \

577 i‡(
de°_mask
) { \

578 
	`i915_fs_¨ôh_masked
 (
DP2ADD
, 
de°_ªg
, 
de°_mask
, 
›0
, 
›1
, 
›2
); \

580 
	`i915_fs_¨ôh
 (
DP2ADD
, 
de°_ªg
, 
›0
, 
›1
, 
›2
); \

582 } 0)

	)

588 
	#i915_fs_dp3
(
de°_ªg
, 
de°_mask
, 
›0
, 
›1
) \

590 i‡(
de°_mask
) { \

591 
	`i915_fs_¨ôh_masked
 (
DP3
, 
de°_ªg
, 
de°_mask
, \

592 
›0
, 
›1
,\

593 
	`i915_fs_›î™d_n⁄e
()); \

595 
	`i915_fs_¨ôh
 (
DP3
, 
de°_ªg
, 
›0
, 
›1
,\

596 
	`i915_fs_›î™d_n⁄e
()); \

598 } 0)

	)

606 
	#FS_LOCALS
() \

607 
uöt32_t
 
_shadî_off£t


	)

609 
	#FS_BEGIN
() \

611 
_shadî_off£t
 = 
öãl
->
b©ch_u£d
++; \

612 } 0)

	)

614 
	#FS_END
() \

616 
öãl
->
b©ch_±r
[
_shadî_off£t
] = \

617 
_3DSTATE_PIXEL_SHADER_PROGRAM
 | \

618 (
öãl
->
b©ch_u£d
 - 
_shadî_off£t
 - 2); \

619 } 0);

	)

	@i915_pciids.h

25 #i‚de‡
_I915_PCIIDS_H


26 
	#_I915_PCIIDS_H


	)

38 
	#INTEL_VGA_DEVICE
(
id
, 
öfo
) { \

39 0x8086, 
id
, \

42 (Ë
öfo
 }

	)

44 
	#INTEL_QUANTA_VGA_DEVICE
(
öfo
) { \

48 (Ë
öfo
 }

	)

50 
	#INTEL_I810_IDS
(
öfo
) \

51 
	`INTEL_VGA_DEVICE
(0x7121, 
öfo
), \

52 
	`INTEL_VGA_DEVICE
(0x7123, 
öfo
), \

53 
	`INTEL_VGA_DEVICE
(0x7125, 
öfo
Ë

	)

55 
	#INTEL_I815_IDS
(
öfo
) \

56 
	`INTEL_VGA_DEVICE
(0x1132, 
öfo
Ë

	)

58 
	#INTEL_I830_IDS
(
öfo
) \

59 
	`INTEL_VGA_DEVICE
(0x3577, 
öfo
)

	)

61 
	#INTEL_I845G_IDS
(
öfo
) \

62 
	`INTEL_VGA_DEVICE
(0x2562, 
öfo
)

	)

64 
	#INTEL_I85X_IDS
(
öfo
) \

65 
	`INTEL_VGA_DEVICE
(0x3582, 
öfo
), \

66 
	`INTEL_VGA_DEVICE
(0x358e, 
öfo
)

	)

68 
	#INTEL_I865G_IDS
(
öfo
) \

69 
	`INTEL_VGA_DEVICE
(0x2572, 
öfo
Ë

	)

71 
	#INTEL_I915G_IDS
(
öfo
) \

72 
	`INTEL_VGA_DEVICE
(0x2582, 
öfo
), \

73 
	`INTEL_VGA_DEVICE
(0x258a, 
öfo
Ë

	)

75 
	#INTEL_I915GM_IDS
(
öfo
) \

76 
	`INTEL_VGA_DEVICE
(0x2592, 
öfo
Ë

	)

78 
	#INTEL_I945G_IDS
(
öfo
) \

79 
	`INTEL_VGA_DEVICE
(0x2772, 
öfo
Ë

	)

81 
	#INTEL_I945GM_IDS
(
öfo
) \

82 
	`INTEL_VGA_DEVICE
(0x27a2, 
öfo
), \

83 
	`INTEL_VGA_DEVICE
(0x27´, 
öfo
Ë

	)

85 
	#INTEL_I965G_IDS
(
öfo
) \

86 
	`INTEL_VGA_DEVICE
(0x2972, 
öfo
), \

87 
	`INTEL_VGA_DEVICE
(0x2982, 
öfo
), \

88 
	`INTEL_VGA_DEVICE
(0x2992, 
öfo
), \

89 
	`INTEL_VGA_DEVICE
(0x29a2, 
öfo
Ë

	)

91 
	#INTEL_G33_IDS
(
öfo
) \

92 
	`INTEL_VGA_DEVICE
(0x29b2, 
öfo
), \

93 
	`INTEL_VGA_DEVICE
(0x29c2, 
öfo
), \

94 
	`INTEL_VGA_DEVICE
(0x29d2, 
öfo
Ë

	)

96 
	#INTEL_I965GM_IDS
(
öfo
) \

97 
	`INTEL_VGA_DEVICE
(0x2a02, 
öfo
), \

98 
	`INTEL_VGA_DEVICE
(0x2a12, 
öfo
Ë

	)

100 
	#INTEL_GM45_IDS
(
öfo
) \

101 
	`INTEL_VGA_DEVICE
(0x2a42, 
öfo
Ë

	)

103 
	#INTEL_G45_IDS
(
öfo
) \

104 
	`INTEL_VGA_DEVICE
(0x2e02, 
öfo
), \

105 
	`INTEL_VGA_DEVICE
(0x2e12, 
öfo
), \

106 
	`INTEL_VGA_DEVICE
(0x2e22, 
öfo
), \

107 
	`INTEL_VGA_DEVICE
(0x2e32, 
öfo
), \

108 
	`INTEL_VGA_DEVICE
(0x2e42, 
öfo
), \

109 
	`INTEL_VGA_DEVICE
(0x2e92, 
öfo
Ë

	)

111 
	#INTEL_PINEVIEW_IDS
(
öfo
) \

112 
	`INTEL_VGA_DEVICE
(0xa001, 
öfo
), \

113 
	`INTEL_VGA_DEVICE
(0xa011, 
öfo
)

	)

115 
	#INTEL_IRONLAKE_D_IDS
(
öfo
) \

116 
	`INTEL_VGA_DEVICE
(0x0042, 
öfo
)

	)

118 
	#INTEL_IRONLAKE_M_IDS
(
öfo
) \

119 
	`INTEL_VGA_DEVICE
(0x0046, 
öfo
)

	)

121 
	#INTEL_SNB_D_IDS
(
öfo
) \

122 
	`INTEL_VGA_DEVICE
(0x0102, 
öfo
), \

123 
	`INTEL_VGA_DEVICE
(0x0112, 
öfo
), \

124 
	`INTEL_VGA_DEVICE
(0x0122, 
öfo
), \

125 
	`INTEL_VGA_DEVICE
(0x010A, 
öfo
)

	)

127 
	#INTEL_SNB_M_IDS
(
öfo
) \

128 
	`INTEL_VGA_DEVICE
(0x0106, 
öfo
), \

129 
	`INTEL_VGA_DEVICE
(0x0116, 
öfo
), \

130 
	`INTEL_VGA_DEVICE
(0x0126, 
öfo
)

	)

132 
	#INTEL_IVB_M_IDS
(
öfo
) \

133 
	`INTEL_VGA_DEVICE
(0x0156, 
öfo
), \

134 
	`INTEL_VGA_DEVICE
(0x0166, 
öfo
Ë

	)

136 
	#INTEL_IVB_D_IDS
(
öfo
) \

137 
	`INTEL_VGA_DEVICE
(0x0152, 
öfo
), \

138 
	`INTEL_VGA_DEVICE
(0x0162, 
öfo
), \

139 
	`INTEL_VGA_DEVICE
(0x015a, 
öfo
), \

140 
	`INTEL_VGA_DEVICE
(0x016a, 
öfo
Ë

	)

142 
	#INTEL_IVB_Q_IDS
(
öfo
) \

143 
	`INTEL_QUANTA_VGA_DEVICE
(
öfo
Ë

	)

145 
	#INTEL_HSW_IDS
(
öfo
) \

146 
	`INTEL_VGA_DEVICE
(0x0402, 
öfo
), \

147 
	`INTEL_VGA_DEVICE
(0x0412, 
öfo
), \

148 
	`INTEL_VGA_DEVICE
(0x0422, 
öfo
), \

149 
	`INTEL_VGA_DEVICE
(0x040a, 
öfo
), \

150 
	`INTEL_VGA_DEVICE
(0x041a, 
öfo
), \

151 
	`INTEL_VGA_DEVICE
(0x042a, 
öfo
), \

152 
	`INTEL_VGA_DEVICE
(0x040B, 
öfo
), \

153 
	`INTEL_VGA_DEVICE
(0x041B, 
öfo
), \

154 
	`INTEL_VGA_DEVICE
(0x042B, 
öfo
), \

155 
	`INTEL_VGA_DEVICE
(0x040E, 
öfo
), \

156 
	`INTEL_VGA_DEVICE
(0x041E, 
öfo
), \

157 
	`INTEL_VGA_DEVICE
(0x042E, 
öfo
), \

158 
	`INTEL_VGA_DEVICE
(0x0C02, 
öfo
), \

159 
	`INTEL_VGA_DEVICE
(0x0C12, 
öfo
), \

160 
	`INTEL_VGA_DEVICE
(0x0C22, 
öfo
), \

161 
	`INTEL_VGA_DEVICE
(0x0C0A, 
öfo
), \

162 
	`INTEL_VGA_DEVICE
(0x0C1A, 
öfo
), \

163 
	`INTEL_VGA_DEVICE
(0x0C2A, 
öfo
), \

164 
	`INTEL_VGA_DEVICE
(0x0C0B, 
öfo
), \

165 
	`INTEL_VGA_DEVICE
(0x0C1B, 
öfo
), \

166 
	`INTEL_VGA_DEVICE
(0x0C2B, 
öfo
), \

167 
	`INTEL_VGA_DEVICE
(0x0C0E, 
öfo
), \

168 
	`INTEL_VGA_DEVICE
(0x0C1E, 
öfo
), \

169 
	`INTEL_VGA_DEVICE
(0x0C2E, 
öfo
), \

170 
	`INTEL_VGA_DEVICE
(0x0A02, 
öfo
), \

171 
	`INTEL_VGA_DEVICE
(0x0A12, 
öfo
), \

172 
	`INTEL_VGA_DEVICE
(0x0A22, 
öfo
), \

173 
	`INTEL_VGA_DEVICE
(0x0A0A, 
öfo
), \

174 
	`INTEL_VGA_DEVICE
(0x0A1A, 
öfo
), \

175 
	`INTEL_VGA_DEVICE
(0x0A2A, 
öfo
), \

176 
	`INTEL_VGA_DEVICE
(0x0A0B, 
öfo
), \

177 
	`INTEL_VGA_DEVICE
(0x0A1B, 
öfo
), \

178 
	`INTEL_VGA_DEVICE
(0x0A2B, 
öfo
), \

179 
	`INTEL_VGA_DEVICE
(0x0D02, 
öfo
), \

180 
	`INTEL_VGA_DEVICE
(0x0D12, 
öfo
), \

181 
	`INTEL_VGA_DEVICE
(0x0D22, 
öfo
), \

182 
	`INTEL_VGA_DEVICE
(0x0D0A, 
öfo
), \

183 
	`INTEL_VGA_DEVICE
(0x0D1A, 
öfo
), \

184 
	`INTEL_VGA_DEVICE
(0x0D2A, 
öfo
), \

185 
	`INTEL_VGA_DEVICE
(0x0D0B, 
öfo
), \

186 
	`INTEL_VGA_DEVICE
(0x0D1B, 
öfo
), \

187 
	`INTEL_VGA_DEVICE
(0x0D2B, 
öfo
), \

188 
	`INTEL_VGA_DEVICE
(0x0D0E, 
öfo
), \

189 
	`INTEL_VGA_DEVICE
(0x0D1E, 
öfo
), \

190 
	`INTEL_VGA_DEVICE
(0x0D2E, 
öfo
), \

191 
	`INTEL_VGA_DEVICE
(0x0406, 
öfo
), \

192 
	`INTEL_VGA_DEVICE
(0x0416, 
öfo
), \

193 
	`INTEL_VGA_DEVICE
(0x0426, 
öfo
), \

194 
	`INTEL_VGA_DEVICE
(0x0C06, 
öfo
), \

195 
	`INTEL_VGA_DEVICE
(0x0C16, 
öfo
), \

196 
	`INTEL_VGA_DEVICE
(0x0C26, 
öfo
), \

197 
	`INTEL_VGA_DEVICE
(0x0A06, 
öfo
), \

198 
	`INTEL_VGA_DEVICE
(0x0A16, 
öfo
), \

199 
	`INTEL_VGA_DEVICE
(0x0A26, 
öfo
), \

200 
	`INTEL_VGA_DEVICE
(0x0A0E, 
öfo
), \

201 
	`INTEL_VGA_DEVICE
(0x0A1E, 
öfo
), \

202 
	`INTEL_VGA_DEVICE
(0x0A2E, 
öfo
), \

203 
	`INTEL_VGA_DEVICE
(0x0D06, 
öfo
), \

204 
	`INTEL_VGA_DEVICE
(0x0D16, 
öfo
), \

205 
	`INTEL_VGA_DEVICE
(0x0D26, 
öfo
Ë

	)

207 
	#INTEL_VLV_IDS
(
öfo
) \

208 
	`INTEL_VGA_DEVICE
(0x0f30, 
öfo
), \

209 
	`INTEL_VGA_DEVICE
(0x0f31, 
öfo
), \

210 
	`INTEL_VGA_DEVICE
(0x0f32, 
öfo
), \

211 
	`INTEL_VGA_DEVICE
(0x0f33, 
öfo
), \

212 
	`INTEL_VGA_DEVICE
(0x0157, 
öfo
), \

213 
	`INTEL_VGA_DEVICE
(0x0155, 
öfo
)

	)

215 
	#INTEL_BDW_GT12_IDS
(
öfo
) \

216 
	`INTEL_VGA_DEVICE
(0x1602, 
öfo
), \

217 
	`INTEL_VGA_DEVICE
(0x1606, 
öfo
), \

218 
	`INTEL_VGA_DEVICE
(0x160B, 
öfo
), \

219 
	`INTEL_VGA_DEVICE
(0x160E, 
öfo
), \

220 
	`INTEL_VGA_DEVICE
(0x1612, 
öfo
), \

221 
	`INTEL_VGA_DEVICE
(0x1616, 
öfo
), \

222 
	`INTEL_VGA_DEVICE
(0x161B, 
öfo
), \

223 
	`INTEL_VGA_DEVICE
(0x161E, 
öfo
), \

224 
	`INTEL_VGA_DEVICE
(0x160A, 
öfo
), \

225 
	`INTEL_VGA_DEVICE
(0x160D, 
öfo
), \

226 
	`INTEL_VGA_DEVICE
(0x161A, 
öfo
), \

227 
	`INTEL_VGA_DEVICE
(0x161D, 
öfo
Ë

	)

229 
	#INTEL_BDW_GT3_IDS
(
öfo
) \

230 
	`INTEL_VGA_DEVICE
(0x1622, 
öfo
), \

231 
	`INTEL_VGA_DEVICE
(0x1626, 
öfo
), \

232 
	`INTEL_VGA_DEVICE
(0x162B, 
öfo
), \

233 
	`INTEL_VGA_DEVICE
(0x162E, 
öfo
), \

234 
	`INTEL_VGA_DEVICE
(0x162A, 
öfo
), \

235 
	`INTEL_VGA_DEVICE
(0x162D, 
öfo
Ë

	)

237 
	#INTEL_BDW_RSVD_IDS
(
öfo
) \

238 
	`INTEL_VGA_DEVICE
(0x1632, 
öfo
), \

239 
	`INTEL_VGA_DEVICE
(0x1636, 
öfo
), \

240 
	`INTEL_VGA_DEVICE
(0x163B, 
öfo
), \

241 
	`INTEL_VGA_DEVICE
(0x163E, 
öfo
), \

242 
	`INTEL_VGA_DEVICE
(0x163A, 
öfo
), \

243 
	`INTEL_VGA_DEVICE
(0x163D, 
öfo
Ë

	)

245 
	#INTEL_BDW_IDS
(
öfo
) \

246 
	`INTEL_BDW_GT12_IDS
(
öfo
), \

247 
	`INTEL_BDW_GT3_IDS
(
öfo
), \

248 
	`INTEL_BDW_RSVD_IDS
(
öfo
)

	)

250 
	#INTEL_CHV_IDS
(
öfo
) \

251 
	`INTEL_VGA_DEVICE
(0x22b0, 
öfo
), \

252 
	`INTEL_VGA_DEVICE
(0x22b1, 
öfo
), \

253 
	`INTEL_VGA_DEVICE
(0x22b2, 
öfo
), \

254 
	`INTEL_VGA_DEVICE
(0x22b3, 
öfo
)

	)

256 
	#INTEL_SKL_GT1_IDS
(
öfo
) \

257 
	`INTEL_VGA_DEVICE
(0x1906, 
öfo
), \

258 
	`INTEL_VGA_DEVICE
(0x190E, 
öfo
), \

259 
	`INTEL_VGA_DEVICE
(0x1902, 
öfo
), \

260 
	`INTEL_VGA_DEVICE
(0x190B, 
öfo
), \

261 
	`INTEL_VGA_DEVICE
(0x190A, 
öfo
Ë

	)

263 
	#INTEL_SKL_GT2_IDS
(
öfo
) \

264 
	`INTEL_VGA_DEVICE
(0x1916, 
öfo
), \

265 
	`INTEL_VGA_DEVICE
(0x1921, 
öfo
), \

266 
	`INTEL_VGA_DEVICE
(0x191E, 
öfo
), \

267 
	`INTEL_VGA_DEVICE
(0x1912, 
öfo
), \

268 
	`INTEL_VGA_DEVICE
(0x191B, 
öfo
), \

269 
	`INTEL_VGA_DEVICE
(0x191A, 
öfo
), \

270 
	`INTEL_VGA_DEVICE
(0x191D, 
öfo
Ë

	)

272 
	#INTEL_SKL_GT3_IDS
(
öfo
) \

273 
	`INTEL_VGA_DEVICE
(0x1923, 
öfo
), \

274 
	`INTEL_VGA_DEVICE
(0x1926, 
öfo
), \

275 
	`INTEL_VGA_DEVICE
(0x1927, 
öfo
), \

276 
	`INTEL_VGA_DEVICE
(0x192B, 
öfo
), \

277 
	`INTEL_VGA_DEVICE
(0x192D, 
öfo
Ë

	)

279 
	#INTEL_SKL_GT4_IDS
(
öfo
) \

280 
	`INTEL_VGA_DEVICE
(0x1932, 
öfo
), \

281 
	`INTEL_VGA_DEVICE
(0x193B, 
öfo
), \

282 
	`INTEL_VGA_DEVICE
(0x193D, 
öfo
), \

283 
	`INTEL_VGA_DEVICE
(0x192A, 
öfo
), \

284 
	`INTEL_VGA_DEVICE
(0x193A, 
öfo
Ë

	)

286 
	#INTEL_SKL_IDS
(
öfo
) \

287 
	`INTEL_SKL_GT1_IDS
(
öfo
), \

288 
	`INTEL_SKL_GT2_IDS
(
öfo
), \

289 
	`INTEL_SKL_GT3_IDS
(
öfo
), \

290 
	`INTEL_SKL_GT4_IDS
(
öfo
)

	)

292 
	#INTEL_BXT_IDS
(
öfo
) \

293 
	`INTEL_VGA_DEVICE
(0x0A84, 
öfo
), \

294 
	`INTEL_VGA_DEVICE
(0x1A84, 
öfo
), \

295 
	`INTEL_VGA_DEVICE
(0x1A85, 
öfo
), \

296 
	`INTEL_VGA_DEVICE
(0x5A84, 
öfo
), \

297 
	`INTEL_VGA_DEVICE
(0x5A85, 
öfo
Ë

	)

299 
	#INTEL_GLK_IDS
(
öfo
) \

300 
	`INTEL_VGA_DEVICE
(0x3184, 
öfo
), \

301 
	`INTEL_VGA_DEVICE
(0x3185, 
öfo
)

	)

303 
	#INTEL_KBL_GT1_IDS
(
öfo
) \

304 
	`INTEL_VGA_DEVICE
(0x5913, 
öfo
), \

305 
	`INTEL_VGA_DEVICE
(0x5915, 
öfo
), \

306 
	`INTEL_VGA_DEVICE
(0x5906, 
öfo
), \

307 
	`INTEL_VGA_DEVICE
(0x590E, 
öfo
), \

308 
	`INTEL_VGA_DEVICE
(0x5902, 
öfo
), \

309 
	`INTEL_VGA_DEVICE
(0x5908, 
öfo
), \

310 
	`INTEL_VGA_DEVICE
(0x590B, 
öfo
), \

311 
	`INTEL_VGA_DEVICE
(0x590A, 
öfo
Ë

	)

313 
	#INTEL_KBL_GT2_IDS
(
öfo
) \

314 
	`INTEL_VGA_DEVICE
(0x5916, 
öfo
), \

315 
	`INTEL_VGA_DEVICE
(0x5917, 
öfo
), \

316 
	`INTEL_VGA_DEVICE
(0x5921, 
öfo
), \

317 
	`INTEL_VGA_DEVICE
(0x591E, 
öfo
), \

318 
	`INTEL_VGA_DEVICE
(0x5912, 
öfo
), \

319 
	`INTEL_VGA_DEVICE
(0x591B, 
öfo
), \

320 
	`INTEL_VGA_DEVICE
(0x591A, 
öfo
), \

321 
	`INTEL_VGA_DEVICE
(0x591D, 
öfo
Ë

	)

323 
	#INTEL_KBL_GT3_IDS
(
öfo
) \

324 
	`INTEL_VGA_DEVICE
(0x5923, 
öfo
), \

325 
	`INTEL_VGA_DEVICE
(0x5926, 
öfo
), \

326 
	`INTEL_VGA_DEVICE
(0x5927, 
öfo
Ë

	)

328 
	#INTEL_KBL_GT4_IDS
(
öfo
) \

329 
	`INTEL_VGA_DEVICE
(0x593B, 
öfo
Ë

	)

331 
	#INTEL_KBL_IDS
(
öfo
) \

332 
	`INTEL_KBL_GT1_IDS
(
öfo
), \

333 
	`INTEL_KBL_GT2_IDS
(
öfo
), \

334 
	`INTEL_KBL_GT3_IDS
(
öfo
), \

335 
	`INTEL_KBL_GT4_IDS
(
öfo
)

	)

337 
	#INTEL_CFL_S_IDS
(
öfo
) \

338 
	`INTEL_VGA_DEVICE
(0x3E90, 
öfo
), \

339 
	`INTEL_VGA_DEVICE
(0x3E93, 
öfo
), \

340 
	`INTEL_VGA_DEVICE
(0x3E91, 
öfo
), \

341 
	`INTEL_VGA_DEVICE
(0x3E92, 
öfo
), \

342 
	`INTEL_VGA_DEVICE
(0x3E96, 
öfo
Ë

	)

344 
	#INTEL_CFL_H_IDS
(
öfo
) \

345 
	`INTEL_VGA_DEVICE
(0x3E9B, 
öfo
), \

346 
	`INTEL_VGA_DEVICE
(0x3E94, 
öfo
Ë

	)

348 
	#INTEL_CFL_U_IDS
(
öfo
) \

349 
	`INTEL_VGA_DEVICE
(0x3EA5, 
öfo
), \

350 
	`INTEL_VGA_DEVICE
(0x3EA6, 
öfo
), \

351 
	`INTEL_VGA_DEVICE
(0x3EA7, 
öfo
), \

352 
	`INTEL_VGA_DEVICE
(0x3EA8, 
öfo
Ë

	)

354 
	#INTEL_CFL_IDS
(
öfo
) \

355 
	`INTEL_CFL_S_IDS
(
öfo
), \

356 
	`INTEL_CFL_H_IDS
(
öfo
), \

357 
	`INTEL_CFL_U_IDS
(
öfo
)

	)

359 
	#INTEL_CNL_U_GT2_IDS
(
öfo
) \

360 
	`INTEL_VGA_DEVICE
(0x5A52, 
öfo
), \

361 
	`INTEL_VGA_DEVICE
(0x5A5A, 
öfo
), \

362 
	`INTEL_VGA_DEVICE
(0x5A42, 
öfo
), \

363 
	`INTEL_VGA_DEVICE
(0x5A4A, 
öfo
)

	)

365 
	#INTEL_CNL_Y_GT2_IDS
(
öfo
) \

366 
	`INTEL_VGA_DEVICE
(0x5A51, 
öfo
), \

367 
	`INTEL_VGA_DEVICE
(0x5A59, 
öfo
), \

368 
	`INTEL_VGA_DEVICE
(0x5A41, 
öfo
), \

369 
	`INTEL_VGA_DEVICE
(0x5A49, 
öfo
), \

370 
	`INTEL_VGA_DEVICE
(0x5A71, 
öfo
), \

371 
	`INTEL_VGA_DEVICE
(0x5A79, 
öfo
)

	)

373 
	#INTEL_CNL_IDS
(
öfo
) \

374 
	`INTEL_CNL_U_GT2_IDS
(
öfo
), \

375 
	`INTEL_CNL_Y_GT2_IDS
(
öfo
)

	)

	@i915_reg.h

28 #i‚de‡
_I915_REG_H_


29 
	#_I915_REG_H_


	)

31 
	#I915_SET_FIELD
–
v¨
, 
mask
, 
vÆue
 ) (v¨ &~(mask), v¨ |vÆue)

	)

33 
	#CMD_3D
 (0x3<<29)

	)

35 
	#PRIM3D
 (
CMD_3D
 | (0x1f<<24))

	)

36 
	#PRIM3D_INDIRECT_SEQUENTIAL
 ((1<<23Ë| (0<<17))

	)

37 
	#PRIM3D_TRILIST
 (
PRIM3D
 | (0x0<<18))

	)

38 
	#PRIM3D_TRISTRIP
 (
PRIM3D
 | (0x1<<18))

	)

39 
	#PRIM3D_TRISTRIP_RVRSE
 (
PRIM3D
 | (0x2<<18))

	)

40 
	#PRIM3D_TRIFAN
 (
PRIM3D
 | (0x3<<18))

	)

41 
	#PRIM3D_POLY
 (
PRIM3D
 | (0x4<<18))

	)

42 
	#PRIM3D_LINELIST
 (
PRIM3D
 | (0x5<<18))

	)

43 
	#PRIM3D_LINESTRIP
 (
PRIM3D
 | (0x6<<18))

	)

44 
	#PRIM3D_RECTLIST
 (
PRIM3D
 | (0x7<<18))

	)

45 
	#PRIM3D_POINTLIST
 (
PRIM3D
 | (0x8<<18))

	)

46 
	#PRIM3D_DIB
 (
PRIM3D
 | (0x9<<18))

	)

47 
	#PRIM3D_CLEAR_RECT
 (
PRIM3D
 | (0xa<<18))

	)

48 
	#PRIM3D_ZONE_INIT
 (
PRIM3D
 | (0xd<<18))

	)

49 
	#PRIM3D_MASK
 (0x1f<<18)

	)

52 
	#_3DSTATE_AA_CMD
 (
CMD_3D
 | (0x06<<24))

	)

53 
	#AA_LINE_ECAAR_WIDTH_ENABLE
 (1<<16)

	)

54 
	#AA_LINE_ECAAR_WIDTH_0_5
 0

	)

55 
	#AA_LINE_ECAAR_WIDTH_1_0
 (1<<14)

	)

56 
	#AA_LINE_ECAAR_WIDTH_2_0
 (2<<14)

	)

57 
	#AA_LINE_ECAAR_WIDTH_4_0
 (3<<14)

	)

58 
	#AA_LINE_REGION_WIDTH_ENABLE
 (1<<8)

	)

59 
	#AA_LINE_REGION_WIDTH_0_5
 0

	)

60 
	#AA_LINE_REGION_WIDTH_1_0
 (1<<6)

	)

61 
	#AA_LINE_REGION_WIDTH_2_0
 (2<<6)

	)

62 
	#AA_LINE_REGION_WIDTH_4_0
 (3<<6)

	)

65 
	#_3DSTATE_BACKFACE_STENCIL_OPS
 (
CMD_3D
 | (0x8<<24))

	)

66 
	#BFO_ENABLE_STENCIL_REF
 (1<<23)

	)

67 
	#BFO_STENCIL_REF_SHIFT
 15

	)

68 
	#BFO_STENCIL_REF_MASK
 (0xff<<15)

	)

69 
	#BFO_ENABLE_STENCIL_FUNCS
 (1<<14)

	)

70 
	#BFO_STENCIL_TEST_SHIFT
 11

	)

71 
	#BFO_STENCIL_TEST_MASK
 (0x7<<11)

	)

72 
	#BFO_STENCIL_FAIL_SHIFT
 8

	)

73 
	#BFO_STENCIL_FAIL_MASK
 (0x7<<8)

	)

74 
	#BFO_STENCIL_PASS_Z_FAIL_SHIFT
 5

	)

75 
	#BFO_STENCIL_PASS_Z_FAIL_MASK
 (0x7<<5)

	)

76 
	#BFO_STENCIL_PASS_Z_PASS_SHIFT
 2

	)

77 
	#BFO_STENCIL_PASS_Z_PASS_MASK
 (0x7<<2)

	)

78 
	#BFO_ENABLE_STENCIL_TWO_SIDE
 (1<<1)

	)

79 
	#BFO_STENCIL_TWO_SIDE
 (1<<0)

	)

82 
	#_3DSTATE_BACKFACE_STENCIL_MASKS
 (
CMD_3D
 | (0x9<<24))

	)

83 
	#BFM_ENABLE_STENCIL_TEST_MASK
 (1<<17)

	)

84 
	#BFM_ENABLE_STENCIL_WRITE_MASK
 (1<<16)

	)

85 
	#BFM_STENCIL_TEST_MASK_SHIFT
 8

	)

86 
	#BFM_STENCIL_TEST_MASK_MASK
 (0xff<<8)

	)

87 
	#BFM_STENCIL_WRITE_MASK_SHIFT
 0

	)

88 
	#BFM_STENCIL_WRITE_MASK_MASK
 (0xff<<0)

	)

93 
	#_3DSTATE_BUF_INFO_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x8e<<16Ë| 1)

	)

95 
	#BUF_3D_ID_COLOR_BACK
 (0x3<<24)

	)

96 
	#BUF_3D_ID_DEPTH
 (0x7<<24)

	)

97 
	#BUF_3D_USE_FENCE
 (1<<23)

	)

98 
	#BUF_3D_TILED_SURFACE
 (1<<22)

	)

99 
	#BUF_3D_TILE_WALK_X
 0

	)

100 
	#BUF_3D_TILE_WALK_Y
 (1<<21)

	)

101 
	#BUF_3D_PITCH
(
x
Ë(((x)/4)<<2)

	)

103 
	#BUF_3D_ADDR
(
x
Ë((xË& ~0x3)

	)

108 
	#_3DSTATE_CLEAR_PARAMETERS
 (
CMD_3D
 | (0x1d<<24Ë| (0x9c<<16Ë| 5)

	)

110 
	#CLEARPARAM_CLEAR_RECT
 (1 << 16)

	)

111 
	#CLEARPARAM_ZONE_INIT
 (0 << 16)

	)

112 
	#CLEARPARAM_WRITE_COLOR
 (1 << 2)

	)

113 
	#CLEARPARAM_WRITE_DEPTH
 (1 << 1)

	)

114 
	#CLEARPARAM_WRITE_STENCIL
 (1 << 0)

	)

117 
	#_3DSTATE_CONST_BLEND_COLOR_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x88<<16))

	)

120 
	#_3DSTATE_COORD_SET_BINDINGS
 (
CMD_3D
 | (0x16<<24))

	)

121 
	#CSB_TCB
(
iunô
, 
eunô
Ë(”unô)<<(iunô*3))

	)

124 
	#_3DSTATE_DFLT_DIFFUSE_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x99<<16))

	)

127 
	#_3DSTATE_DFLT_SPEC_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x9a<<16))

	)

130 
	#_3DSTATE_DFLT_Z_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x98<<16))

	)

133 
	#_3DSTATE_DEPTH_OFFSET_SCALE
 (
CMD_3D
 | (0x1d<<24Ë| (0x97<<16))

	)

138 
	#_3DSTATE_DEPTH_SUBRECT_DISABLE
 (
CMD_3D
 | (0x1c<<24Ë| (0x11<<19Ë| (1 << 1Ë| (0 << 0))

	)

141 
	#_3DSTATE_DST_BUF_VARS_CMD
 (
CMD_3D
 | (0x1d<<24Ë| (0x85<<16))

	)

143 
	#TEX_DEFAULT_COLOR_OGL
 (0<<30)

	)

144 
	#TEX_DEFAULT_COLOR_D3D
 (1<<30)

	)

145 
	#ZR_EARLY_DEPTH
 (1<<29)

	)

146 
	#LOD_PRECLAMP_OGL
 (1<<28)

	)

147 
	#LOD_PRECLAMP_D3D
 (0<<28)

	)

148 
	#DITHER_FULL_ALWAYS
 (0<<26)

	)

149 
	#DITHER_FULL_ON_FB_BLEND
 (1<<26)

	)

150 
	#DITHER_CLAMPED_ALWAYS
 (2<<26)

	)

151 
	#LINEAR_GAMMA_BLEND_32BPP
 (1<<25)

	)

152 
	#DEBUG_DISABLE_ENH_DITHER
 (1<<24)

	)

153 
	#DSTORG_HORT_BIAS
(
x
Ë((x)<<20)

	)

154 
	#DSTORG_VERT_BIAS
(
x
Ë((x)<<16)

	)

155 
	#COLOR_4_2_2_CHNL_WRT_ALL
 0

	)

156 
	#COLOR_4_2_2_CHNL_WRT_Y
 (1<<12)

	)

157 
	#COLOR_4_2_2_CHNL_WRT_CR
 (2<<12)

	)

158 
	#COLOR_4_2_2_CHNL_WRT_CB
 (3<<12)

	)

159 
	#COLOR_4_2_2_CHNL_WRT_CRCB
 (4<<12)

	)

160 
	#COLR_BUF_8BIT
 0

	)

161 
	#COLR_BUF_RGB555
 (1<<8)

	)

162 
	#COLR_BUF_RGB565
 (2<<8)

	)

163 
	#COLR_BUF_ARGB8888
 (3<<8)

	)

164 
	#COLR_BUF_ARGB4444
 (8<<8)

	)

165 
	#COLR_BUF_ARGB1555
 (9<<8)

	)

166 
	#COLR_BUF_ARGB2AAA
 (0xa<<8)

	)

167 
	#DEPTH_FRMT_16_FIXED
 0

	)

168 
	#DEPTH_FRMT_16_FLOAT
 (1<<2)

	)

169 
	#DEPTH_FRMT_24_FIXED_8_OTHER
 (2<<2)

	)

170 
	#VERT_LINE_STRIDE_1
 (1<<1)

	)

171 
	#VERT_LINE_STRIDE_0
 (0<<1)

	)

172 
	#VERT_LINE_STRIDE_OFS_1
 1

	)

173 
	#VERT_LINE_STRIDE_OFS_0
 0

	)

176 
	#_3DSTATE_DRAW_RECT_CMD
 (
CMD_3D
|(0x1d<<24)|(0x80<<16)|3)

	)

178 
	#DRAW_RECT_DIS_DEPTH_OFS
 (1<<30)

	)

179 
	#DRAW_DITHER_OFS_X
(
x
Ë((x)<<26)

	)

180 
	#DRAW_DITHER_OFS_Y
(
x
Ë((x)<<24)

	)

182 
	#DRAW_YMIN
(
x
Ë((x)<<16)

	)

183 
	#DRAW_XMIN
(
x
Ë(x)

	)

185 
	#DRAW_YMAX
(
x
Ë((x)<<16)

	)

186 
	#DRAW_XMAX
(
x
Ë(x)

	)

188 
	#DRAW_YORG
(
x
Ë((x)<<16)

	)

189 
	#DRAW_XORG
(
x
Ë(x)

	)

196 
	#_3DSTATE_FOG_COLOR_CMD
 (
CMD_3D
|(0x15<<24))

	)

197 
	#FOG_COLOR_RED
(
x
Ë((x)<<16)

	)

198 
	#FOG_COLOR_GREEN
(
x
Ë((x)<<8)

	)

199 
	#FOG_COLOR_BLUE
(
x
Ë(x)

	)

202 
	#_3DSTATE_FOG_MODE_CMD
 (
CMD_3D
|(0x1d<<24)|(0x89<<16)|2)

	)

204 
	#FMC1_FOGFUNC_MODIFY_ENABLE
 (1<<31)

	)

205 
	#FMC1_FOGFUNC_VERTEX
 (0<<28)

	)

206 
	#FMC1_FOGFUNC_PIXEL_EXP
 (1<<28)

	)

207 
	#FMC1_FOGFUNC_PIXEL_EXP2
 (2<<28)

	)

208 
	#FMC1_FOGFUNC_PIXEL_LINEAR
 (3<<28)

	)

209 
	#FMC1_FOGFUNC_MASK
 (3<<28)

	)

210 
	#FMC1_FOGINDEX_MODIFY_ENABLE
 (1<<27)

	)

211 
	#FMC1_FOGINDEX_Z
 (0<<25)

	)

212 
	#FMC1_FOGINDEX_W
 (1<<25)

	)

213 
	#FMC1_C1_C2_MODIFY_ENABLE
 (1<<24)

	)

214 
	#FMC1_DENSITY_MODIFY_ENABLE
 (1<<23)

	)

215 
	#FMC1_C1_ONE
 (1<<13)

	)

216 
	#FMC1_C1_MASK
 (0xffff<<4)

	)

218 
	#FMC2_C2_ONE
 (1<<16)

	)

220 
	#FMC3_D_ONE
 (1<<16)

	)

223 
	#_3DSTATE_INDEPENDENT_ALPHA_BLEND_CMD
 (
CMD_3D
|(0x0b<<24))

	)

224 
	#IAB_MODIFY_ENABLE
 (1<<23)

	)

225 
	#IAB_ENABLE
 (1<<22)

	)

226 
	#IAB_MODIFY_FUNC
 (1<<21)

	)

227 
	#IAB_FUNC_SHIFT
 16

	)

228 
	#IAB_MODIFY_SRC_FACTOR
 (1<<11)

	)

229 
	#IAB_SRC_FACTOR_SHIFT
 6

	)

230 
	#IAB_SRC_FACTOR_MASK
 (
BLENDFACT_MASK
<<6)

	)

231 
	#IAB_MODIFY_DST_FACTOR
 (1<<5)

	)

232 
	#IAB_DST_FACTOR_SHIFT
 0

	)

233 
	#IAB_DST_FACTOR_MASK
 (
BLENDFACT_MASK
<<0)

	)

235 
	#BLENDFACT_ZERO
 0x01

	)

236 
	#BLENDFACT_ONE
 0x02

	)

237 
	#BLENDFACT_SRC_COLR
 0x03

	)

238 
	#BLENDFACT_INV_SRC_COLR
 0x04

	)

239 
	#BLENDFACT_SRC_ALPHA
 0x05

	)

240 
	#BLENDFACT_INV_SRC_ALPHA
 0x06

	)

241 
	#BLENDFACT_DST_ALPHA
 0x07

	)

242 
	#BLENDFACT_INV_DST_ALPHA
 0x08

	)

243 
	#BLENDFACT_DST_COLR
 0x09

	)

244 
	#BLENDFACT_INV_DST_COLR
 0x0a

	)

245 
	#BLENDFACT_SRC_ALPHA_SATURATE
 0x0b

	)

246 
	#BLENDFACT_CONST_COLOR
 0x0c

	)

247 
	#BLENDFACT_INV_CONST_COLOR
 0x0d

	)

248 
	#BLENDFACT_CONST_ALPHA
 0x0e

	)

249 
	#BLENDFACT_INV_CONST_ALPHA
 0x0f

	)

250 
	#BLENDFACT_MASK
 0x0f

	)

252 
	#BLENDFUNC_ADD
 0x0

	)

253 
	#BLENDFUNC_SUBTRACT
 0x1

	)

254 
	#BLENDFUNC_REVERSE_SUBTRACT
 0x2

	)

255 
	#BLENDFUNC_MIN
 0x3

	)

256 
	#BLENDFUNC_MAX
 0x4

	)

257 
	#BLENDFUNC_MASK
 0x7

	)

261 
	#_3DSTATE_LOAD_INDIRECT
 (
CMD_3D
|(0x1d<<24)|(0x7<<16))

	)

262 
	#LI0_STATE_STATIC_INDIRECT
 (0x01<<8)

	)

263 
	#LI0_STATE_DYNAMIC_INDIRECT
 (0x02<<8)

	)

264 
	#LI0_STATE_SAMPLER
 (0x04<<8)

	)

265 
	#LI0_STATE_MAP
 (0x08<<8)

	)

266 
	#LI0_STATE_PROGRAM
 (0x10<<8)

	)

267 
	#LI0_STATE_CONSTANTS
 (0x20<<8)

	)

269 
	#SIS0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

270 
	#SIS0_FORCE_LOAD
 (1<<1)

	)

271 
	#SIS0_BUFFER_VALID
 (1<<0)

	)

272 
	#SIS1_BUFFER_LENGTH
(
x
Ë((x)&0xff)

	)

274 
	#DIS0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

275 
	#DIS0_BUFFER_RESET
 (1<<1)

	)

276 
	#DIS0_BUFFER_VALID
 (1<<0)

	)

278 
	#SSB0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

279 
	#SSB0_FORCE_LOAD
 (1<<1)

	)

280 
	#SSB0_BUFFER_VALID
 (1<<0)

	)

281 
	#SSB1_BUFFER_LENGTH
(
x
Ë((x)&0xff)

	)

283 
	#MSB0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

284 
	#MSB0_FORCE_LOAD
 (1<<1)

	)

285 
	#MSB0_BUFFER_VALID
 (1<<0)

	)

286 
	#MSB1_BUFFER_LENGTH
(
x
Ë((x)&0xff)

	)

288 
	#PSP0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

289 
	#PSP0_FORCE_LOAD
 (1<<1)

	)

290 
	#PSP0_BUFFER_VALID
 (1<<0)

	)

291 
	#PSP1_BUFFER_LENGTH
(
x
Ë((x)&0xff)

	)

293 
	#PSC0_BUFFER_ADDRESS
(
x
Ë((x)&~0x3)

	)

294 
	#PSC0_FORCE_LOAD
 (1<<1)

	)

295 
	#PSC0_BUFFER_VALID
 (1<<0)

	)

296 
	#PSC1_BUFFER_LENGTH
(
x
Ë((x)&0xff)

	)

299 
	#_3DSTATE_RASTER_RULES_CMD
 (
CMD_3D
|(0x07<<24))

	)

300 
	#ENABLE_POINT_RASTER_RULE
 (1<<15)

	)

301 
	#OGL_POINT_RASTER_RULE
 (1<<13)

	)

302 
	#ENABLE_TEXKILL_3D_4D
 (1<<10)

	)

303 
	#TEXKILL_3D
 (0<<9)

	)

304 
	#TEXKILL_4D
 (1<<9)

	)

305 
	#ENABLE_LINE_STRIP_PROVOKE_VRTX
 (1<<8)

	)

306 
	#ENABLE_TRI_FAN_PROVOKE_VRTX
 (1<<5)

	)

307 
	#LINE_STRIP_PROVOKE_VRTX
(
x
Ë((x)<<6)

	)

308 
	#TRI_FAN_PROVOKE_VRTX
(
x
Ë((x)<<3)

	)

311 
	#_3DSTATE_SCISSOR_ENABLE_CMD
 (
CMD_3D
|(0x1c<<24)|(0x10<<19))

	)

312 
	#ENABLE_SCISSOR_RECT
 ((1<<1Ë| 1)

	)

313 
	#DISABLE_SCISSOR_RECT
 (1<<1)

	)

316 
	#_3DSTATE_SCISSOR_RECT_0_CMD
 (
CMD_3D
|(0x1d<<24)|(0x81<<16)|1)

	)

318 
	#SCISSOR_RECT_0_YMIN
(
x
Ë((x)<<16)

	)

319 
	#SCISSOR_RECT_0_XMIN
(
x
Ë(x)

	)

321 
	#SCISSOR_RECT_0_YMAX
(
x
Ë((x)<<16)

	)

322 
	#SCISSOR_RECT_0_XMAX
(
x
Ë(x)

	)

325 
	#_3DSTATE_LOAD_STATE_IMMEDIATE_1
 ((0x3<<29)|(0x1d<<24)|(0x04<<16))

	)

326 
	#I1_LOAD_S
(
n
Ë(1<<(4+n))

	)

328 
	#S0_VB_OFFSET_MASK
 0xffffffc

	)

329 
	#S0_AUTO_CACHE_INV_DISABLE
 (1<<0)

	)

331 
	#S1_VERTEX_WIDTH_SHIFT
 24

	)

332 
	#S1_VERTEX_WIDTH_MASK
 (0x3f<<24)

	)

333 
	#S1_VERTEX_PITCH_SHIFT
 16

	)

334 
	#S1_VERTEX_PITCH_MASK
 (0x3f<<16)

	)

336 
	#TEXCOORDFMT_2D
 0x0

	)

337 
	#TEXCOORDFMT_3D
 0x1

	)

338 
	#TEXCOORDFMT_4D
 0x2

	)

339 
	#TEXCOORDFMT_1D
 0x3

	)

340 
	#TEXCOORDFMT_2D_16
 0x4

	)

341 
	#TEXCOORDFMT_4D_16
 0x5

	)

342 
	#TEXCOORDFMT_NOT_PRESENT
 0xf

	)

343 
	#S2_TEXCOORD_FMT0_MASK
 0xf

	)

344 
	#S2_TEXCOORD_FMT1_SHIFT
 4

	)

345 
	#S2_TEXCOORD_FMT
(
unô
, 
ty≥
Ë(—y≥)<<(unô*4))

	)

346 
	#S2_TEXCOORD_NONE
 (~0)

	)

348 
	#TEXCOORD_WRAP_SHORTEST_TCX
 8

	)

349 
	#TEXCOORD_WRAP_SHORTEST_TCY
 4

	)

350 
	#TEXCOORD_WRAP_SHORTEST_TCZ
 2

	)

351 
	#TEXCOORD_PERSPECTIVE_DISABLE
 1

	)

353 
	#S3_WRAP_SHORTEST_TCX
(
unô
Ë(
TEXCOORD_WRAP_SHORTEST_TCX
 << ((unôË* 4))

	)

354 
	#S3_WRAP_SHORTEST_TCY
(
unô
Ë(
TEXCOORD_WRAP_SHORTEST_TCY
 << ((unôË* 4))

	)

355 
	#S3_WRAP_SHORTEST_TCZ
(
unô
Ë(
TEXCOORD_WRAP_SHORTEST_TCZ
 << ((unôË* 4))

	)

356 
	#S3_PERSPECTIVE_DISABLE
(
unô
Ë(
TEXCOORD_PERSPECTIVE_DISABLE
 << ((unôË* 4))

	)

360 
	#S4_POINT_WIDTH_SHIFT
 23

	)

361 
	#S4_POINT_WIDTH_MASK
 (0x1ff<<23)

	)

362 
	#S4_LINE_WIDTH_SHIFT
 19

	)

363 
	#S4_LINE_WIDTH_ONE
 (0x2<<19)

	)

364 
	#S4_LINE_WIDTH_MASK
 (0xf<<19)

	)

365 
	#S4_FLATSHADE_ALPHA
 (1<<18)

	)

366 
	#S4_FLATSHADE_FOG
 (1<<17)

	)

367 
	#S4_FLATSHADE_SPECULAR
 (1<<16)

	)

368 
	#S4_FLATSHADE_COLOR
 (1<<15)

	)

369 
	#S4_CULLMODE_BOTH
 (0<<13)

	)

370 
	#S4_CULLMODE_NONE
 (1<<13)

	)

371 
	#S4_CULLMODE_CW
 (2<<13)

	)

372 
	#S4_CULLMODE_CCW
 (3<<13)

	)

373 
	#S4_CULLMODE_MASK
 (3<<13)

	)

374 
	#S4_VFMT_POINT_WIDTH
 (1<<12)

	)

375 
	#S4_VFMT_SPEC_FOG
 (1<<11)

	)

376 
	#S4_VFMT_COLOR
 (1<<10)

	)

377 
	#S4_VFMT_DEPTH_OFFSET
 (1<<9)

	)

378 
	#S4_VFMT_XYZ
 (1<<6)

	)

379 
	#S4_VFMT_XYZW
 (2<<6)

	)

380 
	#S4_VFMT_XY
 (3<<6)

	)

381 
	#S4_VFMT_XYW
 (4<<6)

	)

382 
	#S4_VFMT_XYZW_MASK
 (7<<6)

	)

383 
	#S4_FORCE_DEFAULT_DIFFUSE
 (1<<5)

	)

384 
	#S4_FORCE_DEFAULT_SPECULAR
 (1<<4)

	)

385 
	#S4_LOCAL_DEPTH_OFFSET_ENABLE
 (1<<3)

	)

386 
	#S4_VFMT_FOG_PARAM
 (1<<2)

	)

387 
	#S4_SPRITE_POINT_ENABLE
 (1<<1)

	)

388 
	#S4_LINE_ANTIALIAS_ENABLE
 (1<<0)

	)

390 
	#S4_VFMT_MASK
 (
S4_VFMT_POINT_WIDTH
 | \

391 
S4_VFMT_SPEC_FOG
 | \

392 
S4_VFMT_COLOR
 | \

393 
S4_VFMT_DEPTH_OFFSET
 | \

394 
S4_VFMT_XYZW_MASK
 | \

395 
S4_VFMT_FOG_PARAM
)

	)

397 
	#S5_WRITEDISABLE_ALPHA
 (1<<31)

	)

398 
	#S5_WRITEDISABLE_RED
 (1<<30)

	)

399 
	#S5_WRITEDISABLE_GREEN
 (1<<29)

	)

400 
	#S5_WRITEDISABLE_BLUE
 (1<<28)

	)

401 
	#S5_WRITEDISABLE_MASK
 (0xf<<28)

	)

402 
	#S5_FORCE_DEFAULT_POINT_SIZE
 (1<<27)

	)

403 
	#S5_LAST_PIXEL_ENABLE
 (1<<26)

	)

404 
	#S5_GLOBAL_DEPTH_OFFSET_ENABLE
 (1<<25)

	)

405 
	#S5_FOG_ENABLE
 (1<<24)

	)

406 
	#S5_STENCIL_REF_SHIFT
 16

	)

407 
	#S5_STENCIL_REF_MASK
 (0xff<<16)

	)

408 
	#S5_STENCIL_TEST_FUNC_SHIFT
 13

	)

409 
	#S5_STENCIL_TEST_FUNC_MASK
 (0x7<<13)

	)

410 
	#S5_STENCIL_FAIL_SHIFT
 10

	)

411 
	#S5_STENCIL_FAIL_MASK
 (0x7<<10)

	)

412 
	#S5_STENCIL_PASS_Z_FAIL_SHIFT
 7

	)

413 
	#S5_STENCIL_PASS_Z_FAIL_MASK
 (0x7<<7)

	)

414 
	#S5_STENCIL_PASS_Z_PASS_SHIFT
 4

	)

415 
	#S5_STENCIL_PASS_Z_PASS_MASK
 (0x7<<4)

	)

416 
	#S5_STENCIL_WRITE_ENABLE
 (1<<3)

	)

417 
	#S5_STENCIL_TEST_ENABLE
 (1<<2)

	)

418 
	#S5_COLOR_DITHER_ENABLE
 (1<<1)

	)

419 
	#S5_LOGICOP_ENABLE
 (1<<0)

	)

421 
	#S6_ALPHA_TEST_ENABLE
 (1<<31)

	)

422 
	#S6_ALPHA_TEST_FUNC_SHIFT
 28

	)

423 
	#S6_ALPHA_TEST_FUNC_MASK
 (0x7<<28)

	)

424 
	#S6_ALPHA_REF_SHIFT
 20

	)

425 
	#S6_ALPHA_REF_MASK
 (0xff<<20)

	)

426 
	#S6_DEPTH_TEST_ENABLE
 (1<<19)

	)

427 
	#S6_DEPTH_TEST_FUNC_SHIFT
 16

	)

428 
	#S6_DEPTH_TEST_FUNC_MASK
 (0x7<<16)

	)

429 
	#S6_CBUF_BLEND_ENABLE
 (1<<15)

	)

430 
	#S6_CBUF_BLEND_FUNC_SHIFT
 12

	)

431 
	#S6_CBUF_BLEND_FUNC_MASK
 (0x7<<12)

	)

432 
	#S6_CBUF_SRC_BLEND_FACT_SHIFT
 8

	)

433 
	#S6_CBUF_SRC_BLEND_FACT_MASK
 (0xf<<8)

	)

434 
	#S6_CBUF_DST_BLEND_FACT_SHIFT
 4

	)

435 
	#S6_CBUF_DST_BLEND_FACT_MASK
 (0xf<<4)

	)

436 
	#S6_DEPTH_WRITE_ENABLE
 (1<<3)

	)

437 
	#S6_COLOR_WRITE_ENABLE
 (1<<2)

	)

438 
	#S6_TRISTRIP_PV_SHIFT
 0

	)

439 
	#S6_TRISTRIP_PV_MASK
 (0x3<<0)

	)

441 
	#S7_DEPTH_OFFSET_CONST_MASK
 ~0

	)

447 
	#_3DSTATE_MODES_4_CMD
 (
CMD_3D
|(0x0d<<24))

	)

448 
	#ENABLE_LOGIC_OP_FUNC
 (1<<23)

	)

449 
	#LOGIC_OP_FUNC
(
x
Ë((x)<<18)

	)

450 
	#LOGICOP_MASK
 (0xf<<18)

	)

451 
	#LOGICOP_COPY
 0xc

	)

452 
	#MODE4_ENABLE_STENCIL_TEST_MASK
 ((1<<17)|(0xff00))

	)

453 
	#ENABLE_STENCIL_TEST_MASK
 (1<<17)

	)

454 
	#STENCIL_TEST_MASK
(
x
Ë((x)<<8)

	)

455 
	#MODE4_ENABLE_STENCIL_WRITE_MASK
 ((1<<16)|(0x00ff))

	)

456 
	#ENABLE_STENCIL_WRITE_MASK
 (1<<16)

	)

457 
	#STENCIL_WRITE_MASK
(
x
Ë((x)&0xff)

	)

460 
	#_3DSTATE_MODES_5_CMD
 (
CMD_3D
|(0x0c<<24))

	)

461 
	#PIPELINE_FLUSH_RENDER_CACHE
 (1<<18)

	)

462 
	#PIPELINE_FLUSH_TEXTURE_CACHE
 (1<<16)

	)

465 
	#_3DSTATE_PIXEL_SHADER_CONSTANTS
 (
CMD_3D
|(0x1d<<24)|(0x6<<16))

	)

466 
	#PS1_REG
(
n
Ë(1<<“))

	)

467 
	#PS2_CONST_X
(
n
Ë“)

	)

468 
	#PS3_CONST_Y
(
n
Ë“)

	)

469 
	#PS4_CONST_Z
(
n
Ë“)

	)

470 
	#PS5_CONST_W
(
n
Ë“)

	)

474 
	#I915_MAX_TEX_INDIRECT
 4

	)

475 
	#I915_MAX_TEX_INSN
 32

	)

476 
	#I915_MAX_ALU_INSN
 64

	)

477 
	#I915_MAX_DECL_INSN
 27

	)

478 
	#I915_MAX_TEMPORARY
 16

	)

484 
	#_3DSTATE_PIXEL_SHADER_PROGRAM
 (
CMD_3D
|(0x1d<<24)|(0x5<<16))

	)

486 
	#REG_TYPE_R
 0

	)

491 
	#REG_TYPE_T
 1

	)

499 
	#REG_TYPE_CONST
 2

	)

506 
	#REG_TYPE_S
 3

	)

507 
	#REG_TYPE_OC
 4

	)

508 
	#REG_TYPE_OD
 5

	)

512 
	#REG_TYPE_U
 6

	)

513 
	#REG_TYPE_MASK
 0x7

	)

514 
	#REG_NR_MASK
 0xf

	)

518 
	#T_TEX0
 0

	)

519 
	#T_TEX1
 1

	)

520 
	#T_TEX2
 2

	)

521 
	#T_TEX3
 3

	)

522 
	#T_TEX4
 4

	)

523 
	#T_TEX5
 5

	)

524 
	#T_TEX6
 6

	)

525 
	#T_TEX7
 7

	)

526 
	#T_DIFFUSE
 8

	)

527 
	#T_SPECULAR
 9

	)

528 
	#T_FOG_W
 10

	)

535 
	#A0_NOP
 (0x0<<24Ë

	)

536 
	#A0_ADD
 (0x1<<24Ë

	)

537 
	#A0_MOV
 (0x2<<24Ë

	)

538 
	#A0_MUL
 (0x3<<24Ë

	)

539 
	#A0_MAD
 (0x4<<24Ë

	)

540 
	#A0_DP2ADD
 (0x5<<24Ë

	)

541 
	#A0_DP3
 (0x6<<24Ë

	)

542 
	#A0_DP4
 (0x7<<24Ë

	)

543 
	#A0_FRC
 (0x8<<24Ë

	)

544 
	#A0_RCP
 (0x9<<24Ë

	)

545 
	#A0_RSQ
 (0xa<<24Ë

	)

546 
	#A0_EXP
 (0xb<<24Ë

	)

547 
	#A0_LOG
 (0xc<<24Ë

	)

548 
	#A0_CMP
 (0xd<<24Ë

	)

549 
	#A0_MIN
 (0xe<<24Ë

	)

550 
	#A0_MAX
 (0xf<<24Ë

	)

551 
	#A0_FLR
 (0x10<<24Ë

	)

552 
	#A0_MOD
 (0x11<<24Ë

	)

553 
	#A0_TRC
 (0x12<<24Ë

	)

554 
	#A0_SGE
 (0x13<<24Ë

	)

555 
	#A0_SLT
 (0x14<<24Ë

	)

556 
	#A0_DEST_SATURATE
 (1<<22)

	)

557 
	#A0_DEST_TYPE_SHIFT
 19

	)

559 
	#A0_DEST_NR_SHIFT
 14

	)

561 
	#A0_DEST_CHANNEL_X
 (1<<10)

	)

562 
	#A0_DEST_CHANNEL_Y
 (2<<10)

	)

563 
	#A0_DEST_CHANNEL_Z
 (4<<10)

	)

564 
	#A0_DEST_CHANNEL_W
 (8<<10)

	)

565 
	#A0_DEST_CHANNEL_ALL
 (0xf<<10)

	)

566 
	#A0_DEST_CHANNEL_SHIFT
 10

	)

567 
	#A0_SRC0_TYPE_SHIFT
 7

	)

568 
	#A0_SRC0_NR_SHIFT
 2

	)

570 
	#A0_DEST_CHANNEL_XY
 (
A0_DEST_CHANNEL_X
|
A0_DEST_CHANNEL_Y
)

	)

571 
	#A0_DEST_CHANNEL_XYZ
 (
A0_DEST_CHANNEL_XY
|
A0_DEST_CHANNEL_Z
)

	)

573 
	#SRC_X
 0

	)

574 
	#SRC_Y
 1

	)

575 
	#SRC_Z
 2

	)

576 
	#SRC_W
 3

	)

577 
	#SRC_ZERO
 4

	)

578 
	#SRC_ONE
 5

	)

580 
	#A1_SRC0_CHANNEL_X_NEGATE
 (1<<31)

	)

581 
	#A1_SRC0_CHANNEL_X_SHIFT
 28

	)

582 
	#A1_SRC0_CHANNEL_Y_NEGATE
 (1<<27)

	)

583 
	#A1_SRC0_CHANNEL_Y_SHIFT
 24

	)

584 
	#A1_SRC0_CHANNEL_Z_NEGATE
 (1<<23)

	)

585 
	#A1_SRC0_CHANNEL_Z_SHIFT
 20

	)

586 
	#A1_SRC0_CHANNEL_W_NEGATE
 (1<<19)

	)

587 
	#A1_SRC0_CHANNEL_W_SHIFT
 16

	)

588 
	#A1_SRC1_TYPE_SHIFT
 13

	)

589 
	#A1_SRC1_NR_SHIFT
 8

	)

590 
	#A1_SRC1_CHANNEL_X_NEGATE
 (1<<7)

	)

591 
	#A1_SRC1_CHANNEL_X_SHIFT
 4

	)

592 
	#A1_SRC1_CHANNEL_Y_NEGATE
 (1<<3)

	)

593 
	#A1_SRC1_CHANNEL_Y_SHIFT
 0

	)

595 
	#A2_SRC1_CHANNEL_Z_NEGATE
 (1<<31)

	)

596 
	#A2_SRC1_CHANNEL_Z_SHIFT
 28

	)

597 
	#A2_SRC1_CHANNEL_W_NEGATE
 (1<<27)

	)

598 
	#A2_SRC1_CHANNEL_W_SHIFT
 24

	)

599 
	#A2_SRC2_TYPE_SHIFT
 21

	)

600 
	#A2_SRC2_NR_SHIFT
 16

	)

601 
	#A2_SRC2_CHANNEL_X_NEGATE
 (1<<15)

	)

602 
	#A2_SRC2_CHANNEL_X_SHIFT
 12

	)

603 
	#A2_SRC2_CHANNEL_Y_NEGATE
 (1<<11)

	)

604 
	#A2_SRC2_CHANNEL_Y_SHIFT
 8

	)

605 
	#A2_SRC2_CHANNEL_Z_NEGATE
 (1<<7)

	)

606 
	#A2_SRC2_CHANNEL_Z_SHIFT
 4

	)

607 
	#A2_SRC2_CHANNEL_W_NEGATE
 (1<<3)

	)

608 
	#A2_SRC2_CHANNEL_W_SHIFT
 0

	)

611 
	#T0_TEXLD
 (0x15<<24Ë

	)

615 
	#T0_TEXLDP
 (0x16<<24Ë

	)

619 
	#T0_TEXLDB
 (0x17<<24Ë

	)

624 
	#T0_TEXKILL
 (0x18<<24Ë

	)

628 
	#T0_DEST_TYPE_SHIFT
 19

	)

637 
	#T0_DEST_NR_SHIFT
 14

	)

639 
	#T0_SAMPLER_NR_SHIFT
 0

	)

640 
	#T0_SAMPLER_NR_MASK
 (0xf<<0)

	)

642 
	#T1_ADDRESS_REG_TYPE_SHIFT
 24

	)

644 
	#T1_ADDRESS_REG_NR_SHIFT
 17

	)

645 
	#T2_MBZ
 0

	)

648 
	#D0_DCL
 (0x19<<24Ë

	)

651 
	#D0_SAMPLE_TYPE_SHIFT
 22

	)

652 
	#D0_SAMPLE_TYPE_2D
 (0x0<<22)

	)

653 
	#D0_SAMPLE_TYPE_CUBE
 (0x1<<22)

	)

654 
	#D0_SAMPLE_TYPE_VOLUME
 (0x2<<22)

	)

655 
	#D0_SAMPLE_TYPE_MASK
 (0x3<<22)

	)

657 
	#D0_TYPE_SHIFT
 19

	)

659 
	#D0_NR_SHIFT
 14

	)

661 
	#D0_CHANNEL_X
 (1<<10)

	)

662 
	#D0_CHANNEL_Y
 (2<<10)

	)

663 
	#D0_CHANNEL_Z
 (4<<10)

	)

664 
	#D0_CHANNEL_W
 (8<<10)

	)

665 
	#D0_CHANNEL_ALL
 (0xf<<10)

	)

666 
	#D0_CHANNEL_NONE
 (0<<10)

	)

668 
	#D0_CHANNEL_XY
 (
D0_CHANNEL_X
|
D0_CHANNEL_Y
)

	)

669 
	#D0_CHANNEL_XYZ
 (
D0_CHANNEL_XY
|
D0_CHANNEL_Z
)

	)

678 
	#D1_MBZ
 0

	)

679 
	#D2_MBZ
 0

	)

684 
	#_3DSTATE_MAP_STATE
 (
CMD_3D
|(0x1d<<24)|(0x0<<16))

	)

686 
	#MS1_MAPMASK_SHIFT
 0

	)

687 
	#MS1_MAPMASK_MASK
 (0x8fff<<0)

	)

689 
	#MS2_UNTRUSTED_SURFACE
 (1<<31)

	)

690 
	#MS2_ADDRESS_MASK
 0xfffffffc

	)

691 
	#MS2_VERTICAL_LINE_STRIDE
 (1<<1)

	)

692 
	#MS2_VERTICAL_OFFSET
 (1<<1)

	)

694 
	#MS3_HEIGHT_SHIFT
 21

	)

695 
	#MS3_WIDTH_SHIFT
 10

	)

696 
	#MS3_PALETTE_SELECT
 (1<<9)

	)

697 
	#MS3_MAPSURF_FORMAT_SHIFT
 7

	)

698 
	#MS3_MAPSURF_FORMAT_MASK
 (0x7<<7)

	)

699 
	#MAPSURF_8BIT
 (1<<7)

	)

700 
	#MAPSURF_16BIT
 (2<<7)

	)

701 
	#MAPSURF_32BIT
 (3<<7)

	)

702 
	#MAPSURF_422
 (5<<7)

	)

703 
	#MAPSURF_COMPRESSED
 (6<<7)

	)

704 
	#MAPSURF_4BIT_INDEXED
 (7<<7)

	)

705 
	#MS3_MT_FORMAT_MASK
 (0x7 << 3)

	)

706 
	#MS3_MT_FORMAT_SHIFT
 3

	)

707 
	#MT_4BIT_IDX_ARGB8888
 (7<<3Ë

	)

708 
	#MT_8BIT_I8
 (0<<3Ë

	)

709 
	#MT_8BIT_L8
 (1<<3)

	)

710 
	#MT_8BIT_A8
 (4<<3)

	)

711 
	#MT_8BIT_MONO8
 (5<<3)

	)

712 
	#MT_16BIT_RGB565
 (0<<3Ë

	)

713 
	#MT_16BIT_ARGB1555
 (1<<3)

	)

714 
	#MT_16BIT_ARGB4444
 (2<<3)

	)

715 
	#MT_16BIT_AY88
 (3<<3)

	)

716 
	#MT_16BIT_88DVDU
 (5<<3)

	)

717 
	#MT_16BIT_BUMP_655LDVDU
 (6<<3)

	)

718 
	#MT_16BIT_I16
 (7<<3)

	)

719 
	#MT_16BIT_L16
 (8<<3)

	)

720 
	#MT_16BIT_A16
 (9<<3)

	)

721 
	#MT_32BIT_ARGB8888
 (0<<3Ë

	)

722 
	#MT_32BIT_ABGR8888
 (1<<3)

	)

723 
	#MT_32BIT_XRGB8888
 (2<<3)

	)

724 
	#MT_32BIT_XBGR8888
 (3<<3)

	)

725 
	#MT_32BIT_QWVU8888
 (4<<3)

	)

726 
	#MT_32BIT_AXVU8888
 (5<<3)

	)

727 
	#MT_32BIT_LXVU8888
 (6<<3)

	)

728 
	#MT_32BIT_XLVU8888
 (7<<3)

	)

729 
	#MT_32BIT_ARGB2101010
 (8<<3)

	)

730 
	#MT_32BIT_ABGR2101010
 (9<<3)

	)

731 
	#MT_32BIT_AWVU2101010
 (0xA<<3)

	)

732 
	#MT_32BIT_GR1616
 (0xB<<3)

	)

733 
	#MT_32BIT_VU1616
 (0xC<<3)

	)

734 
	#MT_32BIT_xI824
 (0xD<<3)

	)

735 
	#MT_32BIT_xA824
 (0xE<<3)

	)

736 
	#MT_32BIT_xL824
 (0xF<<3)

	)

737 
	#MT_422_YCRCB_SWAPY
 (0<<3Ë

	)

738 
	#MT_422_YCRCB_NORMAL
 (1<<3)

	)

739 
	#MT_422_YCRCB_SWAPUV
 (2<<3)

	)

740 
	#MT_422_YCRCB_SWAPUVY
 (3<<3)

	)

741 
	#MT_COMPRESS_DXT1
 (0<<3Ë

	)

742 
	#MT_COMPRESS_DXT2_3
 (1<<3)

	)

743 
	#MT_COMPRESS_DXT4_5
 (2<<3)

	)

744 
	#MT_COMPRESS_FXT1
 (3<<3)

	)

745 
	#MT_COMPRESS_DXT1_RGB
 (4<<3)

	)

746 
	#MS3_USE_FENCE_REGS
 (1<<2)

	)

747 
	#MS3_TILED_SURFACE
 (1<<1)

	)

748 
	#MS3_TILE_WALK
 (1<<0)

	)

751 
	#MS4_PITCH_SHIFT
 21

	)

752 
	#MS4_CUBE_FACE_ENA_NEGX
 (1<<20)

	)

753 
	#MS4_CUBE_FACE_ENA_POSX
 (1<<19)

	)

754 
	#MS4_CUBE_FACE_ENA_NEGY
 (1<<18)

	)

755 
	#MS4_CUBE_FACE_ENA_POSY
 (1<<17)

	)

756 
	#MS4_CUBE_FACE_ENA_NEGZ
 (1<<16)

	)

757 
	#MS4_CUBE_FACE_ENA_POSZ
 (1<<15)

	)

758 
	#MS4_CUBE_FACE_ENA_MASK
 (0x3f<<15)

	)

759 
	#MS4_MAX_LOD_SHIFT
 9

	)

760 
	#MS4_MAX_LOD_MASK
 (0x3f<<9)

	)

761 
	#MS4_MIP_LAYOUT_LEGACY
 (0<<8)

	)

762 
	#MS4_MIP_LAYOUT_BELOW_LPT
 (0<<8)

	)

763 
	#MS4_MIP_LAYOUT_RIGHT_LPT
 (1<<8)

	)

764 
	#MS4_VOLUME_DEPTH_SHIFT
 0

	)

765 
	#MS4_VOLUME_DEPTH_MASK
 (0xff<<0)

	)

770 
	#_3DSTATE_SAMPLER_STATE
 (
CMD_3D
|(0x1d<<24)|(0x1<<16))

	)

772 
	#SS1_MAPMASK_SHIFT
 0

	)

773 
	#SS1_MAPMASK_MASK
 (0x8fff<<0)

	)

775 
	#SS2_REVERSE_GAMMA_ENABLE
 (1<<31)

	)

776 
	#SS2_PACKED_TO_PLANAR_ENABLE
 (1<<30)

	)

777 
	#SS2_COLORSPACE_CONVERSION
 (1<<29)

	)

778 
	#SS2_CHROMAKEY_SHIFT
 27

	)

779 
	#SS2_BASE_MIP_LEVEL_SHIFT
 22

	)

780 
	#SS2_BASE_MIP_LEVEL_MASK
 (0x1f<<22)

	)

781 
	#SS2_MIP_FILTER_SHIFT
 20

	)

782 
	#SS2_MIP_FILTER_MASK
 (0x3<<20)

	)

783 
	#MIPFILTER_NONE
 0

	)

784 
	#MIPFILTER_NEAREST
 1

	)

785 
	#MIPFILTER_LINEAR
 3

	)

786 
	#SS2_MAG_FILTER_SHIFT
 17

	)

787 
	#SS2_MAG_FILTER_MASK
 (0x7<<17)

	)

788 
	#FILTER_NEAREST
 0

	)

789 
	#FILTER_LINEAR
 1

	)

790 
	#FILTER_ANISOTROPIC
 2

	)

791 
	#FILTER_4X4_1
 3

	)

792 
	#FILTER_4X4_2
 4

	)

793 
	#FILTER_4X4_FLAT
 5

	)

794 
	#FILTER_6X5_MONO
 6

	)

795 
	#SS2_MIN_FILTER_SHIFT
 14

	)

796 
	#SS2_MIN_FILTER_MASK
 (0x7<<14)

	)

797 
	#SS2_LOD_BIAS_SHIFT
 5

	)

798 
	#SS2_LOD_BIAS_ONE
 (0x10<<5)

	)

799 
	#SS2_LOD_BIAS_MASK
 (0x1ff<<5)

	)

804 
	#SS2_SHADOW_ENABLE
 (1<<4)

	)

805 
	#SS2_MAX_ANISO_MASK
 (1<<3)

	)

806 
	#SS2_MAX_ANISO_2
 (0<<3)

	)

807 
	#SS2_MAX_ANISO_4
 (1<<3)

	)

808 
	#SS2_SHADOW_FUNC_SHIFT
 0

	)

809 
	#SS2_SHADOW_FUNC_MASK
 (0x7<<0)

	)

812 
	#SS3_MIN_LOD_SHIFT
 24

	)

813 
	#SS3_MIN_LOD_ONE
 (0x10<<24)

	)

814 
	#SS3_MIN_LOD_MASK
 (0xff<<24)

	)

815 
	#SS3_KILL_PIXEL_ENABLE
 (1<<17)

	)

816 
	#SS3_TCX_ADDR_MODE_SHIFT
 12

	)

817 
	#SS3_TCX_ADDR_MODE_MASK
 (0x7<<12)

	)

818 
	#TEXCOORDMODE_WRAP
 0

	)

819 
	#TEXCOORDMODE_MIRROR
 1

	)

820 
	#TEXCOORDMODE_CLAMP_EDGE
 2

	)

821 
	#TEXCOORDMODE_CUBE
 3

	)

822 
	#TEXCOORDMODE_CLAMP_BORDER
 4

	)

823 
	#TEXCOORDMODE_MIRROR_ONCE
 5

	)

824 
	#SS3_TCY_ADDR_MODE_SHIFT
 9

	)

825 
	#SS3_TCY_ADDR_MODE_MASK
 (0x7<<9)

	)

826 
	#SS3_TCZ_ADDR_MODE_SHIFT
 6

	)

827 
	#SS3_TCZ_ADDR_MODE_MASK
 (0x7<<6)

	)

828 
	#SS3_NORMALIZED_COORDS
 (1<<5)

	)

829 
	#SS3_TEXTUREMAP_INDEX_SHIFT
 1

	)

830 
	#SS3_TEXTUREMAP_INDEX_MASK
 (0xf<<1)

	)

831 
	#SS3_DEINTERLACER_ENABLE
 (1<<0)

	)

833 
	#SS4_BORDER_COLOR_MASK
 (~0)

	)

837 
	#_3DSTATE_STIPPLE
 ((0x3<<29)|(0x1d<<24)|(0x83<<16))

	)

838 
	#ST1_ENABLE
 (1<<16)

	)

839 
	#ST1_MASK
 (0xffff)

	)

841 
	#FLUSH_MAP_CACHE
 (1<<0)

	)

842 
	#FLUSH_RENDER_CACHE
 (1<<1)

	)

	@igt.h

24 #i‚de‡
IGT_H


25 
	#IGT_H


	)

27 
	~"drmã°.h
"

28 
	~"i915_3d.h
"

29 
	~"i915_pciids.h
"

30 
	~"igt_aux.h
"

31 
	~"igt_c‹e.h
"

32 
	~"igt_c‹e.h
"

33 
	~"igt_debugfs.h
"

34 
	~"igt_døw.h
"

35 
	~"igt_dummylﬂd.h
"

36 
	~"igt_fb.h
"

37 
	~"igt_‰ame.h
"

38 
	~"igt_Æß.h
"

39 
	~"igt_audio.h
"

40 
	~"igt_gt.h
"

41 
	~"igt_kms.h
"

42 
	~"igt_pm.h
"

43 
	~"igt_°©s.h
"

44 #ifde‡
HAVE_CHAMELIUM


45 
	~"igt_chamñium.h
"

47 
	~"ö°d⁄e.h
"

48 
	~"öãl_b©chbuf„r.h
"

49 
	~"öãl_chù£t.h
"

50 
	~"öãl_io.h
"

51 
	~"io˘l_wøµîs.h
"

52 
	~"medü_fûl.h
"

53 
	~"medü_•ö.h
"

54 
	~"ªndîc›y.h
"

	@igt_alsa.c

27 
	~"c⁄fig.h
"

29 
	~<Æß/asoundlib.h
>

31 
	~"igt_Æß.h
"

32 
	~"igt_c‹e.h
"

34 
	#HANDLES_MAX
 8

	)

45 
	sÆß
 {

46 
¢d_pcm_t
 *
	mouçut_h™dÀs
[
HANDLES_MAX
];

47 
	mouçut_h™dÀs_cou¡
;

48 
	mouçut_ßm∂ög_øã
;

49 
	mouçut_ch™√ls
;

51 (*
	mouçut_ˇŒback
)(*
	md©a
, *
	mbuf„r
, 
	mßm∂es
);

52 *
	mouçut_ˇŒback_d©a
;

53 
	mouçut_ßm∂es_åiggî
;

55 
¢d_pcm_t
 *
	möput_h™dÀ
;

56 
	möput_ßm∂ög_øã
;

57 
	möput_ch™√ls
;

59 (*
	möput_ˇŒback
)(*
	md©a
, *
	mbuf„r
, 
	mßm∂es
);

60 *
	möput_ˇŒback_d©a
;

61 
	möput_ßm∂es_åiggî
;

64 
	$Æß_îr‹_h™dÀr
(c⁄° *
fûe
, 
löe
, c⁄° *
fun˘i⁄
,

65 
îr
, c⁄° *
fmt
, ...)

67 i‡(
îr
)

68 
	`igt_debug
("[ALSA] %s: %s\n", 
fun˘i⁄
, 
	`¢d_°ªº‹
(
îr
));

69 
	}
}

77 
Æß
 *
	$Æß_öô
()

79 
Æß
 *alsa;

81 
Æß
 = 
	`mÆloc
((alsa));

82 
	`mem£t
(
Æß
, 0, (alsa));

85 
	`¢d_lib_îr‹_£t_h™dÀr
(
Æß_îr‹_h™dÀr
);

87  
Æß
;

88 
	}
}

90 *
	$Æß_ªsﬁve_ödítifõr
(c⁄° *
devi˚_«me
, 
skù
)

92 
¢d_˘l_ˇrd_öfo_t
 *
ˇrd_öfo
;

93 
¢d_pcm_öfo_t
 *
pcm_öfo
;

94 
¢d_˘l_t
 *
h™dÀ
 = 
NULL
;

95 c⁄° *
pcm_«me
;

96 *
idítifõr
 = 
NULL
;

97 
«me
[32];

98 
ˇrd
 = -1;

99 
dev
;

100 
ªt
;

102 
	`¢d_˘l_ˇrd_öfo_Æloˇ
(&
ˇrd_öfo
);

103 
	`¢d_pcm_öfo_Æloˇ
(&
pcm_öfo
);

106 i‡(!
skù
) {

107 
ªt
 = 
	`¢d_˘l_›í
(&
h™dÀ
, 
devi˚_«me
, 0);

108 i‡(!
ªt
) {

109 
idítifõr
 = 
	`°rdup
(
devi˚_«me
);

110 
ªsﬁved
;

115 
ªt
 = 
	`¢d_ˇrd_√xt
(&
ˇrd
);

116 i‡(
ªt
 < 0 || 
ˇrd
 < 0)

119 
	`¢¥ötf
(
«me
, “ame), "hw:%d", 
ˇrd
);

121 
ªt
 = 
	`¢d_˘l_›í
(&
h™dÀ
, 
«me
, 0);

122 i‡(
ªt
 < 0)

125 
ªt
 = 
	`¢d_˘l_ˇrd_öfo
(
h™dÀ
, 
ˇrd_öfo
);

126 i‡(
ªt
 < 0) {

127 
	`¢d_˘l_˛o£
(
h™dÀ
);

128 
h™dÀ
 = 
NULL
;

132 
dev
 = -1;

135 
ªt
 = 
	`¢d_˘l_pcm_√xt_devi˚
(
h™dÀ
, &
dev
);

136 i‡(
ªt
 < 0 || 
dev
 < 0)

139 
	`¢d_pcm_öfo_£t_devi˚
(
pcm_öfo
, 
dev
);

140 
	`¢d_pcm_öfo_£t_subdevi˚
(
pcm_öfo
, 0);

142 
ªt
 = 
	`¢d_˘l_pcm_öfo
(
h™dÀ
, 
pcm_öfo
);

143 i‡(
ªt
 < 0)

146 
pcm_«me
 = 
	`¢d_pcm_öfo_gë_«me
(
pcm_öfo
);

147 i‡(!
pcm_«me
)

150 
ªt
 = 
	`°∫cmp
(
devi˚_«me
, 
pcm_«me
,

151 
	`°æí
(
devi˚_«me
));

153 i‡(
ªt
 == 0) {

154 i‡(
skù
 > 0) {

155 
skù
--;

159 
	`¢¥ötf
(
«me
, “ame), "hw:%d,%d", 
ˇrd
,

160 
dev
);

162 
idítifõr
 = 
	`°rdup
(
«me
);

163 
ªsﬁved
;

165 } 
dev
 >= 0);

167 
	`¢d_˘l_˛o£
(
h™dÀ
);

168 
h™dÀ
 = 
NULL
;

169 } 
ˇrd
 >= 0);

171 
ªsﬁved
:

172 i‡(
h™dÀ
)

173 
	`¢d_˘l_˛o£
(
h™dÀ
);

175  
idítifõr
;

176 
	}
}

187 
	$Æß_›í_ouçut
(
Æß
 *Æß, c⁄° *
devi˚_«me
)

189 
¢d_pcm_t
 *
h™dÀ
;

190 *
idítifõr
;

191 
skù
;

192 
ödex
;

193 
ªt
;

195 
skù
 = 
Æß
->
ouçut_h™dÀs_cou¡
;

196 
ödex
 = 
Æß
->
ouçut_h™dÀs_cou¡
;

198 
ödex
 < 
HANDLES_MAX
) {

199 
idítifõr
 = 
	`Æß_ªsﬁve_ödítifõr
(
devi˚_«me
, 
skù
++);

200 i‡(!
idítifõr
)

203 
ªt
 = 
	`¢d_pcm_›í
(&
h™dÀ
, 
idítifõr
, 
SND_PCM_STREAM_PLAYBACK
,

204 
SND_PCM_NONBLOCK
);

205 i‡(
ªt
 < 0) {

206 
	`‰ì
(
idítifõr
);

210 
	`igt_debug
("O≥√d ouçuà%s\n", 
idítifõr
);

212 
Æß
->
ouçut_h™dÀs
[
ödex
++] = 
h™dÀ
;

213 
	`‰ì
(
idítifõr
);

216 i‡(
ödex
 == 0)

219 
Æß
->
ouçut_h™dÀs_cou¡
 = 
ödex
;

222 
	}
}

233 
	$Æß_›í_öput
(
Æß
 *Æß, c⁄° *
devi˚_«me
)

235 
¢d_pcm_t
 *
h™dÀ
;

236 *
idítifõr
;

237 
ªt
;

239 
idítifõr
 = 
	`Æß_ªsﬁve_ödítifõr
(
devi˚_«me
, 0);

241 
ªt
 = 
	`¢d_pcm_›í
(&
h™dÀ
, 
devi˚_«me
, 
SND_PCM_STREAM_CAPTURE
,

242 
SND_PCM_NONBLOCK
);

243 i‡(
ªt
 < 0)

244 
com∂ëe
;

246 
	`igt_debug
("O≥√d i≈uà%s\n", 
idítifõr
);

248 
Æß
->
öput_h™dÀ
 = 
h™dÀ
;

250 
ªt
 = 0;

252 
com∂ëe
:

253 
	`‰ì
(
idítifõr
);

255  
ªt
;

256 
	}
}

264 
	$Æß_˛o£_ouçut
(
Æß
 *alsa)

266 
¢d_pcm_t
 *
h™dÀ
;

267 
i
;

269 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++) {

270 
h™dÀ
 = 
Æß
->
ouçut_h™dÀs
[
i
];

271 i‡(!
h™dÀ
)

274 
	`¢d_pcm_˛o£
(
h™dÀ
);

275 
Æß
->
ouçut_h™dÀs
[
i
] = 
NULL
;

278 
Æß
->
ouçut_h™dÀs_cou¡
 = 0;

280 
Æß
->
ouçut_ˇŒback
 = 
NULL
;

281 
	}
}

289 
	$Æß_˛o£_öput
(
Æß
 *alsa)

291 
¢d_pcm_t
 *
h™dÀ
 = 
Æß
->
öput_h™dÀ
;

292 i‡(!
h™dÀ
)

295 
	`¢d_pcm_˛o£
(
h™dÀ
);

296 
Æß
->
öput_h™dÀ
 = 
NULL
;

298 
Æß
->
öput_ˇŒback
 = 
NULL
;

299 
	}
}

301 
boﬁ
 
	$Æß_ã°_c⁄figuøti⁄
(
¢d_pcm_t
 *
h™dÀ
, 
ch™√ls
,

302 
ßm∂ög_øã
)

304 
¢d_pcm_hw_∑øms_t
 *
∑øms
;

305 
ªt
;

307 
	`¢d_pcm_hw_∑øms_Æloˇ
(&
∑øms
);

309 
ªt
 = 
	`¢d_pcm_hw_∑øms_™y
(
h™dÀ
, 
∑øms
);

310 i‡(
ªt
 < 0)

311  
Ál£
;

313 
ªt
 = 
	`¢d_pcm_hw_∑øms_ã°_øã
(
h™dÀ
, 
∑øms
, 
ßm∂ög_øã
, 0);

314 i‡(
ªt
 < 0)

315  
Ál£
;

317 
ªt
 = 
	`¢d_pcm_hw_∑øms_ã°_ch™√ls
(
h™dÀ
, 
∑øms
, 
ch™√ls
);

318 i‡(
ªt
 < 0)

319  
Ál£
;

321  
åue
;

322 
	}
}

335 
boﬁ
 
	$Æß_ã°_ouçut_c⁄figuøti⁄
(
Æß
 *Æß, 
ch™√ls
,

336 
ßm∂ög_øã
)

338 
¢d_pcm_t
 *
h™dÀ
;

339 
boﬁ
 
ªt
;

340 
i
;

342 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++) {

343 
h™dÀ
 = 
Æß
->
ouçut_h™dÀs
[
i
];

345 
ªt
 = 
	`Æß_ã°_c⁄figuøti⁄
(
h™dÀ
, 
ch™√ls
, 
ßm∂ög_øã
);

346 i‡(!
ªt
)

347  
Ál£
;

350  
åue
;

351 
	}
}

364 
boﬁ
 
	$Æß_ã°_öput_c⁄figuøti⁄
(
Æß
 *Æß, 
ch™√ls
,

365 
ßm∂ög_øã
)

367  
	`Æß_ã°_c⁄figuøti⁄
(
Æß
->
öput_h™dÀ
, 
ch™√ls
,

368 
ßm∂ög_øã
);

369 
	}
}

380 
	$Æß_c⁄figuª_ouçut
(
Æß
 *Æß, 
ch™√ls
,

381 
ßm∂ög_øã
)

383 
¢d_pcm_t
 *
h™dÀ
;

384 
ªt
;

385 
i
;

387 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++) {

388 
h™dÀ
 = 
Æß
->
ouçut_h™dÀs
[
i
];

390 
ªt
 = 
	`¢d_pcm_£t_∑øms
(
h™dÀ
, 
SND_PCM_FORMAT_S16_LE
,

391 
SND_PCM_ACCESS_RW_INTERLEAVED
,

392 
ch™√ls
, 
ßm∂ög_øã
, 0, 0);

393 
	`igt_as£π
(
ªt
 >= 0);

396 
Æß
->
ouçut_ch™√ls
 = 
ch™√ls
;

397 
Æß
->
ouçut_ßm∂ög_øã
 = 
ßm∂ög_øã
;

398 
	}
}

409 
	$Æß_c⁄figuª_öput
(
Æß
 *Æß, 
ch™√ls
,

410 
ßm∂ög_øã
)

412 
¢d_pcm_t
 *
h™dÀ
;

413 
ªt
;

415 
h™dÀ
 = 
Æß
->
öput_h™dÀ
;

417 
ªt
 = 
	`¢d_pcm_£t_∑øms
(
h™dÀ
, 
SND_PCM_FORMAT_S16_LE
,

418 
SND_PCM_ACCESS_RW_INTERLEAVED
, 
ch™√ls
,

419 
ßm∂ög_øã
, 0, 0);

420 
	`igt_as£π
(
ªt
 >= 0);

422 
Æß
->
öput_ch™√ls
 = 
ch™√ls
;

423 
Æß
->
öput_ßm∂ög_øã
 = 
ßm∂ög_øã
;

425 
	}
}

440 
	$Æß_ªgi°î_ouçut_ˇŒback
(
Æß
 *alsa,

441 (*
ˇŒback
)(*
d©a
, *
buf„r
, 
ßm∂es
),

442 *
ˇŒback_d©a
, 
ßm∂es_åiggî
)

444 
Æß
->
ouçut_ˇŒback
 = 
ˇŒback
;

445 
Æß
->
ouçut_ˇŒback_d©a
 = 
ˇŒback_d©a
;

446 
Æß
->
ouçut_ßm∂es_åiggî
 = 
ßm∂es_åiggî
;

447 
	}
}

462 
	$Æß_ªgi°î_öput_ˇŒback
(
Æß
 *alsa,

463 (*
ˇŒback
)(*
d©a
, *
buf„r
, 
ßm∂es
),

464 *
ˇŒback_d©a
, 
ßm∂es_åiggî
)

466 
Æß
->
öput_ˇŒback
 = 
ˇŒback
;

467 
Æß
->
öput_ˇŒback_d©a
 = 
ˇŒback_d©a
;

468 
Æß
->
öput_ßm∂es_åiggî
 = 
ßm∂es_åiggî
;

469 
	}
}

482 
	$Æß_run
(
Æß
 *Æß, 
duøti⁄_ms
)

484 
¢d_pcm_t
 *
h™dÀ
;

485 *
ouçut_buf„r
 = 
NULL
;

486 *
öput_buf„r
 = 
NULL
;

487 
ouçut_limô
;

488 
ouçut_tŸÆ
 = 0;

489 
ouçut_cou¡s
[
Æß
->
ouçut_h™dÀs_cou¡
];

490 
boﬁ
 
ouçut_ªady
 = 
Ál£
;

491 
ouçut_ch™√ls
;

492 
ouçut_åiggî
;

493 
öput_limô
;

494 
öput_tŸÆ
 = 0;

495 
öput_cou¡
 = 0;

496 
öput_ch™√ls
;

497 
öput_åiggî
;

498 
boﬁ
 
ªached
;

499 
ödex
;

500 
cou¡
;

501 
avaû
;

502 
i
;

503 
ªt
;

505 
ouçut_limô
 = 
Æß
->
ouçut_ßm∂ög_øã
 * 
duøti⁄_ms
 / 1000;

506 
ouçut_ch™√ls
 = 
Æß
->output_channels;

507 
ouçut_åiggî
 = 
Æß
->
ouçut_ßm∂es_åiggî
;

508 
ouçut_buf„r
 = 
	`mÆloc
((Ë* 
ouçut_ch™√ls
 *

509 
ouçut_åiggî
);

511 i‡(
Æß
->
öput_ˇŒback
) {

512 
öput_limô
 = 
Æß
->
öput_ßm∂ög_øã
 * 
duøti⁄_ms
 / 1000;

513 
öput_åiggî
 = 
Æß
->
öput_ßm∂es_åiggî
;

514 
öput_ch™√ls
 = 
Æß
->input_channels;

515 
öput_buf„r
 = 
	`mÆloc
((Ë* 
öput_ch™√ls
 *

516 
öput_åiggî
);

520 
ªached
 = 
åue
;

522 i‡(
ouçut_tŸÆ
 < 
ouçut_limô
) {

523 
ªached
 = 
Ál£
;

525 i‡(!
ouçut_ªady
) {

526 
ouçut_ªady
 = 
åue
;

528 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++)

529 
ouçut_cou¡s
[
i
] = 0;

531 
ªt
 = 
Æß
->
	`ouçut_ˇŒback
◊lß->
ouçut_ˇŒback_d©a
,

532 
ouçut_buf„r
,

533 
ouçut_åiggî
);

534 i‡(
ªt
 < 0)

535 
com∂ëe
;

538 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++) {

539 
h™dÀ
 = 
Æß
->
ouçut_h™dÀs
[
i
];

541 
ªt
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

542 i‡(
ouçut_cou¡s
[
i
] < 
ouçut_åiggî
 &&

543 
ªt
 > 0) {

544 
ödex
 = 
ouçut_cou¡s
[
i
] *

545 
ouçut_ch™√ls
;

546 
cou¡
 = 
ouçut_åiggî
 -

547 
ouçut_cou¡s
[
i
];

548 
avaû
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

550 
cou¡
 = 
avaû
 < count ?ávail : count;

552 
ªt
 = 
	`¢d_pcm_wrôei
(
h™dÀ
,

553 &
ouçut_buf„r
[
ödex
],

554 
cou¡
);

555 i‡(
ªt
 < 0) {

556 
ªt
 = 
	`¢d_pcm_ªcovî
(
h™dÀ
,

557 
ªt
, 0);

558 i‡(
ªt
 < 0)

559 
com∂ëe
;

562 
ouçut_cou¡s
[
i
] +
ªt
;

563 } i‡(
ouçut_cou¡s
[
i
] < 
ouçut_åiggî
 &&

564 
ªt
 < 0) {

565 
ªt
 = 
	`¢d_pcm_ªcovî
(
h™dÀ
,Ñet, 0);

566 i‡(
ªt
 < 0)

567 
com∂ëe
;

571 
ouçut_ªady
 = 
Ál£
;

573 
i
 = 0; i < 
Æß
->
ouçut_h™dÀs_cou¡
; i++)

574 i‡(
ouçut_cou¡s
[
i
] < 
ouçut_åiggî
)

575 
ouçut_ªady
 = 
åue
;

577 i‡(!
ouçut_ªady
)

578 
ouçut_tŸÆ
 +
ouçut_åiggî
;

582 i‡(
Æß
->
öput_ˇŒback
 && 
öput_tŸÆ
 < 
öput_limô
) {

583 
ªached
 = 
Ál£
;

585 i‡(
öput_cou¡
 =
öput_åiggî
) {

586 
öput_cou¡
 = 0;

588 
ªt
 = 
Æß
->
	`öput_ˇŒback
◊lß->
öput_ˇŒback_d©a
,

589 
öput_buf„r
,

590 
öput_åiggî
);

591 i‡(
ªt
 != 0)

592 
com∂ëe
;

595 
h™dÀ
 = 
Æß
->
öput_h™dÀ
;

597 
ªt
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

598 i‡(
öput_cou¡
 < 
öput_åiggî
 &&

599 (
ªt
 > 0 || 
öput_tŸÆ
 == 0)) {

600 
ödex
 = 
öput_cou¡
 * 
öput_ch™√ls
;

601 
cou¡
 = 
öput_åiggî
 - 
öput_cou¡
;

602 
avaû
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

604 
cou¡
 = 
avaû
 > 0 &&ávail < count ?ávail :

605 
cou¡
;

607 
ªt
 = 
	`¢d_pcm_ªadi
(
h™dÀ
,

608 &
öput_buf„r
[
ödex
],

609 
cou¡
);

610 i‡(
ªt
 =-
EAGAIN
) {

611 
ªt
 = 0;

612 } i‡(
ªt
 < 0) {

613 
ªt
 = 
	`¢d_pcm_ªcovî
(
h™dÀ
,Ñet, 0);

614 i‡(
ªt
 < 0)

615 
com∂ëe
;

618 
öput_cou¡
 +
ªt
;

619 
öput_tŸÆ
 +
ªt
;

620 } i‡(
öput_cou¡
 < 
öput_åiggî
 && 
ªt
 < 0) {

621 
ªt
 = 
	`¢d_pcm_ªcovî
(
h™dÀ
,Ñet, 0);

622 i‡(
ªt
 < 0)

623 
com∂ëe
;

626 } !
ªached
);

628 
ªt
 = 0;

630 
com∂ëe
:

631 i‡(
ouçut_buf„r
)

632 
	`‰ì
(
ouçut_buf„r
);

634 i‡(
öput_buf„r
)

635 
	`‰ì
(
öput_buf„r
);

637  
ªt
;

638 
	}
}

	@igt_alsa.h

27 #i‚de‡
IGT_ALSA_H


28 
	#IGT_ALSA_H


	)

30 
	~"c⁄fig.h
"

32 
	~<°dboﬁ.h
>

34 
	gÆß
;

36 
Æß
 *
Æß_öô
();

37 
Æß_›í_ouçut
(
Æß
 *Æß, c⁄° *
devi˚_«me
);

38 
Æß_›í_öput
(
Æß
 *Æß, c⁄° *
devi˚_«me
);

39 
Æß_˛o£_ouçut
(
Æß
 *alsa);

40 
Æß_˛o£_öput
(
Æß
 *alsa);

41 
boﬁ
 
Æß_ã°_ouçut_c⁄figuøti⁄
(
Æß
 *Æß, 
ch™√ls
,

42 
ßm∂ög_øã
);

43 
boﬁ
 
Æß_ã°_öput_c⁄figuøti⁄
(
Æß
 *Æß, 
ch™√ls
,

44 
ßm∂ög_øã
);

45 
Æß_c⁄figuª_ouçut
(
Æß
 *Æß, 
ch™√ls
,

46 
ßm∂ög_øã
);

47 
Æß_c⁄figuª_öput
(
Æß
 *Æß, 
ch™√ls
,

48 
ßm∂ög_øã
);

49 
Æß_ªgi°î_ouçut_ˇŒback
(
Æß
 *alsa,

50 (*
ˇŒback
)(*
d©a
, *
buf„r
, 
ßm∂es
),

51 *
ˇŒback_d©a
, 
ßm∂es_åiggî
);

52 
	`Æß_ªgi°î_öput_ˇŒback
(
Æß
 *alsa,

53 (*
ˇŒback
)(*
d©a
, *
buf„r
, 
ßm∂es
),

54 *
ˇŒback_d©a
, 
ßm∂es_åiggî
);

55 
	`Æß_run
(
Æß
 *Æß, 
duøti⁄_ms
);

	@igt_audio.c

27 
	~"c⁄fig.h
"

29 
	~<m©h.h
>

30 
	~<g¶/g¶_f·_ªÆ.h
>

32 
	~"igt_audio.h
"

33 
	~"igt_c‹e.h
"

35 
	#FREQS_MAX
 8

	)

47 
	saudio_sig«l_‰eq
 {

48 
	m‰eq
;

50 *
	m≥riod
;

51 
	m‰ames
;

52 
	moff£t
;

55 
	saudio_sig«l
 {

56 
	mch™√ls
;

57 
	mßm∂ög_øã
;

59 
audio_sig«l_‰eq
 
	m‰eqs
[
FREQS_MAX
];

60 
	m‰eqs_cou¡
;

72 
audio_sig«l
 *
	$audio_sig«l_öô
(
ch™√ls
, 
ßm∂ög_øã
)

74 
audio_sig«l
 *
sig«l
;

76 
sig«l
 = 
	`mÆloc
((
audio_sig«l
));

77 
	`mem£t
(
sig«l
, 0, (
audio_sig«l
));

79 
sig«l
->
ßm∂ög_øã
 = sampling_rate;

80 
sig«l
->
ch™√ls
 = channels;

82  
sig«l
;

83 
	}
}

94 
	$audio_sig«l_add_‰equícy
(
audio_sig«l
 *
sig«l
, 
‰equícy
)

96 
ödex
 = 
sig«l
->
‰eqs_cou¡
;

98 i‡(
ödex
 =
FREQS_MAX
)

102 i‡(
‰equícy
 > 
sig«l
->
ßm∂ög_øã
 / 2)

109 
‰equícy
 = 
sig«l
->
ßm∂ög_øã
 / (signal->sampling_rate / frequency);

111 
	`igt_debug
("AddögÅe° fªquícy %d\n", 
‰equícy
);

113 
sig«l
->
‰eqs
[
ödex
].
‰eq
 = 
‰equícy
;

114 
sig«l
->
‰eqs
[
ödex
].
‰ames
 = 0;

115 
sig«l
->
‰eqs
[
ödex
].
off£t
 = 0;

116 
sig«l
->
‰eqs_cou¡
++;

119 
	}
}

129 
	$audio_sig«l_sy¡hesize
(
audio_sig«l
 *
sig«l
)

131 *
≥riod
;

132 
vÆue
;

133 
‰ames
;

134 
‰eq
;

135 
i
, 
j
;

137 i‡(
sig«l
->
‰eqs_cou¡
 == 0)

140 
i
 = 0; i < 
sig«l
->
‰eqs_cou¡
; i++) {

141 
‰eq
 = 
sig«l
->
‰eqs
[
i
].freq;

142 
‰ames
 = 
sig«l
->
ßm∂ög_øã
 / 
‰eq
;

144 
≥riod
 = 
	`ˇŒoc
(1, 
‰ames
 * ());

146 
j
 = 0; j < 
‰ames
; j++) {

147 
vÆue
 = 2.0 * 
M_PI
 * 
‰eq
 / 
sig«l
->
ßm∂ög_øã
 * 
j
;

148 
vÆue
 = 
	`sö
(vÆueË* 
SHRT_MAX
 / 
sig«l
->
‰eqs_cou¡
;

150 
≥riod
[
j
] = (Ë
vÆue
;

153 
sig«l
->
‰eqs
[
i
].
≥riod
 =Öeriod;

154 
sig«l
->
‰eqs
[
i
].
‰ames
 = frames;

156 
	}
}

165 
	$audio_sig«l_˛ón
(
audio_sig«l
 *
sig«l
)

167 
i
;

169 
i
 = 0; i < 
sig«l
->
‰eqs_cou¡
; i++) {

170 i‡(
sig«l
->
‰eqs
[
i
].
≥riod
)

171 
	`‰ì
(
sig«l
->
‰eqs
[
i
].
≥riod
);

173 
	`mem£t
(&
sig«l
->
‰eqs
[
i
], 0, (
audio_sig«l_‰eq
));

176 
sig«l
->
‰eqs_cou¡
 = 0;

177 
	}
}

189 
	$audio_sig«l_fûl
(
audio_sig«l
 *
sig«l
, *
buf„r
, 
‰ames
)

191 *
de°ö©i⁄
;

192 *
sour˚
;

193 
tŸÆ
;

194 
‰eq_‰ames
;

195 
‰eq_off£t
;

196 
cou¡
;

197 
i
, 
j
, 
k
;

199 
	`mem£t
(
buf„r
, 0, (Ë* 
sig«l
->
ch™√ls
 * 
‰ames
);

201 
i
 = 0; i < 
sig«l
->
‰eqs_cou¡
; i++) {

202 
tŸÆ
 = 0;

204 
tŸÆ
 < 
‰ames
) {

205 
‰eq_‰ames
 = 
sig«l
->
‰eqs
[
i
].
‰ames
;

206 
‰eq_off£t
 = 
sig«l
->
‰eqs
[
i
].
off£t
;

208 
sour˚
 = 
sig«l
->
‰eqs
[
i
].
≥riod
 + 
‰eq_off£t
;

209 
de°ö©i⁄
 = 
buf„r
 + 
tŸÆ
 * 
sig«l
->
ch™√ls
;

211 
cou¡
 = 
‰eq_‰ames
 - 
‰eq_off£t
;

212 i‡(
cou¡
 > (
‰ames
 - 
tŸÆ
))

213 
cou¡
 = 
‰ames
 - 
tŸÆ
;

215 
‰eq_off£t
 +
cou¡
;

216 
‰eq_off£t
 %
‰eq_‰ames
;

218 
sig«l
->
‰eqs
[
i
].
off£t
 = 
‰eq_off£t
;

220 
j
 = 0; j < 
cou¡
; j++) {

221 
k
 = 0; k < 
sig«l
->
ch™√ls
; k++) {

222 
de°ö©i⁄
[
j
 * 
sig«l
->
ch™√ls
 + 
k
] +
sour˚
[j];

226 
tŸÆ
 +
cou¡
;

229 
	}
}

244 
boﬁ
 
	$audio_sig«l_dëe˘
(
audio_sig«l
 *
sig«l
, 
ch™√ls
,

245 
ßm∂ög_øã
, *
buf„r
, 
‰ames
)

247 
d©a
[
‰ames
];

248 
am∂ôude
[
‰ames
 / 2];

249 
boﬁ
 
dëe˘ed
[
sig«l
->
‰eqs_cou¡
];

250 
thªshﬁd
;

251 
boﬁ
 
above
;

252 
îr‹
;

253 
‰eq
;

254 
max
;

255 
c
, 
i
, 
j
;

258 
îr‹
 = 
ßm∂ög_øã
 / 
‰ames
;

260 
c
 = 0; c < 
ch™√ls
; c++) {

261 
i
 = 0; i < 
‰ames
; i++)

262 
d©a
[
i
] = (Ë
buf„r
[ò* 
ch™√ls
 + 
c
];

264 
	`g¶_f·_ªÆ_ødix2_å™sf‹m
(
d©a
, 1, 
‰ames
);

266 
max
 = 0;

268 
i
 = 0; i < 
‰ames
 / 2; i++) {

269 
am∂ôude
[
i
] = 
	`sqπ
(
d©a
[i] * data[i] +

270 
d©a
[
‰ames
 - 
i
] *

271 
d©a
[
‰ames
 - 
i
]);

272 i‡(
am∂ôude
[
i
] > 
max
)

273 
max
 = 
am∂ôude
[
i
];

276 
i
 = 0; i < 
sig«l
->
‰eqs_cou¡
; i++)

277 
dëe˘ed
[
i
] = 
Ál£
;

279 
thªshﬁd
 = 
max
 / 2;

280 
above
 = 
Ál£
;

281 
max
 = 0;

283 
i
 = 0; i < 
‰ames
 / 2; i++) {

284 i‡(
am∂ôude
[
i
] > 
thªshﬁd
)

285 
above
 = 
åue
;

287 i‡(
above
) {

288 i‡(
am∂ôude
[
i
] < 
thªshﬁd
) {

289 
above
 = 
Ál£
;

290 
max
 = 0;

292 
j
 = 0; j < 
sig«l
->
‰eqs_cou¡
; j++) {

293 i‡(
sig«l
->
‰eqs
[
j
].
‰eq
 >

294 
‰eq
 - 
îr‹
 &&

295 
sig«l
->
‰eqs
[
j
].
‰eq
 <

296 
‰eq
 + 
îr‹
) {

297 
dëe˘ed
[
j
] = 
åue
;

303 i‡(
j
 =
sig«l
->
‰eqs_cou¡
) {

304 
	`igt_debug
("Detectedádditional frequency: %d\n",

305 
‰eq
);

306  
Ál£
;

310 i‡(
am∂ôude
[
i
] > 
max
) {

311 
max
 = 
am∂ôude
[
i
];

312 
‰eq
 = 
ßm∂ög_øã
 * 
i
 / 
‰ames
;

317 
i
 = 0; i < 
sig«l
->
‰eqs_cou¡
; i++) {

318 i‡(!
dëe˘ed
[
i
]) {

319 
	`igt_debug
("Missing frequency: %d\n",

320 
sig«l
->
‰eqs
[
i
].
‰eq
);

321  
Ál£
;

326  
åue
;

327 
	}
}

	@igt_audio.h

27 #i‚de‡
IGT_AUDIO_H


28 
	#IGT_AUDIO_H


	)

30 
	~"c⁄fig.h
"

32 
	~<°dboﬁ.h
>

34 
	gaudio_sig«l
;

36 
audio_sig«l
 *
audio_sig«l_öô
(
ch™√ls
, 
ßm∂ög_øã
);

37 
audio_sig«l_add_‰equícy
(
audio_sig«l
 *
sig«l
, 
‰equícy
);

38 
audio_sig«l_sy¡hesize
(
audio_sig«l
 *
sig«l
);

39 
audio_sig«l_˛ón
(
audio_sig«l
 *
sig«l
);

40 
audio_sig«l_fûl
(
audio_sig«l
 *
sig«l
, *
buf„r
, 
‰ames
);

41 
boﬁ
 
audio_sig«l_dëe˘
(
audio_sig«l
 *
sig«l
, 
ch™√ls
,

42 
ßm∂ög_øã
, *
buf„r
, 
‰ames
);

	@igt_aux.c

29 #ifde‡
HAVE_LIBGEN_H


30 
	~<libgí.h
>

32 
	~<°dio.h
>

33 
	~<f˙é.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<°rög.h
>

37 
	~<sys/mm™.h
>

38 
	~<sig«l.h
>

39 
	~<pcüc˚ss.h
>

40 
	~<°dlib.h
>

41 
	~<time.h
>

42 
	~<uni°d.h
>

43 
	~<sys/pﬁl.h
>

44 
	~<sys/waô.h
>

45 
	~<sys/time.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<sys/sysˇŒ.h
>

48 
	~<sys/ut¢ame.h
>

49 
	~<ãrmios.h
>

50 
	~<as£π.h
>

51 
	~<löux/limôs.h
>

52 
	~"drmã°.h
"

53 
	~"i915_drm.h
"

54 
	~"öãl_chù£t.h
"

55 
	~"igt_aux.h
"

56 
	~"igt_debugfs.h
"

57 
	~"igt_gt.h
"

58 
	~"igt_ønd.h
"

59 
	~"igt_sysfs.h
"

60 
	~"c⁄fig.h
"

61 
	~"öãl_ªg.h
"

62 
	~"io˘l_wøµîs.h
"

63 
	~"igt_kms.h
"

64 
	~"igt_°©s.h
"

65 
	~"igt_sysfs.h
"

67 #ifde‡
HAVE_LIBGEN_H


68 
	~<libgí.h
>

71 #ifde‡
HAVE_PROCPS


72 
	~<¥oc/ªad¥oc.h
>

85 
	s__igt_sigôî_globÆ
 {

86 
pid_t
 
	mtid
;

87 
timî_t
 
	mtimî
;

88 
time•ec
 
	moff£t
;

90 
	mhô
, 
	mmiss
;

91 
	mio˘ls
, 
	msig«ls
;

92 } 
	m°©
;

93 } 
	g__igt_sigôî
;

95 
	$sigôî
(
sig
, 
sigöfo_t
 *
öfo
, *
¨g
)

97 
__igt_sigôî
.
°©
.
sig«ls
++;

98 
	}
}

101 
	#SIG_ASSERT
(
ex¥
Ë
	`igt_as£π
”x¥)

	)

103 
	#SIG_ASSERT
(
ex¥
)

	)

107 
	$sig_io˘l
(
fd
, 
ªque°
, *
¨g
)

109 
ôimî•ec
 
ôs
;

110 
ªt
;

112 
	`SIG_ASSERT
(
__igt_sigôî
.
timî
);

113 
	`SIG_ASSERT
(
__igt_sigôî
.
tid
 =
	`gëtid
());

115 
	`mem£t
(&
ôs
, 0, (its));

116 i‡(
	`timî_£âime
(
__igt_sigôî
.
timî
, 0, &
ôs
, 
NULL
)) {

118 
igt_io˘l
 = 
drmIo˘l
;

119  
	`drmIo˘l
(
fd
, 
ªque°
, 
¨g
);

122 
ôs
.
ô_vÆue
 = 
__igt_sigôî
.
off£t
;

124 
£rül
;

126 
__igt_sigôî
.
°©
.
io˘ls
++;

128 
ªt
 = 0;

129 
£rül
 = 
__igt_sigôî
.
°©
.
sig«ls
;

130 
	`igt_as£π
(
	`timî_£âime
(
__igt_sigôî
.
timî
, 0, &
ôs
, 
NULL
) == 0);

131 i‡(
	`io˘l
(
fd
, 
ªque°
, 
¨g
))

132 
ªt
 = 
î∫o
;

133 i‡(
__igt_sigôî
.
°©
.
sig«ls
 =
£rül
)

134 
__igt_sigôî
.
°©
.
miss
++;

135 i‡(
ªt
 == 0)

138 i‡(
ªt
 =
EINTR
) {

139 
__igt_sigôî
.
°©
.
hô
++;

141 
ôs
.
ô_vÆue
.
tv_£c
 *= 2;

142 
ôs
.
ô_vÆue
.
tv_n£c
 *= 2;

143 
ôs
.
ô_vÆue
.
tv_n£c
 >
NSEC_PER_SEC
) {

144 
ôs
.
ô_vÆue
.
tv_n£c
 -
NSEC_PER_SEC
;

145 
ôs
.
ô_vÆue
.
tv_£c
 += 1;

148 
	`SIG_ASSERT
(
ôs
.
ô_vÆue
.
tv_n£c
 >= 0);

149 
	`SIG_ASSERT
(
ôs
.
ô_vÆue
.
tv_£c
 >= 0);

151 } 
ªt
 =
EAGAIN
 ||Ñë =
EINTR
);

153 
	`mem£t
(&
ôs
, 0, (its));

154 
	`timî_£âime
(
__igt_sigôî
.
timî
, 0, &
ôs
, 
NULL
);

156 
î∫o
 = 
ªt
;

157  
ªt
 ? -1 : 0;

158 
	}
}

160 
boﬁ
 
	$igt_sigôî_°¨t
(
__igt_sigôî
 *
ôî
, 
boﬁ
 
íabÀ
)

165 
	`SIG_ASSERT
(
igt_io˘l
 =
drmIo˘l
);

166 
igt_io˘l
 = 
drmIo˘l
;

168 i‡(
íabÀ
) {

169 
time•ec
 
°¨t
, 
íd
;

170 
sigevít
 
£v
;

171 
siga˘i⁄
 
a˘
;

172 
ôimî•ec
 
ôs
;

174 
igt_io˘l
 = 
sig_io˘l
;

175 
__igt_sigôî
.
tid
 = 
	`gëtid
();

177 
	`mem£t
(&
£v
, 0, (sev));

178 
£v
.
sigev_nŸify
 = 
SIGEV_SIGNAL
 | 
SIGEV_THREAD_ID
;

179 
£v
.
sigev_nŸify_thªad_id
 = 
__igt_sigôî
.
tid
;

180 
£v
.
sigev_signo
 = 
SIGRTMIN
;

181 
	`igt_as£π
(
	`timî_¸óã
(
CLOCK_MONOTONIC
, &
£v
, &
__igt_sigôî
.
timî
) == 0);

183 
	`mem£t
(&
ôs
, 0, (its));

184 
	`igt_as£π
(
	`timî_£âime
(
__igt_sigôî
.
timî
, 0, &
ôs
, 
NULL
) == 0);

186 
	`mem£t
(&
a˘
, 0, (act));

187 
a˘
.
ß_siga˘i⁄
 = 
sigôî
;

188 
a˘
.
ß_Êags
 = 
SA_SIGINFO
;

189 
	`igt_as£π
(
	`siga˘i⁄
(
SIGRTMIN
, &
a˘
, 
NULL
) == 0);

195 
	`igt_as£π
(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
°¨t
) == 0);

196 
	`igt_as£π
(
	`timî_£âime
(
__igt_sigôî
.
timî
, 0, &
ôs
, 
NULL
) == 0);

197 
	`igt_as£π
(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
íd
) == 0);

199 
__igt_sigôî
.
off£t
.
tv_£c
 = 
íd
.tv_£¯- 
°¨t
.tv_sec;

200 
__igt_sigôî
.
off£t
.
tv_n£c
 = 
íd
.tv_n£¯- 
°¨t
.tv_nsec;

201 i‡(
__igt_sigôî
.
off£t
.
tv_n£c
 < 0) {

202 
__igt_sigôî
.
off£t
.
tv_n£c
 +
NSEC_PER_SEC
;

203 
__igt_sigôî
.
off£t
.
tv_£c
 -= 1;

205 i‡(
__igt_sigôî
.
off£t
.
tv_£c
 < 0) {

206 
__igt_sigôî
.
off£t
.
tv_n£c
 = 0;

207 
__igt_sigôî
.
off£t
.
tv_£c
 = 0;

209 
	`igt_as£π
(
__igt_sigôî
.
off£t
.
tv_£c
 == 0);

211 
	`igt_debug
("Initial delay for interruption: %ld.%09lds\n",

212 
__igt_sigôî
.
off£t
.
tv_£c
,

213 
__igt_sigôî
.
off£t
.
tv_n£c
);

216  
åue
;

217 
	}
}

219 
boﬁ
 
	$igt_sigôî_°›
(
__igt_sigôî
 *
ôî
, 
boﬁ
 
íabÀ
)

221 i‡(
íabÀ
) {

222 
siga˘i⁄
 
a˘
;

224 
	`SIG_ASSERT
(
igt_io˘l
 =
sig_io˘l
);

225 
	`SIG_ASSERT
(
__igt_sigôî
.
tid
 =
	`gëtid
());

226 
igt_io˘l
 = 
drmIo˘l
;

228 
	`timî_dñëe
(
__igt_sigôî
.
timî
);

230 
	`mem£t
(&
a˘
, 0, (act));

231 
a˘
.
ß_h™dÀr
 = 
SIG_IGN
;

232 
	`siga˘i⁄
(
SIGRTMIN
, &
a˘
, 
NULL
);

234 
	`mem£t
(&
__igt_sigôî
, 0, (__igt_sigiter));

237 
	`mem£t
(
ôî
, 0, (*iter));

238  
Ál£
;

239 
	}
}

241 
boﬁ
 
	$__igt_sigôî_c⁄töue
(
__igt_sigôî
 *
ôî
, 
boﬁ
 
íabÀ
)

243 i‡(
ôî
->
∑ss
++ == 0)

244  
	`igt_sigôî_°¨t
(
ôî
, 
íabÀ
);

250 i‡(
__igt_sigôî
.
°©
.
hô
 == 0 ||

251 
__igt_sigôî
.
°©
.
miss
 =__igt_sigôî.°©.
io˘ls
)

252  
	`igt_sigôî_°›
(
ôî
, 
íabÀ
);

254 
	`igt_debug
("%s:Öass %d, missed %ld/%ld\n",

255 
__func__
, 
ôî
->
∑ss
 - 1,

256 
__igt_sigôî
.
°©
.
miss
,

257 
__igt_sigôî
.
°©
.
io˘ls
);

259 
	`SIG_ASSERT
(
igt_io˘l
 =
sig_io˘l
);

260 
	`SIG_ASSERT
(
__igt_sigôî
.
timî
);

262 
__igt_sigôî
.
off£t
.
tv_£c
 *= 2;

263 
__igt_sigôî
.
off£t
.
tv_n£c
 *= 2;

264 
__igt_sigôî
.
off£t
.
tv_n£c
 >
NSEC_PER_SEC
) {

265 
__igt_sigôî
.
off£t
.
tv_n£c
 -
NSEC_PER_SEC
;

266 
__igt_sigôî
.
off£t
.
tv_£c
 += 1;

268 
	`SIG_ASSERT
(
__igt_sigôî
.
off£t
.
tv_n£c
 >= 0);

269 
	`SIG_ASSERT
(
__igt_sigôî
.
off£t
.
tv_£c
 >= 0);

271 
	`mem£t
(&
__igt_sigôî
.
°©
, 0, (__igt_sigiter.stat));

272  
åue
;

273 
	}
}

275 
igt_hñ≥r_¥o˚ss
 
	gsig«l_hñ≥r
;

276 
	gsig_°©
;

277 
__©åibuã__
((
n‹ëu∫
)Ë
	$sig«l_hñ≥r_¥o˚ss
(
pid_t
 
pid
)

281 
	`u¶ìp
(1000 * 1000 / 500);

282 i‡(
	`kûl
(
pid
, 
SIGCONT
))

283 
	`exô
(0);

285 
	}
}

287 
	$sig_h™dÀr
(
i
)

289 
sig_°©
++;

290 
	}
}

310 
	$igt_f‹k_sig«l_hñ≥r
()

312 i‡(
	`igt_⁄ly_li°_subã°s
())

322 
	`sig«l
(
SIGCONT
, 
sig_h™dÀr
);

323 
	`£çgΩ
();

325 
	`igt_f‹k_hñ≥r
(&
sig«l_hñ≥r
) {

326 
	`£çgΩ
();

331 
	`sig«l_hñ≥r_¥o˚ss
(-
	`gëµid
());

333 
	}
}

343 
	$igt_°›_sig«l_hñ≥r
()

345 i‡(
	`igt_⁄ly_li°_subã°s
())

348 
	`igt_°›_hñ≥r
(&
sig«l_hñ≥r
);

350 
sig_°©
 = 0;

351 
	}
}

362 
	$igt_su•íd_sig«l_hñ≥r
()

364 
°©us
;

366 i‡(!
sig«l_hñ≥r
.
ru¬ög
)

369 
	`kûl
(
sig«l_hñ≥r
.
pid
, 
SIGSTOP
);

370 
	`waôpid
(
sig«l_hñ≥r
.
pid
, &
°©us
, 
WUNTRACED
) == -1 &&

371 
î∫o
 =
EINTR
)

373 
	}
}

383 
	$igt_ªsume_sig«l_hñ≥r
()

385 i‡(!
sig«l_hñ≥r
.
ru¬ög
)

388 
	`kûl
(
sig«l_hñ≥r
.
pid
, 
SIGCONT
);

389 
	}
}

391 
igt_hñ≥r_¥o˚ss
 
	gshrök_hñ≥r
;

392 
__©åibuã__
((
n‹ëu∫
)Ë
	$shrök_hñ≥r_¥o˚ss
(
fd
, 
pid_t
 
pid
)

395 
	`igt_dr›_ˇches_£t
(
fd
, 
DROP_SHRINK_ALL
);

396 
	`u¶ìp
(1000 * 1000 / 50);

397 i‡(
	`kûl
(
pid
, 0))

398 
	`exô
(0);

400 
	}
}

412 
	$igt_f‹k_shrök_hñ≥r
(
drm_fd
)

414 
	`as£π
(!
	`igt_⁄ly_li°_subã°s
());

415 
	`igt_ªquúe
(
	`igt_dr›_ˇches_has
(
drm_fd
, 
DROP_SHRINK_ALL
));

416 
	`igt_f‹k_hñ≥r
(&
shrök_hñ≥r
)

417 
	`shrök_hñ≥r_¥o˚ss
(
drm_fd
, 
	`gëµid
());

418 
	}
}

425 
	$igt_°›_shrök_hñ≥r
()

427 
	`igt_°›_hñ≥r
(&
shrök_hñ≥r
);

428 
	}
}

430 #ifde‡
HAVE_UDEV


431 
	~<libudev.h
>

433 
igt_hñ≥r_¥o˚ss
 
	gh™g_dëe˘‹
;

434 
__©åibuã__
((
n‹ëu∫
))

435 
	$h™g_dëe˘‹_¥o˚ss
(
fd
, 
pid_t
 
pid
, 
dev_t
 
rdev
)

437 
udev_m⁄ô‹
 *
m⁄
 =

438 
	`udev_m⁄ô‹_√w_‰om_√éök
(
	`udev_√w
(), "kernel");

439 
pﬁlfd
 
pfd
;

440 
ªt
;

442 
	`udev_m⁄ô‹_fûãr_add_m©ch_subsy°em_devty≥
(
m⁄
, "drm", 
NULL
);

443 
	`udev_m⁄ô‹_íabÀ_ª˚ivög
(
m⁄
);

445 
pfd
.
fd
 = 
	`udev_m⁄ô‹_gë_fd
(
m⁄
);

446 
pfd
.
evíts
 = 
POLLIN
;

448 (
ªt
 = 
	`pﬁl
(&
pfd
, 1, 2000)) >= 0) {

449 
udev_devi˚
 *
dev
;

450 
dev_t
 
devnum
;

452 i‡(
	`kûl
(
pid
, 0)) {

453 
	`igt_w¨n
("Parent died without killing its children (%s)\n",

454 
__func__
);

458 
dev
 = 
NULL
;

459 i‡(
ªt
 > 0)

460 
dev
 = 
	`udev_m⁄ô‹_ª˚ive_devi˚
(
m⁄
);

461 i‡(
dev
 =
NULL
)

464 
devnum
 = 
	`udev_devi˚_gë_devnum
(
dev
);

465 i‡(
	`memcmp
(&
rdev
, &
devnum
, (
dev_t
)) == 0) {

466 c⁄° *
°r
;

468 
°r
 = 
	`udev_devi˚_gë_¥›îty_vÆue
(
dev
, "ERROR");

469 i‡(
°r
 && 
	`©oi
(str) == 1) {

470 
	`igt_debugfs_dump
(
fd
, "i915_error_state");

471 
	`kûl
(
pid
, 
SIGIO
);

475 
	`udev_devi˚_uƒef
(
dev
);

478 
	`exô
(0);

479 
	}
}

481 
	$sig_ab‹t
(
sig
)

483 
î∫o
 = 0;

484 
	`igt_as£π
(!"GPU hung");

485 
	}
}

487 
	$igt_f‹k_h™g_dëe˘‹
(
fd
)

489 
°©
 
°
;

491 
	`igt_as£π
(
	`f°©
(
fd
, &
°
) == 0);

499 
	`igt_as£π
(
igt_sysfs_£t_∑ømëî


500 (
fd
, "reset", "%d", 1 ));

502 
	`sig«l
(
SIGIO
, 
sig_ab‹t
);

503 
	`igt_f‹k_hñ≥r
(&
h™g_dëe˘‹
)

504 
	`h™g_dëe˘‹_¥o˚ss
(
fd
, 
	`gëµid
(), 
°
.
°_rdev
);

505 
	}
}

507 
	$igt_°›_h™g_dëe˘‹
()

509 
	`igt_°›_hñ≥r
(&
h™g_dëe˘‹
);

510 
	}
}

512 
	$igt_f‹k_h™g_dëe˘‹
(
fd
)

514 i‡(
	`igt_⁄ly_li°_subã°s
())

516 
	}
}

518 
	$igt_°›_h™g_dëe˘‹
()

520 
	}
}

534 
boﬁ
 
	$igt_check_boﬁón_ív_v¨
(c⁄° *
ív_v¨
, 
boﬁ
 
deÁu…_vÆue
)

536 *
vÆ
;

538 
vÆ
 = 
	`gëív
(
ív_v¨
);

539 i‡(!
vÆ
)

540  
deÁu…_vÆue
;

542  
	`©oi
(
vÆ
) != 0;

543 
	}
}

552 
boﬁ
 
	$igt_aub_dump_íabÀd
()

554 
dump_aub
 = -1;

556 i‡(
dump_aub
 == -1)

557 
dump_aub
 = 
	`igt_check_boﬁón_ív_v¨
("IGT_DUMP_AUB", 
Ál£
);

559  
dump_aub
;

560 
	}
}

572 
	$igt_exch™ge_öt
(*
¨øy
, 
i
, 
j
)

574 *
öt_¨r
, 
tmp
;

575 
öt_¨r
 = 
¨øy
;

577 
tmp
 = 
öt_¨r
[
i
];

578 
öt_¨r
[
i
] = i¡_¨r[
j
];

579 
öt_¨r
[
j
] = 
tmp
;

580 
	}
}

592 
	$igt_≥rmuã_¨øy
(*
¨øy
, 
size
,

593 (*
exch™ge_func
)(*
¨øy
,

594 
i
,

595 
j
))

597 
i
;

599 
i
 = 
size
 - 1; i > 0; i--) {

601 
l
 = 
	`h¨s_≥åuska_f54_1_øndom_unß„
(Ë% (
i
 +1);

602 i‡(
i
 !
l
)

603 
	`exch™ge_func
(
¨øy
, 
i
, 
l
);

605 
	}
}

607 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 1, 2)))

608 
	$igt_öãø˘ive_öfo
(c⁄° *
f‹m©
, ...)

610 
va_li°
 
¨gs
;

612 i‡(!
	`ißây
(
STDERR_FILENO
Ë|| 
__igt_∂aö_ouçut
)

615 i‡(
igt_log_Àvñ
 > 
IGT_LOG_INFO
)

618 
	`va_°¨t
(
¨gs
, 
f‹m©
);

619 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gs
);

620 
	`va_íd
(
¨gs
);

621 
	}
}

635 
	$igt_¥ogªss
(c⁄° *
hódî
, 
uöt64_t
 
i
, uöt64_à
tŸÆ
)

637 
dividî
 = 200;

639 i‡(
i
+1 >
tŸÆ
) {

640 
	`igt_öãø˘ive_öfo
("\r%s100%%\n", 
hódî
);

644 i‡(
tŸÆ
 / 200 == 0)

645 
dividî
 = 1;

648 i‡(
i
 % (
tŸÆ
 / 
dividî
) == 0)

649 
	`igt_öãø˘ive_öfo
("\r%s%3Œu%%", 
hódî
,

650 ()
i
 * 100 / 
tŸÆ
);

651 
	}
}

659 
	$igt_¥öt_a˘ivôy
()

661 
	`igt_öãø˘ive_öfo
(".");

662 
	}
}

665 
drm_öãl_bo
 **
	gåash_bos
;

666 
	gnum_åash_bos
;

675 
	$igt_öô_≠îtuª_åashîs
(
drm_öãl_bufmgr
 *
bufmgr
)

677 
i
;

679 
num_åash_bos
 = 
	`gem_m≠∑bÀ_≠îtuª_size
() / (1024*1024);

681 
åash_bos
 = 
	`mÆloc
(
num_åash_bos
 * (
drm_öãl_bo
 *));

682 
	`igt_as£π
(
åash_bos
);

684 
i
 = 0; i < 
num_åash_bos
; i++)

685 
åash_bos
[
i
] = 
	`drm_öãl_bo_Æloc
(
bufmgr
, "trash bo", 1024*1024, 4096);

686 
	}
}

693 
	$igt_åash_≠îtuª
()

695 
i
;

696 
uöt8_t
 *
gâ_±r
;

698 
i
 = 0; i < 
num_åash_bos
; i++) {

699 
	`drm_öãl_gem_bo_m≠_gâ
(
åash_bos
[
i
]);

700 
gâ_±r
 = 
åash_bos
[
i
]->
vútuÆ
;

701 *
gâ_±r
 = 0;

702 
	`drm_öãl_gem_bo_unm≠_gâ
(
åash_bos
[
i
]);

704 
	}
}

711 
	$igt_˛ónup_≠îtuª_åashîs
()

713 
i
;

715 
i
 = 0; i < 
num_åash_bos
; i++)

716 
	`drm_öãl_bo_uƒe„ªn˚
(
åash_bos
[
i
]);

718 
	`‰ì
(
åash_bos
);

719 
	}
}

721 
	gaut‹esume_dñay
;

723 c⁄° *
	gsu•íd_°©e_«me
[] = {

724 [
SUSPEND_STATE_FREEZE
] = "freeze",

725 [
SUSPEND_STATE_STANDBY
] = "standby",

726 [
SUSPEND_STATE_MEM
] = "mem",

727 [
SUSPEND_STATE_DISK
] = "disk",

730 c⁄° *
	gsu•íd_ã°_«me
[] = {

731 [
SUSPEND_TEST_NONE
] = "none",

732 [
SUSPEND_TEST_FREEZER
] = "freezer",

733 [
SUSPEND_TEST_DEVICES
] = "devices",

734 [
SUSPEND_TEST_PLATFORM
] = "platform",

735 [
SUSPEND_TEST_PROCESSORS
] = "processors",

736 [
SUSPEND_TEST_CORE
] = "core",

739 
igt_su•íd_ã°
 
	$gë_su•íd_ã°
(
powî_dú
)

741 *
ã°_löe
;

742 *
ã°_«me
;

743 
igt_su•íd_ã°
 
ã°
;

745 i‡(
	`Ác˚sßt
(
powî_dú
, "pm_ã°", 
R_OK
, 0))

746  
SUSPEND_TEST_NONE
;

748 
	`igt_as£π
((
ã°_löe
 = 
	`igt_sysfs_gë
(
powî_dú
, "pm_test")));

749 
ã°_«me
 = 
	`°πok
(
ã°_löe
, " ");Åest_name;

750 
ã°_«me
 = 
	`°πok
(
NULL
, " "))

751 i‡(
ã°_«me
[0] == '[') {

752 
ã°_«me
[
	`°æí
(test_name) - 1] = '\0';

753 
ã°_«me
++;

757 
ã°
 = 
SUSPEND_TEST_NONE
;Åe° < 
SUSPEND_TEST_NUM
;Åest++)

758 i‡(
	`°rcmp
(
su•íd_ã°_«me
[
ã°
], 
ã°_«me
) == 0)

761 
	`igt_as£π
(
ã°
 < 
SUSPEND_TEST_NUM
);

763 
	`‰ì
(
ã°_löe
);

765  
ã°
;

766 
	}
}

768 
	$£t_su•íd_ã°
(
powî_dú
, 
igt_su•íd_ã°
 
ã°
)

770 
	`igt_as£π
(
ã°
 < 
SUSPEND_TEST_NUM
);

772 i‡(
	`Ác˚sßt
(
powî_dú
, "pm_ã°", 
W_OK
, 0)) {

773 
	`igt_ªquúe
(
ã°
 =
SUSPEND_TEST_NONE
);

777 
	`igt_as£π
(
	`igt_sysfs_£t
(
powî_dú
, "pm_ã°", 
su•íd_ã°_«me
[
ã°
]));

778 
	}
}

780 
	#SQUELCH
 ">/dev/nuŒ 2>&1"

	)

782 
	$su•íd_vü_πcwake
(
igt_su•íd_°©e
 
°©e
)

784 
cmd
[128];

785 
dñay
, 
ªt
;

787 
	`igt_as£π
(
°©e
 < 
SUSPEND_STATE_NUM
);

789 
dñay
 = 
	`igt_gë_aut‹esume_dñay
(
°©e
);

795 
	`¢¥ötf
(
cmd
, (cmd), "πcwakê-¿-†%d -m %†" 
SQUELCH
,

796 
dñay
, 
su•íd_°©e_«me
[
°©e
]);

797 
ªt
 = 
	`igt_sy°em
(
cmd
);

798 
	`igt_ªquúe_f
(
ªt
 == 0, "rtcwakeÅest failed with %i\n"

801 
ªt
);

803 
	`¢¥ötf
(
cmd
, (cmd), "rtcwake -s %d -m %s ",

804 
dñay
, 
su•íd_°©e_«me
[
°©e
]);

805 
ªt
 = 
	`igt_sy°em
(
cmd
);

806 
	`igt_as£π_f
(
ªt
 == 0,

809 
ªt
);

810 
	}
}

812 
	$su•íd_vü_sysfs
(
powî_dú
, 
igt_su•íd_°©e
 
°©e
)

814 
	`igt_as£π
(
°©e
 < 
SUSPEND_STATE_NUM
);

815 
	`igt_as£π
(
	`igt_sysfs_£t
(
powî_dú
, "state",

816 
su•íd_°©e_«me
[
°©e
]));

817 
	}
}

819 
uöt32_t
 
	$gë_suµ‹ãd_su•íd_°©es
(
powî_dú
)

821 *
°©es
;

822 *
°©e_«me
;

823 
uöt32_t
 
°©e_mask
;

825 
	`igt_as£π
((
°©es
 = 
	`igt_sysfs_gë
(
powî_dú
, "state")));

826 
°©e_mask
 = 0;

827 
°©e_«me
 = 
	`°πok
(
°©es
, " "); state_name;

828 
°©e_«me
 = 
	`°πok
(
NULL
, " ")) {

829 
igt_su•íd_°©e
 
°©e
;

831 
°©e
 = 
SUSPEND_STATE_FREEZE
; sèã < 
SUSPEND_STATE_NUM
;

832 
°©e
++)

833 i‡(
	`°rcmp
(
°©e_«me
, 
su•íd_°©e_«me
[
°©e
]) == 0)

835 
	`igt_as£π
(
°©e
 < 
SUSPEND_STATE_NUM
);

836 
°©e_mask
 |1 << 
°©e
;

839 
	`‰ì
(
°©es
);

841  
°©e_mask
;

842 
	}
}

865 
	$igt_sy°em_su•íd_aut‹esume
(
igt_su•íd_°©e
 
°©e
,

866 
igt_su•íd_ã°
 
ã°
)

868 
powî_dú
;

869 
igt_su•íd_ã°
 
‹ig_ã°
;

874 
	`igt_skù_⁄_simuœti⁄
();

876 
	`igt_ªquúe
((
powî_dú
 = 
	`›í
("/sys/powî", 
O_RDONLY
)) >= 0);

877 
	`igt_ªquúe
(
	`gë_suµ‹ãd_su•íd_°©es
(
powî_dú
Ë& (1 << 
°©e
));

878 
	`igt_ªquúe
(
ã°
 =
SUSPEND_TEST_NONE
 ||

879 
	`Ác˚sßt
(
powî_dú
, "pm_ã°", 
R_OK
 | 
W_OK
, 0) == 0);

881 
‹ig_ã°
 = 
	`gë_su•íd_ã°
(
powî_dú
);

882 
	`£t_su•íd_ã°
(
powî_dú
, 
ã°
);

884 i‡(
ã°
 =
SUSPEND_TEST_NONE
)

885 
	`su•íd_vü_πcwake
(
°©e
);

887 
	`su•íd_vü_sysfs
(
powî_dú
, 
°©e
);

889 
	`£t_su•íd_ã°
(
powî_dú
, 
‹ig_ã°
);

890 
	`˛o£
(
powî_dú
);

891 
	}
}

893 
	g‹igöÆ_aut‹esume_dñay
;

895 
	$igt_ª°‹e_aut‹esume_dñay
(
sig
)

897 
dñay_fd
;

898 
dñay_°r
[10];

900 
	`igt_ªquúe
((
dñay_fd
 = 
	`›í
("/sys/module/suspend/parameters/pm_test_delay",

901 
O_WRONLY
)) >= 0);

903 
	`¢¥ötf
(
dñay_°r
, (dñay_°r), "%d", 
‹igöÆ_aut‹esume_dñay
);

904 
	`igt_ªquúe
(
	`wrôe
(
dñay_fd
, 
dñay_°r
, 
	`°æí
(delay_str)));

906 
	`˛o£
(
dñay_fd
);

907 
	}
}

917 
	$igt_£t_aut‹esume_dñay
(
dñay_£cs
)

919 
dñay_fd
;

920 
dñay_°r
[10];

922 
	`igt_skù_⁄_simuœti⁄
();

924 
dñay_fd
 = 
	`›í
("/sys/moduÀ/su•íd/∑ømëîs/pm_ã°_dñay", 
O_RDWR
);

926 i‡(
dñay_fd
 >= 0) {

927 i‡(!
‹igöÆ_aut‹esume_dñay
) {

928 
	`igt_ªquúe
(
	`ªad
(
dñay_fd
, 
dñay_°r
,

929 (
dñay_°r
)));

930 
‹igöÆ_aut‹esume_dñay
 = 
	`©oi
(
dñay_°r
);

931 
	`igt_ö°Æl_exô_h™dÀr
(
igt_ª°‹e_aut‹esume_dñay
);

934 
	`¢¥ötf
(
dñay_°r
, (dñay_°r), "%d", 
dñay_£cs
);

935 
	`igt_ªquúe
(
	`wrôe
(
dñay_fd
, 
dñay_°r
, 
	`°æí
(delay_str)));

937 
	`˛o£
(
dñay_fd
);

940 
aut‹esume_dñay
 = 
dñay_£cs
;

941 
	}
}

953 
	$igt_gë_aut‹esume_dñay
(
igt_su•íd_°©e
 
°©e
)

955 
dñay
;

957 i‡(
aut‹esume_dñay
)

958 
dñay
 = 
aut‹esume_dñay
;

960 
dñay
 = 
°©e
 =
SUSPEND_STATE_DISK
 ? 30 : 15;

962  
dñay
;

963 
	}
}

973 
	$igt_dr›_roŸ
()

975 
	`igt_as£π
(
	`gëuid
() == 0);

977 
	`igt_as£π
(
	`£tgid
(2) == 0);

978 
	`igt_as£π
(
	`£tuid
(2) == 0);

980 
	`igt_as£π
(
	`gëgid
() == 2);

981 
	`igt_as£π
(
	`gëuid
() == 2);

982 
	}
}

1000 
	$igt_debug_waô_f‹_key¥ess
(c⁄° *
v¨
)

1002 
ãrmios
 
ﬁdt
, 
√wt
;

1004 i‡(!
	`ißây
(
STDIN_FILENO
))

1007 i‡(!
igt_öãø˘ive_debug
)

1010 i‡(!
	`°r°r
(
igt_öãø˘ive_debug
, 
v¨
) &&

1011 !
	`°r°r
(
igt_öãø˘ive_debug
, "all"))

1014 
	`igt_öfo
("Pressány keyÅo continue ...\n");

1016 
	`tcgë©å
 ( 
STDIN_FILENO
, &
ﬁdt
 );

1017 
√wt
 = 
ﬁdt
;

1018 
√wt
.
c_lÊag
 &~–
ICANON
 | 
ECHO
 );

1019 
	`tc£èâr
 ( 
STDIN_FILENO
, 
TCSANOW
, &
√wt
 );

1020 
	`gëch¨
();

1021 
	`tc£èâr
 ( 
STDIN_FILENO
, 
TCSANOW
, &
ﬁdt
 );

1022 
	}
}

1045 
	$igt_debug_m™uÆ_check
(c⁄° *
v¨
, c⁄° *
ex≥˘ed
)

1047 
ãrmios
 
ﬁdt
, 
√wt
;

1048 
key
;

1050 i‡(!
	`ißây
(
STDIN_FILENO
))

1053 i‡(!
igt_öãø˘ive_debug
)

1056 i‡(!
	`°r°r
(
igt_öãø˘ive_debug
, 
v¨
) &&

1057 !
	`°r°r
(
igt_öãø˘ive_debug
, "all"))

1060 
	`igt_öfo
("I†%†[Y/n]", 
ex≥˘ed
);

1062 
	`tcgë©å
 ( 
STDIN_FILENO
, &
ﬁdt
 );

1063 
√wt
 = 
ﬁdt
;

1064 
√wt
.
c_lÊag
 &~
ICANON
;

1065 
	`tc£èâr
 ( 
STDIN_FILENO
, 
TCSANOW
, &
√wt
 );

1066 
key
 = 
	`gëch¨
();

1067 
	`tc£èâr
 ( 
STDIN_FILENO
, 
TCSANOW
, &
ﬁdt
 );

1069 
	`igt_öfo
("\n");

1071 
	`igt_as£π
(
key
 != 'n' && key != 'N');

1072 
	}
}

1080 
	sty≥_«me
 {

1081 
	mty≥
;

1082 c⁄° *
	m«me
;

1085 c⁄° *
	$föd_ty≥_«me
(c⁄° 
ty≥_«me
 *
«mes
, 
ty≥
)

1087 ; 
«mes
->
«me
;Çames++) {

1088 i‡(
«mes
->
ty≥
 ==Åype)

1089  
«mes
->
«me
;

1093 
	}
}

1095 c⁄° 
ty≥_«me
 
	gícodî_ty≥_«mes
[] = {

1096 { 
DRM_MODE_ENCODER_NONE
, "none" },

1097 { 
DRM_MODE_ENCODER_DAC
, "DAC" },

1098 { 
DRM_MODE_ENCODER_TMDS
, "TMDS" },

1099 { 
DRM_MODE_ENCODER_LVDS
, "LVDS" },

1100 { 
DRM_MODE_ENCODER_TVDAC
, "TVDAC" },

1101 { 
DRM_MODE_ENCODER_VIRTUAL
, "Virtual" },

1102 { 
DRM_MODE_ENCODER_DSI
, "DSI" },

1103 { 
DRM_MODE_ENCODER_DPMST
, "DP MST" },

1113 c⁄° *
	$km°e°_ícodî_ty≥_°r
(
ty≥
)

1115  
	`föd_ty≥_«me
(
ícodî_ty≥_«mes
, 
ty≥
);

1116 
	}
}

1118 c⁄° 
ty≥_«me
 
	gc⁄√˘‹_°©us_«mes
[] = {

1119 { 
DRM_MODE_CONNECTED
, "connected" },

1120 { 
DRM_MODE_DISCONNECTED
, "disconnected" },

1121 { 
DRM_MODE_UNKNOWNCONNECTION
, "unknown" },

1131 c⁄° *
	$km°e°_c⁄√˘‹_°©us_°r
(
°©us
)

1133  
	`föd_ty≥_«me
(
c⁄√˘‹_°©us_«mes
, 
°©us
);

1134 
	}
}

1136 c⁄° 
ty≥_«me
 
	gc⁄√˘‹_ty≥_«mes
[] = {

1137 { 
DRM_MODE_CONNECTOR_Unknown
, "Unknown" },

1138 { 
DRM_MODE_CONNECTOR_VGA
, "VGA" },

1139 { 
DRM_MODE_CONNECTOR_DVII
, "DVI-I" },

1140 { 
DRM_MODE_CONNECTOR_DVID
, "DVI-D" },

1141 { 
DRM_MODE_CONNECTOR_DVIA
, "DVI-A" },

1142 { 
DRM_MODE_CONNECTOR_Composôe
, "Composite" },

1143 { 
DRM_MODE_CONNECTOR_SVIDEO
, "SVIDEO" },

1144 { 
DRM_MODE_CONNECTOR_LVDS
, "LVDS" },

1145 { 
DRM_MODE_CONNECTOR_Comp⁄ít
, "Component" },

1146 { 
DRM_MODE_CONNECTOR_9PöDIN
, "DIN" },

1147 { 
DRM_MODE_CONNECTOR_Di•œyP‹t
, "DP" },

1148 { 
DRM_MODE_CONNECTOR_HDMIA
, "HDMI-A" },

1149 { 
DRM_MODE_CONNECTOR_HDMIB
, "HDMI-B" },

1150 { 
DRM_MODE_CONNECTOR_TV
, "TV" },

1151 { 
DRM_MODE_CONNECTOR_eDP
, "eDP" },

1152 { 
DRM_MODE_CONNECTOR_VIRTUAL
, "Virtual" },

1153 { 
DRM_MODE_CONNECTOR_DSI
, "DSI" },

1154 { 
DRM_MODE_CONNECTOR_DPI
, "DPI" },

1164 c⁄° *
	$km°e°_c⁄√˘‹_ty≥_°r
(
ty≥
)

1166  
	`föd_ty≥_«me
(
c⁄√˘‹_ty≥_«mes
, 
ty≥
);

1167 
	}
}

1178 *
	glocked_mem
;

1179 
size_t
 
	glocked_size
;

1181 
	$igt_lock_mem
(
size_t
 
size
)

1183 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1184 
size_t
 
i
;

1185 
ªt
;

1187 i‡(
size
 == 0) {

1191 i‡(
locked_mem
) {

1192 
	`igt_u∆ock_mem
();

1193 
	`igt_w¨n
("UnlockingÖreviouslyÜocked memory.\n");

1196 
locked_size
 = 
size
 * 1024 * 1024;

1198 
locked_mem
 = 
	`mÆloc
(
locked_size
);

1199 
	`igt_ªquúe_f
(
locked_mem
,

1203 
i
 = 0; i < 
locked_size
; i +
∑gesize
)

1204 
locked_mem
[
i
] = i;

1206 
ªt
 = 
	`mlock
(
locked_mem
, 
locked_size
);

1207 
	`igt_as£π_f
(
ªt
 == 0, "CouldÇotÜock memory into RAM.\n");

1208 
	}
}

1215 
	$igt_u∆ock_mem
()

1217 i‡(!
locked_mem
)

1220 
	`mu∆ock
(
locked_mem
, 
locked_size
);

1222 
	`‰ì
(
locked_mem
);

1223 
locked_mem
 = 
NULL
;

1224 
	}
}

1227 
	#MODULE_PARAM_DIR
 "/sys/moduÀ/i915/∑ømëîs/"

	)

1228 
	#PARAM_NAME_MAX_SZ
 32

	)

1229 
	#PARAM_VALUE_MAX_SZ
 16

	)

1230 
	#PARAM_FILE_PATH_MAX_SZ
 (
	`°æí
(
MODULE_PARAM_DIR
Ë+ 
PARAM_NAME_MAX_SZ
)

	)

1232 
	smoduÀ_∑øm_d©a
 {

1233 
	m«me
[
PARAM_NAME_MAX_SZ
];

1234 
	m‹igöÆ_vÆue
[
PARAM_VALUE_MAX_SZ
];

1236 
moduÀ_∑øm_d©a
 *
	m√xt
;

1238 
moduÀ_∑øm_d©a
 *
	gmoduÀ_∑øms
 = 
NULL
;

1240 
	$igt_moduÀ_∑øm_exô_h™dÀr
(
sig
)

1242 c⁄° 
size_t
 
dú_Àn
 = 
	`°æí
(
MODULE_PARAM_DIR
);

1243 
fûe_∑th
[
PARAM_FILE_PATH_MAX_SZ
];

1244 
moduÀ_∑øm_d©a
 *
d©a
;

1245 
fd
;

1250 
	`°r˝y
(
fûe_∑th
, 
MODULE_PARAM_DIR
);

1252 
d©a
 = 
moduÀ_∑øms
; d©®!
NULL
; d©®d©a->
√xt
) {

1253 
	`°r˝y
(
fûe_∑th
 + 
dú_Àn
, 
d©a
->
«me
);

1255 
fd
 = 
	`›í
(
fûe_∑th
, 
O_RDWR
);

1256 i‡(
fd
 >= 0) {

1257 
size
 = 
	`°æí
 (
d©a
->
‹igöÆ_vÆue
);

1259 i‡(
size
 !
	`wrôe
(
fd
, 
d©a
->
‹igöÆ_vÆue
, size)) {

1260 c⁄° 
msg
[] = "WARNING: ModuleÖarameters "

1263 
	`as£π
(
	`wrôe
(
STDERR_FILENO
, 
msg
, (msg))

1264 =(
msg
));

1267 
	`˛o£
(
fd
);

1271 
	}
}

1286 
	$igt_ßve_moduÀ_∑øm
(c⁄° *
«me
, c⁄° *
fûe_∑th
)

1288 
moduÀ_∑øm_d©a
 *
d©a
;

1289 
size_t
 
n
;

1290 
fd
;

1293 
d©a
 = 
moduÀ_∑øms
; d©®!
NULL
; d©®d©a->
√xt
)

1294 i‡(
	`°∫cmp
(
d©a
->
«me
,Çame, 
PARAM_NAME_MAX_SZ
) == 0)

1297 i‡(!
moduÀ_∑øms
)

1298 
	`igt_ö°Æl_exô_h™dÀr
(
igt_moduÀ_∑øm_exô_h™dÀr
);

1300 
d©a
 = 
	`ˇŒoc
(1,  (*data));

1301 
	`igt_as£π
(
d©a
);

1303 
	`°∫˝y
(
d©a
->
«me
,Çame, 
PARAM_NAME_MAX_SZ
);

1305 
fd
 = 
	`›í
(
fûe_∑th
, 
O_RDONLY
);

1306 
	`igt_as£π
(
fd
 >= 0);

1308 
n
 = 
	`ªad
(
fd
, 
d©a
->
‹igöÆ_vÆue
, 
PARAM_VALUE_MAX_SZ
);

1309 
	`igt_as£π_f
(
n
 > 0 &&Ç < 
PARAM_VALUE_MAX_SZ
,

1312 
	`igt_as£π
(
	`˛o£
(
fd
) == 0);

1314 
d©a
->
√xt
 = 
moduÀ_∑øms
;

1315 
moduÀ_∑øms
 = 
d©a
;

1316 
	}
}

1330 
	$igt_£t_moduÀ_∑øm
(c⁄° *
«me
, c⁄° *
vÆ
)

1332 
fûe_∑th
[
PARAM_FILE_PATH_MAX_SZ
];

1333 
size_t
 
Àn
 = 
	`°æí
(
vÆ
);

1334 
fd
;

1336 
	`igt_as£π_f
(
	`°æí
(
«me
Ë< 
PARAM_NAME_MAX_SZ
,

1338 
	`°r˝y
(
fûe_∑th
, 
MODULE_PARAM_DIR
);

1339 
	`°r˝y
(
fûe_∑th
 + 
	`°æí
(
MODULE_PARAM_DIR
), 
«me
);

1341 
	`igt_ßve_moduÀ_∑øm
(
«me
, 
fûe_∑th
);

1343 
fd
 = 
	`›í
(
fûe_∑th
, 
O_RDWR
);

1344 
	`igt_as£π
(
	`wrôe
(
fd
, 
vÆ
, 
Àn
) ==Üen);

1345 
	`igt_as£π
(
	`˛o£
(
fd
) == 0);

1346 
	}
}

1356 
	$igt_£t_moduÀ_∑øm_öt
(c⁄° *
«me
, 
vÆ
)

1358 
°r
[
PARAM_VALUE_MAX_SZ
];

1359 
n
;

1361 
n
 = 
	`¢¥ötf
(
°r
, 
PARAM_VALUE_MAX_SZ
, "%d\n", 
vÆ
);

1362 
	`igt_as£π_f
(
n
 < 
PARAM_VALUE_MAX_SZ
,

1365 
	`igt_£t_moduÀ_∑øm
(
«me
, 
°r
);

1366 
	}
}

1380 #ifde‡
HAVE_PROCPS


1381 
	$igt_ãrmö©e_¥o˚ss
(
sig
, c⁄° *
comm
)

1383 
PROCTAB
 *
¥oc
;

1384 
¥oc_t
 *
¥oc_öfo
;

1385 
îr
 = 0;

1387 
¥oc
 = 
	`›í¥oc
(
PROC_FILLCOM
 | 
PROC_FILLSTAT
 | 
PROC_FILLARG
);

1388 
	`igt_as£π
(
¥oc
 !
NULL
);

1390 (
¥oc_öfo
 = 
	`ªad¥oc
(
¥oc
, 
NULL
))) {

1391 i‡(!
	`°∫ˇ£cmp
(
¥oc_öfo
->
cmd
, 
comm
, (proc_info->cmd))) {

1393 i‡(
	`kûl
(
¥oc_öfo
->
tid
, 
sig
) < 0)

1394 
îr
 = -
î∫o
;

1396 
	`‰ì¥oc
(
¥oc_öfo
);

1399 
	`‰ì¥oc
(
¥oc_öfo
);

1402 
	`˛o£¥oc
(
¥oc
);

1403  
îr
;

1404 
	}
}

1408 
	$igt_ãrmö©e_¥o˚ss
(
sig
, c⁄° *
comm
)

1410 
pkûl_cmd
[
NAME_MAX
];

1412 
	`¢¥ötf
(
pkûl_cmd
, ’kûl_cmd), "pkû»-x -%d %s", 
sig
, 
comm
);

1413  
	`sy°em
(
pkûl_cmd
);

1414 
	}
}

1417 #ifde‡
HAVE_PROCPS


1418 
	spöfo
 {

1419 
pid_t
 
	mpid
;

1420 c⁄° *
	mcomm
;

1421 c⁄° *
	m‚
;

1425 
	$__igt_show_°©
(
pöfo
 *
öfo
)

1427 c⁄° *
comm
, *
‚
;

1428 c⁄° *
ty≥
 = "";

1429 
°©
 
°
;

1431 
pid_t
 
pid
 = 
öfo
->pid;

1432 
	`igt_as£π
((
comm
 = 
öfo
->comm));

1433 
	`igt_as£π
((
‚
 = 
öfo
->fn));

1435 i‡(
	`l°©
(
‚
, &
°
) == -1)

1438 
	`igt_öfo
("%20.20†", 
comm
);

1439 
	`igt_öfo
("%10d ", 
pid
);

1441 
°
.
°_mode
 & 
S_IFMT
) {

1442 
S_IFBLK
:

1443 
ty≥
 = "block";

1445 
S_IFCHR
:

1446 
ty≥
 = "character";

1448 
S_IFDIR
:

1449 
ty≥
 = "directory";

1451 
S_IFIFO
:

1452 
ty≥
 = "FIFO/pipe";

1454 
S_IFLNK
:

1455 
ty≥
 = "symlink";

1457 
S_IFREG
:

1458 
ty≥
 = "file";

1460 
S_IFSOCK
:

1461 
ty≥
 = "socket";

1464 
ty≥
 = "unknown?";

1467 
	`igt_öfo
("%20.20†", 
ty≥
);

1469 
	`igt_öfo
("%10ld%10ld ", (Ë
°
.
°_uid
, (Ë°.
°_gid
);

1471 
	`igt_öfo
("%15Œd byã†", (Ë
°
.
°_size
);

1472 
	`igt_öfo
("%30.30s", 
‚
);

1473 
	`igt_öfo
("\n");

1474 
	}
}

1478 
	$igt_show_°©_hódî
()

1480 
	`igt_öfo
("%20.20s%11.11s%21.21s%11.11s%10.10s%22.22s%31.31s\n",

1482 
	}
}

1485 
	$igt_show_°©
(
¥oc_t
 *
öfo
, *
°©e
, c⁄° *
‚
)

1487 
pöfo
 
p
 = { .
pid
 = 
öfo
->
tid
, .
comm
 = info->
cmd
, .
‚
 = fn };

1489 i‡(!*
°©e
)

1490 
	`igt_show_°©_hódî
();

1492 
	`__igt_show_°©
(&
p
);

1493 ++*
°©e
;

1494 
	}
}

1497 
	$__igt_lsof_fds
(
¥oc_t
 *
¥oc_öfo
, *
°©e
, *
¥oc_∑th
, c⁄° *
dú
)

1499 
dúít
 *
d
;

1500 
°©
 
°
;

1501 
∑th
[
PATH_MAX
];

1502 *
fd_ k
;

1505 c⁄° *
deÁu…_fds
[] = { "/dev/pts", "/dev/null" };

1507 
DIR
 *
dp
 = 
	`›ídú
(
¥oc_∑th
);

1508 
	`igt_as£π
(
dp
);

1509 
agaö
:

1510 (
d
 = 
	`ªaddú
(
dp
))) {

1511 *
c›y_fd_ k
;

1512 *
dún
;

1514 
i
;

1515 
ssize_t
 
ªad
;

1517 i‡(*
d
->
d_«me
 == '.')

1520 
	`mem£t
(
∑th
, 0, (path));

1521 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
¥oc_∑th
, 
d
->
d_«me
);

1523 i‡(
	`l°©
(
∑th
, &
°
) == -1)

1526 
fd_ k
 = 
	`mÆloc
(
°
.
°_size
 + 1);

1528 
	`igt_as£π
((
ªad
 = 
	`ªadlök
(
∑th
, 
fd_ k
, 
°
.
°_size
 + 1)));

1529 
fd_ k
[
ªad
] = '\0';

1531 
i
 = 0; i < 
	`ARRAY_SIZE
(
deÁu…_fds
); ++i) {

1532 i‡(!
	`°∫cmp
(
deÁu…_fds
[
i
],

1533 
fd_ k
,

1534 
	`°æí
(
deÁu…_fds
[
i
]))) {

1535 
	`‰ì
(
fd_ k
);

1536 
agaö
;

1540 
c›y_fd_ k
 = 
	`°rdup
(
fd_ k
);

1541 
dún
 = 
	`dú«me
(
c›y_fd_ k
);

1543 i‡(!
	`°∫cmp
(
dú
, 
dún
, 
	`°æí
(dir)))

1544 
	`igt_show_°©
(
¥oc_öfo
, 
°©e
, 
fd_ k
);

1546 
	`‰ì
(
c›y_fd_ k
);

1547 
	`‰ì
(
fd_ k
);

1549 
	}
}

1556 
	$__igt_lsof
(c⁄° *
dú
)

1558 
PROCTAB
 *
¥oc
;

1559 
¥oc_t
 *
¥oc_öfo
;

1561 
∑th
[
PATH_MAX
];

1562 *
«me_ k
;

1563 
°©
 
°
;

1564 
°©e
 = 0;

1566 
¥oc
 = 
	`›í¥oc
(
PROC_FILLCOM
 | 
PROC_FILLSTAT
 | 
PROC_FILLARG
);

1567 
	`igt_as£π
(
¥oc
 !
NULL
);

1569 (
¥oc_öfo
 = 
	`ªad¥oc
(
¥oc
, 
NULL
))) {

1570 
ssize_t
 
ªad
;

1573 
	`mem£t
(
∑th
, 0, (path));

1574 
	`¢¥ötf
(
∑th
, ’©h), "/¥oc/%d/cwd", 
¥oc_öfo
->
tid
);

1576 i‡(
	`°©
(
∑th
, &
°
) == -1)

1579 
«me_ k
 = 
	`mÆloc
(
°
.
°_size
 + 1);

1581 
	`igt_as£π
((
ªad
 = 
	`ªadlök
(
∑th
, 
«me_ k
, 
°
.
°_size
 + 1)));

1582 
«me_ k
[
ªad
] = '\0';

1584 i‡(!
	`°∫cmp
(
dú
, 
«me_ k
, 
	`°æí
(dir)))

1585 
	`igt_show_°©
(
¥oc_öfo
, &
°©e
, 
«me_ k
);

1588 
	`mem£t
(
∑th
, 0, (path));

1589 
	`¢¥ötf
(
∑th
, ’©h), "/¥oc/%d/fd", 
¥oc_öfo
->
tid
);

1591 
	`__igt_lsof_fds
(
¥oc_öfo
, &
°©e
, 
∑th
, 
dú
);

1593 
	`‰ì
(
«me_ k
);

1594 
	`‰ì¥oc
(
¥oc_öfo
);

1597 
	`˛o£¥oc
(
¥oc
);

1598 
	}
}

1608 #ifde‡
HAVE_PROCPS


1610 
	$igt_lsof
(c⁄° *
d∑th
)

1612 
°©
 
°
;

1613 
size_t
 
Àn
 = 
	`°æí
(
d∑th
);

1614 *
ßnôized
;

1616 i‡(
	`°©
(
d∑th
, &
°
) == -1)

1619 i‡(!
	`S_ISDIR
(
°
.
°_mode
)) {

1620 
	`igt_w¨n
("%†nŸá dúe˘‹y!\n", 
d∑th
);

1624 
ßnôized
 = 
	`°rdup
(
d∑th
);

1626 i‡(
Àn
 > 1 && 
d∑th
[len - 1] == '/')

1627 
ßnôized
[
Àn
 - 1] = '\0';

1629 
	`__igt_lsof
(
ßnôized
);

1631 
	`‰ì
(
ßnôized
);

1632 
	}
}

1637 
	$igt_lsof
(c⁄° *
d∑th
)

1639 
lsof_cmd
[
NAME_MAX
];

1641 
	`¢¥ötf
(
lsof_cmd
, ÷sof_cmd), "lso‡+d %s", 
d∑th
);

1642 
	`sy°em
(
lsof_cmd
);

1643 
	}
}

1646 
	sigt_sigœãncy
 {

1647 
timî_t
 
	mtimî
;

1648 
time•ec
 
	mèrgë
;

1649 
siga˘i⁄
 
	mﬁda˘
;

1650 
igt_món
 
	mmón
;

1652 
	msig
;

1653 } 
	gigt_sigœãncy
;

1655 
	$dñay
()

1657  
	`h¨s_≥åuska_f54_1_øndom_unß„
(Ë% (
NSEC_PER_SEC
 / 1000);

1658 
	}
}

1660 
	$ñ≠£d
(c⁄° 
time•ec
 *
now
, c⁄° time•e¯*
œ°
)

1662 
n£cs
;

1664 
n£cs
 = 
now
->
tv_n£c
 - 
œ°
 ->tv_nsec;

1665 
n£cs
 +1e9*(
now
->
tv_£c
 - 
œ°
->tv_sec);

1667  
n£cs
;

1668 
	}
}

1670 
	$sigœãncy
(
sig
, 
sigöfo_t
 *
öfo
, *
¨g
)

1672 
ôimî•ec
 
ôs
;

1674 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ôs
.
ô_vÆue
);

1675 i‡(
öfo
)

1676 
	`igt_món_add
(&
igt_sigœãncy
.
món
,

1677 
	`ñ≠£d
(&
ôs
.
ô_vÆue
, &
igt_sigœãncy
.
èrgë
));

1678 
igt_sigœãncy
.
èrgë
 = 
ôs
.
ô_vÆue
;

1680 
ôs
.
ô_vÆue
.
tv_n£c
 += 100 * 1000;

1681 
ôs
.
ô_vÆue
.
tv_n£c
 +
	`dñay
();

1682 i‡(
ôs
.
ô_vÆue
.
tv_n£c
 >
NSEC_PER_SEC
) {

1683 
ôs
.
ô_vÆue
.
tv_n£c
 -
NSEC_PER_SEC
;

1684 
ôs
.
ô_vÆue
.
tv_£c
 += 1;

1686 
ôs
.
ô_öãrvÆ
.
tv_£c
 = its.ô_öãrvÆ.
tv_n£c
 = 0;

1687 
	`timî_£âime
(
igt_sigœãncy
.
timî
, 
TIMER_ABSTIME
, &
ôs
, 
NULL
);

1688 
	}
}

1690 
	$igt_°¨t_sigœãncy
(
sig
)

1692 
sigevít
 
£v
;

1693 
siga˘i⁄
 
a˘
;

1695 i‡(
sig
 <= 0)

1696 
sig
 = 
SIGRTMIN
;

1698 i‡(
igt_sigœãncy
.
sig
)

1699 ()
	`igt_°›_sigœãncy
(
NULL
);

1700 
	`igt_as£π
(
igt_sigœãncy
.
sig
 == 0);

1701 
igt_sigœãncy
.
sig
 = sig;

1703 
	`mem£t
(&
£v
, 0, (sev));

1704 
£v
.
sigev_nŸify
 = 
SIGEV_SIGNAL
 | 
SIGEV_THREAD_ID
;

1705 
£v
.
sigev_nŸify_thªad_id
 = 
	`gëtid
();

1706 
£v
.
sigev_signo
 = 
sig
;

1707 
	`timî_¸óã
(
CLOCK_MONOTONIC
, &
£v
, &
igt_sigœãncy
.
timî
);

1709 
	`mem£t
(&
a˘
, 0, (act));

1710 
a˘
.
ß_siga˘i⁄
 = 
sigœãncy
;

1711 
	`siga˘i⁄
(
sig
, &
a˘
, &
igt_sigœãncy
.
ﬁda˘
);

1713 
	`sigœãncy
(
sig
, 
NULL
, NULL);

1714 
	}
}

1716 
	$igt_°›_sigœãncy
(
igt_món
 *
ªsu…
)

1718 
món
 = 
	`igt_món_gë
(&
igt_sigœãncy
.mean);

1720 i‡(
ªsu…
)

1721 *
ªsu…
 = 
igt_sigœãncy
.
món
;

1723 
	`siga˘i⁄
(
igt_sigœãncy
.
sig
, &igt_sigœãncy.
ﬁda˘
, 
NULL
);

1724 
	`timî_dñëe
(
igt_sigœãncy
.
timî
);

1725 
	`mem£t
(&
igt_sigœãncy
, 0, (igt_siglatency));

1727  
món
;

1728 
	}
}

	@igt_aux.h

28 #i‚de‡
IGT_AUX_H


29 
	#IGT_AUX_H


	)

31 
	~<öãl_bufmgr.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°ddef.h
>

34 
	~<sys/time.h
>

36 
	~<i915/gem_submissi⁄.h
>

38 
drm_öãl_bo
 **
åash_bos
;

39 
num_åash_bos
;

43 
	#MSEC_PER_SEC
 (1000)

	)

44 
	#USEC_PER_SEC
 (1000*
MSEC_PER_SEC
)

	)

45 
	#NSEC_PER_SEC
 (1000*
USEC_PER_SEC
)

	)

48 #ifde‡
ANDROID


49 
	~<uni°d.h
>

51 
	#gëtid
(Ë
	`sysˇŒ
(
__NR_gëtid
)

	)

54 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_tid


	)

58 
igt_f‹k_sig«l_hñ≥r
();

59 
igt_°›_sig«l_hñ≥r
();

60 
igt_su•íd_sig«l_hñ≥r
();

61 
igt_ªsume_sig«l_hñ≥r
();

63 
igt_f‹k_shrök_hñ≥r
(
fd
);

64 
igt_°›_shrök_hñ≥r
();

66 
igt_f‹k_h™g_dëe˘‹
(
fd
);

67 
igt_°›_h™g_dëe˘‹
();

69 
	s__igt_sigôî
 {

70 
	m∑ss
;

73 
boﬁ
 
__igt_sigôî_c⁄töue
(
__igt_sigôî
 *
ôî
, boﬁ 
öãºu±
);

95 
	#igt_whûe_öãºu±ibÀ
(
íabÀ
) \

96 
__igt_sigôî
 
ôî__
={}; 
	`__igt_sigôî_c⁄töue
(&ôî__, (
íabÀ
)); )

	)

108 
	#igt_u¡û_timeout
(
timeout
) \

109 
time•ec
 
t__
={}; 
	`igt_£c⁄ds_ñ≠£d
(&t__Ë< (
timeout
); )

	)

121 
	#igt_f‹_mûli£c⁄ds
(
t
) \

122 
time•ec
 
t__
={}; 
	`igt_n£c_ñ≠£d
(&t__)>>20 < (
t
); )

	)

124 
igt_exch™ge_öt
(*
¨øy
, 
i
, 
j
);

125 
igt_≥rmuã_¨øy
(*
¨øy
, 
size
,

126 (*
exch™ge_func
)(*
¨øy
,

127 
i
,

128 
j
));

129 
	`igt_¥ogªss
(c⁄° *
hódî
, 
uöt64_t
 
i
, uöt64_à
tŸÆ
);

130 
	`igt_¥öt_a˘ivôy
();

131 
boﬁ
 
	`igt_check_boﬁón_ív_v¨
(c⁄° *
ív_v¨
, boﬁ 
deÁu…_vÆue
);

133 
boﬁ
 
	`igt_aub_dump_íabÀd
();

136 
	`igt_öô_≠îtuª_åashîs
(
drm_öãl_bufmgr
 *
bufmgr
);

137 
	`igt_åash_≠îtuª
();

138 
	`igt_˛ónup_≠îtuª_åashîs
();

155 
	eigt_su•íd_°©e
 {

156 
SUSPEND_STATE_FREEZE
,

157 
SUSPEND_STATE_STANDBY
,

158 
SUSPEND_STATE_MEM
,

159 
SUSPEND_STATE_DISK
,

162 
SUSPEND_STATE_NUM
,

184 
	eigt_su•íd_ã°
 {

185 
SUSPEND_TEST_NONE
,

186 
SUSPEND_TEST_FREEZER
,

187 
SUSPEND_TEST_DEVICES
,

188 
SUSPEND_TEST_PLATFORM
,

189 
SUSPEND_TEST_PROCESSORS
,

190 
SUSPEND_TEST_CORE
,

193 
SUSPEND_TEST_NUM
,

196 
	`igt_sy°em_su•íd_aut‹esume
(
igt_su•íd_°©e
 
°©e
,

197 
igt_su•íd_ã°
 
ã°
);

198 
	`igt_£t_aut‹esume_dñay
(
dñay_£cs
);

199 
	`igt_gë_aut‹esume_dñay
(
igt_su•íd_°©e
 
°©e
);

202 
	`igt_dr›_roŸ
();

204 
	`igt_debug_waô_f‹_key¥ess
(c⁄° *
v¨
);

205 
	`igt_debug_m™uÆ_check
(c⁄° *
v¨
, c⁄° *
ex≥˘ed
);

211 
	`öãl_purge_vm_ˇches
(
fd
);

212 
uöt64_t
 
	`öãl_gë_avaû_øm_mb
();

213 
uöt64_t
 
	`öãl_gë_tŸÆ_øm_mb
();

214 
uöt64_t
 
	`öãl_gë_tŸÆ_sw≠_mb
();

216 
	`__öãl_check_mem‹y
(
uöt64_t
 
cou¡
, uöt64_à
size
, 
mode
,

217 
uöt64_t
 *
out_ªquúed
, uöt64_à*
out_tŸÆ
);

218 
	`öãl_ªquúe_mem‹y
(
uöt64_t
 
cou¡
, uöt64_à
size
, 
mode
);

219 
	`öãl_ªquúe_fûes
(
uöt64_t
 
cou¡
);

220 
	#CHECK_RAM
 0x1

	)

221 
	#CHECK_SWAP
 0x2

	)

223 
	#mö
(
a
, 
b
) ({ \

224 
	`ty≥of
(
a
Ë
_a
 = (a); \

225 
	`ty≥of
(
b
Ë
_b
 = (b); \

226 
_a
 < 
_b
 ? _a : _b; \

227 
	}
})

	)

228 
	#max
(
a
, 
b
) ({ \

229 
	`ty≥of
(
a
Ë
_a
 = (a); \

230 
	`ty≥of
(
b
Ë
_b
 = (b); \

231 
_a
 > 
_b
 ? _a : _b; \

232 })

	)

234 
	#igt_sw≠
(
a
, 
b
) do { \

235 
	`ty≥of
(
a
Ë
_tmp
 = (a); \

236 (
a
Ë(
b
); \

237 (
b
Ë
_tmp
; \

238 } 0)

	)

240 
igt_lock_mem
(
size_t
 
size
);

241 
igt_u∆ock_mem
();

258 
	#igt_waô
(
COND
, 
timeout_ms
, 
öãrvÆ_ms
) ({ \

259 
timevÆ
 
°¨t_
, 
íd_
, 
diff_
; \

260 
ñ≠£d_ms_
; \

261 
boﬁ
 
ªt_
 = 
Ál£
; \

263 
	`igt_as£π
(
	`gëtimeofday
(&
°¨t_
, 
NULL
) == 0); \

265 i‡(
COND
) { \

266 
ªt_
 = 
åue
; \

270 
	`u¶ìp
(
öãrvÆ_ms
 * 1000); \

272 
	`igt_as£π
(
	`gëtimeofday
(&
íd_
, 
NULL
) == 0); \

273 
	`timîsub
(&
íd_
, &
°¨t_
, &
diff_
); \

275 
ñ≠£d_ms_
 = 
diff_
.
tv_£c
 * 1000 + \

276 
diff_
.
tv_u£c
 / 1000; \

277 } 
ñ≠£d_ms_
 < 
timeout_ms
); \

279 i‡(!
ªt_
 && (
COND
)) \

280 
ªt_
 = 
åue
; \

282 
ªt_
; \

283 })

	)

285 
	gigt_món
;

286 
igt_°¨t_sigœãncy
(
sig
);

287 
igt_°›_sigœãncy
(
igt_món
 *
ªsu…
);

289 
igt_£t_moduÀ_∑øm
(c⁄° *
«me
, c⁄° *
vÆ
);

290 
igt_£t_moduÀ_∑øm_öt
(c⁄° *
«me
, 
vÆ
);

292 
igt_ãrmö©e_¥o˚ss
(
sig
, c⁄° *
comm
);

293 
igt_lsof
(c⁄° *
d∑th
);

300 
	sigt_li°
 {

301 
igt_li°
 *
	m¥ev
;

302 
igt_li°
 *
	m√xt
;

305 
	#__IGT_INIT_LIST
(
«me
Ë{ &“ame), &“ameË}

	)

306 
	#IGT_LIST
(
«me
Ë
igt_li°
Çamê
	`__IGT_INIT_LIST
“ame)

	)

308 
ölöe
 
	$igt_li°_öô
(
igt_li°
 *
li°
)

310 
li°
->
¥ev
 =Üist;

311 
li°
->
√xt
 =Üist;

312 
	}
}

314 
ölöe
 
	$__igt_li°_add
(
igt_li°
 *
li°
,

315 
igt_li°
 *
¥ev
,

316 
igt_li°
 *
√xt
)

318 
√xt
->
¥ev
 = 
li°
;

319 
li°
->
√xt
 =Çext;

320 
li°
->
¥ev
 =Örev;

321 
¥ev
->
√xt
 = 
li°
;

322 
	}
}

324 
ölöe
 
	$igt_li°_add
(
igt_li°
 *
ñm
, igt_li° *
li°
)

326 
	`__igt_li°_add
(
ñm
, 
li°
,Üi°->
√xt
);

327 
	}
}

329 
ölöe
 
	$igt_li°_add_èû
(
igt_li°
 *
ñm
,

330 
igt_li°
 *
li°
)

332 
	`__igt_li°_add
(
ñm
, 
li°
->
¥ev
,Üist);

333 
	}
}

335 
ölöe
 
	$__igt_li°_dñ
(
igt_li°
 *
¥ev
, igt_li° *
√xt
)

337 
√xt
->
¥ev
 =Örev;

338 
¥ev
->
√xt
 =Çext;

339 
	}
}

341 
ölöe
 
	$igt_li°_dñ
(
igt_li°
 *
ñm
)

343 
	`__igt_li°_dñ
(
ñm
->
¥ev
,Élm->
√xt
);

344 
	}
}

346 
ölöe
 
	$igt_li°_move
(
igt_li°
 *
ñm
, igt_li° *
li°
)

348 
	`igt_li°_dñ
(
ñm
);

349 
	`igt_li°_add
(
ñm
, 
li°
);

350 
	}
}

352 
ölöe
 
	$igt_li°_move_èû
(
igt_li°
 *
ñm
,

353 
igt_li°
 *
li°
)

355 
	`igt_li°_dñ
(
ñm
);

356 
	`igt_li°_add_èû
(
ñm
, 
li°
);

357 
	}
}

359 
ölöe
 
boﬁ
 
	$igt_li°_em±y
(c⁄° 
igt_li°
 *
li°
)

361  
li°
->
√xt
 ==Üist;

362 
	}
}

364 
	#c⁄èöî_of
(
±r
, 
ßm∂e
, 
membî
) \

365 (
	`ty≥of
(
ßm∂e
))((*)(
±r
Ë- 
	`off£tof
—y≥of(*ßm∂e), 
membî
))

	)

367 
	#igt_li°_fú°_íåy
(
hód
, 
pos
, 
membî
) \

368 
	`c⁄èöî_of
((
hód
)->
√xt
, (
pos
), 
membî
)

	)

369 
	#igt_li°_œ°_íåy
(
hód
, 
pos
, 
membî
) \

370 
	`c⁄èöî_of
((
hód
)->
¥ev
, (
pos
), 
membî
)

	)

372 
	#igt_li°_√xt_íåy
(
pos
, 
membî
) \

373 
	`c⁄èöî_of
((
pos
)->
membî
.
√xt
, (pos), membî)

	)

374 
	#igt_li°_¥ev_íåy
(
pos
, 
membî
) \

375 
	`c⁄èöî_of
((
pos
)->
membî
.
¥ev
, (pos), membî)

	)

377 
	#igt_li°_f‹_óch
(
pos
, 
hód
, 
membî
) \

378 
pos
 = 
	`igt_li°_fú°_íåy
(
hód
,Öos, 
membî
); \

379 &
pos
->
membî
 !(
hód
); \

380 
pos
 = 
	`igt_li°_√xt_íåy
’os, 
membî
))

	)

382 
	#igt_li°_f‹_óch_ªvî£
(
pos
, 
hód
, 
membî
) \

383 
pos
 = 
	`igt_li°_œ°_íåy
(
hód
,Öos, 
membî
); \

384 &
pos
->
membî
 !(
hód
); \

385 
pos
 = 
	`igt_li°_¥ev_íåy
’os, 
membî
))

	)

387 
	#igt_li°_f‹_óch_ß„
(
pos
, 
tmp
, 
hód
, 
membî
) \

388 
pos
 = 
	`igt_li°_fú°_íåy
(
hód
,Öos, 
membî
), \

389 
tmp
 = 
	`igt_li°_√xt_íåy
(
pos
, 
membî
); \

390 &
pos
->
membî
 !(
hód
); \

391 
pos
 = 
tmp
,Åm∞
	`igt_li°_√xt_íåy
’os, 
membî
))

	)

	@igt_chamelium.c

27 
	~"c⁄fig.h
"

29 
	~<°rög.h
>

30 
	~<î∫o.h
>

31 
	~<xmÃpc-c/ba£.h
>

32 
	~<xmÃpc-c/˛õ¡.h
>

33 
	~<±hªad.h
>

34 
	~<glib.h
>

35 
	~<pixm™.h
>

36 
	~<ˇúo.h
>

38 
	~"igt_chamñium.h
"

39 
	~"igt_c‹e.h
"

40 
	~"igt_aux.h
"

41 
	~"igt_kms.h
"

42 
	~"igt_‰ame.h
"

43 
	~"igt_rc.h
"

82 
	schamñium_edid
 {

83 
	mid
;

84 
igt_li°
 
	mlök
;

87 
	schamñium_p‹t
 {

88 
	mty≥
;

89 
	mid
;

90 
	mc⁄√˘‹_id
;

91 *
	m«me
;

94 
	schamñium_‰ame_dump
 {

95 *
	mbgr
;

96 
size_t
 
	msize
;

97 
	mwidth
;

98 
	mheight
;

99 
chamñium_p‹t
 *
	mp‹t
;

102 
	schamñium_fb_¸c_async_d©a
 {

103 
ˇúo_surÁ˚_t
 *
	mfb_surÁ˚
;

105 
±hªad_t
 
	mthªad_id
;

106 
igt_¸c_t
 *
	mªt
;

109 
	schamñium
 {

110 
xmÃpc_ív
 
	mív
;

111 
xmÃpc_˛õ¡
 *
	m˛õ¡
;

112 *
	muæ
;

115 
chamñium_p‹t
 *
	mˇ±urög_p‹t
;

117 
	mdrm_fd
;

119 
chamñium_edid
 *
	medids
;

120 
chamñium_p‹t
 *
	mp‹ts
;

121 
	mp‹t_cou¡
;

124 
chamñium
 *
	g˛ónup_ö°™˚
;

135 
chamñium_p‹t
 **
	$chamñium_gë_p‹ts
(
chamñium
 *chamelium,

136 *
cou¡
)

138 
i
;

139 
chamñium_p‹t
 **
ªt
 =

140 
	`ˇŒoc
((*), 
chamñium
->
p‹t_cou¡
);

142 *
cou¡
 = 
chamñium
->
p‹t_cou¡
;

143 
i
 = 0; i < 
chamñium
->
p‹t_cou¡
; i++)

144 
ªt
[
i
] = &
chamñium
->
p‹ts
[i];

146  
ªt
;

147 
	}
}

159 
	$chamñium_p‹t_gë_ty≥
(c⁄° 
chamñium_p‹t
 *
p‹t
) {

160  
p‹t
->
ty≥
;

161 
	}
}

174 
drmModeC⁄√˘‹
 *
	$chamñium_p‹t_gë_c⁄√˘‹
(
chamñium
 *chamelium,

175 
chamñium_p‹t
 *
p‹t
,

176 
boﬁ
 
ª¥obe
)

178 
drmModeC⁄√˘‹
 *
c⁄√˘‹
;

180 i‡(
ª¥obe
)

181 
c⁄√˘‹
 = 
	`drmModeGëC⁄√˘‹
(
chamñium
->
drm_fd
,

182 
p‹t
->
c⁄√˘‹_id
);

184 
c⁄√˘‹
 = 
	`drmModeGëC⁄√˘‹Cuºít
(

185 
chamñium
->
drm_fd
, 
p‹t
->
c⁄√˘‹_id
);

187  
c⁄√˘‹
;

188 
	}
}

199 c⁄° *
	$chamñium_p‹t_gë_«me
(
chamñium_p‹t
 *
p‹t
)

201  
p‹t
->
«me
;

202 
	}
}

211 
	$chamñium_de°roy_‰ame_dump
(
chamñium_‰ame_dump
 *
dump
)

213 
	`‰ì
(
dump
->
bgr
);

214 
	`‰ì
(
dump
);

215 
	}
}

217 
	sfsm_m⁄ô‹_¨gs
 {

218 
chamñium
 *
	mchamñium
;

219 
chamñium_p‹t
 *
	mp‹t
;

220 
udev_m⁄ô‹
 *
	mm⁄
;

229 *
	$chamñium_fsm_m⁄
(*
d©a
)

231 
fsm_m⁄ô‹_¨gs
 *
¨gs
 = 
d©a
;

232 
drmModeC⁄√˘‹
 *
c⁄√˘‹
;

233 
drm_fd
 = 
¨gs
->
chamñium
->drm_fd;

239 
	`igt_hŸ∂ug_dëe˘ed
(
¨gs
->
m⁄
, 60);

246 
	`±hªad_£tˇn˚l°©e
(
PTHREAD_CANCEL_DISABLE
, 
NULL
);

248 
	`igt_debug
("ChameliumÇeeds FSM, handling\n");

249 
c⁄√˘‹
 = 
	`chamñium_p‹t_gë_c⁄√˘‹
(
¨gs
->
chamñium
,árgs->
p‹t
,

250 
Ál£
);

251 
	`km°e°_£t_c⁄√˘‹_dpms
(
drm_fd
, 
c⁄√˘‹
, 
DRM_MODE_DPMS_OFF
);

252 
	`km°e°_£t_c⁄√˘‹_dpms
(
drm_fd
, 
c⁄√˘‹
, 
DRM_MODE_DPMS_ON
);

254 
	`drmModeFªeC⁄√˘‹
(
c⁄√˘‹
);

255  
NULL
;

256 
	}
}

258 
xmÃpc_vÆue
 *
	$chamñium_Ωc
(
chamñium
 *chamelium,

259 
chamñium_p‹t
 *
fsm_p‹t
,

260 c⁄° *
mëhod_«me
,

261 c⁄° *
f‹m©_°r
,

264 
xmÃpc_vÆue
 *
ªs
;

265 
va_li°
 
va_¨gs
;

266 
fsm_m⁄ô‹_¨gs
 
m⁄ô‹_¨gs
;

267 
±hªad_t
 
fsm_thªad_id
;

270 i‡(
chamñium
->
ív
.
Áu…_occuºed
) {

271 
	`xmÃpc_ív_˛ón
(&
chamñium
->
ív
);

272 
	`xmÃpc_ív_öô
(&
chamñium
->
ív
);

281 i‡(
fsm_p‹t
) {

282 
m⁄ô‹_¨gs
.
chamñium
 = chamelium;

283 
m⁄ô‹_¨gs
.
p‹t
 = 
fsm_p‹t
;

284 
m⁄ô‹_¨gs
.
m⁄
 = 
	`igt_w©ch_hŸ∂ug
();

285 
	`±hªad_¸óã
(&
fsm_thªad_id
, 
NULL
, 
chamñium_fsm_m⁄
,

286 &
m⁄ô‹_¨gs
);

289 
	`va_°¨t
(
va_¨gs
, 
f‹m©_°r
);

290 
	`xmÃpc_˛õ¡_ˇŒ2f_va
(&
chamñium
->
ív
, chamñium->
˛õ¡
,

291 
chamñium
->
uæ
, 
mëhod_«me
, 
f‹m©_°r
, &
ªs
,

292 
va_¨gs
);

293 
	`va_íd
(
va_¨gs
);

295 i‡(
fsm_p‹t
) {

296 
	`±hªad_ˇn˚l
(
fsm_thªad_id
);

297 
	`igt_˛ónup_hŸ∂ug
(
m⁄ô‹_¨gs
.
m⁄
);

300 
	`igt_as£π_f
(!
chamñium
->
ív
.
Áu…_occuºed
,

302 
chamñium
->
ív
.
Áu…_°rög
);

304  
ªs
;

305 
	}
}

315 
	$chamñium_∂ug
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
)

317 
	`igt_debug
("Pluggög %s\n", 
p‹t
->
«me
);

318 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "Plug", "(i)", 
p‹t
->
id
));

319 
	}
}

329 
	$chamñium_u≈lug
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
)

331 
	`igt_debug
("U≈luggögÖ‹à%s\n", 
p‹t
->
«me
);

332 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "Unplug", "(i)",

333 
p‹t
->
id
));

334 
	}
}

346 
boﬁ
 
	$chamñium_is_∂ugged
(
chamñium
 *chamelium,

347 
chamñium_p‹t
 *
p‹t
)

349 
xmÃpc_vÆue
 *
ªs
;

350 
xmÃpc_boﬁ
 
is_∂ugged
;

352 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "IsPlugged", "(i)", 
p‹t
->
id
);

354 
	`xmÃpc_ªad_boﬁ
(&
chamñium
->
ív
, 
ªs
, &
is_∂ugged
);

355 
	`xmÃpc_DECREF
(
ªs
);

357  
is_∂ugged
;

358 
	}
}

372 
boﬁ
 
	$chamñium_p‹t_waô_video_öput_°abÀ
(
chamñium
 *chamelium,

373 
chamñium_p‹t
 *
p‹t
,

374 
timeout_£cs
)

376 
xmÃpc_vÆue
 *
ªs
;

377 
xmÃpc_boﬁ
 
is_⁄
;

379 
	`igt_debug
("Waôög f‹ videÿöpuàtÿ°abÆizê⁄ %s\n", 
p‹t
->
«me
);

381 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "WaitVideoInputStable", "(ii)",

382 
p‹t
->
id
, 
timeout_£cs
);

384 
	`xmÃpc_ªad_boﬁ
(&
chamñium
->
ív
, 
ªs
, &
is_⁄
);

385 
	`xmÃpc_DECREF
(
ªs
);

387  
is_⁄
;

388 
	}
}

407 
	$chamñium_fúe_hpd_pul£s
(
chamñium
 *chamelium,

408 
chamñium_p‹t
 *
p‹t
,

409 
width_m£c
, 
cou¡
)

411 
xmÃpc_vÆue
 *
pul£_widths
 = 
	`xmÃpc_¨øy_√w
(&
chamñium
->
ív
);

412 
xmÃpc_vÆue
 *
width
 = 
	`xmÃpc_öt_√w
(&
chamñium
->
ív
, 
width_m£c
);

413 
i
;

415 
	`igt_debug
("Firing %d HPDÖulses with width of %d msec on %s\n",

416 
cou¡
, 
width_m£c
, 
p‹t
->
«me
);

418 
i
 = 0; i < 
cou¡
; i++)

419 
	`xmÃpc_¨øy_≠≥nd_ôem
(&
chamñium
->
ív
, 
pul£_widths
, 
width
);

421 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "FireMixedHpdPulses",

422 "(iA)", 
p‹t
->
id
, 
pul£_widths
));

424 
	`xmÃpc_DECREF
(
width
);

425 
	`xmÃpc_DECREF
(
pul£_widths
);

426 
	}
}

437 
	$chamñium_fúe_mixed_hpd_pul£s
(
chamñium
 *chamelium,

438 
chamñium_p‹t
 *
p‹t
, ...)

440 
va_li°
 
¨gs
;

441 
xmÃpc_vÆue
 *
pul£_widths
 = 
	`xmÃpc_¨øy_√w
(&
chamñium
->
ív
), *
width
;

442 
¨g
;

444 
	`igt_debug
("Fúög mixed HPDÖul£†⁄ %s\n", 
p‹t
->
«me
);

446 
	`va_°¨t
(
¨gs
, 
p‹t
);

447 
¨g
 = 
	`va_¨g
(
¨gs
, );árg;árg = va_arg(args, )) {

448 
width
 = 
	`xmÃpc_öt_√w
(&
chamñium
->
ív
, 
¨g
);

449 
	`xmÃpc_¨øy_≠≥nd_ôem
(&
chamñium
->
ív
, 
pul£_widths
, 
width
);

450 
	`xmÃpc_DECREF
(
width
);

452 
	`va_íd
(
¨gs
);

454 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "FireMixedHpdPulses",

455 "(iA)", 
p‹t
->
id
, 
pul£_widths
));

457 
	`xmÃpc_DECREF
(
pul£_widths
);

458 
	}
}

471 
	$chamñium_scheduÀ_hpd_toggÀ
(
chamñium
 *chamelium,

472 
chamñium_p‹t
 *
p‹t
, 
dñay_ms
,

473 
boﬁ
 
risög_edge
)

475 
	`igt_debug
("Schedulög HPDÅoggÀ o¿%†ö %d ms\n", 
p‹t
->
«me
,

476 
dñay_ms
);

478 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "ScheduleHpdToggle",

479 "(iii)", 
p‹t
->
id
, 
dñay_ms
, 
risög_edge
));

480 
	}
}

492 
	$chamñium_√w_edid
(
chamñium
 *chamñium, c⁄° *
edid
)

494 
xmÃpc_vÆue
 *
ªs
;

495 
chamñium_edid
 *
Æloˇãd_edid
;

496 
edid_id
;

498 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "CreateEdid", "(6)",

499 
edid
, 
EDID_LENGTH
);

501 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs
, &
edid_id
);

502 
	`xmÃpc_DECREF
(
ªs
);

504 
Æloˇãd_edid
 = 
	`mÆloc
((
chamñium_edid
));

505 
	`mem£t
(
Æloˇãd_edid
, 0, (*allocated_edid));

507 
Æloˇãd_edid
->
id
 = 
edid_id
;

508 
	`igt_li°_öô
(&
Æloˇãd_edid
->
lök
);

510 i‡(
chamñium
->
edids
)

511 
	`igt_li°_add
(&
chamñium
->
edids
->
lök
, &
Æloˇãd_edid
->link);

513 
chamñium
->
edids
 = 
Æloˇãd_edid
;

515  
edid_id
;

516 
	}
}

518 
	$chamñium_de°roy_edid
(
chamñium
 *chamñium, 
edid_id
)

520 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "DestroyEdid", "(i)",

521 
edid_id
));

522 
	}
}

537 
	$chamñium_p‹t_£t_edid
(
chamñium
 *chamelium,

538 
chamñium_p‹t
 *
p‹t
, 
edid_id
)

540 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "ApplyEdid", "(ii)",

541 
p‹t
->
id
, 
edid_id
));

542 
	}
}

555 
	$chamñium_p‹t_£t_ddc_°©e
(
chamñium
 *chamelium,

556 
chamñium_p‹t
 *
p‹t
,

557 
boﬁ
 
íabÀd
)

559 
	`igt_debug
("%sabling DDC bus on %s\n",

560 
íabÀd
 ? "En" : "Dis", 
p‹t
->
«me
);

562 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "SetDdcState", "(ib)",

563 
p‹t
->
id
, 
íabÀd
));

564 
	}
}

576 
boﬁ
 
	$chamñium_p‹t_gë_ddc_°©e
(
chamñium
 *chamelium,

577 
chamñium_p‹t
 *
p‹t
)

579 
xmÃpc_vÆue
 *
ªs
;

580 
xmÃpc_boﬁ
 
íabÀd
;

582 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "IsDdcE«bÀd", "(i)", 
p‹t
->
id
);

583 
	`xmÃpc_ªad_boﬁ
(&
chamñium
->
ív
, 
ªs
, &
íabÀd
);

585 
	`xmÃpc_DECREF
(
ªs
);

586  
íabÀd
;

587 
	}
}

601 
	$chamñium_p‹t_gë_ªsﬁuti⁄
(
chamñium
 *chamelium,

602 
chamñium_p‹t
 *
p‹t
,

603 *
x
, *
y
)

605 
xmÃpc_vÆue
 *
ªs
, *
ªs_x
, *
ªs_y
;

607 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "DetectResolution", "(i)",

608 
p‹t
->
id
);

610 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
ªs
, 0, &
ªs_x
);

611 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
ªs
, 1, &
ªs_y
);

612 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs_x
, 
x
);

613 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs_y
, 
y
);

615 
	`xmÃpc_DECREF
(
ªs_x
);

616 
	`xmÃpc_DECREF
(
ªs_y
);

617 
	`xmÃpc_DECREF
(
ªs
);

618 
	}
}

620 
	$chamñium_gë_ˇ±uªd_ªsﬁuti⁄
(
chamñium
 *chamelium,

621 *
w
, *
h
)

623 
xmÃpc_vÆue
 *
ªs
, *
ªs_w
, *
ªs_h
;

625 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "GetCapturedResolution", "()");

627 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
ªs
, 0, &
ªs_w
);

628 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
ªs
, 1, &
ªs_h
);

629 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs_w
, 
w
);

630 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs_h
, 
h
);

632 
	`xmÃpc_DECREF
(
ªs_w
);

633 
	`xmÃpc_DECREF
(
ªs_h
);

634 
	`xmÃpc_DECREF
(
ªs
);

635 
	}
}

637 
chamñium_‰ame_dump
 *
	$‰ame_‰om_xml
(
chamñium
 *chamelium,

638 
xmÃpc_vÆue
 *
‰ame_xml
)

640 
chamñium_‰ame_dump
 *
ªt
 = 
	`mÆloc
((*ret));

642 
	`chamñium_gë_ˇ±uªd_ªsﬁuti⁄
(
chamñium
, &
ªt
->
width
, &ªt->
height
);

643 
ªt
->
p‹t
 = 
chamñium
->
ˇ±urög_p‹t
;

644 
	`xmÃpc_ªad_ba£64
(&
chamñium
->
ív
, 
‰ame_xml
, &
ªt
->
size
,

645 (*)&
ªt
->
bgr
);

647  
ªt
;

648 
	}
}

680 
chamñium_‰ame_dump
 *
	$chamñium_p‹t_dump_pixñs
(
chamñium
 *chamelium,

681 
chamñium_p‹t
 *
p‹t
,

682 
x
, 
y
,

683 
w
, 
h
)

685 
xmÃpc_vÆue
 *
ªs
;

686 
chamñium_‰ame_dump
 *
‰ame
;

688 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "DumpPixels",

689 (
w
 && 
h
) ? "(iiiii)" : "(innnn)",

690 
p‹t
->
id
, 
x
, 
y
, 
w
, 
h
);

691 
chamñium
->
ˇ±urög_p‹t
 = 
p‹t
;

693 
‰ame
 = 
	`‰ame_‰om_xml
(
chamñium
, 
ªs
);

694 
	`xmÃpc_DECREF
(
ªs
);

696  
‰ame
;

697 
	}
}

699 
	$¸c_‰om_xml
(
chamñium
 *chamelium,

700 
xmÃpc_vÆue
 *
xml_¸c
, 
igt_¸c_t
 *
out
)

702 
xmÃpc_vÆue
 *
ªs
;

703 
i
;

705 
out
->
n_w‹ds
 = 
	`xmÃpc_¨øy_size
(&
chamñium
->
ív
, 
xml_¸c
);

706 
i
 = 0; i < 
out
->
n_w‹ds
; i++) {

707 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
xml_¸c
, 
i
, &
ªs
);

708 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs
, (*)&
out
->
¸c
[
i
]);

709 
	`xmÃpc_DECREF
(
ªs
);

711 
	}
}

743 
igt_¸c_t
 *
	$chamñium_gë_¸c_f‹_¨ó
(
chamñium
 *chamelium,

744 
chamñium_p‹t
 *
p‹t
,

745 
x
, 
y
, 
w
, 
h
)

747 
xmÃpc_vÆue
 *
ªs
;

748 
igt_¸c_t
 *
ªt
 = 
	`mÆloc
((igt_crc_t));

750 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "ComputePixelChecksum",

751 (
w
 && 
h
) ? "(iiiii)" : "(innnn)",

752 
p‹t
->
id
, 
x
, 
y
, 
w
, 
h
);

753 
chamñium
->
ˇ±urög_p‹t
 = 
p‹t
;

755 
	`¸c_‰om_xml
(
chamñium
, 
ªs
, 
ªt
);

756 
	`xmÃpc_DECREF
(
ªs
);

758  
ªt
;

759 
	}
}

785 
	$chamñium_°¨t_ˇ±uª
(
chamñium
 *chamelium,

786 
chamñium_p‹t
 *
p‹t
, 
x
, 
y
, 
w
, 
h
)

788 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "StartCapturingVideo",

789 (
w
 && 
h
) ? "(iiiii)" : "(innnn)",

790 
p‹t
->
id
, 
x
, 
y
, 
w
, 
h
));

791 
chamñium
->
ˇ±urög_p‹t
 = 
p‹t
;

792 
	}
}

804 
	$chamñium_°›_ˇ±uª
(
chamñium
 *chamñium, 
‰ame_cou¡
)

806 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "StopCapturingVideo",

807 "(i)", 
‰ame_cou¡
));

808 
	}
}

834 
	$chamñium_ˇ±uª
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
,

835 
x
, 
y
, 
w
, 
h
, 
‰ame_cou¡
)

837 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "CaptureVideo",

838 (
w
 && 
h
) ? "(iiiiii)" : "(iinnnn)",

839 
p‹t
->
id
, 
‰ame_cou¡
, 
x
, 
y
, 
w
, 
h
));

840 
chamñium
->
ˇ±urög_p‹t
 = 
p‹t
;

841 
	}
}

852 
igt_¸c_t
 *
	$chamñium_ªad_ˇ±uªd_¸cs
(
chamñium
 *chamelium,

853 *
‰ame_cou¡
)

855 
igt_¸c_t
 *
ªt
;

856 
xmÃpc_vÆue
 *
ªs
, *
ñem
;

857 
i
;

859 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "GetCapturedChecksums", "(in)", 0);

861 *
‰ame_cou¡
 = 
	`xmÃpc_¨øy_size
(&
chamñium
->
ív
, 
ªs
);

862 
ªt
 = 
	`ˇŒoc
((
igt_¸c_t
), *
‰ame_cou¡
);

864 
i
 = 0; i < *
‰ame_cou¡
; i++) {

865 
	`xmÃpc_¨øy_ªad_ôem
(&
chamñium
->
ív
, 
ªs
, 
i
, &
ñem
);

867 
	`¸c_‰om_xml
(
chamñium
, 
ñem
, &
ªt
[
i
]);

868 
ªt
[
i
].
‰ame
 = i;

870 
	`xmÃpc_DECREF
(
ñem
);

873 
	`xmÃpc_DECREF
(
ªs
);

875  
ªt
;

876 
	}
}

889 
chamñium_‰ame_dump
 *
	$chamñium_ªad_ˇ±uªd_‰ame
(
chamñium
 *chamelium,

890 
ödex
)

892 
xmÃpc_vÆue
 *
ªs
;

893 
chamñium_‰ame_dump
 *
‰ame
;

895 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "RódC≠tuªdFøme", "(i)", 
ödex
);

896 
‰ame
 = 
	`‰ame_‰om_xml
(
chamñium
, 
ªs
);

897 
	`xmÃpc_DECREF
(
ªs
);

899  
‰ame
;

900 
	}
}

911 
	$chamñium_gë_ˇ±uªd_‰ame_cou¡
(
chamñium
 *chamelium)

913 
xmÃpc_vÆue
 *
ªs
;

914 
ªt
;

916 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "GetCapturedFrameCount", "()");

917 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs
, &
ªt
);

919 
	`xmÃpc_DECREF
(
ªs
);

920  
ªt
;

921 
	}
}

923 
pixm™_image_t
 *
	$c⁄vît_‰ame_f‹m©
(
pixm™_image_t
 *
§c
,

924 
f‹m©
)

926 
pixm™_image_t
 *
c⁄vîãd
;

927 
w
 = 
	`pixm™_image_gë_width
(
§c
), 
h
 = 
	`pixm™_image_gë_height
(src);

929 
c⁄vîãd
 = 
	`pixm™_image_¸óã_bôs
(
f‹m©
, 
w
, 
h
, 
NULL
,

930 
	`PIXMAN_FORMAT_BPP
(
f‹m©
Ë/ 8 * 
w
);

931 
	`pixm™_image_composôe
(
PIXMAN_OP_ADD
, 
§c
, 
NULL
, 
c⁄vîãd
,

932 0, 0, 0, 0, 0, 0, 
w
, 
h
);

934  
c⁄vîãd
;

935 
	}
}

937 
ˇúo_surÁ˚_t
 *
	$c⁄vît_‰ame_dump_¨gb32
(c⁄° 
chamñium_‰ame_dump
 *
dump
)

939 
ˇúo_surÁ˚_t
 *
dump_surÁ˚
;

940 
pixm™_image_t
 *
image_bgr
;

941 
pixm™_image_t
 *
image_¨gb
;

942 
w
 = 
dump
->
width
, 
h
 = dump->
height
;

943 
uöt32_t
 *
bôs_bgr
 = (uöt32_à*Ë
dump
->
bgr
;

944 *
bôs_¨gb
;

945 *
bôs_èrgë
;

946 
size
;

948 
image_bgr
 = 
	`pixm™_image_¸óã_bôs
(

949 
PIXMAN_b8g8r8
, 
w
, 
h
, 
bôs_bgr
,

950 
	`PIXMAN_FORMAT_BPP
(
PIXMAN_b8g8r8
Ë/ 8 * 
w
);

951 
image_¨gb
 = 
	`c⁄vît_‰ame_f‹m©
(
image_bgr
, 
PIXMAN_x8r8g8b8
);

952 
	`pixm™_image_uƒef
(
image_bgr
);

954 
bôs_¨gb
 = (*Ë
	`pixm™_image_gë_d©a
(
image_¨gb
);

956 
dump_surÁ˚
 = 
	`ˇúo_image_surÁ˚_¸óã
(

957 
CAIRO_FORMAT_ARGB32
, 
w
, 
h
);

959 
bôs_èrgë
 = 
	`ˇúo_image_surÁ˚_gë_d©a
(
dump_surÁ˚
);

960 
size
 = 
	`ˇúo_image_surÁ˚_gë_°ride
(
dump_surÁ˚
Ë* 
h
;

961 
	`mem˝y
(
bôs_èrgë
, 
bôs_¨gb
, 
size
);

962 
	`ˇúo_surÁ˚_m¨k_dúty
(
dump_surÁ˚
);

964 
	`pixm™_image_uƒef
(
image_¨gb
);

966  
dump_surÁ˚
;

967 
	}
}

979 
	$chamñium_as£π_‰ame_eq
(c⁄° 
chamñium
 *chamelium,

980 c⁄° 
chamñium_‰ame_dump
 *
dump
,

981 
igt_fb
 *
fb
)

983 
ˇúo_surÁ˚_t
 *
fb_surÁ˚
;

984 
pixm™_image_t
 *
ª„ªn˚_§c
, *
ª„ªn˚_bgr
;

985 
w
 = 
dump
->
width
, 
h
 = dump->
height
;

986 
boﬁ
 
eq
;

989 
fb_surÁ˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
chamñium
->
drm_fd
, 
fb
);

995 
ª„ªn˚_§c
 = 
	`pixm™_image_¸óã_bôs
(

996 
PIXMAN_x8r8g8b8
, 
w
, 
h
,

997 (*)
	`ˇúo_image_surÁ˚_gë_d©a
(
fb_surÁ˚
),

998 
	`ˇúo_image_surÁ˚_gë_°ride
(
fb_surÁ˚
));

999 
ª„ªn˚_bgr
 = 
	`c⁄vît_‰ame_f‹m©
(
ª„ªn˚_§c
, 
PIXMAN_b8g8r8
);

1000 
	`pixm™_image_uƒef
(
ª„ªn˚_§c
);

1003 
eq
 = 
	`memcmp
(
dump
->
bgr
, 
	`pixm™_image_gë_d©a
(
ª„ªn˚_bgr
),

1004 
dump
->
size
) == 0;

1006 
	`pixm™_image_uƒef
(
ª„ªn˚_bgr
);

1008 
	`igt_Áû_⁄_f
(!
eq
,

1010 
	}
}

1023 
	$chamñium_as£π_¸c_eq_‹_dump
(
chamñium
 *chamelium,

1024 
igt_¸c_t
 *
ª„ªn˚_¸c
,

1025 
igt_¸c_t
 *
ˇ±uª_¸c
, 
igt_fb
 *
fb
,

1026 
ödex
)

1028 
chamñium_‰ame_dump
 *
‰ame
;

1029 
ˇúo_surÁ˚_t
 *
ª„ªn˚
;

1030 
ˇúo_surÁ˚_t
 *
ˇ±uª
;

1031 *
ª„ªn˚_suffix
;

1032 *
ˇ±uª_suffix
;

1033 
boﬁ
 
eq
;

1035 
eq
 = 
	`igt_check_¸c_equÆ
(
ª„ªn˚_¸c
, 
ˇ±uª_¸c
);

1036 i‡(!
eq
 && 
	`igt_‰ame_dump_is_íabÀd
()) {

1038 
ª„ªn˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
chamñium
->
drm_fd
, 
fb
);

1041 
‰ame
 = 
	`chamñium_ªad_ˇ±uªd_‰ame
(
chamñium
, 
ödex
);

1042 
	`igt_as£π
(
‰ame
);

1044 
ˇ±uª
 = 
	`c⁄vît_‰ame_dump_¨gb32
(
‰ame
);

1046 
ª„ªn˚_suffix
 = 
	`igt_¸c_to_°rög_exãnded
(
ª„ªn˚_¸c
,

1048 
ˇ±uª_suffix
 = 
	`igt_¸c_to_°rög_exãnded
(
ˇ±uª_¸c
, '-',

1052 
	`igt_wrôe_com∑ªd_‰ames_to_≤g
(
ª„ªn˚
, 
ˇ±uª
,

1053 
ª„ªn˚_suffix
,

1054 
ˇ±uª_suffix
);

1056 
	`‰ì
(
ª„ªn˚_suffix
);

1057 
	`‰ì
(
ˇ±uª_suffix
);

1059 
	`chamñium_de°roy_‰ame_dump
(
‰ame
);

1061 
	`ˇúo_surÁ˚_de°roy
(
ˇ±uª
);

1064 
	`igt_as£π
(
eq
);

1065 
	}
}

1077 
	$chamñium_as£π_™Æog_‰ame_m©ch_‹_dump
(
chamñium
 *chamelium,

1078 
chamñium_p‹t
 *
p‹t
,

1079 c⁄° 
chamñium_‰ame_dump
 *
‰ame
,

1080 
igt_fb
 *
fb
)

1082 
ˇúo_surÁ˚_t
 *
ª„ªn˚
;

1083 
ˇúo_surÁ˚_t
 *
ˇ±uª
;

1084 
igt_¸c_t
 *
ª„ªn˚_¸c
;

1085 
igt_¸c_t
 *
ˇ±uª_¸c
;

1086 *
ª„ªn˚_suffix
;

1087 *
ˇ±uª_suffix
;

1088 
boﬁ
 
m©ch
;

1091 
ª„ªn˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
chamñium
->
drm_fd
, 
fb
);

1094 
ˇ±uª
 = 
	`c⁄vît_‰ame_dump_¨gb32
(
‰ame
);

1096 
m©ch
 = 
	`igt_check_™Æog_‰ame_m©ch
(
ª„ªn˚
, 
ˇ±uª
);

1097 i‡(!
m©ch
 && 
	`igt_‰ame_dump_is_íabÀd
()) {

1098 
ª„ªn˚_¸c
 = 
	`chamñium_ˇlcuœã_fb_¸c
(
chamñium
->
drm_fd
,

1099 
fb
);

1100 
ˇ±uª_¸c
 = 
	`chamñium_gë_¸c_f‹_¨ó
(
chamñium
, 
p‹t
, 0, 0,

1103 
ª„ªn˚_suffix
 = 
	`igt_¸c_to_°rög_exãnded
(
ª„ªn˚_¸c
,

1105 
ˇ±uª_suffix
 = 
	`igt_¸c_to_°rög_exãnded
(
ˇ±uª_¸c
, '-',

1109 
	`igt_wrôe_com∑ªd_‰ames_to_≤g
(
ª„ªn˚
, 
ˇ±uª
,

1110 
ª„ªn˚_suffix
,

1111 
ˇ±uª_suffix
);

1113 
	`‰ì
(
ª„ªn˚_suffix
);

1114 
	`‰ì
(
ˇ±uª_suffix
);

1117 
	`ˇúo_surÁ˚_de°roy
(
ˇ±uª
);

1119 
	`igt_as£π
(
m©ch
);

1120 
	}
}

1138 
	$chamñium_¸›_™Æog_‰ame
(
chamñium_‰ame_dump
 *
dump
, 
width
,

1139 
height
)

1141 *
bgr
;

1142 *
p
;

1143 *
q
;

1144 
t›
, 
À·
;

1145 
x
, 
y
, 
xx
, 
yy
;

1146 
sc‹e
;

1148 i‡(
dump
->
width
 =width && dump->
height
 == height)

1152 
t›
 = 
dump
->
height
 - height;

1153 
À·
 = 
dump
->
width
 - width;

1155 
	`igt_as£π
(
t›
 >0 && 
À·
 >= 0);

1157 
	`igt_debug
("Cr›pögá«log fømê‰om %dx%dÅÿ%dx%d\n", 
dump
->
width
,

1158 
dump
->
height
, 
width
, height);

1161 
x
 = 0; x < 
dump
->
width
; x++) {

1162 
y
 = 0; y < 
dump
->
height
; y++) {

1163 
p
 = &
dump
->
bgr
[(
x
 + 
y
 * dump->
width
) * 3];

1166 i‡(
p
[0] < 50 &&Ö[1] < 50 &&Ö[2] < 50)

1173 
sc‹e
 = 0;

1174 
xx
 = 
x
; xx < x + 10; xx++) {

1175 
yy
 = 
y
; yy < y + 10; yy++) {

1176 
p
 = &
dump
->
bgr
[(
xx
 + 
yy
 * dump->
width
) * 3];

1178 i‡(
p
[0] > 50 &&Ö[1] > 50 &&Ö[2] > 50)

1179 
sc‹e
++;

1184 i‡(
sc‹e
 < 25)

1187 i‡(
x
 < 
À·
)

1188 
À·
 = 
x
;

1190 i‡(
y
 < 
t›
)

1191 
t›
 = 
y
;

1193 i‡(
À·
 =
x
 || 
t›
 =
y
)

1198 
	`igt_debug
("Dëe˘edá«log fømêedge†© %dx%d\n", 
À·
, 
t›
);

1201 
bgr
 = 
	`mÆloc
(
width
 * 
height
 * 3);

1203 
y
 = 0; y < 
height
; y++) {

1204 
p
 = &
dump
->
bgr
[(
À·
 + (
t›
 + 
y
Ë* dump->
width
) * 3];

1205 
q
 = &
bgr
[(
y
 * 
width
) * 3];

1206 
	`mem˝y
(
q
, 
p
, 
width
 * 3);

1209 
	`‰ì
(
dump
->
bgr
);

1210 
dump
->
width
 = width;

1211 
dump
->
height
 = height;

1212 
dump
->
bgr
 = bgr;

1213 
	}
}

1229 
	$chamñium_gë_‰ame_limô
(
chamñium
 *chamelium,

1230 
chamñium_p‹t
 *
p‹t
,

1231 
w
, 
h
)

1233 
xmÃpc_vÆue
 *
ªs
;

1234 
ªt
;

1236 i‡(!
w
 && !
h
)

1237 
	`chamñium_p‹t_gë_ªsﬁuti⁄
(
chamñium
, 
p‹t
, &
w
, &
h
);

1239 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
p‹t
, "GetMaxFrameLimit", "(iii)",

1240 
p‹t
->
id
, 
w
, 
h
);

1242 
	`xmÃpc_ªad_öt
(&
chamñium
->
ív
, 
ªs
, &
ªt
);

1243 
	`xmÃpc_DECREF
(
ªs
);

1245  
ªt
;

1246 
	}
}

1248 
uöt32_t
 
	$chamñium_xrgb_hash16
(c⁄° *
buf„r
, 
width
,

1249 
height
, 
k
, 
m
)

1251 
r
, 
g
, 
b
;

1252 
uöt64_t
 
sum
 = 0;

1253 
uöt64_t
 
cou¡
 = 0;

1254 
uöt64_t
 
vÆue
;

1255 
uöt32_t
 
hash
;

1256 
ödex
;

1257 
i
;

1259 
i
=0; i < 
width
 * 
height
; i++) {

1260 i‡((
i
 % 
m
Ë!
k
)

1263 
ödex
 = 
i
 * 4;

1265 
r
 = 
buf„r
[
ödex
 + 2];

1266 
g
 = 
buf„r
[
ödex
 + 1];

1267 
b
 = 
buf„r
[
ödex
 + 0];

1269 
vÆue
 = 
r
 | (
g
 << 8Ë| (
b
 << 16);

1270 
sum
 +++
cou¡
 * 
vÆue
;

1273 
hash
 = ((
sum
 >> 0) ^ (sum >> 16) ^ (sum >> 32) ^ (sum >> 48)) & 0xffff;

1275  
hash
;

1276 
	}
}

1278 
	$chamñium_do_ˇlcuœã_fb_¸c
(
ˇúo_surÁ˚_t
 *
fb_surÁ˚
,

1279 
igt_¸c_t
 *
out
)

1281 *
buf„r
;

1282 
n
 = 4;

1283 
w
, 
h
;

1284 
i
, 
j
;

1286 
buf„r
 = 
	`ˇúo_image_surÁ˚_gë_d©a
(
fb_surÁ˚
);

1287 
w
 = 
	`ˇúo_image_surÁ˚_gë_width
(
fb_surÁ˚
);

1288 
h
 = 
	`ˇúo_image_surÁ˚_gë_height
(
fb_surÁ˚
);

1290 
i
 = 0; i < 
n
; i++) {

1291 
j
 = 
n
 - 
i
 - 1;

1292 
out
->
¸c
[
i
] = 
	`chamñium_xrgb_hash16
(
buf„r
, 
w
, 
h
, 
j
, 
n
);

1295 
out
->
n_w‹ds
 = 
n
;

1296 
	}
}

1308 
igt_¸c_t
 *
	$chamñium_ˇlcuœã_fb_¸c
(
fd
, 
igt_fb
 *
fb
)

1310 
igt_¸c_t
 *
ªt
 = 
	`ˇŒoc
(1, (igt_crc_t));

1311 
ˇúo_surÁ˚_t
 *
fb_surÁ˚
;

1314 
fb_surÁ˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
fd
, 
fb
);

1316 
	`chamñium_do_ˇlcuœã_fb_¸c
(
fb_surÁ˚
, 
ªt
);

1318  
ªt
;

1319 
	}
}

1321 *
	$chamñium_ˇlcuœã_fb_¸c_async_w‹k
(*
d©a
)

1323 
chamñium_fb_¸c_async_d©a
 *
fb_¸c
;

1325 
fb_¸c
 = (
chamñium_fb_¸c_async_d©a
 *Ë
d©a
;

1327 
	`chamñium_do_ˇlcuœã_fb_¸c
(
fb_¸c
->
fb_surÁ˚
, fb_¸c->
ªt
);

1329  
NULL
;

1330 
	}
}

1346 
chamñium_fb_¸c_async_d©a
 *
	$chamñium_ˇlcuœã_fb_¸c_async_°¨t
(
fd
,

1347 
igt_fb
 *
fb
)

1349 
chamñium_fb_¸c_async_d©a
 *
fb_¸c
;

1351 
fb_¸c
 = 
	`ˇŒoc
(1, (
chamñium_fb_¸c_async_d©a
));

1352 
fb_¸c
->
ªt
 = 
	`ˇŒoc
(1, (
igt_¸c_t
));

1355 
fb_¸c
->
fb_surÁ˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
fd
, 
fb
);

1357 
	`±hªad_¸óã
(&
fb_¸c
->
thªad_id
, 
NULL
,

1358 
chamñium_ˇlcuœã_fb_¸c_async_w‹k
, 
fb_¸c
);

1360  
fb_¸c
;

1361 
	}
}

1372 
igt_¸c_t
 *
	$chamñium_ˇlcuœã_fb_¸c_async_föish
(
chamñium_fb_¸c_async_d©a
 *
fb_¸c
)

1374 
igt_¸c_t
 *
ªt
;

1376 
	`±hªad_joö
(
fb_¸c
->
thªad_id
, 
NULL
);

1378 
ªt
 = 
fb_¸c
->ret;

1379 
	`‰ì
(
fb_¸c
);

1381  
ªt
;

1382 
	}
}

1384 
	$chamñium_gë_p‹t_ty≥
(
chamñium
 *chamelium,

1385 
chamñium_p‹t
 *
p‹t
)

1387 
xmÃpc_vÆue
 *
ªs
;

1388 c⁄° *
p‹t_ty≥_°r
;

1389 
p‹t_ty≥
;

1391 
ªs
 = 
	`chamñium_Ωc
(
chamñium
, 
NULL
, "GetConnectorType",

1392 "(i)", 
p‹t
->
id
);

1394 
	`xmÃpc_ªad_°rög
(&
chamñium
->
ív
, 
ªs
, &
p‹t_ty≥_°r
);

1395 
	`igt_debug
("P‹à%d i†o‡ty≥ '%s'\n", 
p‹t
->
id
, 
p‹t_ty≥_°r
);

1397 i‡(
	`°rcmp
(
p‹t_ty≥_°r
, "DP") == 0)

1398 
p‹t_ty≥
 = 
DRM_MODE_CONNECTOR_Di•œyP‹t
;

1399 i‡(
	`°rcmp
(
p‹t_ty≥_°r
, "HDMI") == 0)

1400 
p‹t_ty≥
 = 
DRM_MODE_CONNECTOR_HDMIA
;

1401 i‡(
	`°rcmp
(
p‹t_ty≥_°r
, "VGA") == 0)

1402 
p‹t_ty≥
 = 
DRM_MODE_CONNECTOR_VGA
;

1404 
p‹t_ty≥
 = 
DRM_MODE_CONNECTOR_Unknown
;

1406 
	`‰ì
((*)
p‹t_ty≥_°r
);

1407 
	`xmÃpc_DECREF
(
ªs
);

1409  
p‹t_ty≥
;

1410 
	}
}

1412 
boﬁ
 
	$chamñium_ªad_p‹t_m≠pögs
(
chamñium
 *chamelium,

1413 
drm_fd
)

1415 
drmModeRes
 *
ªs
;

1416 
drmModeC⁄√˘‹
 *
c⁄√˘‹
;

1417 
chamñium_p‹t
 *
p‹t
;

1418 
GEº‹
 *
îr‹
 = 
NULL
;

1419 **
group_li°
;

1420 *
group
, *
m≠_«me
;

1421 
p‹t_i
, 
i
, 
j
;

1422 
boﬁ
 
ªt
 = 
åue
;

1424 
group_li°
 = 
	`g_key_fûe_gë_groups
(
igt_key_fûe
, 
NULL
);

1427 
i
 = 0; 
group_li°
[i] !
NULL
; i++) {

1428 i‡(
	`°r°r
(
group_li°
[
i
], "Chamelium:"))

1429 
chamñium
->
p‹t_cou¡
++;

1432 
chamñium
->
p‹ts
 = 
	`ˇŒoc
((
chamñium_p‹t
),

1433 
chamñium
->
p‹t_cou¡
);

1434 
p‹t_i
 = 0;

1435 
ªs
 = 
	`drmModeGëResour˚s
(
drm_fd
);

1437 
i
 = 0; 
group_li°
[i] !
NULL
; i++) {

1438 
group
 = 
group_li°
[
i
];

1440 i‡(!
	`°r°r
(
group
, "Chamelium:"))

1443 
m≠_«me
 = 
group
 + (("Chamelium:") - 1);

1445 
p‹t
 = &
chamñium
->
p‹ts
[
p‹t_i
++];

1446 
p‹t
->
«me
 = 
	`°rdup
(
m≠_«me
);

1447 
p‹t
->
id
 = 
	`g_key_fûe_gë_öãgî
(
igt_key_fûe
, 
group
,

1449 &
îr‹
);

1450 i‡(!
p‹t
->
id
) {

1451 
	`igt_w¨n
("FailedÅoÑead chameliumÖort ID for %s: %s\n",

1452 
m≠_«me
, 
îr‹
->
mesßge
);

1453 
ªt
 = 
Ál£
;

1454 
out
;

1457 
p‹t
->
ty≥
 = 
	`chamñium_gë_p‹t_ty≥
(
chamñium
,Öort);

1458 i‡(
p‹t
->
ty≥
 =
DRM_MODE_CONNECTOR_Unknown
) {

1459 
	`igt_w¨n
("UnableÅoÑetrieveÅheÖhysicalÖortÅype fromÅhe Chamelium for '%s'\n",

1460 
m≠_«me
);

1461 
ªt
 = 
Ál£
;

1462 
out
;

1465 
j
 = 0;

1466 
j
 < 
ªs
->
cou¡_c⁄√˘‹s
 && !
p‹t
->
c⁄√˘‹_id
;

1467 
j
++) {

1468 
«me
[50];

1470 
c⁄√˘‹
 = 
	`drmModeGëC⁄√˘‹Cuºít
(

1471 
drm_fd
, 
ªs
->
c⁄√˘‹s
[
j
]);

1474 
	`¢¥ötf
(
«me
, 50, "%s-%u",

1475 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c⁄√˘‹
->
c⁄√˘‹_ty≥
),

1476 
c⁄√˘‹
->
c⁄√˘‹_ty≥_id
);

1478 i‡(
	`°rcmp
(
«me
, 
m≠_«me
) == 0)

1479 
p‹t
->
c⁄√˘‹_id
 = 
c⁄√˘‹
->connector_id;

1481 
	`drmModeFªeC⁄√˘‹
(
c⁄√˘‹
);

1483 i‡(!
p‹t
->
c⁄√˘‹_id
) {

1484 
	`igt_w¨n
("No connector found withÇame '%s'\n",

1485 
m≠_«me
);

1486 
ªt
 = 
Ál£
;

1487 
out
;

1490 
	`igt_debug
("Port '%s' withÖhysicalÅype '%s' mappedÅo ChameliumÖort %d\n",

1491 
m≠_«me
, 
	`km°e°_c⁄√˘‹_ty≥_°r
(
p‹t
->
ty≥
),

1492 
p‹t
->
id
);

1495 
out
:

1496 
	`drmModeFªeResour˚s
(
ªs
);

1497 
	`g_°r‰ìv
(
group_li°
);

1499  
ªt
;

1500 
	}
}

1502 
boﬁ
 
	$chamñium_ªad_c⁄fig
(
chamñium
 *chamñium, 
drm_fd
)

1504 
GEº‹
 *
îr‹
 = 
NULL
;

1506 i‡(!
igt_key_fûe
) {

1507 
	`igt_w¨n
("No configuration fileávailable for chamelium\n");

1508  
Ál£
;

1511 
chamñium
->
uæ
 = 
	`g_key_fûe_gë_°rög
(
igt_key_fûe
, "Chamelium", "URL",

1512 &
îr‹
);

1513 i‡(!
chamñium
->
uæ
) {

1514 
	`igt_w¨n
("Couldn'tÑead chamelium URL from config file: %s\n",

1515 
îr‹
->
mesßge
);

1516  
Ál£
;

1519  
	`chamñium_ªad_p‹t_m≠pögs
(
chamñium
, 
drm_fd
);

1520 
	}
}

1529 
	$chamñium_ª£t
(
chamñium
 *chamelium)

1531 
	`igt_debug
("ResettingÅhe chamelium\n");

1532 
	`xmÃpc_DECREF
(
	`chamñium_Ωc
(
chamñium
, 
NULL
, "Reset", "()"));

1533 
	}
}

1535 
	$chamñium_exô_h™dÀr
(
sig
)

1537 
	`igt_debug
("Deinitializing Chamelium\n");

1539 i‡(
˛ónup_ö°™˚
)

1540 
	`chamñium_deöô
(
˛ónup_ö°™˚
);

1541 
	}
}

1557 
chamñium
 *
	$chamñium_öô
(
drm_fd
)

1559 
chamñium
 *chamñium = 
	`mÆloc
((chamelium));

1561 i‡(!
chamñium
)

1562  
NULL
;

1567 i‡(
˛ónup_ö°™˚
)

1568 
	`chamñium_deöô
(
˛ónup_ö°™˚
);

1570 
	`mem£t
(
chamñium
, 0, (*chamelium));

1571 
chamñium
->
drm_fd
 = drm_fd;

1574 
	`xmÃpc_ív_öô
(&
chamñium
->
ív
);

1575 
	`xmÃpc_˛õ¡_£tup_globÆ_c⁄°
(&
chamñium
->
ív
);

1576 
	`xmÃpc_˛õ¡_¸óã
(&
chamñium
->
ív
, 
XMLRPC_CLIENT_NO_FLAGS
, 
PACKAGE
,

1577 
PACKAGE_VERSION
, 
NULL
, 0, &
chamñium
->
˛õ¡
);

1578 i‡(
chamñium
->
ív
.
Áu…_occuºed
) {

1579 
	`igt_debug
("FailedÅo init xmlrpc: %s\n",

1580 
chamñium
->
ív
.
Áu…_°rög
);

1581 
îr‹
;

1584 i‡(!
	`chamñium_ªad_c⁄fig
(
chamñium
, 
drm_fd
))

1585 
îr‹
;

1587 
˛ónup_ö°™˚
 = 
chamñium
;

1588 
	`igt_ö°Æl_exô_h™dÀr
(
chamñium_exô_h™dÀr
);

1590  
chamñium
;

1592 
îr‹
:

1593 
	`xmÃpc_ív_˛ón
(&
chamñium
->
ív
);

1594 
	`‰ì
(
chamñium
);

1596  
NULL
;

1597 
	}
}

1609 
	$chamñium_deöô
(
chamñium
 *chamelium)

1611 
i
;

1612 
chamñium_edid
 *
pos
, *
tmp
;

1618 
	`chamñium_ª£t
(
chamñium
);

1619 
i
 = 0; i < 
chamñium
->
p‹t_cou¡
; i++)

1620 
	`chamñium_∂ug
(
chamñium
, &chamñium->
p‹ts
[
i
]);

1623 
	`igt_li°_f‹_óch_ß„
(
pos
, 
tmp
, &
chamñium
->
edids
->
lök
,Üink) {

1624 
	`chamñium_de°roy_edid
(
chamñium
, 
pos
->
id
);

1625 
	`‰ì
(
pos
);

1628 
	`xmÃpc_˛õ¡_de°roy
(
chamñium
->
˛õ¡
);

1629 
	`xmÃpc_ív_˛ón
(&
chamñium
->
ív
);

1631 
i
 = 0; i < 
chamñium
->
p‹t_cou¡
; i++)

1632 
	`‰ì
(
chamñium
->
p‹ts
[
i
].
«me
);

1634 
	`‰ì
(
chamñium
->
p‹ts
);

1635 
	`‰ì
(
chamñium
);

1636 
	}
}

1638 
	gigt_c⁄°ru˘‹
 {

1644 
xmÃpc_limô_£t
(
XMLRPC_XML_SIZE_LIMIT_ID
, 15728640);

	@igt_chamelium.h

26 #i‚de‡
IGT_CHAMELIUM_H


27 
	#IGT_CHAMELIUM_H


	)

29 
	~"c⁄fig.h
"

31 
	~<°dboﬁ.h
>

32 
	~<xf86drmMode.h
>

34 
	~"igt_debugfs.h
"

36 
	gigt_fb
;

38 
	gchamñium
;

39 
	gchamñium_p‹t
;

40 
	gchamñium_‰ame_dump
;

41 
	gchamñium_fb_¸c_async_d©a
;

43 
chamñium
 *
chamñium_öô
(
drm_fd
);

44 
chamñium_deöô
(
chamñium
 *chamelium);

45 
chamñium_ª£t
(
chamñium
 *chamelium);

47 
chamñium_p‹t
 **
chamñium_gë_p‹ts
(
chamñium
 *chamelium,

48 *
cou¡
);

49 
chamñium_p‹t_gë_ty≥
(c⁄° 
chamñium_p‹t
 *
p‹t
);

50 
drmModeC⁄√˘‹
 *
chamñium_p‹t_gë_c⁄√˘‹
(
chamñium
 *chamelium,

51 
chamñium_p‹t
 *
p‹t
,

52 
boﬁ
 
ª¥obe
);

53 c⁄° *
chamñium_p‹t_gë_«me
(
chamñium_p‹t
 *
p‹t
);

55 
chamñium_∂ug
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
);

56 
chamñium_u≈lug
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
);

57 
boﬁ
 
chamñium_is_∂ugged
(
chamñium
 *chamelium,

58 
chamñium_p‹t
 *
p‹t
);

59 
boﬁ
 
chamñium_p‹t_waô_video_öput_°abÀ
(
chamñium
 *chamelium,

60 
chamñium_p‹t
 *
p‹t
,

61 
timeout_£cs
);

62 
chamñium_fúe_mixed_hpd_pul£s
(
chamñium
 *chamelium,

63 
chamñium_p‹t
 *
p‹t
, ...);

64 
chamñium_fúe_hpd_pul£s
(
chamñium
 *chamelium,

65 
chamñium_p‹t
 *
p‹t
,

66 
width_m£c
, 
cou¡
);

67 
chamñium_scheduÀ_hpd_toggÀ
(
chamñium
 *chamelium,

68 
chamñium_p‹t
 *
p‹t
, 
dñay_ms
,

69 
boﬁ
 
risög_edge
);

70 
chamñium_√w_edid
(
chamñium
 *chamñium, c⁄° *
edid
);

71 
chamñium_p‹t_£t_edid
(
chamñium
 *chamelium,

72 
chamñium_p‹t
 *
p‹t
, 
edid_id
);

73 
boﬁ
 
chamñium_p‹t_gë_ddc_°©e
(
chamñium
 *chamelium,

74 
chamñium_p‹t
 *
p‹t
);

75 
chamñium_p‹t_£t_ddc_°©e
(
chamñium
 *chamelium,

76 
chamñium_p‹t
 *
p‹t
,

77 
boﬁ
 
íabÀd
);

78 
chamñium_p‹t_gë_ªsﬁuti⁄
(
chamñium
 *chamelium,

79 
chamñium_p‹t
 *
p‹t
,

80 *
x
, *
y
);

81 
igt_¸c_t
 *
chamñium_gë_¸c_f‹_¨ó
(
chamñium
 *chamelium,

82 
chamñium_p‹t
 *
p‹t
,

83 
x
, 
y
, 
w
, 
h
);

84 
chamñium_°¨t_ˇ±uª
(
chamñium
 *chamelium,

85 
chamñium_p‹t
 *
p‹t
,

86 
x
, 
y
, 
w
, 
h
);

87 
chamñium_°›_ˇ±uª
(
chamñium
 *chamñium, 
‰ame_cou¡
);

88 
chamñium_ˇ±uª
(
chamñium
 *chamñium, 
chamñium_p‹t
 *
p‹t
,

89 
x
, 
y
, 
w
, 
h
, 
‰ame_cou¡
);

90 
igt_¸c_t
 *
chamñium_ªad_ˇ±uªd_¸cs
(
chamñium
 *chamelium,

91 *
‰ame_cou¡
);

92 
chamñium_‰ame_dump
 *
chamñium_ªad_ˇ±uªd_‰ame
(
chamñium
 *chamelium,

93 
ödex
);

94 
chamñium_‰ame_dump
 *
chamñium_p‹t_dump_pixñs
(
chamñium
 *chamelium,

95 
chamñium_p‹t
 *
p‹t
,

96 
x
, 
y
,

97 
w
, 
h
);

98 
igt_¸c_t
 *
chamñium_ˇlcuœã_fb_¸c
(
fd
, 
igt_fb
 *
fb
);

99 
chamñium_fb_¸c_async_d©a
 *
chamñium_ˇlcuœã_fb_¸c_async_°¨t
(
fd
,

100 
igt_fb
 *
fb
);

101 
igt_¸c_t
 *
chamñium_ˇlcuœã_fb_¸c_async_föish
(
chamñium_fb_¸c_async_d©a
 *
fb_¸c
);

102 
chamñium_gë_ˇ±uªd_‰ame_cou¡
(
chamñium
 *chamelium);

103 
chamñium_gë_‰ame_limô
(
chamñium
 *chamelium,

104 
chamñium_p‹t
 *
p‹t
,

105 
w
, 
h
);

106 
chamñium_as£π_‰ame_eq
(c⁄° 
chamñium
 *chamelium,

107 c⁄° 
chamñium_‰ame_dump
 *
dump
,

108 
igt_fb
 *
fb
);

109 
chamñium_as£π_¸c_eq_‹_dump
(
chamñium
 *chamelium,

110 
igt_¸c_t
 *
ª„ªn˚_¸c
,

111 
igt_¸c_t
 *
ˇ±uª_¸c
, 
igt_fb
 *
fb
,

112 
ödex
);

113 
chamñium_as£π_™Æog_‰ame_m©ch_‹_dump
(
chamñium
 *chamelium,

114 
chamñium_p‹t
 *
p‹t
,

115 c⁄° 
chamñium_‰ame_dump
 *
‰ame
,

116 
igt_fb
 *
fb
);

117 
chamñium_¸›_™Æog_‰ame
(
chamñium_‰ame_dump
 *
dump
, 
width
,

118 
height
);

119 
chamñium_de°roy_‰ame_dump
(
chamñium_‰ame_dump
 *
dump
);

	@igt_core.c

29 #ifde‡
HAVE_LIBGEN_H


30 
	~<libgí.h
>

32 
	~<°dio.h
>

33 
	~<as£π.h
>

34 
	~<f˙é.h
>

35 
	~<sys/°©.h
>

36 
	~<sys/io˘l.h
>

37 
	~<°rög.h
>

38 
	~<sys/mm™.h
>

39 
	~<sig«l.h
>

40 
	~<pcüc˚ss.h
>

41 
	~<gë›t.h
>

42 
	~<°dlib.h
>

43 
	~<uni°d.h
>

44 
	~<sys/waô.h
>

45 
	~<sys/ty≥s.h
>

46 #ifde‡
__löux__


47 
	~<sys/sysˇŒ.h
>

49 
	~<±hªad.h
>

50 
	~<sys/ut¢ame.h
>

51 
	~<ãrmios.h
>

52 
	~<î∫o.h
>

53 
	~<time.h
>

54 
	~<˘y≥.h
>

55 
	~<limôs.h
>

56 
	~<loˇÀ.h
>

57 
	~<uwûdm©/uwûdm©.h
>

58 #ifde‡
HAVE_GLIB


59 
	~<glib.h
>

62 
	~"drmã°.h
"

63 
	~"öãl_chù£t.h
"

64 
	~"öãl_io.h
"

65 
	~"igt_debugfs.h
"

66 
	~"vîsi⁄.h
"

67 
	~"c⁄fig.h
"

69 
	~"igt_c‹e.h
"

70 
	~"igt_aux.h
"

71 
	~"igt_sysfs.h
"

72 
	~"igt_rc.h
"

74 #ifde‡
HAVE_LIBGEN_H


75 
	~<libgí.h
>

253 
	gexô_h™dÀr_cou¡
;

254 c⁄° *
	gigt_öãø˘ive_debug
;

257 
boﬁ
 
	gli°_subã°s
 = 
Ál£
;

258 *
	grun_sögÀ_subã°
 = 
NULL
;

259 
boﬁ
 
	grun_sögÀ_subã°_found
 = 
Ál£
;

260 c⁄° *
	gö_subã°
 = 
NULL
;

261 
time•ec
 
	gsubã°_time
;

262 
˛ockid_t
 
	gigt_˛ock
 = (clockid_t)-1;

263 
boﬁ
 
	gö_fixtuª
 = 
Ál£
;

264 
boﬁ
 
	gã°_wôh_subã°s
 = 
Ál£
;

265 
boﬁ
 
	gö_©exô_h™dÀr
 = 
Ál£
;

267 
	mCONT
 = 0, 
	mSKIP
, 
	mFAIL


268 } 
	gskù_subã°s_hí˚f‹th
 = 
CONT
;

270 
boﬁ
 
	g__igt_∂aö_ouçut
 = 
Ál£
;

273 
pid_t
 *
	gã°_chûdªn
;

274 
	gnum_ã°_chûdªn
;

275 
	gã°_chûdªn_sz
;

276 
boﬁ
 
	gã°_chûd
;

279 
	mOPT_LIST_SUBTESTS
,

280 
	mOPT_RUN_SUBTEST
,

281 
	mOPT_DESCRIPTION
,

282 
	mOPT_DEBUG
,

283 
	mOPT_INTERACTIVE_DEBUG
,

284 
	mOPT_HELP
 = 'h'

287 
	gigt_exôcode
 = 
IGT_EXIT_SUCCESS
;

288 c⁄° *
	gcomm™d_°r
;

290 * 
	gigt_log_domaö_fûãr
;

292 *
	míåõs
[256];

293 
uöt8_t
 
	m°¨t
, 
	míd
;

294 } 
	glog_buf„r
;

295 
±hªad_muãx_t
 
	glog_buf„r_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

297 #ifde‡
HAVE_GLIB


298 
GKeyFûe
 *
	gigt_key_fûe
;

301 *
	gigt_‰ame_dump_∑th
;

303 c⁄° *
	$igt_ã°_«me
()

305  
comm™d_°r
;

306 
	}
}

308 
	$_igt_log_buf„r_≠≥nd
(*
löe
)

310 
	`±hªad_muãx_lock
(&
log_buf„r_muãx
);

312 
	`‰ì
(
log_buf„r
.
íåõs
[log_buf„r.
íd
]);

313 
log_buf„r
.
íåõs
[log_buf„r.
íd
] = 
löe
;

314 
log_buf„r
.
íd
++;

315 i‡(
log_buf„r
.
íd
 =log_buf„r.
°¨t
)

316 
log_buf„r
.
°¨t
++;

318 
	`±hªad_muãx_u∆ock
(&
log_buf„r_muãx
);

319 
	}
}

321 
	$_igt_log_buf„r_ª£t
()

323 
	`±hªad_muãx_lock
(&
log_buf„r_muãx
);

325 
log_buf„r
.
°¨t
 =Üog_buf„r.
íd
 = 0;

327 
	`±hªad_muãx_u∆ock
(&
log_buf„r_muãx
);

328 
	}
}

330 
	$_igt_log_buf„r_dump
()

332 
uöt8_t
 
i
;

334 i‡(
ö_subã°
)

335 
	`Ârötf
(
°dîr
, "Subã° %†Áûed.\n", 
ö_subã°
);

337 
	`Ârötf
(
°dîr
, "Te° %†Áûed.\n", 
comm™d_°r
);

339 i‡(
log_buf„r
.
°¨t
 =log_buf„r.
íd
) {

340 
	`Ârötf
(
°dîr
, "NoÜog.\n");

344 
	`±hªad_muãx_lock
(&
log_buf„r_muãx
);

345 
	`Ârötf
(
°dîr
, "**** DEBUG ****\n");

347 
i
 = 
log_buf„r
.
°¨t
;

349 *
œ°_löe
 = 
log_buf„r
.
íåõs
[
i
];

350 
	`Ârötf
(
°dîr
, "%s", 
œ°_löe
);

351 
i
++;

352 } 
i
 !
log_buf„r
.
°¨t
 && i !log_buf„r.
íd
);

355 
log_buf„r
.
°¨t
 =Üog_buf„r.
íd
 = 0;

357 
	`Ârötf
(
°dîr
, "**** END ****\n");

358 
	`±hªad_muãx_u∆ock
(&
log_buf„r_muãx
);

359 
	}
}

370 
	$igt_log_buf„r_ö•e˘
(
igt_buf„r_log_h™dÀr_t
 
check
, *
d©a
)

372 
uöt8_t
 
i
;

373 
	`±hªad_muãx_lock
(&
log_buf„r_muãx
);

375 
i
 = 
log_buf„r
.
°¨t
;

377 i‡(
	`check
(
log_buf„r
.
íåõs
[
i
], 
d©a
))

379 
i
++;

380 } 
i
 !
log_buf„r
.
°¨t
 && i !log_buf„r.
íd
);

382 
	`±hªad_muãx_u∆ock
(&
log_buf„r_muãx
);

383 
	}
}

385 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 1, 2)))

386 
	$kmsg
(c⁄° *
f‹m©
, ...)

387 
	#KERN_EMER
 "<0>"

	)

388 
	#KERN_ALERT
 "<1>"

	)

389 
	#KERN_CRIT
 "<2>"

	)

390 
	#KERN_ERR
 "<3>"

	)

391 
	#KERN_WARNING
 "<4>"

	)

392 
	#KERN_NOTICE
 "<5>"

	)

393 
	#KERN_INFO
 "<6>"

	)

394 
	#KERN_DEBUG
 "<7>"

	)

396 
va_li°
 
≠
;

397 
FILE
 *
fûe
;

399 
fûe
 = 
	`f›í
("/dev/kmsg", "w");

400 i‡(
fûe
 =
NULL
)

403 
	`va_°¨t
(
≠
, 
f‹m©
);

404 
	`vÂrötf
(
fûe
, 
f‹m©
, 
≠
);

405 
	`va_íd
(
≠
);

407 
	`f˛o£
(
fûe
);

408 
	}
}

410 
	#time_vÆid
(
ts
Ë(—s)->
tv_£c
 || (ts)->
tv_n£c
)

	)

413 
	$time_ñ≠£d
(
time•ec
 *
thí
,

414 
time•ec
* 
now
)

416 
ñ≠£d
 = -1.;

418 i‡(
	`time_vÆid
(
thí
Ë&&Åime_vÆid(
now
)) {

419 
ñ≠£d
 = 
now
->
tv_£c
 - 
thí
->tv_sec;

420 
ñ≠£d
 +(
now
->
tv_n£c
 - 
thí
->tv_nsec) * 1e-9;

423  
ñ≠£d
;

424 
	}
}

426 
	$gëtime
(
time•ec
 *
ts
)

428 
	`mem£t
(
ts
, 0, (*ts));

429 
î∫o
 = 0;

432 i‡(
igt_˛ock
 !(
˛ockid_t
)-1) {

433 i‡(
	`˛ock_gëtime
(
igt_˛ock
, 
ts
))

434 
îr‹
;

438 #ifde‡
CLOCK_MONOTONIC_RAW


439 i‡(!
	`˛ock_gëtime
(
igt_˛ock
 = 
CLOCK_MONOTONIC_RAW
, 
ts
))

442 #ifde‡
CLOCK_MONOTONIC_COARSE


443 i‡(!
	`˛ock_gëtime
(
igt_˛ock
 = 
CLOCK_MONOTONIC_COARSE
, 
ts
))

446 i‡(!
	`˛ock_gëtime
(
igt_˛ock
 = 
CLOCK_MONOTONIC
, 
ts
))

448 
îr‹
:

449 
	`igt_w¨n
("CouldÇotÑead monotonicÅime: %s\n",

450 
	`°ªº‹
(
î∫o
));

452  -
î∫o
;

453 
	}
}

455 
uöt64_t
 
	$igt_n£c_ñ≠£d
(
time•ec
 *
°¨t
)

457 
time•ec
 
now
;

459 
	`gëtime
(&
now
);

460 i‡((
°¨t
->
tv_£c
 | sèπ->
tv_n£c
) == 0) {

461 *
°¨t
 = 
now
;

465  ((
now
.
tv_n£c
 - 
°¨t
->tv_nsec) +

466 (
uöt64_t
)
NSEC_PER_SEC
*(
now
.
tv_£c
 - 
°¨t
->tv_sec));

467 
	}
}

469 
boﬁ
 
	$__igt_fixtuª
()

471 
	`as£π
(!
ö_fixtuª
);

473 i‡(
	`igt_⁄ly_li°_subã°s
())

474  
Ál£
;

476 i‡(
skù_subã°s_hí˚f‹th
)

477  
Ál£
;

479 
ö_fixtuª
 = 
åue
;

480  
åue
;

481 
	}
}

483 
	$__igt_fixtuª_com∂ëe
()

485 
	`as£π
(
ö_fixtuª
);

487 
ö_fixtuª
 = 
Ál£
;

488 
	}
}

490 
	$__igt_fixtuª_íd
()

492 
	`as£π
(
ö_fixtuª
);

494 
ö_fixtuª
 = 
Ál£
;

495 
	`sigl⁄gjmp
(
igt_subã°_jmpbuf
, 1);

496 
	}
}

514 
	$low_mem_kûÀr_dißbÀ
(
boﬁ
 
dißbÀ
)

516 c⁄° * 
adj_‚ame
="/sys/module/lowmemorykiller/parameters/adj";

517 c⁄° 
no_lowmem_kûÀr
[] = "9999";

518 
fd
;

519 
°©
 
buf
;

521 
¥ev_adj_sc‹es
[256];

522 
adj_sc‹es_Àn
 = 0;

523 
boﬁ
 
is_dißbÀd
 = 
Ál£
;

528 i‡(
	`°©
(
adj_‚ame
, &
buf
)) {

529 
	`igt_as£π
(
î∫o
 =
ENOENT
);

534 
	`chmod
(
adj_‚ame
, 
S_IRUSR
 | 
S_IWUSR
);

536 i‡(
dißbÀ
 && !
is_dißbÀd
) {

538 
fd
 = 
	`›í
(
adj_‚ame
, 
O_RDWR
);

539 
	`igt_as£π
(
fd
 != -1);

540 
adj_sc‹es_Àn
 = 
	`ªad
(
fd
, (*)
¥ev_adj_sc‹es
, 255);

541 
	`igt_as£π
(
adj_sc‹es_Àn
 > 0);

546 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
no_lowmem_kûÀr
, (no_lowmem_killer)),

547 (
no_lowmem_kûÀr
));

548 
	`˛o£
(
fd
);

549 
is_dißbÀd
 = 
åue
;

550 } i‡(
is_dißbÀd
) {

552 
fd
 = 
	`›í
(
adj_‚ame
, 
O_WRONLY
);

553 
	`igt_as£π
(
fd
 != -1);

554 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
¥ev_adj_sc‹es
, 
adj_sc‹es_Àn
),

555 
adj_sc‹es_Àn
);

556 
	`˛o£
(
fd
);

557 
is_dißbÀd
 = 
Ál£
;

561 
	`chmod
(
adj_‚ame
, 
buf
.
°_mode
);

562 
	}
}

564 
boﬁ
 
	gigt_exô_ˇŒed
;

565 
	$comm⁄_exô_h™dÀr
(
sig
)

567 i‡(!
	`igt_⁄ly_li°_subã°s
()) {

568 
	`low_mem_kûÀr_dißbÀ
(
Ál£
);

569 
	`kick_fbc⁄
(
åue
);

574 
	`as£π
(
sig
 !0 || 
igt_exô_ˇŒed
);

575 
	}
}

577 
	$¥öt_ã°_des¸ùti⁄
()

579 i‡(&
__igt_ã°_des¸ùti⁄
)

580 
	`¥ötf
("%s\n", 
__igt_ã°_des¸ùti⁄
);

581 
	}
}

583 
	$¥öt_vîsi⁄
()

585 
ut¢ame
 
uts
;

587 i‡(
li°_subã°s
)

590 
	`u«me
(&
uts
);

592 
	`igt_öfo
("IGT-Vîsi⁄: %s-%†(%sË(%s: %†%s)\n", 
PACKAGE_VERSION
,

593 
IGT_GIT_SHA1
, 
TARGET_CPU_PLATFORM
,

594 
uts
.
sy¢ame
, uts.
ªÀa£
, uts.
machöe
);

595 
	}
}

597 
	$¥öt_ußge
(c⁄° *
hñp_°r
, 
boﬁ
 
ouçut_⁄_°dîr
)

599 
FILE
 *
f
 = 
ouçut_⁄_°dîr
 ? 
°dîr
 : 
°dout
;

601 
	`Ârötf
(
f
, "Ußge: %†[OPTIONS]\n", 
comm™d_°r
);

602 
	`Ârötf
(
f
, " --list-subtests\n"

608 i‡(
hñp_°r
)

609 
	`Ârötf
(
f
, "%s\n", 
hñp_°r
);

610 
	}
}

613 
	$oom_adju°_f‹_doom
()

615 
fd
;

616 c⁄° 
Æways_kûl
[] = "1000";

618 
fd
 = 
	`›í
("/¥oc/£lf/oom_sc‹e_adj", 
O_WRONLY
);

619 
	`igt_as£π
(
fd
 != -1);

620 
	`igt_as£π
(
	`wrôe
(
fd
, 
Æways_kûl
, (always_kill)) == (always_kill));

621 
	`˛o£
(
fd
);

623 
	}
}

625 #ifde‡
HAVE_GLIB


626 
	$comm⁄_öô_c⁄fig
()

628 *
key_fûe_ív
 = 
NULL
;

629 *
key_fûe_loc
 = 
NULL
;

630 
GEº‹
 *
îr‹
 = 
NULL
;

631 
ªt
;

634 
key_fûe_ív
 = 
	`gëív
("IGT_CONFIG_PATH");

635 i‡(
key_fûe_ív
) {

636 
key_fûe_loc
 = 
key_fûe_ív
;

638 
key_fûe_loc
 = 
	`mÆloc
(100);

639 
	`¢¥ötf
(
key_fûe_loc
, 100, "%s/.igåc", 
	`g_gë_home_dú
());

643 
igt_key_fûe
 = 
	`g_key_fûe_√w
();

644 
ªt
 = 
	`g_key_fûe_lﬂd_‰om_fûe
(
igt_key_fûe
, 
key_fûe_loc
,

645 
G_KEY_FILE_NONE
, &
îr‹
);

646 i‡(
îr‹
 &&Éº‹->
code
 =
G_KEY_FILE_ERROR
) {

647 
	`g_îr‹_‰ì
(
îr‹
);

648 
	`g_key_fûe_‰ì
(
igt_key_fûe
);

649 
igt_key_fûe
 = 
NULL
;

651 
out
;

654 
	`g_˛ór_îr‹
(&
îr‹
);

656 i‡(!
igt_‰ame_dump_∑th
)

657 
igt_‰ame_dump_∑th
 =

658 
	`g_key_fûe_gë_°rög
(
igt_key_fûe
, "Common",

659 "FømeDumpP©h", &
îr‹
);

661 
	`g_˛ór_îr‹
(&
îr‹
);

663 
ªt
 = 
	`g_key_fûe_gë_öãgî
(
igt_key_fûe
, "DUT", "SuspendResumeDelay",

664 &
îr‹
);

665 
	`as£π
(!
îr‹
 ||Éº‹->
code
 !
G_KEY_FILE_ERROR_INVALID_VALUE
);

667 
	`g_˛ór_îr‹
(&
îr‹
);

669 i‡(
ªt
 != 0)

670 
	`igt_£t_aut‹esume_dñay
(
ªt
);

672 
out
:

673 i‡(!
key_fûe_ív
 && 
key_fûe_loc
)

674 
	`‰ì
(
key_fûe_loc
);

675 
	}
}

678 
	$comm⁄_öô_ív
()

680 c⁄° *
ív
;

682 i‡(!
	`ißây
(
STDOUT_FILENO
Ë|| 
	`gëív
("IGT_PLAIN_OUTPUT"))

683 
__igt_∂aö_ouçut
 = 
åue
;

685 i‡(!
__igt_∂aö_ouçut
)

686 
	`£éoˇÀ
(
LC_ALL
, "");

688 
ív
 = 
	`gëív
("IGT_LOG_LEVEL");

689 i‡(
ív
) {

690 i‡(
	`°rcmp
(
ív
, "debug") == 0)

691 
igt_log_Àvñ
 = 
IGT_LOG_DEBUG
;

692 i‡(
	`°rcmp
(
ív
, "info") == 0)

693 
igt_log_Àvñ
 = 
IGT_LOG_INFO
;

694 i‡(
	`°rcmp
(
ív
, "warn") == 0)

695 
igt_log_Àvñ
 = 
IGT_LOG_WARN
;

696 i‡(
	`°rcmp
(
ív
, "none") == 0)

697 
igt_log_Àvñ
 = 
IGT_LOG_NONE
;

700 
igt_‰ame_dump_∑th
 = 
	`gëív
("IGT_FRAME_DUMP_PATH");

701 
	}
}

703 
	$comm⁄_öô
(*
¨gc
, **
¨gv
,

704 c⁄° *
exåa_sh‹t_›ts
,

705 c⁄° 
›ti⁄
 *
exåa_l⁄g_›ts
,

706 c⁄° *
hñp_°r
,

707 
igt_›t_h™dÀr_t
 
exåa_›t_h™dÀr
,

708 *
h™dÀr_d©a
)

710 
c
, 
›ti⁄_ödex
 = 0, 
i
, 
x
;

711 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

712 {"li°-subã°s", 0, 0, 
OPT_LIST_SUBTESTS
},

713 {"run-subã°", 1, 0, 
OPT_RUN_SUBTEST
},

714 {"hñp-des¸ùti⁄", 0, 0, 
OPT_DESCRIPTION
},

715 {"debug", 
›ti⁄Æ_¨gumít
, 0, 
OPT_DEBUG
},

716 {"öãø˘ive-debug", 
›ti⁄Æ_¨gumít
, 0, 
OPT_INTERACTIVE_DEBUG
},

717 {"hñp", 0, 0, 
OPT_HELP
},

720 *
sh‹t_›ts
;

721 c⁄° *
°d_sh‹t_›ts
 = "h";

722 
›ti⁄
 *
comböed_›ts
;

723 
exåa_›t_cou¡
;

724 
Æl_›t_cou¡
;

725 
ªt
 = 0;

727 
	`comm⁄_öô_ív
();

729 
comm™d_°r
 = 
¨gv
[0];

730 i‡(
	`°ºchr
(
comm™d_°r
, '/'))

731 
comm™d_°r
 = 
	`°ºchr
(command_str, '/') + 1;

734 
Æl_›t_cou¡
 = 0;

735 
exåa_l⁄g_›ts
 &&Éxåa_l⁄g_›ts[
Æl_›t_cou¡
].
«me
) {

738 
i
 = 0; 
l⁄g_›ti⁄s
[i].
«me
; i++)

739 i‡(
exåa_l⁄g_›ts
[
Æl_›t_cou¡
].
vÆ
 =
l⁄g_›ti⁄s
[
i
].val)

740 
	`igt_w¨n
("ConflictingÜong option values between --%sánd --%s\n",

741 
exåa_l⁄g_›ts
[
Æl_›t_cou¡
].
«me
,

742 
l⁄g_›ti⁄s
[
i
].
«me
);

745 i‡(
exåa_l⁄g_›ts
[
Æl_›t_cou¡
].
vÆ
 != ':'

746 && 
	`°rchr
(
°d_sh‹t_›ts
, 
exåa_l⁄g_›ts
[
Æl_›t_cou¡
].
vÆ
)) {

747 
	`igt_w¨n
("ConflictingÜongánd short option values between --%sánd -%s\n",

748 
exåa_l⁄g_›ts
[
Æl_›t_cou¡
].
«me
,

749 
l⁄g_›ti⁄s
[
i
].
«me
);

753 
Æl_›t_cou¡
++;

755 
exåa_›t_cou¡
 = 
Æl_›t_cou¡
;

758 
i
 = 0; 
exåa_sh‹t_›ts
 &&Éxtra_short_opts[i]; i++) {

760 i‡(
exåa_sh‹t_›ts
[
i
] == ':')

764 i‡(
	`°rchr
(
°d_sh‹t_›ts
, 
exåa_sh‹t_›ts
[
i
]))

765 
	`igt_w¨n
("C⁄Êi˘ög sh‹à›ti⁄: -%c\n", 
°d_sh‹t_›ts
[
i
]);

768 
x
 = 0; 
l⁄g_›ti⁄s
[x].
«me
; x++)

769 i‡(
l⁄g_›ti⁄s
[
x
].
vÆ
 =
exåa_sh‹t_›ts
[
i
])

770 
	`igt_w¨n
("Conflicting short optionándÜong option value: --%sánd -%c\n",

771 
l⁄g_›ti⁄s
[
x
].
«me
, 
exåa_sh‹t_›ts
[
i
]);

774 
Æl_›t_cou¡
 +
	`ARRAY_SIZE
(
l⁄g_›ti⁄s
);

776 
comböed_›ts
 = 
	`mÆloc
(
Æl_›t_cou¡
 * (*combined_opts));

777 
	`mem˝y
(
comböed_›ts
, 
exåa_l⁄g_›ts
,

778 
exåa_›t_cou¡
 * (*
comböed_›ts
));

781 
	`mem˝y
(&
comböed_›ts
[
exåa_›t_cou¡
], 
l⁄g_›ti⁄s
,

782 
	`ARRAY_SIZE
(
l⁄g_›ti⁄s
Ë* (*
comböed_›ts
));

784 
ªt
 = 
	`a•rötf
(&
sh‹t_›ts
, "%s%s",

785 
exåa_sh‹t_›ts
 ?Éxtra_short_opts : "",

786 
°d_sh‹t_›ts
);

787 
	`as£π
(
ªt
 >= 0);

789 (
c
 = 
	`gë›t_l⁄g
(*
¨gc
, 
¨gv
, 
sh‹t_›ts
, 
comböed_›ts
,

790 &
›ti⁄_ödex
)) != -1) {

791 
c
) {

792 
OPT_INTERACTIVE_DEBUG
:

793 i‡(
›èrg
 && 
	`°æí
(optarg) > 0)

794 
igt_öãø˘ive_debug
 = 
	`°rdup
(
›èrg
);

796 
igt_öãø˘ive_debug
 = "all";

798 
OPT_DEBUG
:

799 
igt_log_Àvñ
 = 
IGT_LOG_DEBUG
;

800 i‡(
›èrg
 && 
	`°æí
(optarg) > 0)

801 
igt_log_domaö_fûãr
 = 
	`°rdup
(
›èrg
);

803 
OPT_LIST_SUBTESTS
:

804 i‡(!
run_sögÀ_subã°
)

805 
li°_subã°s
 = 
åue
;

807 
OPT_RUN_SUBTEST
:

808 i‡(!
li°_subã°s
)

809 
run_sögÀ_subã°
 = 
	`°rdup
(
›èrg
);

811 
OPT_DESCRIPTION
:

812 
	`¥öt_ã°_des¸ùti⁄
();

813 
ªt
 = -1;

814 
out
;

815 
OPT_HELP
:

816 
	`¥öt_ußge
(
hñp_°r
, 
Ál£
);

817 
ªt
 = -1;

818 
out
;

820 
	`¥öt_ußge
(
hñp_°r
, 
åue
);

821 
ªt
 = -2;

822 
out
;

824 
ªt
 = 
	`exåa_›t_h™dÀr
(
c
, 
›ti⁄_ödex
, 
h™dÀr_d©a
);

825 i‡(
ªt
)

826 
out
;

830 #ifde‡
HAVE_GLIB


831 
	`comm⁄_öô_c⁄fig
();

834 
out
:

835 
	`‰ì
(
sh‹t_›ts
);

836 
	`‰ì
(
comböed_›ts
);

840 i‡(!
ã°_wôh_subã°s
) {

841 i‡(
run_sögÀ_subã°
) {

842 
	`igt_w¨n
("Unknow¿subã°: %s\n", 
run_sögÀ_subã°
);

843 
	`exô
(
IGT_EXIT_INVALID
);

845 i‡(
li°_subã°s
)

846 
	`exô
(
IGT_EXIT_INVALID
);

849 i‡(
ªt
 < 0)

851 
	`exô
(
ªt
 =-1 ? 0 : 
IGT_EXIT_INVALID
);

853 i‡(!
li°_subã°s
) {

854 
	`kick_fbc⁄
(
Ál£
);

855 
	`kmsg
(
KERN_INFO
 "[IGT] %s:Éxecutög\n", 
comm™d_°r
);

856 
	`¥öt_vîsi⁄
();

858 
	`sync
();

859 
	`oom_adju°_f‹_doom
();

860 
	`low_mem_kûÀr_dißbÀ
(
åue
);

864 
	`igt_ö°Æl_exô_h™dÀr
(
comm⁄_exô_h™dÀr
);

866 i‡(!
ã°_wôh_subã°s
)

867 
	`gëtime
(&
subã°_time
);

869 
i
 = 0; (
›töd
 + iË< *
¨gc
; i++)

870 
¨gv
[
i
 + 1] =árgv[
›töd
 + i];

872 *
¨gc
 = *¨g¯- 
›töd
 + 1;

874  
ªt
;

875 
	}
}

898 
	$igt_subã°_öô_∑r£_›ts
(*
¨gc
, **
¨gv
,

899 c⁄° *
exåa_sh‹t_›ts
,

900 c⁄° 
›ti⁄
 *
exåa_l⁄g_›ts
,

901 c⁄° *
hñp_°r
,

902 
igt_›t_h™dÀr_t
 
exåa_›t_h™dÀr
,

903 *
h™dÀr_d©a
)

905 
ªt
;

907 
ã°_wôh_subã°s
 = 
åue
;

908 
ªt
 = 
	`comm⁄_öô
(
¨gc
, 
¨gv
, 
exåa_sh‹t_›ts
, 
exåa_l⁄g_›ts
,

909 
hñp_°r
, 
exåa_›t_h™dÀr
, 
h™dÀr_d©a
);

911  
ªt
;

912 
	}
}

914 
igt_log_Àvñ
 
	gigt_log_Àvñ
 = 
IGT_LOG_INFO
;

929 
	$igt_sim∂e_öô_∑r£_›ts
(*
¨gc
, **
¨gv
,

930 c⁄° *
exåa_sh‹t_›ts
,

931 c⁄° 
›ti⁄
 *
exåa_l⁄g_›ts
,

932 c⁄° *
hñp_°r
,

933 
igt_›t_h™dÀr_t
 
exåa_›t_h™dÀr
,

934 *
h™dÀr_d©a
)

936 
	`comm⁄_öô
(
¨gc
, 
¨gv
, 
exåa_sh‹t_›ts
, 
exåa_l⁄g_›ts
, 
hñp_°r
,

937 
exåa_›t_h™dÀr
, 
h™dÀr_d©a
);

938 
	}
}

945 
boﬁ
 
	$__igt_run_subã°
(c⁄° *
subã°_«me
)

947 
i
;

949 
	`as£π
(!
ö_subã°
);

950 
	`as£π
(!
ö_fixtuª
);

951 
	`as£π
(
ã°_wôh_subã°s
);

954 
i
 = 0; 
subã°_«me
[i] != '\0'; i++)

955 i‡(
subã°_«me
[
i
] != '_' && subtest_name[i] != '-'

956 && !
	`iß um
(
subã°_«me
[
i
])) {

957 
	`igt_¸ôiˇl
("Invalid subtestÇame \"%s\".\n",

958 
subã°_«me
);

959 
	`igt_exô
();

962 i‡(
li°_subã°s
) {

963 
	`¥ötf
("%s\n", 
subã°_«me
);

964  
Ál£
;

967 i‡(
run_sögÀ_subã°
) {

968 i‡(
	`uwûdm©
(
subã°_«me
, 
run_sögÀ_subã°
) == 0)

969  
Ál£
;

971 
run_sögÀ_subã°_found
 = 
åue
;

974 i‡(
skù_subã°s_hí˚f‹th
) {

975 
	`¥ötf
("%sSubtest %s: %s%s\n",

976 (!
__igt_∂aö_ouçut
Ë? "\x1b[1m" : "", 
subã°_«me
,

977 
skù_subã°s_hí˚f‹th
 =
SKIP
 ?

978 "SKIP" : "FAIL", (!
__igt_∂aö_ouçut
) ? "\x1b[0m" : "");

979  
Ál£
;

982 
	`kmsg
(
KERN_INFO
 "[IGT] %s: sèπög subã° %s\n", 
comm™d_°r
, 
subã°_«me
);

983 
	`igt_debug
("Sèπög subã°: %s\n", 
subã°_«me
);

985 
	`_igt_log_buf„r_ª£t
();

987 
	`gëtime
(&
subã°_time
);

988  (
ö_subã°
 = 
subã°_«me
);

989 
	}
}

997 c⁄° *
	$igt_subã°_«me
()

999  
ö_subã°
;

1000 
	}
}

1008 
boﬁ
 
	$igt_⁄ly_li°_subã°s
()

1010  
li°_subã°s
;

1011 
	}
}

1013 
	$__igt_subã°_group_ßve
(*
ßve
)

1015 *
ßve
 = 
skù_subã°s_hí˚f‹th
;

1016 
	}
}

1018 
	$__igt_subã°_group_ª°‹e
(
ßve
)

1020 
skù_subã°s_hí˚f‹th
 = 
ßve
;

1021 
	}
}

1023 
boﬁ
 
	gskù≥d_⁄e
 = 
Ál£
;

1024 
boﬁ
 
	gsuc˚eded_⁄e
 = 
Ál£
;

1025 
boﬁ
 
	gÁûed_⁄e
 = 
Ál£
;

1027 
	$exô_subã°
(c⁄° *Ë
	`__©åibuã__
((
n‹ëu∫
));

1028 
	$exô_subã°
(c⁄° *
ªsu…
)

1030 
time•ec
 
now
;

1032 
	`gëtime
(&
now
);

1033 
	`igt_öfo
("%sSubtest %s: %s (%.3fs)%s\n",

1034 (!
__igt_∂aö_ouçut
) ? "\x1b[1m" : "",

1035 
ö_subã°
, 
ªsu…
, 
	`time_ñ≠£d
(&
subã°_time
, &
now
),

1036 (!
__igt_∂aö_ouçut
) ? "\x1b[0m" : "");

1037 
	`fÊush
(
°dout
);

1039 
ö_subã°
 = 
NULL
;

1040 
	`sigl⁄gjmp
(
igt_subã°_jmpbuf
, 1);

1041 
	}
}

1057 
	$igt_skù
(c⁄° *
f
, ...)

1059 
va_li°
 
¨gs
;

1060 
skù≥d_⁄e
 = 
åue
;

1062 
	`as£π
(!
ã°_chûd
);

1064 i‡(!
	`igt_⁄ly_li°_subã°s
()) {

1065 
	`va_°¨t
(
¨gs
, 
f
);

1066 
	`v¥ötf
(
f
, 
¨gs
);

1067 
	`va_íd
(
¨gs
);

1070 i‡(
ö_subã°
) {

1071 
	`exô_subã°
("SKIP");

1072 } i‡(
ã°_wôh_subã°s
) {

1073 
skù_subã°s_hí˚f‹th
 = 
SKIP
;

1074 
	`as£π
(
ö_fixtuª
);

1075 
	`__igt_fixtuª_íd
();

1077 
igt_exôcode
 = 
IGT_EXIT_SKIP
;

1078 
	`igt_exô
();

1080 
	}
}

1082 
	$__igt_skù_check
(c⁄° *
fûe
, c⁄° 
löe
,

1083 c⁄° *
func
, c⁄° *
check
,

1084 c⁄° *
f
, ...)

1086 
va_li°
 
¨gs
;

1087 
îr
 = 
î∫o
;

1088 *
îr_°r
 = 
NULL
;

1090 i‡(
îr
)

1091 
	`igt_as£π_√q
(
	`a•rötf
(&
îr_°r
, "La°Éºno: %i, %s\n", 
îr
, 
	`°ªº‹
(err)),

1094 i‡(
f
) {

1095 *
buf
;

1098 i‡(
buf
)

1099 
	`‰ì
(
buf
);

1101 
	`va_°¨t
(
¨gs
, 
f
);

1102 
	`igt_as£π_√q
(
	`va•rötf
(&
buf
, 
f
, 
¨gs
), -1);

1103 
	`va_íd
(
¨gs
);

1105 
	`igt_skù
("TestÑequirementÇot met in function %s, file %s:%i:\n"

1108 
func
, 
fûe
, 
löe
, 
check
, 
buf
, 
îr_°r
 ?: "");

1110 
	`igt_skù
("TestÑequirementÇot met in function %s, file %s:%i:\n"

1113 
func
, 
fûe
, 
löe
, 
check
, 
îr_°r
 ?: "");

1115 
	}
}

1125 
	$igt_suc˚ss
()

1127 
suc˚eded_⁄e
 = 
åue
;

1128 i‡(
ö_subã°
)

1129 
	`exô_subã°
("SUCCESS");

1130 
	}
}

1147 
	$igt_Áû
(
exôcode
)

1149 
	`as£π
(
exôcode
 !
IGT_EXIT_SUCCESS
 &&Éxôcodê!
IGT_EXIT_SKIP
);

1151 
	`igt_debug_waô_f‹_key¥ess
("failure");

1155 i‡(
ö_©exô_h™dÀr
)

1156 
	`_exô
(
IGT_EXIT_FAILURE
);

1158 i‡(!
Áûed_⁄e
)

1159 
igt_exôcode
 = 
exôcode
;

1161 
Áûed_⁄e
 = 
åue
;

1164 i‡(
ã°_chûd
)

1165 
	`exô
(
exôcode
);

1167 
	`_igt_log_buf„r_dump
();

1169 i‡(
ö_subã°
) {

1170 i‡(
exôcode
 =
IGT_EXIT_TIMEOUT
)

1171 
	`exô_subã°
("TIMEOUT");

1173 
	`exô_subã°
("FAIL");

1175 
	`as£π
(
	`igt_ˇn_Áû
());

1177 i‡(
ö_fixtuª
) {

1178 
skù_subã°s_hí˚f‹th
 = 
FAIL
;

1179 
	`__igt_fixtuª_íd
();

1182 
	`igt_exô
();

1184 
	}
}

1197 
boﬁ
 
	$igt_ˇn_Áû
()

1199  !
ã°_wôh_subã°s
 || 
ö_fixtuª
 || 
ö_subã°
;

1200 
	}
}

1202 
boﬁ
 
	$run_undî_gdb
()

1204 
buf
[1024];

1206 
	`•rötf
(
buf
, "/¥oc/%d/exe", 
	`gëµid
());

1207  (
	`ªadlök
 (
buf
, buf,  (buf)) != -1 &&

1208 
	`°∫cmp
(
	`ba£«me
(
buf
), "gdb", 3) == 0);

1209 
	}
}

1211 #ifde‡
HAVE_LIBUNWIND


1212 
	#UNW_LOCAL_ONLY


	)

1213 
	~<libunwöd.h
>

1215 
	$¥öt_backåa˚
()

1217 
unw_curs‹_t
 
curs‹
;

1218 
unw_c⁄ãxt_t
 
uc
;

1219 
°ack_num
 = 0;

1221 
	`igt_öfo
("StackÅrace:\n");

1223 
	`unw_gëc⁄ãxt
(&
uc
);

1224 
	`unw_öô_loˇl
(&
curs‹
, &
uc
);

1225 
	`unw_°ï
(&
curs‹
) > 0) {

1226 
«me
[255];

1227 
unw_w‹d_t
 
off
;

1229 i‡(
	`unw_gë_¥oc_«me
(&
curs‹
, 
«me
, 255, &
off
) < 0)

1230 
	`°r˝y
(
«me
, "<unknown>");

1232 
	`igt_öfo
(" #%d [%s+0x%x]\n", 
°ack_num
++, 
«me
,

1233 (Ë
off
);

1235 
	}
}

1237 c⁄° 
	ghex
[] = "0123456789abcdef";

1240 
	$xputch
(
c
)

1242 
	`wrôe
(
STDERR_FILENO
, (c⁄° *Ë&
c
, 1);

1243 
	}
}

1246 
	$xpow
(
ba£
, 
pow
)

1248 
i
, 
r
 = 1;

1250 
i
 = 0; i < 
pow
; i++)

1251 
r
 *
ba£
;

1253  
r
;

1254 
	}
}

1257 
	$¥öäum
(
num
, 
ba£
)

1259 
i
 = 0;

1260 
__num
 = 
num
;

1264 
__num
 /
ba£
;

1265 
i
++;

1266 } 
__num
);

1268 
i
--)

1269 
	`xputch
(
hex
[
num
 / 
	`xpow
(
ba£
, 
i
) % base]);

1270 
	}
}

1272 
size_t


1273 
	$x°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

1275 *
d°_ö
;

1277 
d°_ö
 = 
d°
;

1278 i‡(
size
 > 0) {

1279 --
size
 > 0 && *
§c
 != '\0')

1280 *
d°
++ = *
§c
++;

1281 *
d°
 = '\0';

1284  
d°
 - 
d°_ö
;

1285 
	}
}

1288 
	$x¥ötfmt
(c⁄° *
fmt
, 
va_li°
 
≠
)

1290 c⁄° *
p
;

1291 
ch
, 
ba£
;

1292 
num
;

1295 (
ch
 = *(c⁄° *Ë
fmt
++) != '%') {

1296 i‡(
ch
 == '\0') {

1299 
	`xputch
(
ch
);

1302 
ch
 = *(c⁄° *Ë
fmt
++;

1303 
ch
) {

1306 
	`xputch
(
	`va_¨g
(
≠
, ));

1310 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

1311 
p
 = "(null)";

1314 ; (
ch
 = *
p
++) != '\0';) {

1315 i‡(
ch
 < ' ' || ch > '~') {

1316 
	`xputch
('?');

1318 
	`xputch
(
ch
);

1324 
num
 = 
	`va_¨g
(
≠
, );

1325 i‡((Ë
num
 < 0) {

1326 
	`xputch
('-');

1327 
num
 = -()Çum;

1329 
ba£
 = 10;

1330 
numbî
;

1333 
num
 = 
	`va_¨g
(
≠
, );

1334 
ba£
 = 10;

1335 
numbî
;

1338 
num
 = 
	`va_¨g
(
≠
, );

1339 
ba£
 = 16;

1340 
numbî
:

1341 
	`¥öäum
(
num
, 
ba£
);

1361 
	`ab‹t
();

1364 
	`xputch
(
ch
);

1368 
	`xputch
('%');

1369 
fmt
--; fmt[-1] != '%'; fmt--)

1374 
	}
}

1378 
	$x¥ötf
(c⁄° *
fmt
, ...)

1380 
va_li°
 
≠
;

1382 
	`va_°¨t
(
≠
, 
fmt
);

1383 
	`x¥ötfmt
(
fmt
, 
≠
);

1384 
	`va_íd
(
≠
);

1385 
	}
}

1387 
	$¥öt_backåa˚_sig_ß„
()

1389 
unw_curs‹_t
 
curs‹
;

1390 
unw_c⁄ãxt_t
 
uc
;

1391 
°ack_num
 = 0;

1393 
	`wrôe
(
STDERR_FILENO
, "StackÅrace: \n", 15);

1395 
	`unw_gëc⁄ãxt
(&
uc
);

1396 
	`unw_öô_loˇl
(&
curs‹
, &
uc
);

1397 
	`unw_°ï
(&
curs‹
) > 0) {

1398 
«me
[255];

1399 
unw_w‹d_t
 
off
;

1401 i‡(
	`unw_gë_¥oc_«me
(&
curs‹
, 
«me
, 255, &
off
) < 0)

1402 
	`x°æ˝y
(
«me
, "<unknown>", 10);

1404 
	`x¥ötf
(" #%d [%s+0x%x]\n", 
°ack_num
++, 
«me
,

1405 (Ë
off
);

1408 
	}
}

1411 
	$__igt_Áû_as£π
(c⁄° *
domaö
, c⁄° *
fûe
, c⁄° 
löe
,

1412 c⁄° *
func
, c⁄° *
as£πi⁄
,

1413 c⁄° *
f
, ...)

1415 
va_li°
 
¨gs
;

1416 
îr
 = 
î∫o
;

1418 
	`igt_log
(
domaö
, 
IGT_LOG_CRITICAL
,

1419 "Te°ás£πi⁄ faûuª fun˘i⁄ %s, fûê%s:%i:\n", 
func
, 
fûe
,

1420 
löe
);

1421 
	`igt_log
(
domaö
, 
IGT_LOG_CRITICAL
, "Faûedás£πi⁄: %s\n", 
as£πi⁄
);

1422 i‡(
îr
)

1423 
	`igt_log
(
domaö
, 
IGT_LOG_CRITICAL
, "La°Éºno: %i, %s\n", 
îr
,

1424 
	`°ªº‹
(
îr
));

1426 i‡(
f
) {

1427 
	`va_°¨t
(
¨gs
, 
f
);

1428 
	`igt_vlog
(
domaö
, 
IGT_LOG_CRITICAL
, 
f
, 
¨gs
);

1429 
	`va_íd
(
¨gs
);

1432 #ifde‡
HAVE_LIBUNWIND


1433 
	`¥öt_backåa˚
();

1436 i‡(
	`run_undî_gdb
())

1437 
	`ab‹t
();

1438 
	`igt_Áû
(
IGT_EXIT_FAILURE
);

1439 
	}
}

1455 
	$igt_exô
()

1457 
igt_exô_ˇŒed
 = 
åue
;

1459 #ifde‡
HAVE_GLIB


1460 i‡(
igt_key_fûe
)

1461 
	`g_key_fûe_‰ì
(
igt_key_fûe
);

1464 i‡(
run_sögÀ_subã°
 && !
run_sögÀ_subã°_found
) {

1465 
	`igt_w¨n
("Unknow¿subã°: %s\n", 
run_sögÀ_subã°
);

1466 
	`exô
(
IGT_EXIT_INVALID
);

1469 i‡(
	`igt_⁄ly_li°_subã°s
())

1470 
	`exô
(
IGT_EXIT_SUCCESS
);

1473 
	`as£π
(!
ã°_wôh_subã°s
 ||

1474 
skù≥d_⁄e
 ||

1475 
suc˚eded_⁄e
 ||

1476 
Áûed_⁄e
);

1478 i‡(
ã°_wôh_subã°s
 && !
Áûed_⁄e
) {

1479 i‡(
suc˚eded_⁄e
)

1480 
igt_exôcode
 = 
IGT_EXIT_SUCCESS
;

1482 
igt_exôcode
 = 
IGT_EXIT_SKIP
;

1485 i‡(
comm™d_°r
)

1486 
	`kmsg
(
KERN_INFO
 "[IGT] %s:Éxiting,Ñet=%d\n",

1487 
comm™d_°r
, 
igt_exôcode
);

1488 
	`igt_debug
("Exôög wôh sètu†codê%d\n", 
igt_exôcode
);

1490 
c
 = 0; c < 
num_ã°_chûdªn
; c++)

1491 
	`kûl
(
ã°_chûdªn
[
c
], 
SIGKILL
);

1493 i‡(!
ã°_wôh_subã°s
) {

1494 
time•ec
 
now
;

1495 c⁄° *
ªsu…
;

1497 
	`gëtime
(&
now
);

1499 
igt_exôcode
) {

1500 
IGT_EXIT_SUCCESS
:

1501 
ªsu…
 = "SUCCESS";

1503 
IGT_EXIT_TIMEOUT
:

1504 
ªsu…
 = "TIMEOUT";

1506 
IGT_EXIT_SKIP
:

1507 
ªsu…
 = "SKIP";

1510 
ªsu…
 = "FAIL";

1513 
	`¥ötf
("%s (%.3fs)\n",

1514 
ªsu…
, 
	`time_ñ≠£d
(&
subã°_time
, &
now
));

1517 
	`exô
(
igt_exôcode
);

1518 
	}
}

1521 
	ghñ≥r_¥o˚ss_cou¡
;

1522 
pid_t
 
	ghñ≥r_¥o˚ss_pids
[] =

1525 
	$ª£t_hñ≥r_¥o˚ss_li°
()

1527 
i
 = 0; i < 
	`ARRAY_SIZE
(
hñ≥r_¥o˚ss_pids
); i++)

1528 
hñ≥r_¥o˚ss_pids
[
i
] = -1;

1529 
hñ≥r_¥o˚ss_cou¡
 = 0;

1530 
	}
}

1532 
	$__waôpid
(
pid_t
 
pid
)

1534 
°©us
 = -1;

1535 
	`waôpid
(
pid
, &
°©us
, 0) == -1 &&

1536 
î∫o
 =
EINTR
)

1539  
°©us
;

1540 
	}
}

1542 
	$f‹k_hñ≥r_exô_h™dÀr
(
sig
)

1545 
i
 = 0; i < 
	`ARRAY_SIZE
(
hñ≥r_¥o˚ss_pids
); i++) {

1546 
pid_t
 
pid
 = 
hñ≥r_¥o˚ss_pids
[
i
];

1547 i‡(
pid
 != -1) {

1548 
	`kûl
(
pid
, 
SIGTERM
);

1549 
	`__waôpid
(
pid
);

1550 
hñ≥r_¥o˚ss_cou¡
--;

1554 
	`as£π
(
hñ≥r_¥o˚ss_cou¡
 == 0);

1555 
	}
}

1557 
boﬁ
 
	$__igt_f‹k_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
)

1559 
pid_t
 
pid
;

1560 
id
;

1561 
tmp_cou¡
;

1563 
	`as£π
(!
¥oc
->
ru¬ög
);

1564 
	`as£π
(
hñ≥r_¥o˚ss_cou¡
 < 
	`ARRAY_SIZE
(
hñ≥r_¥o˚ss_pids
));

1566 
id
 = 0; 
hñ≥r_¥o˚ss_pids
[id] != -1; id++)

1569 
	`igt_ö°Æl_exô_h™dÀr
(
f‹k_hñ≥r_exô_h™dÀr
);

1576 
tmp_cou¡
 = 
exô_h™dÀr_cou¡
;

1577 
exô_h™dÀr_cou¡
 = 0;

1580 
	`fÊush
(
NULL
);

1582 
pid
 = 
	`f‹k
()) {

1584 
exô_h™dÀr_cou¡
 = 
tmp_cou¡
;

1585 
	`igt_as£π
(0);

1587 
	`ª£t_hñ≥r_¥o˚ss_li°
();

1588 
	`oom_adju°_f‹_doom
();

1590  
åue
;

1592 
exô_h™dÀr_cou¡
 = 
tmp_cou¡
;

1593 
¥oc
->
ru¬ög
 = 
åue
;

1594 
¥oc
->
pid
 =Öid;

1595 
¥oc
->
id
 = id;

1596 
hñ≥r_¥o˚ss_pids
[
id
] = 
pid
;

1597 
hñ≥r_¥o˚ss_cou¡
++;

1599  
Ál£
;

1602 
	}
}

1611 
	$igt_waô_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
)

1613 
°©us
;

1615 
	`as£π
(
¥oc
->
ru¬ög
);

1617 
°©us
 = 
	`__waôpid
(
¥oc
->
pid
);

1619 
¥oc
->
ru¬ög
 = 
Ál£
;

1621 
hñ≥r_¥o˚ss_pids
[
¥oc
->
id
] = -1;

1622 
hñ≥r_¥o˚ss_cou¡
--;

1624  
°©us
;

1625 
	}
}

1627 
boﬁ
 
	$hñ≥r_was_Æive
(
igt_hñ≥r_¥o˚ss
 *
¥oc
,

1628 
°©us
)

1630  (
	`WIFSIGNALED
(
°©us
) &&

1631 
	`WTERMSIG
(
°©us
Ë=(
¥oc
->
u£_SIGKILL
 ? 
SIGKILL
 : 
SIGTERM
));

1632 
	}
}

1641 
	$igt_°›_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
)

1643 
°©us
;

1646 
	`kûl
(
¥oc
->
pid
,Öroc->
u£_SIGKILL
 ? 
SIGKILL
 : 
SIGTERM
);

1648 
°©us
 = 
	`igt_waô_hñ≥r
(
¥oc
);

1649 i‡(!
	`hñ≥r_was_Æive
(
¥oc
, 
°©us
))

1650 
	`igt_debug
("Hñ≥∏dõdÅoÿóæy wôh sètus=%d\n", 
°©us
);

1651 
	`as£π
(
	`hñ≥r_was_Æive
(
¥oc
, 
°©us
));

1652 
	}
}

1654 
	$chûdªn_exô_h™dÀr
(
sig
)

1656 
°©us
;

1659 
num_ã°_chûdªn
-- && 
	`waô
(&
°©us
))

1661 
	}
}

1663 
boﬁ
 
	$__igt_f‹k
()

1665 
	`as£π
(!
ã°_wôh_subã°s
 || 
ö_subã°
);

1666 
	`as£π
(!
ã°_chûd
);

1668 
	`igt_ö°Æl_exô_h™dÀr
(
chûdªn_exô_h™dÀr
);

1670 i‡(
num_ã°_chûdªn
 >
ã°_chûdªn_sz
) {

1671 i‡(!
ã°_chûdªn_sz
)

1672 
ã°_chûdªn_sz
 = 4;

1674 
ã°_chûdªn_sz
 *= 2;

1676 
ã°_chûdªn
 = 
	`ªÆloc
(test_children,

1677 (
pid_t
)*
ã°_chûdªn_sz
);

1678 
	`igt_as£π
(
ã°_chûdªn
);

1682 
	`fÊush
(
NULL
);

1684 
ã°_chûdªn
[
num_ã°_chûdªn
++] = 
	`f‹k
()) {

1686 
	`igt_as£π
(0);

1688 
ã°_chûd
 = 
åue
;

1689 
exô_h™dÀr_cou¡
 = 0;

1690 
	`ª£t_hñ≥r_¥o˚ss_li°
();

1691 
	`oom_adju°_f‹_doom
();

1693  
åue
;

1695  
Ál£
;

1698 
	}
}

1705 
	$igt_chûd_d⁄e
(
pid_t
 
pid
)

1707 
i
 = 0;

1708 
found
 = -1;

1710 
	`igt_as£π
(
num_ã°_chûdªn
 > 1);

1712 
i
 = 0; i < 
num_ã°_chûdªn
; i++) {

1713 i‡(
pid
 =
ã°_chûdªn
[
i
]) {

1714 
found
 = 
i
;

1719 
	`igt_as£π
(
found
 >= 0);

1721 
num_ã°_chûdªn
--;

1722 
i
 = 
found
; i < 
num_ã°_chûdªn
; i++)

1723 
ã°_chûdªn
[
i
] =Åest_children[i + 1];

1724 
	}
}

1739 
	$igt_waôchûdªn
()

1741 
îr
 = 0;

1742 
cou¡
;

1744 
	`as£π
(!
ã°_chûd
);

1746 
cou¡
 = 0;

1747 
cou¡
 < 
num_ã°_chûdªn
) {

1748 
°©us
 = -1;

1749 
pid_t
 
pid
;

1750 
c
;

1752 
pid
 = 
	`waô
(&
°©us
);

1753 i‡(
pid
 == -1)

1756 
c
 = 0; c < 
num_ã°_chûdªn
; c++)

1757 i‡(
pid
 =
ã°_chûdªn
[
c
])

1759 i‡(
c
 =
num_ã°_chûdªn
)

1762 i‡(
îr
 =0 && 
°©us
 != 0) {

1763 i‡(
	`WIFEXITED
(
°©us
)) {

1764 
	`¥ötf
("child %i failed withÉxit status %i\n",

1765 
c
, 
	`WEXITSTATUS
(
°©us
));

1766 
îr
 = 
	`WEXITSTATUS
(
°©us
);

1767 } i‡(
	`WIFSIGNALED
(
°©us
)) {

1768 
	`¥ötf
("child %i died with signal %i, %s\n",

1769 
c
, 
	`WTERMSIG
(
°©us
),

1770 
	`°rsig«l
(
	`WTERMSIG
(
°©us
)));

1771 
îr
 = 128 + 
	`WTERMSIG
(
°©us
);

1773 
	`¥ötf
("Unh™dÀd faûuª [%d] i¿chûd %i\n", 
°©us
, 
c
);

1774 
îr
 = 256;

1777 
c
 = 0; c < 
num_ã°_chûdªn
; c++)

1778 
	`kûl
(
ã°_chûdªn
[
c
], 
SIGKILL
);

1781 
cou¡
++;

1784 
num_ã°_chûdªn
 = 0;

1785 i‡(
îr
)

1786 
	`igt_Áû
(
îr
);

1787 
	}
}

1798 
	$igt_waôchûdªn_timeout
(
£c⁄ds
, c⁄° *
ªas⁄
)

1800 
	`igt_£t_timeout
(
£c⁄ds
, 
ªas⁄
);

1801 
	`igt_waôchûdªn
();

1802 
	`igt_ª£t_timeout
();

1803 
	}
}

1806 
	#MAX_SIGNALS
 32

	)

1807 
	#MAX_EXIT_HANDLERS
 10

	)

1809 #i‚de‡
HAVE_SIGHANDLER_T


1810 (*
	tsigh™dÀr_t
)();

1814 
sigh™dÀr_t
 
h™dÀr
;

1815 
boﬁ
 
ö°ÆÀd
;

1816 } 
‹ig_sig
[
MAX_SIGNALS
];

1818 
igt_exô_h™dÀr_t
 
exô_h™dÀr_‚
[
MAX_EXIT_HANDLERS
];

1819 
boﬁ
 
exô_h™dÀr_dißbÀd
;

1820 
	#SIGDEF
(
x
Ë{ x, #x, (#xË- 1 
	}

	)
}

1821 
	#SILENT
(
x
Ë{ x, 
NULL
, 0 }

	)

1822 c⁄° såu˘ { 
	mnumbî
; c⁄° *
	m«me
; 
size_t
 
	m«me_Àn
; } 
	gh™dÀd_sig«ls
[] =

1823 { 
SILENT
(
SIGINT
), SILENT(
SIGHUP
), SILENT(
SIGTERM
), SILENT(
SIGQUIT
),

1824 
SILENT
(
SIGPIPE
), 
SIGDEF
(
SIGABRT
), SIGDEF(
SIGSEGV
), SIGDEF(
SIGBUS
),

1825 
SIGDEF
(
SIGFPE
) };

1826 #unde‡
SILENT


1827 #unde‡
SIGDEF


1829 
	$ö°Æl_sig_h™dÀr
(
sig_num
, 
sigh™dÀr_t
 
h™dÀr
)

1831 
‹ig_sig
[
sig_num
].
h™dÀr
 = 
	`sig«l
(sig_num, handler);

1833 i‡(
‹ig_sig
[
sig_num
].
h™dÀr
 =
SIG_ERR
)

1836 
‹ig_sig
[
sig_num
].
ö°ÆÀd
 = 
åue
;

1839 
	}
}

1841 
	$ª°‹e_sig_h™dÀr
(
sig_num
)

1844 
	`sig«l
(
sig_num
, 
SIG_DFL
);

1845 
	}
}

1847 
	$ª°‹e_Æl_sig_h™dÀr
()

1849 
i
;

1851 
i
 = 0; i < 
	`ARRAY_SIZE
(
‹ig_sig
); i++)

1852 
	`ª°‹e_sig_h™dÀr
(
i
);

1853 
	}
}

1855 
	$ˇŒ_exô_h™dÀrs
(
sig
)

1857 
i
;

1859 i‡(!
exô_h™dÀr_cou¡
) {

1863 
i
 = 
exô_h™dÀr_cou¡
 - 1; i >= 0; i--)

1864 
exô_h™dÀr_‚
[
i
](
sig
);

1867 
exô_h™dÀr_cou¡
 = 0;

1868 
	}
}

1870 
	$igt_©exô_h™dÀr
()

1872 
ö_©exô_h™dÀr
 = 
åue
;

1874 
	`ª°‹e_Æl_sig_h™dÀr
();

1876 i‡(!
exô_h™dÀr_dißbÀd
)

1877 
	`ˇŒ_exô_h™dÀrs
(0);

1878 
	}
}

1880 
boﬁ
 
	$¸ash_sig«l
(
sig
)

1882 
sig
) {

1883 
SIGILL
:

1884 
SIGBUS
:

1885 
SIGFPE
:

1886 
SIGSEGV
:

1887  
åue
;

1889  
Ál£
;

1891 
	}
}

1893 
	$Áèl_sig_h™dÀr
(
sig
)

1895 
i
;

1897 
i
 = 0; i < 
	`ARRAY_SIZE
(
h™dÀd_sig«ls
); i++) {

1898 i‡(
h™dÀd_sig«ls
[
i
].
numbî
 !
sig
)

1901 i‡(
h™dÀd_sig«ls
[
i
].
«me_Àn
) {

1902 
	`igt_as£π_eq
(
	`wrôe
(
STDERR_FILENO
, "Received signal ", 16),

1904 
	`igt_as£π_eq
(
	`wrôe
(
STDERR_FILENO
, 
h™dÀd_sig«ls
[
i
].
«me
, h™dÀd_sig«ls[i].
«me_Àn
),

1905 
h™dÀd_sig«ls
[
i
].
«me_Àn
);

1906 
	`igt_as£π_eq
(
	`wrôe
(
STDERR_FILENO
, ".\n", 2), 2);

1909 i‡(
	`¸ash_sig«l
(
sig
)) {

1911 i‡(!
Áûed_⁄e
)

1912 
igt_exôcode
 = 128 + 
sig
;

1914 
Áûed_⁄e
 = 
åue
;

1915 #ifde‡
HAVE_LIBUNWIND


1916 
	`¥öt_backåa˚_sig_ß„
();

1918 i‡(
ö_subã°
)

1919 
	`exô_subã°
("CRASH");

1924 
	`ª°‹e_Æl_sig_h™dÀr
();

1930 
	`ˇŒ_exô_h™dÀrs
(
sig
);

1933 #ifde‡
__löux__


1935 
pid_t
 
pid
 = 
	`sysˇŒ
(
SYS_gëpid
);

1936 
pid_t
 
tid
 = 
	`sysˇŒ
(
SYS_gëtid
);

1938 
	`sysˇŒ
(
SYS_tgkûl
, 
pid
, 
tid
, 
sig
);

1940 
±hªad_t
 
tid
 = 
	`±hªad_£lf
();

1941 
sigvÆ
 
vÆue
 = { .
sivÆ_±r
 = 
NULL
 };

1943 
	`±hªad_sigqueue
(
tid
, 
sig
, 
vÆue
);

1946 
	}
}

1965 
	$igt_ö°Æl_exô_h™dÀr
(
igt_exô_h™dÀr_t
 
‚
)

1967 
i
;

1969 
i
 = 0; i < 
exô_h™dÀr_cou¡
; i++)

1970 i‡(
exô_h™dÀr_‚
[
i
] =
‚
)

1973 
	`igt_as£π
(
exô_h™dÀr_cou¡
 < 
MAX_EXIT_HANDLERS
);

1975 
exô_h™dÀr_‚
[
exô_h™dÀr_cou¡
] = 
‚
;

1976 
exô_h™dÀr_cou¡
++;

1978 i‡(
exô_h™dÀr_cou¡
 > 1)

1981 
i
 = 0; i < 
	`ARRAY_SIZE
(
h™dÀd_sig«ls
); i++) {

1982 i‡(
	`ö°Æl_sig_h™dÀr
(
h™dÀd_sig«ls
[
i
].
numbî
,

1983 
Áèl_sig_h™dÀr
))

1984 
îr
;

1987 i‡(
	`©exô
(
igt_©exô_h™dÀr
))

1988 
îr
;

1991 
îr
:

1992 
	`ª°‹e_Æl_sig_h™dÀr
();

1993 
exô_h™dÀr_cou¡
--;

1995 
	`igt_as£π_f
(0, "failedÅo installÅhe signal handler\n");

1996 
	}
}

2009 
boﬁ
 
	$igt_run_ö_simuœti⁄
()

2011 
simuœti⁄
 = -1;

2013 i‡(
simuœti⁄
 == -1)

2014 
simuœti⁄
 = 
	`igt_check_boﬁón_ív_v¨
("INTEL_SIMULATION", 
Ál£
);

2016  
simuœti⁄
;

2017 
	}
}

2031 
	$igt_skù_⁄_simuœti⁄
()

2033 i‡(
	`igt_⁄ly_li°_subã°s
())

2036 i‡(!
	`igt_ˇn_Áû
()) {

2037 
igt_fixtuª


2038 
	`igt_ªquúe
(!
	`igt_run_ö_simuœti⁄
());

2040 
	`igt_ªquúe
(!
	`igt_run_ö_simuœti⁄
());

2041 
	}
}

2063 
	$igt_log
(c⁄° *
domaö
, 
igt_log_Àvñ
 
Àvñ
, c⁄° *
f‹m©
, ...)

2065 
va_li°
 
¨gs
;

2067 
	`va_°¨t
(
¨gs
, 
f‹m©
);

2068 
	`igt_vlog
(
domaö
, 
Àvñ
, 
f‹m©
, 
¨gs
);

2069 
	`va_íd
(
¨gs
);

2070 
	}
}

2086 
	$igt_vlog
(c⁄° *
domaö
, 
igt_log_Àvñ
 
Àvñ
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

2088 
FILE
 *
fûe
;

2089 *
löe
, *
f‹m©ãd_löe
;

2090 c⁄° *
¥ogøm_«me
;

2091 c⁄° *
igt_log_Àvñ_°r
[] = {

2098 
boﬁ
 
löe_c⁄töu©i⁄
 = 
Ál£
;

2100 
	`as£π
(
f‹m©
);

2102 #ifde‡
__GLIBC__


2103 
¥ogøm_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

2105 
¥ogøm_«me
 = 
comm™d_°r
;

2108 i‡(
li°_subã°s
 && 
Àvñ
 <
IGT_LOG_WARN
)

2111 i‡(
	`va•rötf
(&
löe
, 
f‹m©
, 
¨gs
) == -1)

2114 i‡(
löe_c⁄töu©i⁄
) {

2115 
f‹m©ãd_löe
 = 
	`°rdup
(
löe
);

2116 i‡(!
f‹m©ãd_löe
)

2117 
out
;

2118 } i‡(
	`a•rötf
(&
f‹m©ãd_löe
, "(%s:%dË%s%s%s: %s", 
¥ogøm_«me
,

2119 
	`gëpid
(), (
domaö
) ? domain : "", (domain) ? "-" : "",

2120 
igt_log_Àvñ_°r
[
Àvñ
], 
löe
) == -1) {

2121 
out
;

2124 
löe_c⁄töu©i⁄
 = 
löe
[
	`°æí
(line) - 1] != '\n';

2127 
	`_igt_log_buf„r_≠≥nd
(
f‹m©ãd_löe
);

2130 i‡(
igt_log_Àvñ
 > 
Àvñ
)

2131 
out
;

2134 i‡(
igt_log_domaö_fûãr
) {

2136 i‡(!
domaö
 && 
	`°rcmp
(
igt_log_domaö_fûãr
, "application"))

2137 
out
;

2139 i‡(
domaö
 && 
	`°rcmp
(
igt_log_domaö_fûãr
, domain))

2140 
out
;

2144 i‡(
Àvñ
 >
IGT_LOG_WARN
) {

2145 
fûe
 = 
°dîr
;

2146 
	`fÊush
(
°dout
);

2149 
fûe
 = 
°dout
;

2153 i‡(
Àvñ
 !
IGT_LOG_INFO
)

2154 
	`fwrôe
(
f‹m©ãd_löe
, (), 
	`°æí
(formatted_line),

2155 
fûe
);

2157 
	`fwrôe
(
löe
, (), 
	`°æí
÷öe), 
fûe
);

2159 
out
:

2160 
	`‰ì
(
löe
);

2161 
	}
}

2163 c⁄° *
	gtimeout_›
;

2164 
__©åibuã__
((
n‹ëu∫
)Ë
	$igt_Æ¨m_h™dÀr
(
sig«l
)

2166 i‡(
timeout_›
)

2167 
	`igt_öfo
("Timed out: %s\n", 
timeout_›
);

2169 
	`igt_öfo
("Timed out\n");

2172 
	`igt_Áû
(
IGT_EXIT_FAILURE
);

2173 
	}
}

2189 
	$igt_£t_timeout
(
£c⁄ds
,

2190 c⁄° *
›
)

2192 
siga˘i⁄
 
ß
;

2194 
ß
.
ß_h™dÀr
 = 
igt_Æ¨m_h™dÀr
;

2195 
	`sigem±y£t
(&
ß
.
ß_mask
);

2196 
ß
.
ß_Êags
 = 0;

2198 
timeout_›
 = 
›
;

2200 i‡(
£c⁄ds
 == 0)

2201 
	`siga˘i⁄
(
SIGALRM
, 
NULL
, NULL);

2203 
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
);

2205 
	`Æ¨m
(
£c⁄ds
);

2206 
	}
}

2214 
	$igt_ª£t_timeout
()

2216 
	`igt_£t_timeout
(0, 
NULL
);

2217 
	}
}

2219 
FILE
 *
	$__igt_f›í_d©a
(c⁄° * 
igt_§cdú
, c⁄° * 
igt_d©adú
,

2220 c⁄° * 
fûíame
)

2222 
∑th
[
PATH_MAX
];

2223 
FILE
 *
Â
;

2225 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
igt_d©adú
, 
fûíame
);

2226 
Â
 = 
	`f›í
(
∑th
, "r");

2227 i‡(!
Â
) {

2228 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
igt_§cdú
, 
fûíame
);

2229 
Â
 = 
	`f›í
(
∑th
, "r");

2231 i‡(!
Â
) {

2232 
	`¢¥ötf
(
∑th
, ’©h), "./%s", 
fûíame
);

2233 
Â
 = 
	`f›í
(
∑th
, "r");

2236 i‡(!
Â
)

2237 
	`igt_¸ôiˇl
("CouldÇŸ o≥¿d©®fûê\"%s\": %s", 
fûíame
,

2238 
	`°ªº‹
(
î∫o
));

2240  
Â
;

2241 
	}
}

2243 
	$log_ouçut
(*
fd
, 
igt_log_Àvñ
 
Àvñ
)

2245 
ssize_t
 
Àn
;

2246 
buf
[
PIPE_BUF
];

2248 i‡(*
fd
 < 0)

2251 
	`mem£t
(
buf
, 0, (buf));

2252 
Àn
 = 
	`ªad
(*
fd
, 
buf
, (buf));

2253 i‡(
Àn
 <= 0) {

2254 
	`˛o£
(*
fd
);

2255 *
fd
 = -1;

2259 
	`igt_log
(
IGT_LOG_DOMAIN
, 
Àvñ
, "[cmd] %s", 
buf
);

2260 
	}
}

2273 
	$igt_sy°em
(c⁄° *
comm™d
)

2275 
ouçùe
[2] = { -1, -1 };

2276 
îΩùe
[2] = { -1, -1 };

2277 
°©us
;

2278 
igt_hñ≥r_¥o˚ss
 
¥o˚ss
 = {};

2280 i‡(
	`pùe
(
ouçùe
) < 0)

2281 
îr
;

2282 i‡(
	`pùe
(
îΩùe
) < 0)

2283 
îr
;

2290 
	`igt_su•íd_sig«l_hñ≥r
();

2292 
	`igt_f‹k_hñ≥r
(&
¥o˚ss
) {

2293 
	`˛o£
(
ouçùe
[0]);

2294 
	`˛o£
(
îΩùe
[0]);

2296 i‡(
	`dup2
(
ouçùe
[1], 
STDOUT_FILENO
) < 0)

2297 
chûd_îr
;

2298 i‡(
	`dup2
(
îΩùe
[1], 
STDERR_FILENO
) < 0)

2299 
chûd_îr
;

2301 
	`exe˛
("/bö/sh", "sh", "-c", 
comm™d
,

2302 (*Ë
NULL
);

2304 
chûd_îr
:

2305 
	`exô
(
EXIT_FAILURE
);

2308 
	`igt_ªsume_sig«l_hñ≥r
();

2310 
	`˛o£
(
ouçùe
[1]);

2311 
	`˛o£
(
îΩùe
[1]);

2313 
ouçùe
[0] >0 || 
îΩùe
[0] >= 0) {

2314 
	`log_ouçut
(&
ouçùe
[0], 
IGT_LOG_INFO
);

2315 
	`log_ouçut
(&
îΩùe
[0], 
IGT_LOG_WARN
);

2318 
°©us
 = 
	`igt_waô_hñ≥r
(&
¥o˚ss
);

2320  
	`WEXITSTATUS
(
°©us
);

2321 
îr
:

2322 
	`˛o£
(
ouçùe
[0]);

2323 
	`˛o£
(
ouçùe
[1]);

2324 
	`˛o£
(
îΩùe
[0]);

2325 
	`˛o£
(
îΩùe
[1]);

2327 
	}
}

2335 
	$igt_sy°em_quõt
(c⁄° *
comm™d
)

2337 
°dîr_fd_c›y
, 
°dout_fd_c›y
, 
°©us
, 
nuŒfd
;

2340 i‡((
nuŒfd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
)) == -1)

2341 
îr
;

2342 i‡((
°dout_fd_c›y
 = 
	`dup
(
STDOUT_FILENO
)) == -1)

2343 
îr
;

2344 i‡((
°dîr_fd_c›y
 = 
	`dup
(
STDERR_FILENO
)) == -1)

2345 
îr
;

2347 i‡(
	`dup2
(
nuŒfd
, 
STDOUT_FILENO
) == -1)

2348 
îr
;

2349 i‡(
	`dup2
(
nuŒfd
, 
STDERR_FILENO
) == -1)

2350 
îr
;

2353 
	`igt_su•íd_sig«l_hñ≥r
();

2355 i‡((
°©us
 = 
	`sy°em
(
comm™d
)) == -1)

2356 
îr
;

2358 
	`igt_ªsume_sig«l_hñ≥r
();

2361 i‡(
	`dup2
(
°dout_fd_c›y
, 
STDOUT_FILENO
) == -1)

2362 
îr
;

2363 i‡(
	`dup2
(
°dîr_fd_c›y
, 
STDERR_FILENO
) == -1)

2364 
îr
;

2366 
	`˛o£
(
°dout_fd_c›y
);

2367 
	`˛o£
(
°dîr_fd_c›y
);

2368 
	`˛o£
(
nuŒfd
);

2370  
	`WEXITSTATUS
(
°©us
);

2371 
îr
:

2372 
	`igt_ªsume_sig«l_hñ≥r
();

2374 
	`˛o£
(
°dîr_fd_c›y
);

2375 
	`˛o£
(
°dout_fd_c›y
);

2376 
	`˛o£
(
nuŒfd
);

2379 
	}
}

	@igt_core.h

30 #i‚de‡
IGT_CORE_H


31 
	#IGT_CORE_H


	)

33 
	~<£tjmp.h
>

34 
	~<°dboﬁ.h
>

35 
	~<°döt.h
>

36 
	~<°dlib.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<°d¨g.h
>

41 
	~<gë›t.h
>

42 
	~<uni°d.h
>

44 #i‚de‡
IGT_LOG_DOMAIN


45 
	#IGT_LOG_DOMAIN
 (
NULL
)

	)

49 c⁄° * 
__igt_ã°_des¸ùti⁄
 
__©åibuã__
((
wók
));

50 
boﬁ
 
__igt_∂aö_ouçut
;

51 *
igt_‰ame_dump_∑th
;

61 
	#IGT_TEST_DESCRIPTION
(
°r
Ëc⁄° * 
__igt_ã°_des¸ùti⁄
 = 
	)
str

68 
	#IGT_EXIT_TIMEOUT
 78

	)

75 
	#IGT_EXIT_SKIP
 77

	)

82 
	#IGT_EXIT_SUCCESS
 0

	)

89 
	#IGT_EXIT_INVALID
 79

	)

96 
	#IGT_EXIT_FAILURE
 99

	)

98 
boﬁ
 
__igt_fixtuª
();

99 
__igt_fixtuª_com∂ëe
();

100 
	$__igt_fixtuª_íd
(Ë
	`__©åibuã__
((
n‹ëu∫
));

111 
	#igt_fixtuª
 vﬁ©ûê
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) = 0; \

112 
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) < 1 && \

113 
	`__igt_fixtuª
() && \

114 (
	`sig£tjmp
(
igt_subã°_jmpbuf
, 1) == 0); \

115 
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) ++, \

116 
	`__igt_fixtuª_com∂ëe
())

	)

119 
jmp_buf
 
igt_subã°_jmpbuf
;

120 (*
	tigt_›t_h™dÀr_t
)(
	t›t
, 
	t›t_ödex
, *
	td©a
);

121 #i‚de‡
__GTK_DOC_IGNORE__


122 
›ti⁄
;

124 
	`igt_subã°_öô_∑r£_›ts
(*
¨gc
, **
¨gv
,

125 c⁄° *
exåa_sh‹t_›ts
,

126 c⁄° 
›ti⁄
 *
exåa_l⁄g_›ts
,

127 c⁄° *
hñp_°r
,

128 
igt_›t_h™dÀr_t
 
exåa_›t_h™dÀr
,

129 *
h™dÀr_d©a
);

145 
	#igt_subã°_öô
(
¨gc
, 
¨gv
) \

146 
	`igt_subã°_öô_∑r£_›ts
(&
¨gc
, 
¨gv
, 
NULL
, NULL, NULL, NULL, NULL);

	)

148 
boﬁ
 
	`__igt_run_subã°
(c⁄° *
subã°_«me
);

149 
	#__igt_tokíˇt2
(
x
, 
y
Ëx ## 
	)
y

159 
	#igt_tokíˇt
(
x
, 
y
Ë
	`__igt_tokíˇt2
(x, y)

	)

172 
	#igt_subã°
(
«me
Ë; 
	`__igt_run_subã°
((name)) && \

173 (
	`sig£tjmp
(
igt_subã°_jmpbuf
, 1) == 0); \

174 
	`igt_suc˚ss
())

	)

175 
	#__igt_subã°_f
(
tmp
, 
f‹m©
...) \

176 
tmp
 [256]; \

177 
	`¢¥ötf
–
tmp
 , (Åmp ), \

178 
f‹m©
), \

179 
	`__igt_run_subã°
–
tmp
 ) && \

180 (
	`sig£tjmp
(
igt_subã°_jmpbuf
, 1) == 0); \

181 
	`igt_suc˚ss
())

	)

195 
	#igt_subã°_f
(
f
...) \

196 
	`__igt_subã°_f
(
	`igt_tokíˇt
(
__tmpch¨
, 
__LINE__
), 
f
)

	)

198 c⁄° *
	`igt_subã°_«me
();

199 
boﬁ
 
	`igt_⁄ly_li°_subã°s
();

201 
	`__igt_subã°_group_ßve
(*);

202 
	`__igt_subã°_group_ª°‹e
();

218 
	#igt_subã°_group
 
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) = 0, \

219 
	`igt_tokíˇt
(
__ßve
,
__LINE__
) = 0; \

220 
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) < 1 && \

221 (
	`__igt_subã°_group_ßve
(& 
	`igt_tokíˇt
(
__ßve
,
__LINE__
Ë), 
åue
); \

222 
	`igt_tokíˇt
(
__tmpöt
,
__LINE__
) ++, \

223 
	`__igt_subã°_group_ª°‹e
(
	`igt_tokíˇt
(
__ßve
,
__LINE__
Ë))

	)

232 
	#igt_maö
 \

233 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)(); \

234 
	`maö
(
¨gc
, **
¨gv
) { \

235 
	`igt_subã°_öô_∑r£_›ts
(&
¨gc
, 
¨gv
, 
NULL
, NULL, NULL, \

236 
NULL
, NULL); \

237 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)(); \

238 
	`igt_exô
(); \

239 
	}
} \

240 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)() \

241 

	)

243 c⁄° *
igt_ã°_«me
();

244 
igt_sim∂e_öô_∑r£_›ts
(*
¨gc
, **
¨gv
,

245 c⁄° *
exåa_sh‹t_›ts
,

246 c⁄° 
›ti⁄
 *
exåa_l⁄g_›ts
,

247 c⁄° *
hñp_°r
,

248 
igt_›t_h™dÀr_t
 
exåa_›t_h™dÀr
,

249 *
h™dÀr_d©a
);

262 
	#igt_sim∂e_öô
(
¨gc
, 
¨gv
) \

263 
	`igt_sim∂e_öô_∑r£_›ts
(&
¨gc
, 
¨gv
, 
NULL
, NULL, NULL, NULL, NULL);

	)

272 
	#igt_sim∂e_maö
 \

273 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)(); \

274 
	`maö
(
¨gc
, **
¨gv
) { \

275 
	`igt_sim∂e_öô_∑r£_›ts
(&
¨gc
, 
¨gv
, 
NULL
, NULL, NULL, \

276 
NULL
, NULL); \

277 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)(); \

278 
	`igt_exô
(); \

280 
	`igt_tokíˇt
(
__ªÆ_maö
, 
__LINE__
)() \

281 

	)

291 
	#igt_c⁄°ru˘‹
 \

292 
	`__©åibuã__
((
c⁄°ru˘‹
)) \

293 
	`igt_tokíˇt
(
__igt_c⁄°ru˘‹_l
, 
__LINE__
)()

	)

295 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 1, 2)))

296 
	$igt_skù
(c⁄° *
f
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

297 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 5, 6)))

298 
	$__igt_skù_check
(c⁄° *
fûe
, c⁄° 
löe
,

299 c⁄° *
func
, c⁄° *
check
,

300 c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

301 
	#igt_skù_check
(
E
, 
F
...) \

302 
	`__igt_skù_check
(
__FILE__
, 
__LINE__
, 
__func__
, 
E
, 
F
)

	)

303 
	`igt_suc˚ss
();

305 
boﬁ
 
	`igt_ˇn_Áû
();

307 
	$igt_Áû
(
exôcode
Ë
	`__©åibuã__
((
n‹ëu∫
));

308 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 6, 7)))

309 
	$__igt_Áû_as£π
(c⁄° *
domaö
, c⁄° *
fûe
,

310 c⁄° 
löe
, c⁄° *
func
, c⁄° *
as£πi⁄
,

311 c⁄° *
f‹m©
, ...)

312 
	`__©åibuã__
((
n‹ëu∫
));

313 
	$igt_exô
(Ë
	`__©åibuã__
((
n‹ëu∫
));

322 
ölöe
 
	$igt_ign‹e_w¨n
(
boﬁ
 
vÆue
)

324 
	}
}

334 
	#igt_as£π
(
ex¥
) \

335 dÿ{ i‡(!(
ex¥
)) \

336 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, #ex¥ , 
NULL
); \

337 } 0)

	)

351 
	#igt_as£π_f
(
ex¥
, 
f
...) \

352 dÿ{ i‡(!(
ex¥
)) \

353 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, #ex¥ , 
f
); \

354 } 0)

	)

364 
	#igt_Áû_⁄
(
ex¥
Ë
	`igt_as£π
(!”x¥))

	)

378 
	#igt_Áû_⁄_f
(
ex¥
, 
f
...Ë
	`igt_as£π_f
(!”x¥), f)

	)

394 
	#igt_as£π_cmpöt
(
n1
, 
cmp
, 
ncmp
, 
n2
) \

396 
__n1
 = (
n1
), 
__n2
 = (
n2
); \

397 i‡(
__n1
 
cmp
 
__n2
) ; \

398 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, \

400 "îr‹: %d " #ncm∞" %d\n", 
__n1
, 
__n2
); \

401 } 0)

	)

412 
	#igt_as£π_cmpuöt
(
n1
, 
cmp
, 
ncmp
, 
n2
) \

414 
uöt32_t
 
__n1
 = (
n1
), 
__n2
 = (
n2
); \

415 i‡(
__n1
 
cmp
 
__n2
) ; \

416 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, \

418 "îr‹: %#x " #ncm∞" %#x\n", 
__n1
, 
__n2
); \

419 } 0)

	)

430 
	#igt_as£π_cmps64
(
n1
, 
cmp
, 
ncmp
, 
n2
) \

432 
öt64_t
 
__n1
 = (
n1
), 
__n2
 = (
n2
); \

433 i‡(
__n1
 
cmp
 
__n2
) ; \

434 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, \

436 "îr‹: %Œd " #ncm∞" %Œd\n", ()
__n1
, ()
__n2
); \

437 } 0)

	)

448 
	#igt_as£π_cmpu64
(
n1
, 
cmp
, 
ncmp
, 
n2
) \

450 
uöt64_t
 
__n1
 = (
n1
), 
__n2
 = (
n2
); \

451 i‡(
__n1
 
cmp
 
__n2
) ; \

452 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, \

454 "îr‹: %#Œx " #ncm∞" %#Œx\n", ()
__n1
, ()
__n2
); \

455 } 0)

	)

466 
	#igt_as£π_cmpdoubÀ
(
n1
, 
cmp
, 
ncmp
, 
n2
) \

468 
__n1
 = (
n1
), 
__n2
 = (
n2
); \

469 i‡(
__n1
 
cmp
 
__n2
) ; \

470 
	`__igt_Áû_as£π
(
IGT_LOG_DOMAIN
, 
__FILE__
, 
__LINE__
, 
__func__
, \

472 "îr‹: %#l‡" #ncm∞" %#lf\n", 
__n1
, 
__n2
); \

473 } 0)

	)

486 
	#igt_as£π_eq
(
n1
, 
n2
Ë
	`igt_as£π_cmpöt
“1, ==, !=,Ç2)

	)

495 
	#igt_as£π_eq_u32
(
n1
, 
n2
Ë
	`igt_as£π_cmpuöt
“1, ==, !=,Ç2)

	)

504 
	#igt_as£π_eq_s64
(
n1
, 
n2
Ë
	`igt_as£π_cmps64
“1, ==, !=,Ç2)

	)

513 
	#igt_as£π_eq_u64
(
n1
, 
n2
Ë
	`igt_as£π_cmpu64
“1, ==, !=,Ç2)

	)

522 
	#igt_as£π_eq_doubÀ
(
n1
, 
n2
Ë
	`igt_as£π_cmpdoubÀ
“1, ==, !=,Ç2)

	)

535 
	#igt_as£π_√q
(
n1
, 
n2
Ë
	`igt_as£π_cmpöt
“1, !=, ==,Ç2)

	)

544 
	#igt_as£π_√q_u32
(
n1
, 
n2
Ë
	`igt_as£π_cmpuöt
“1, !=, ==,Ç2)

	)

553 
	#igt_as£π_√q_u64
(
n1
, 
n2
Ë
	`igt_as£π_cmpu64
“1, !=, ==,Ç2)

	)

562 
	#igt_as£π_√q_doubÀ
(
n1
, 
n2
Ë
	`igt_as£π_cmpdoubÀ
“1, !=, ==,Ç2)

	)

575 
	#igt_as£π_…e
(
n1
, 
n2
Ë
	`igt_as£π_cmpöt
“1, <=, >,Ç2)

	)

588 
	#igt_as£π_…
(
n1
, 
n2
Ë
	`igt_as£π_cmpöt
“1, <, >=,Ç2)

	)

599 
	#igt_as£π_fd
(
fd
) \

600 
	`igt_as£π_f
(
fd
 >0, "fûêdes¸ùt‹ " #fd " faûed\n");

	)

612 
	#igt_ªquúe
(
ex¥
) do { \

613 i‡(!(
ex¥
)Ë
	`igt_skù_check
(#ex¥ , 
NULL
); \

614 
	`igt_debug
("TestÑequirementÖassed: %s\n", #expr); \

615 } 0)

	)

627 
	#igt_skù_⁄
(
ex¥
) do { \

628 i‡((
ex¥
)Ë
	`igt_skù_check
("!(" #ex¥ ")" , 
NULL
); \

629 
	`igt_debug
("TestÑequirementÖassed: !(%s)\n", #expr); \

630 } 0)

	)

646 
	#igt_ªquúe_f
(
ex¥
, 
f
...) do { \

647 i‡(!(
ex¥
)Ë
	`igt_skù_check
(#ex¥ , 
f
); \

648 
	`igt_debug
("TestÑequirementÖassed: %s\n", #expr); \

649 } 0)

	)

665 
	#igt_skù_⁄_f
(
ex¥
, 
f
...) do { \

666 i‡((
ex¥
)Ë
	`igt_skù_check
("!("#ex¥")", 
f
); \

667 
	`igt_debug
("TestÑequirementÖassed: !(%s)\n", #expr); \

668 } 0)

	)

671 
boﬁ
 
__igt_f‹k
();

688 
	#igt_f‹k
(
chûd
, 
num_chûdªn
) \

689 
chûd
 = 0; chûd < (
num_chûdªn
); child++) \

690 ; 
	`__igt_f‹k
(); 
	`exô
(0))

	)

691 
igt_chûd_d⁄e
(
pid_t
 
pid
);

692 
igt_waôchûdªn
();

693 
igt_waôchûdªn_timeout
(
£c⁄ds
, c⁄° *
ªas⁄
);

705 
	sigt_hñ≥r_¥o˚ss
 {

706 
boﬁ
 
	mru¬ög
;

707 
boﬁ
 
	mu£_SIGKILL
;

708 
pid_t
 
	mpid
;

709 
	mid
;

711 
boﬁ
 
__igt_f‹k_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
);

731 
	#igt_f‹k_hñ≥r
(
¥oc
) \

732 ; 
	`__igt_f‹k_hñ≥r
(
¥oc
); 
	`exô
(0))

	)

733 
igt_waô_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
);

734 
igt_°›_hñ≥r
(
igt_hñ≥r_¥o˚ss
 *
¥oc
);

746 (*
	tigt_exô_h™dÀr_t
)(
	tsig
);

749 
	`igt_ö°Æl_exô_h™dÀr
(
igt_exô_h™dÀr_t
 
‚
);

752 
boﬁ
 
	`igt_run_ö_simuœti⁄
();

761 
	#SLOW_QUICK
(
¶ow
,
quick
Ë(
	`igt_run_ö_simuœti⁄
(Ë? (quickË: (¶ow))

	)

763 
	`igt_skù_⁄_simuœti⁄
();

765 c⁄° *
igt_öãø˘ive_debug
;

777 
	eigt_log_Àvñ
 {

778 
IGT_LOG_DEBUG
,

779 
IGT_LOG_INFO
,

780 
IGT_LOG_WARN
,

781 
IGT_LOG_CRITICAL
,

782 
IGT_LOG_NONE
,

784 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 3, 4)))

785 
	`igt_log
(c⁄° *
domaö
, 
igt_log_Àvñ
 
Àvñ
, c⁄° *
f‹m©
, ...);

786 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 3, 0)))

787 
	`igt_vlog
(c⁄° *
domaö
, 
igt_log_Àvñ
 
Àvñ
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

795 
	#igt_debug
(
f
...Ë
	`igt_log
(
IGT_LOG_DOMAIN
, 
IGT_LOG_DEBUG
, f)

	)

803 
	#igt_öfo
(
f
...Ë
	`igt_log
(
IGT_LOG_DOMAIN
, 
IGT_LOG_INFO
, f)

	)

811 
	#igt_w¨n
(
f
...Ë
	`igt_log
(
IGT_LOG_DOMAIN
, 
IGT_LOG_WARN
, f)

	)

819 
	#igt_¸ôiˇl
(
f
...Ë
	`igt_log
(
IGT_LOG_DOMAIN
, 
IGT_LOG_CRITICAL
, f)

	)

821 
	$boﬁ
 (*
	tigt_buf„r_log_h™dÀr_t
)(c⁄° *
	tlöe
, *
	td©a
);

822 
	`igt_log_buf„r_ö•e˘
(
igt_buf„r_log_h™dÀr_t
 
check
, *
d©a
);

824 
igt_log_Àvñ
 igt_log_level;

838 
	#igt_w¨n_⁄
(
c⁄dôi⁄
) ({ \

839 
	`ty≥of
(
c⁄dôi⁄
Ë
ªt__
 = (condition); \

840 i‡(
ªt__
) \

841 
	`igt_w¨n
("Warning on condition %s in function %s, file %s:%i\n", \

842 #c⁄dôi⁄, 
__func__
, 
__FILE__
, 
__LINE__
); \

843 
ªt__
; \

844 
	}
})

	)

864 
	#igt_w¨n_⁄_f
(
c⁄dôi⁄
, 
f
...) ({ \

865 
	`ty≥of
(
c⁄dôi⁄
Ë
ªt__
 = (condition); \

866 i‡(
ªt__
) {\

867 
	`igt_w¨n
("Warning on condition %s in function %s, file %s:%i\n", \

868 #c⁄dôi⁄, 
__func__
, 
__FILE__
, 
__LINE__
); \

869 
	`igt_w¨n
(
f
); \

871 
ªt__
; \

872 })

	)

874 
igt_£t_timeout
(
£c⁄ds
,

875 c⁄° *
›
);

897 
uöt64_t
 
igt_n£c_ñ≠£d
(
time•ec
 *
°¨t
);

906 
ölöe
 
uöt32_t
 
	$igt_£c⁄ds_ñ≠£d
(
time•ec
 *
°¨t
)

908  
	`igt_n£c_ñ≠£d
(
°¨t
) >> 30;

909 
	}
}

911 
igt_ª£t_timeout
();

913 
FILE
 *
__igt_f›í_d©a
(c⁄° * 
igt_§cdú
, c⁄° * 
igt_d©adú
,

914 c⁄° * 
fûíame
);

922 
	#igt_f›í_d©a
(
fûíame
) \

923 
	`__igt_f›í_d©a
(
IGT_SRCDIR
, 
IGT_DATADIR
, 
fûíame
)

	)

925 
igt_sy°em
(c⁄° *
comm™d
);

926 
igt_sy°em_quõt
(c⁄° *
comm™d
);

927 
	#igt_sy°em_cmd
(
°©us
, 
f‹m©
...) \

929 *
buf
 = 0; \

930 
	`igt_as£π
(
	`a•rötf
(&
buf
, 
f‹m©
) != -1); \

931 
°©us
 = 
	`igt_sy°em
(
buf
); \

932 
	`‰ì
(
buf
); \

933 } 0)

	)

	@igt_debugfs.c

25 
	~<öây≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/mou¡.h
>

28 
	~<sys/sysma¸os.h
>

29 
	~<dúít.h
>

30 
	~<î∫o.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<limôs.h
>

34 
	~<°rög.h
>

35 
	~<f˙é.h
>

36 
	~<uni°d.h
>

37 
	~<i915_drm.h
>

39 
	~"drmã°.h
"

40 
	~"igt_aux.h
"

41 
	~"igt_kms.h
"

42 
	~"igt_debugfs.h
"

43 
	~"igt_sysfs.h
"

88 
boﬁ
 
	$is_mou¡poöt
(c⁄° *
∑th
)

90 
buf
[
	`°æí
(
∑th
) + 4];

91 
dev_t
 
dŸ_dev
, 
dŸdŸ_dev
;

92 
°©
 
°
;

94 
	`igt_as£π_…
(
	`¢¥ötf
(
buf
, (buf), "%s/.", 
∑th
), (buf));

95 
	`igt_as£π_eq
(
	`°©
(
buf
, &
°
), 0);

96 
dŸ_dev
 = 
°
.
°_dev
;

98 
	`igt_as£π_…
(
	`¢¥ötf
(
buf
, (buf), "%s/..", 
∑th
), (buf));

99 
	`igt_as£π_eq
(
	`°©
(
buf
, &
°
), 0);

100 
dŸdŸ_dev
 = 
°
.
°_dev
;

102  
dŸ_dev
 !
dŸdŸ_dev
;

103 
	}
}

114 c⁄° *
	$igt_debugfs_mou¡
()

116 
°©
 
°
;

118 i‡(
	`°©
("/debug/dri", &
°
) == 0)

121 i‡(
	`°©
("/sys/kî√l/debug/dri", &
°
) == 0)

124 
	`igt_as£π
(
	`is_mou¡poöt
("/sys/kernel/debug") ||

125 
	`mou¡
("debug", "/sys/kernel/debug", "debugfs", 0, 0) == 0);

128 
	}
}

141 *
	$igt_debugfs_∑th
(
devi˚
, *
∑th
, 
∑thÀn
)

143 
°©
 
°
;

144 c⁄° *
debugfs_roŸ
;

145 
idx
;

147 i‡(
	`f°©
(
devi˚
, &
°
)) {

148 
	`igt_debug
("Couldn'à°© FD f‹ DRM devi˚: %s\n", 
	`°ªº‹
(
î∫o
));

149  
NULL
;

152 i‡(!
	`S_ISCHR
(
°
.
°_mode
)) {

153 
	`igt_debug
("FD for DRM deviceÇotá char device!\n");

154  
NULL
;

157 
debugfs_roŸ
 = 
	`igt_debugfs_mou¡
();

159 
idx
 = 
	`mö‹
(
°
.
°_rdev
);

160 
	`¢¥ötf
(
∑th
, 
∑thÀn
, "%s/dri/%d/«me", 
debugfs_roŸ
, 
idx
);

161 i‡(
	`°©
(
∑th
, &
°
))

162  
NULL
;

164 i‡(
idx
 >= 64) {

165 
fûe
, 
«me_Àn
, 
cmp_Àn
;

166 
«me
[100], 
cmp
[100];

168 
fûe
 = 
	`›í
(
∑th
, 
O_RDONLY
);

169 i‡(
fûe
 < 0)

170  
NULL
;

172 
«me_Àn
 = 
	`ªad
(
fûe
, 
«me
, (name));

173 
	`˛o£
(
fûe
);

175 
idx
 = 0; idx < 16; idx++) {

176 
	`¢¥ötf
(
∑th
, 
∑thÀn
, "%s/dri/%d/name",

177 
debugfs_roŸ
, 
idx
);

178 
fûe
 = 
	`›í
(
∑th
, 
O_RDONLY
);

179 i‡(
fûe
 < 0)

180  
NULL
;

182 
cmp_Àn
 = 
	`ªad
(
fûe
, 
cmp
, (cmp));

183 
	`˛o£
(
fûe
);

185 i‡(
cmp_Àn
 =
«me_Àn
 && !
	`memcmp
(
cmp
, 
«me
,Çame_len))

189 i‡(
idx
 == 16)

190  
NULL
;

193 
	`¢¥ötf
(
∑th
, 
∑thÀn
, "%s/dri/%d", 
debugfs_roŸ
, 
idx
);

194  
∑th
;

195 
	}
}

207 
	$igt_debugfs_dú
(
devi˚
)

209 
∑th
[200];

211 i‡(!
	`igt_debugfs_∑th
(
devi˚
, 
∑th
, (path)))

214 
	`igt_debug
("O≥nög debugf†dúe˘‹y '%s'\n", 
∑th
);

215  
	`›í
(
∑th
, 
O_RDONLY
);

216 
	}
}

229 
	$igt_debugfs_›í
(
devi˚
, c⁄° *
fûíame
, 
mode
)

231 
dú
, 
ªt
;

233 
dú
 = 
	`igt_debugfs_dú
(
devi˚
);

234 i‡(
dú
 < 0)

235  
dú
;

237 
ªt
 = 
	`›í©
(
dú
, 
fûíame
, 
mode
);

239 
	`˛o£
(
dú
);

241  
ªt
;

242 
	}
}

254 
	$__igt_debugfs_ªad
(
fd
, c⁄° *
fûíame
, *
buf
, 
buf_size
)

256 
dú
;

257 
Àn
;

259 
dú
 = 
	`igt_debugfs_dú
(
fd
);

260 
Àn
 = 
	`igt_sysfs_ªad
(
dú
, 
fûíame
, 
buf
, 
buf_size
 - 1);

261 i‡(
Àn
 < 0)

262 
Àn
 = 0;

263 
buf
[
Àn
] = '\0';

264 
	`˛o£
(
dú
);

265 
	}
}

276 
boﬁ
 
	$igt_debugfs_£¨ch
(
devi˚
, c⁄° *
fûíame
, c⁄° *
sub°rög
)

278 
FILE
 *
fûe
;

279 
size_t
 
n
 = 0;

280 *
löe
 = 
NULL
;

281 
boﬁ
 
m©ched
 = 
Ál£
;

282 
fd
;

284 
fd
 = 
	`igt_debugfs_›í
(
devi˚
, 
fûíame
, 
O_RDONLY
);

285 
fûe
 = 
	`fd›í
(
fd
, "r");

286 
	`igt_as£π
(
fûe
);

288 
	`gëlöe
(&
löe
, &
n
, 
fûe
) >= 0) {

289 
m©ched
 = 
	`°r°r
(
löe
, 
sub°rög
Ë!
NULL
;

290 i‡(
m©ched
)

294 
	`‰ì
(
löe
);

295 
	`f˛o£
(
fûe
);

296 
	`˛o£
(
fd
);

298  
m©ched
;

299 
	}
}

305 
boﬁ
 
	$igt_föd_¸c_mism©ch
(c⁄° 
igt_¸c_t
 *
a
, c⁄° igt_¸c_à*
b
,

306 *
ödex
)

308 
i
;

310 i‡(
a
->
n_w‹ds
 !
b
->n_words)

311  
åue
;

313 
i
 = 0; i < 
a
->
n_w‹ds
; i++) {

314 i‡(
a
->
¸c
[
i
] !
b
->crc[i]) {

315 i‡(
ödex
)

316 *
ödex
 = 
i
;

318  
åue
;

322  
Ál£
;

323 
	}
}

336 
	$igt_as£π_¸c_equÆ
(c⁄° 
igt_¸c_t
 *
a
, c⁄° igt_¸c_à*
b
)

338 
ödex
;

339 
boﬁ
 
mism©ch
;

341 
mism©ch
 = 
	`igt_föd_¸c_mism©ch
(
a
, 
b
, &
ödex
);

342 i‡(
mism©ch
)

343 
	`igt_debug
("CRC mism©cháàödex %d: 0x%x !0x%x\n", 
ödex
,

344 
a
->
¸c
[
ödex
], 
b
->crc[index]);

346 
	`igt_as£π
(!
mism©ch
);

347 
	}
}

358 
boﬁ
 
	$igt_check_¸c_equÆ
(c⁄° 
igt_¸c_t
 *
a
, c⁄° igt_¸c_à*
b
)

360 
ödex
;

361 
boﬁ
 
mism©ch
;

363 
mism©ch
 = 
	`igt_föd_¸c_mism©ch
(
a
, 
b
, &
ödex
);

364 i‡(
mism©ch
)

365 
	`igt_debug
("CRC mism©cháàödex %d: 0x%x !0x%x\n", 
ödex
,

366 
a
->
¸c
[
ödex
], 
b
->crc[index]);

368  !
mism©ch
;

369 
	}
}

383 *
	$igt_¸c_to_°rög_exãnded
(
igt_¸c_t
 *
¸c
, 
dñimôî
, 
¸c_size
)

385 
i
;

386 
Àn
 = 0;

387 
fõld_width
 = 2 * 
¸c_size
;

388 *
buf
 = 
	`mÆloc
((
fõld_width
+1Ë* 
¸c
->
n_w‹ds
 * ());

390 i‡(!
buf
)

391  
NULL
;

393 
i
 = 0; i < 
¸c
->
n_w‹ds
; i++)

394 
Àn
 +
	`•rötf
(
buf
 +Üí, "%0*x%c", 
fõld_width
,

395 
¸c
->¸c[
i
], 
dñimôî
);

398 
buf
[
Àn
 - 1] = '\0';

399  
buf
;

400 
	}
}

411 *
	$igt_¸c_to_°rög
(
igt_¸c_t
 *
¸c
)

413  
	`igt_¸c_to_°rög_exãnded
(
¸c
, ' ', 4);

414 
	}
}

416 
	#MAX_CRC_ENTRIES
 10

	)

417 
	#MAX_LINE_LEN
 (10 + 11 * 
MAX_CRC_ENTRIES
 + 1)

	)

420 
	#LEGACY_LINE_LEN
 (6 * 8 + 5 + 1)

	)

422 
	s_igt_pùe_¸c
 {

423 
	mfd
;

424 
	mdú
;

425 
	m˘l_fd
;

426 
	m¸c_fd
;

427 
	mÊags
;

428 
boﬁ
 
	mis_Àgacy
;

430 
pùe
 
	mpùe
;

431 
öãl_pùe_¸c_sour˚
 
	msour˚
;

434 c⁄° *
	gpùe_¸c_sour˚s
[] = {

447 c⁄° *
	$pùe_¸c_sour˚_«me
(
öãl_pùe_¸c_sour˚
 
sour˚
)

449  
pùe_¸c_sour˚s
[
sour˚
];

450 
	}
}

452 
boﬁ
 
	$igt_pùe_¸c_do_°¨t
(
igt_pùe_¸c_t
 *
pùe_¸c
)

454 
buf
[64];

457 
	`igt_pùe_¸c_°›
(
pùe_¸c
);

459 i‡(
pùe_¸c
->
is_Àgacy
)

460 
	`•rötf
(
buf
, "pùê%†%s", 
	`km°e°_pùe_«me
(
pùe_¸c
->
pùe
),

461 
	`pùe_¸c_sour˚_«me
(
pùe_¸c
->
sour˚
));

463 
	`•rötf
(
buf
, "%s", 
	`pùe_¸c_sour˚_«me
(
pùe_¸c
->
sour˚
));

465 
	`igt_as£π_eq
(
	`wrôe
(
pùe_¸c
->
˘l_fd
, 
buf
, 
	`°æí
(buf)), strlen(buf));

467 i‡(!
pùe_¸c
->
is_Àgacy
) {

468 
îr
;

470 
	`•rötf
(
buf
, "¸tc-%d/¸c/d©a", 
pùe_¸c
->
pùe
);

471 
îr
 = 0;

473 
pùe_¸c
->
¸c_fd
 = 
	`›í©
’ùe_¸c->
dú
, 
buf
,Öùe_¸c->
Êags
);

474 i‡(
pùe_¸c
->
¸c_fd
 < 0)

475 
îr
 = -
î∫o
;

477 i‡(
îr
 =-
EINVAL
)

478  
Ál£
;

480 
	`igt_as£π_eq
(
îr
, 0);

483 
î∫o
 = 0;

484  
åue
;

485 
	}
}

487 
	$igt_pùe_¸c_pùe_off
(
fd
, 
pùe
Öipe)

489 
buf
[32];

491 
	`•rötf
(
buf
, "pùê%†n⁄e", 
	`km°e°_pùe_«me
(
pùe
));

492 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)), strlen(buf));

493 
	}
}

495 
	$igt_pùe_¸c_ª£t
(
drm_fd
)

497 
dúít
 *dirent;

498 c⁄° *
cmd
 = "none";

499 
boﬁ
 
d⁄e
 = 
Ál£
;

500 
DIR
 *
dú
;

501 
fdú
;

502 
fd
;

504 
fdú
 = 
	`igt_debugfs_dú
(
drm_fd
);

505 i‡(
fdú
 < 0)

508 
dú
 = 
	`fd›ídú
(
fdú
);

509 i‡(!
dú
) {

510 
	`˛o£
(
fdú
);

514 (
dúít
 = 
	`ªaddú
(
dú
))) {

515 
buf
[
PATH_MAX
];

517 i‡(
	`°rcmp
(
dúít
->
d_«me
, "crtc-") != 0)

520 
	`•rötf
(
buf
, "%s/¸c/c⁄åﬁ", 
dúít
->
d_«me
);

521 
fd
 = 
	`›í©
(
fdú
, 
buf
, 
O_WRONLY
);

522 i‡(
fd
 < 0)

525 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
cmd
, 
	`°æí
(cmd)), strlen(cmd));

526 
	`˛o£
(
fd
);

528 
d⁄e
 = 
åue
;

530 
	`˛o£dú
(
dú
);

532 i‡(!
d⁄e
) {

533 
fd
 = 
	`›í©
(
fdú
, "i915_di•œy_¸tc_˘l", 
O_WRONLY
);

534 i‡(
fd
 != -1) {

535 
	`igt_pùe_¸c_pùe_off
(
fd
, 
PIPE_A
);

536 
	`igt_pùe_¸c_pùe_off
(
fd
, 
PIPE_B
);

537 
	`igt_pùe_¸c_pùe_off
(
fd
, 
PIPE_C
);

539 
	`˛o£
(
fd
);

543 
	`˛o£
(
fdú
);

544 
	}
}

546 
	$pùe_¸c_exô_h™dÀr
(
sig
)

548 
dúít
 *dirent;

549 
buf
[
PATH_MAX
];

550 
DIR
 *
dú
;

551 
fd
;

553 
dú
 = 
	`›ídú
("/dev/dri");

554 i‡(!
dú
)

562 (
dúít
 = 
	`ªaddú
(
dú
))) {

563 i‡(
	`°∫cmp
(
dúít
->
d_«me
, "card", 4) != 0)

566 
	`•rötf
(
buf
, "/dev/dri/%s", 
dúít
->
d_«me
);

567 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

569 
	`igt_pùe_¸c_ª£t
(
fd
);

571 
	`˛o£
(
fd
);

573 
	`˛o£dú
(
dú
);

574 
	}
}

583 
	$igt_ªquúe_pùe_¸c
(
fd
)

585 c⁄° *
cmd
 = "pipe AÇone";

586 
˘l
, 
wrôãn
;

588 
˘l
 = 
	`igt_debugfs_›í
(
fd
, "¸tc-0/¸c/c⁄åﬁ", 
O_RDONLY
);

589 i‡(
˘l
 < 0) {

590 
˘l
 = 
	`igt_debugfs_›í
(
fd
, "i915_di•œy_¸c_˘l", 
O_WRONLY
);

591 
	`igt_ªquúe_f
(
˘l
,

594 
wrôãn
 = 
	`wrôe
(
˘l
, 
cmd
, 
	`°æí
(cmd));

595 
	`igt_ªquúe_f
(
wrôãn
 < 0,

598 
	`˛o£
(
˘l
);

599 
	}
}

601 
	$igt_hpd_°‹m_exô_h™dÀr
(
sig
)

603 
fd
 = 
	`drm_›í_drivî
(
DRIVER_INTEL
);

606 
	`igt_hpd_°‹m_ª£t
(
fd
);

608 
	`˛o£
(
fd
);

609 
	}
}

625 
	$igt_hpd_°‹m_£t_thªshﬁd
(
drm_fd
, 
thªshﬁd
)

627 
fd
 = 
	`igt_debugfs_›í
(
drm_fd
, "i915_hpd_°‹m_˘l", 
O_WRONLY
);

628 
buf
[16];

630 i‡(
fd
 < 0)

633 
	`igt_debug
("Sëtög HPD st‹mÅhªshﬁdÅÿ%d\n", 
thªshﬁd
);

634 
	`¢¥ötf
(
buf
, (buf), "%d", 
thªshﬁd
);

635 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)), strlen(buf));

637 
	`˛o£
(
fd
);

638 
	`igt_ö°Æl_exô_h™dÀr
(
igt_hpd_°‹m_exô_h™dÀr
);

639 
	}
}

654 
	$igt_hpd_°‹m_ª£t
(
drm_fd
)

656 
fd
 = 
	`igt_debugfs_›í
(
drm_fd
, "i915_hpd_°‹m_˘l", 
O_WRONLY
);

657 c⁄° *
buf
 = "reset";

659 i‡(
fd
 < 0)

662 
	`igt_debug
("Resetting HPD stormÅhreshold\n");

663 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)), strlen(buf));

665 
	`˛o£
(
fd
);

666 
	}
}

681 
boﬁ
 
	$igt_hpd_°‹m_dëe˘ed
(
drm_fd
)

683 
fd
 = 
	`igt_debugfs_›í
(
drm_fd
, "i915_hpd_°‹m_˘l", 
O_RDONLY
);

684 *
°¨t_loc
;

685 
buf
[32] = {0}, 
dëe˘ed_°r
[4];

686 
boﬁ
 
ªt
;

688 i‡(
fd
 < 0)

689  
Ál£
;

691 
	`igt_as£π_…
(0, 
	`ªad
(
fd
, 
buf
, (buf)));

692 
	`igt_as£π
(
°¨t_loc
 = 
	`°r°r
(
buf
, "Detected: "));

693 
	`igt_as£π_eq
(
	`ssˇnf
(
°¨t_loc
, "Dëe˘ed: %s\n", 
dëe˘ed_°r
), 1);

695 i‡(
	`°rcmp
(
dëe˘ed_°r
, "yes") == 0)

696 
ªt
 = 
åue
;

697 i‡(
	`°rcmp
(
dëe˘ed_°r
, "no") == 0)

698 
ªt
 = 
Ál£
;

700 
	`igt_Áû_⁄_f
(
åue
, "Unknown hpd storm detection status '%s'\n",

701 
dëe˘ed_°r
);

703 
	`˛o£
(
fd
);

704  
ªt
;

705 
	}
}

714 
	$igt_ªquúe_hpd_°‹m_˘l
(
drm_fd
)

716 
fd
 = 
	`igt_debugfs_›í
(
drm_fd
, "i915_hpd_°‹m_˘l", 
O_RDONLY
);

718 
	`igt_ªquúe_f
(
fd
 > 0, "No i915_hpd_storm_ctl found in debugfs\n");

719 
	`˛o£
(
fd
);

720 
	}
}

722 
igt_pùe_¸c_t
 *

723 
	$pùe_¸c_√w
(
fd
, 
pùe
Öùe, 
öãl_pùe_¸c_sour˚
 
sour˚
, 
Êags
)

725 
igt_pùe_¸c_t
 *
pùe_¸c
;

726 
buf
[128];

727 
debugfs
;

729 
debugfs
 = 
	`igt_debugfs_dú
(
fd
);

730 
	`igt_as£π
(
debugfs
 != -1);

732 
	`igt_ö°Æl_exô_h™dÀr
(
pùe_¸c_exô_h™dÀr
);

734 
pùe_¸c
 = 
	`ˇŒoc
(1, (
_igt_pùe_¸c
));

736 
	`•rötf
(
buf
, "¸tc-%d/¸c/c⁄åﬁ", 
pùe
);

737 
pùe_¸c
->
˘l_fd
 = 
	`›í©
(
debugfs
, 
buf
, 
O_WRONLY
);

738 i‡(
pùe_¸c
->
˘l_fd
 == -1) {

739 
pùe_¸c
->
˘l_fd
 = 
	`›í©
(
debugfs
,

740 "i915_di•œy_¸c_˘l", 
O_WRONLY
);

741 
	`igt_as£π
(
pùe_¸c
->
˘l_fd
 != -1);

742 
pùe_¸c
->
is_Àgacy
 = 
åue
;

745 i‡(
pùe_¸c
->
is_Àgacy
) {

746 
	`•rötf
(
buf
, "i915_pùe_%s_¸c", 
	`km°e°_pùe_«me
(
pùe
));

747 
pùe_¸c
->
¸c_fd
 = 
	`›í©
(
debugfs
, 
buf
, 
Êags
);

748 
	`igt_as£π
(
pùe_¸c
->
¸c_fd
 != -1);

749 
	`igt_debug
("UsingÜegacy frame CRC ABI\n");

751 
pùe_¸c
->
¸c_fd
 = -1;

752 
	`igt_debug
("Using generic frame CRC ABI\n");

755 
pùe_¸c
->
fd
 = fd;

756 
pùe_¸c
->
dú
 = 
debugfs
;

757 
pùe_¸c
->
pùe
 =Öipe;

758 
pùe_¸c
->
sour˚
 = source;

759 
pùe_¸c
->
Êags
 = flags;

761  
pùe_¸c
;

762 
	}
}

776 
igt_pùe_¸c_t
 *

777 
	$igt_pùe_¸c_√w
(
fd
, 
pùe
Öùe, 
öãl_pùe_¸c_sour˚
 
sour˚
)

779  
	`pùe_¸c_√w
(
fd
, 
pùe
, 
sour˚
, 
O_RDONLY
);

780 
	}
}

794 
igt_pùe_¸c_t
 *

795 
	$igt_pùe_¸c_√w_n⁄block
(
fd
, 
pùe
Öùe, 
öãl_pùe_¸c_sour˚
 
sour˚
)

797  
	`pùe_¸c_√w
(
fd
, 
pùe
, 
sour˚
, 
O_RDONLY
 | 
O_NONBLOCK
);

798 
	}
}

806 
	$igt_pùe_¸c_‰ì
(
igt_pùe_¸c_t
 *
pùe_¸c
)

808 i‡(!
pùe_¸c
)

811 
	`˛o£
(
pùe_¸c
->
˘l_fd
);

812 
	`˛o£
(
pùe_¸c
->
¸c_fd
);

813 
	`˛o£
(
pùe_¸c
->
dú
);

814 
	`‰ì
(
pùe_¸c
);

815 
	}
}

817 
boﬁ
 
	$pùe_¸c_öô_‰om_°rög
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
igt_¸c_t
 *
¸c
,

818 c⁄° *
löe
)

820 
n
, 
i
;

821 c⁄° *
buf
;

823 i‡(
pùe_¸c
->
is_Àgacy
) {

824 
¸c
->
has_vÆid_‰ame
 = 
åue
;

825 
¸c
->
n_w‹ds
 = 5;

826 
n
 = 
	`ssˇnf
(
löe
, "%8u %8x %8x %8x %8x %8x", &
¸c
->
‰ame
,

827 &
¸c
->crc[0], &crc->crc[1], &crc->crc[2],

828 &
¸c
->crc[3], &crc->crc[4]);

829  
n
 == 6;

832 i‡(
	`°∫cmp
(
löe
, "XXXXXXXXXX", 10) == 0)

833 
¸c
->
has_vÆid_‰ame
 = 
Ál£
;

835 
¸c
->
has_vÆid_‰ame
 = 
åue
;

836 
¸c
->
‰ame
 = 
	`°πoul
(
löe
, 
NULL
, 16);

839 
buf
 = 
löe
 + 10;

840 
i
 = 0; *
buf
 != '\n'; i++, buf += 11)

841 
¸c
->¸c[
i
] = 
	`°πoul
(
buf
, 
NULL
, 16);

843 
¸c
->
n_w‹ds
 = 
i
;

845  
åue
;

846 
	}
}

848 
	$ªad_¸c
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
igt_¸c_t
 *
out
)

850 
ssize_t
 
byãs_ªad
;

851 
buf
[
MAX_LINE_LEN
 + 1];

852 
size_t
 
ªad_Àn
;

854 i‡(
pùe_¸c
->
is_Àgacy
)

855 
ªad_Àn
 = 
LEGACY_LINE_LEN
;

857 
ªad_Àn
 = 
MAX_LINE_LEN
;

859 
	`igt_£t_timeout
(5, "CRCÑeading");

860 
byãs_ªad
 = 
	`ªad
(
pùe_¸c
->
¸c_fd
, &
buf
, 
ªad_Àn
);

861 
	`igt_ª£t_timeout
();

863 i‡(
byãs_ªad
 < 0 && 
î∫o
 =
EAGAIN
)

864 
	`igt_as£π
(
pùe_¸c
->
Êags
 & 
O_NONBLOCK
);

866 i‡(
byãs_ªad
 < 0)

867 
byãs_ªad
 = 0;

869 
buf
[
byãs_ªad
] = '\0';

871 i‡(
byãs_ªad
 && !
	`pùe_¸c_öô_‰om_°rög
(
pùe_¸c
, 
out
, 
buf
))

872  -
EINVAL
;

874  
byãs_ªad
;

875 
	}
}

877 
	$ªad_⁄e_¸c
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
igt_¸c_t
 *
out
)

879 
	`ªad_¸c
(
pùe_¸c
, 
out
) == 0)

880 
	`u¶ìp
(1000);

881 
	}
}

889 
	$igt_pùe_¸c_°¨t
(
igt_pùe_¸c_t
 *
pùe_¸c
)

891 
igt_¸c_t
 
¸c
;

893 
	`igt_as£π
(
	`igt_pùe_¸c_do_°¨t
(
pùe_¸c
));

895 i‡(
pùe_¸c
->
is_Àgacy
) {

904 
	`ªad_⁄e_¸c
(
pùe_¸c
, &
¸c
);

905 
	`ªad_⁄e_¸c
(
pùe_¸c
, &
¸c
);

907 
	}
}

915 
	$igt_pùe_¸c_°›
(
igt_pùe_¸c_t
 *
pùe_¸c
)

917 
buf
[32];

919 i‡(
pùe_¸c
->
is_Àgacy
) {

920 
	`•rötf
(
buf
, "pùê%†n⁄e", 
	`km°e°_pùe_«me
(
pùe_¸c
->
pùe
));

921 
	`igt_as£π_eq
(
	`wrôe
(
pùe_¸c
->
˘l_fd
, 
buf
, 
	`°æí
(buf)),

922 
	`°æí
(
buf
));

924 
	`˛o£
(
pùe_¸c
->
¸c_fd
);

925 
pùe_¸c
->
¸c_fd
 = -1;

927 
	}
}

950 
	$igt_pùe_¸c_gë_¸cs
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
n_¸cs
,

951 
igt_¸c_t
 **
out_¸cs
)

953 
igt_¸c_t
 *
¸cs
;

954 
n
 = 0;

956 
¸cs
 = 
	`ˇŒoc
(
n_¸cs
, (
igt_¸c_t
));

959 
igt_¸c_t
 *
¸c
 = &
¸cs
[
n
];

960 
ªt
;

962 
ªt
 = 
	`ªad_¸c
(
pùe_¸c
, 
¸c
);

963 i‡(
ªt
 < 0)

965 i‡(
ªt
 == 0)

968 
n
++;

969 } 
n
 < 
n_¸cs
);

971 *
out_¸cs
 = 
¸cs
;

972  
n
;

973 
	}
}

975 
	$¸c_ßnôy_checks
(
igt_¸c_t
 *
¸c
)

977 
i
;

978 
boﬁ
 
Æl_zîo
 = 
åue
;

980 
i
 = 0; i < 
¸c
->
n_w‹ds
; i++) {

981 
	`igt_w¨n_⁄_f
(
¸c
->¸c[
i
] == 0xffffffff,

985 i‡(
¸c
->¸c[
i
])

986 
Æl_zîo
 = 
Ál£
;

989 
	`igt_w¨n_⁄_f
(
Æl_zîo
, "Suspicious CRC: All valuesáre 0.\n");

990 
	}
}

1011 
	$igt_pùe_¸c_cﬁÀ˘_¸c
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
igt_¸c_t
 *
out_¸c
)

1013 
	`igt_debug_waô_f‹_key¥ess
("crc");

1015 
	`igt_pùe_¸c_°¨t
(
pùe_¸c
);

1016 
	`ªad_⁄e_¸c
(
pùe_¸c
, 
out_¸c
);

1017 
	`igt_pùe_¸c_°›
(
pùe_¸c
);

1019 
	`¸c_ßnôy_checks
(
out_¸c
);

1020 
	}
}

1033 
boﬁ
 
	$igt_dr›_ˇches_has
(
drm_fd
, 
uöt64_t
 
vÆ
)

1035 
uöt64_t
 
mask
;

1036 
dú
;

1038 
mask
 = 0;

1039 
dú
 = 
	`igt_debugfs_dú
(
drm_fd
);

1040 
	`igt_sysfs_sˇnf
(
dú
, "i915_gem_dr›_ˇches", "0x%" 
PRIx64
, &
mask
);

1041 
	`˛o£
(
dú
);

1043  (
vÆ
 & 
mask
) == val;

1044 
	}
}

1053 
	$igt_dr›_ˇches_£t
(
drm_fd
, 
uöt64_t
 
vÆ
)

1055 
fd
;

1056 
d©a
[19];

1057 
size_t
 
nbyãs
;

1059 
	`•rötf
(
d©a
, "0x%" 
PRIx64
, 
vÆ
);

1061 
fd
 = 
	`igt_debugfs_›í
(
drm_fd
, "i915_gem_dr›_ˇches", 
O_WRONLY
);

1063 
	`igt_as£π
(
fd
 >= 0);

1065 
nbyãs
 = 
	`wrôe
(
fd
, 
d©a
, 
	`°æí
(data) + 1);

1066 } 
nbyãs
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

1067 
	`igt_as£π
(
nbyãs
 =
	`°æí
(
d©a
) + 1);

1068 
	`˛o£
(
fd
);

1069 
	}
}

1075 
	#PREFAULT_DEBUGFS
 "/sys/moduÀ/i915/∑ømëîs/¥eÁu…_dißbÀ"

	)

1076 
	$igt_¥eÁu…_c⁄åﬁ
(
boﬁ
 
íabÀ
)

1078 c⁄° *
«me
 = 
PREFAULT_DEBUGFS
;

1079 
fd
;

1080 
buf
[2] = {'Y', 'N'};

1081 
ödex
;

1083 
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

1084 
	`igt_ªquúe
(
fd
 >= 0);

1086 i‡(
íabÀ
)

1087 
ödex
 = 1;

1089 
ödex
 = 0;

1091 
	`igt_ªquúe
(
	`wrôe
(
fd
, &
buf
[
ödex
], 1) == 1);

1093 
	`˛o£
(
fd
);

1094 
	}
}

1096 
	$íabÀ_¥eÁu…_©_exô
(
sig
)

1098 
	`igt_íabÀ_¥eÁu…
();

1099 
	}
}

1110 
	$igt_dißbÀ_¥eÁu…
()

1112 
	`igt_¥eÁu…_c⁄åﬁ
(
Ál£
);

1114 
	`igt_ö°Æl_exô_h™dÀr
(
íabÀ_¥eÁu…_©_exô
);

1115 
	}
}

1122 
	$igt_íabÀ_¥eÁu…
()

1124 
	`igt_¥eÁu…_c⁄åﬁ
(
åue
);

1125 
	}
}

1127 
	$gë_obje˘_cou¡
(
fd
)

1129 
dú
, 
ªt
, 
sˇ¬ed
;

1131 
	`igt_dr›_ˇches_£t
(
fd
,

1132 
DROP_RETIRE
 | 
DROP_ACTIVE
 | 
DROP_IDLE
 | 
DROP_FREED
);

1134 
dú
 = 
	`igt_debugfs_dú
(
fd
);

1135 
sˇ¬ed
 = 
	`igt_sysfs_sˇnf
(
dú
, "i915_gem_objects",

1136 "%òobje˘s", &
ªt
);

1137 
	`igt_as£π_eq
(
sˇ¬ed
, 1);

1138 
	`˛o£
(
dú
);

1140  
ªt
;

1141 
	}
}

1151 
	$igt_gë_°abÀ_obj_cou¡
(
drivî
)

1153 
obj_cou¡
;

1154 
	`gem_quõs˚¡_gpu
(
drivî
);

1155 
obj_cou¡
 = 
	`gë_obje˘_cou¡
(
drivî
);

1162 #ifde‡
ANDROID


1164 
lo›_cou¡
 = 0;

1165 
¥ev_obj_cou¡
 = 
obj_cou¡
;

1166 
lo›_cou¡
 < 4) {

1167 
	`u¶ìp
(200000);

1168 
	`gem_quõs˚¡_gpu
(
drivî
);

1169 
obj_cou¡
 = 
	`gë_obje˘_cou¡
(
drivî
);

1170 i‡(
obj_cou¡
 =
¥ev_obj_cou¡
) {

1171 
lo›_cou¡
++;

1173 
	`igt_debug
("loop_count=%d, obj_count=%d,Örev_obj_count=%d\n",

1174 
lo›_cou¡
, 
obj_cou¡
, 
¥ev_obj_cou¡
);

1175 
lo›_cou¡
 = 0;

1176 
¥ev_obj_cou¡
 = 
obj_cou¡
;

1182  
obj_cou¡
;

1183 
	}
}

1185 
	$igt_debugfs_dump
(
devi˚
, c⁄° *
fûíame
)

1187 *
c⁄ã¡s
;

1188 
dú
;

1190 
dú
 = 
	`igt_debugfs_dú
(
devi˚
);

1191 
c⁄ã¡s
 = 
	`igt_sysfs_gë
(
dú
, 
fûíame
);

1192 
	`˛o£
(
dú
);

1194 
	`igt_debug
("%s:\n%s\n", 
fûíame
, 
c⁄ã¡s
);

1195 
	`‰ì
(
c⁄ã¡s
);

1196 
	}
}

	@igt_debugfs.h

25 #i‚de‡
__IGT_DEBUGFS_H__


26 
	#__IGT_DEBUGFS_H__


	)

28 
	~<°dboﬁ.h
>

29 
	~<°döt.h
>

30 
	~<°dio.h
>

32 
	gpùe
;

34 c⁄° *
igt_debugfs_mou¡
();

35 *
igt_debugfs_∑th
(
devi˚
, *
∑th
, 
∑thÀn
);

37 
igt_debugfs_dú
(
devi˚
);

39 
igt_debugfs_›í
(
fd
, c⁄° *
fûíame
, 
mode
);

40 
__igt_debugfs_ªad
(
fd
, c⁄° *
fûíame
, *
buf
, 
buf_size
);

41 
boﬁ
 
igt_debugfs_£¨ch
(
fd
, c⁄° *
fûíame
, c⁄° *
sub°rög
);

51 
	#igt_debugfs_ªad
(
fd
, 
fûíame
, 
buf
) \

52 
	`__igt_debugfs_ªad
(
fd
, (
fûíame
), (
buf
), (buf))

	)

64 
_igt_pùe_¸c
 
	tigt_pùe_¸c_t
;

66 
	#DRM_MAX_CRC_NR
 10

	)

77 
uöt32_t
 
	m‰ame
;

78 
boﬁ
 
	mhas_vÆid_‰ame
;

79 
	mn_w‹ds
;

80 
uöt32_t
 
	m¸c
[
DRM_MAX_CRC_NR
];

81 } 
	tigt_¸c_t
;

103 
	eöãl_pùe_¸c_sour˚
 {

104 
	mINTEL_PIPE_CRC_SOURCE_NONE
,

105 
	mINTEL_PIPE_CRC_SOURCE_PLANE1
,

106 
	mINTEL_PIPE_CRC_SOURCE_PLANE2
,

107 
	mINTEL_PIPE_CRC_SOURCE_PF
,

108 
	mINTEL_PIPE_CRC_SOURCE_PIPE
,

109 
	mINTEL_PIPE_CRC_SOURCE_TV
,

110 
	mINTEL_PIPE_CRC_SOURCE_DP_B
,

111 
	mINTEL_PIPE_CRC_SOURCE_DP_C
,

112 
	mINTEL_PIPE_CRC_SOURCE_DP_D
,

113 
	mINTEL_PIPE_CRC_SOURCE_AUTO
,

114 
	mINTEL_PIPE_CRC_SOURCE_MAX
,

117 
igt_as£π_¸c_equÆ
(c⁄° 
igt_¸c_t
 *
a
, c⁄° igt_¸c_à*
b
);

118 
boﬁ
 
igt_check_¸c_equÆ
(c⁄° 
igt_¸c_t
 *
a
, c⁄° igt_¸c_à*
b
);

119 *
igt_¸c_to_°rög_exãnded
(
igt_¸c_t
 *
¸c
, 
dñimôî
, 
¸c_size
);

120 *
igt_¸c_to_°rög
(
igt_¸c_t
 *
¸c
);

122 
igt_ªquúe_pùe_¸c
(
fd
);

123 
igt_pùe_¸c_t
 *

124 
igt_pùe_¸c_√w
(
fd
, 
pùe
Öùe, 
öãl_pùe_¸c_sour˚
 
sour˚
);

125 
igt_pùe_¸c_t
 *

126 
igt_pùe_¸c_√w_n⁄block
(
fd
, 
pùe
Öùe, 
öãl_pùe_¸c_sour˚
 
sour˚
);

127 
igt_pùe_¸c_‰ì
(
igt_pùe_¸c_t
 *
pùe_¸c
);

128 
igt_pùe_¸c_°¨t
(
igt_pùe_¸c_t
 *
pùe_¸c
);

129 
igt_pùe_¸c_°›
(
igt_pùe_¸c_t
 *
pùe_¸c
);

130 
__©åibuã__
((
w¨n_unu£d_ªsu…
))

131 
igt_pùe_¸c_gë_¸cs
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
n_¸cs
,

132 
igt_¸c_t
 **
out_¸cs
);

133 
igt_pùe_¸c_cﬁÀ˘_¸c
(
igt_pùe_¸c_t
 *
pùe_¸c
, 
igt_¸c_t
 *
out_¸c
);

135 
igt_hpd_°‹m_£t_thªshﬁd
(
fd
, 
thªshﬁd
);

136 
igt_hpd_°‹m_ª£t
(
fd
);

137 
boﬁ
 
igt_hpd_°‹m_dëe˘ed
(
fd
);

138 
igt_ªquúe_hpd_°‹m_˘l
(
fd
);

149 
	#DROP_UNBOUND
 0x1

	)

155 
	#DROP_BOUND
 0x2

	)

162 
	#DROP_RETIRE
 0x4

	)

168 
	#DROP_ACTIVE
 0x8

	)

174 
	#DROP_FREED
 0x10

	)

181 
	#DROP_SHRINK_ALL
 0x20

	)

187 
	#DROP_IDLE
 0x40

	)

193 
	#DROP_ALL
 (
DROP_UNBOUND
 | \

194 
DROP_BOUND
 | \

195 
DROP_SHRINK_ALL
 | \

196 
DROP_RETIRE
 | \

197 
DROP_ACTIVE
 | \

198 
DROP_FREED
 | \

199 
DROP_IDLE
)

	)

201 
boﬁ
 
igt_dr›_ˇches_has
(
fd
, 
uöt64_t
 
vÆ
);

202 
igt_dr›_ˇches_£t
(
fd
, 
uöt64_t
 
vÆ
);

208 
igt_dißbÀ_¥eÁu…
();

209 
igt_íabÀ_¥eÁu…
();

215 
igt_gë_°abÀ_obj_cou¡
(
drivî
);

216 
igt_debugfs_dump
(
devi˚
, c⁄° *
fûíame
);

	@igt_draw.c

25 
	~<sys/mm™.h
>

27 
	~"igt_døw.h
"

29 
	~"drmã°.h
"

30 
	~"öãl_chù£t.h
"

31 
	~"igt_c‹e.h
"

32 
	~"igt_fb.h
"

33 
	~"io˘l_wøµîs.h
"

34 
	~"i830_ªg.h
"

54 
	scmd_d©a
 {

55 
drm_öãl_bufmgr
 *
	mbufmgr
;

56 
drm_öãl_c⁄ãxt
 *
	mc⁄ãxt
;

59 
	sbuf_d©a
 {

60 
uöt32_t
 
	mh™dÀ
;

61 
uöt32_t
 
	msize
;

62 
uöt32_t
 
	m°ride
;

63 
	mbµ
;

66 
	sª˘
 {

67 
	mx
;

68 
	my
;

69 
	mw
;

70 
	mh
;

80 c⁄° *
	$igt_døw_gë_mëhod_«me
(
igt_døw_mëhod
 
mëhod
)

82 
mëhod
) {

83 
IGT_DRAW_MMAP_CPU
:

85 
IGT_DRAW_MMAP_GTT
:

87 
IGT_DRAW_MMAP_WC
:

89 
IGT_DRAW_PWRITE
:

91 
IGT_DRAW_BLT
:

93 
IGT_DRAW_RENDER
:

96 
	`igt_as£π
(
Ál£
);

98 
	}
}

100 
	#BIT
(
num
, 
bô
Ë(“um >> bôË& 1)

	)

102 
	$swizzÀ_addr
(
addr
, 
swizzÀ
)

104 
bô6
;

106 
swizzÀ
) {

107 
I915_BIT_6_SWIZZLE_NONE
:

108 
bô6
 = 
	`BIT
(
addr
, 6);

110 
I915_BIT_6_SWIZZLE_9
:

111 
bô6
 = 
	`BIT
(
addr
, 6) ^ BIT(addr, 9);

113 
I915_BIT_6_SWIZZLE_9_10
:

114 
bô6
 = 
	`BIT
(
addr
, 6) ^ BIT(addr, 9) ^ BIT(addr, 10);

116 
I915_BIT_6_SWIZZLE_9_11
:

117 
bô6
 = 
	`BIT
(
addr
, 6) ^ BIT(addr, 9) ^ BIT(addr, 11);

119 
I915_BIT_6_SWIZZLE_9_10_11
:

120 
bô6
 = 
	`BIT
(
addr
, 6) ^ BIT(addr, 9) ^ BIT(addr, 10) ^

121 
	`BIT
(
addr
, 11);

123 
I915_BIT_6_SWIZZLE_UNKNOWN
:

124 
I915_BIT_6_SWIZZLE_9_17
:

125 
I915_BIT_6_SWIZZLE_9_10_17
:

129 
	`igt_ªquúe
(
Ál£
);

133 
addr
 &= ~(1 << 6);

134 
addr
 |(
bô6
 << 6);

135  
addr
;

136 
	}
}

138 
	$tûe
(
x
, 
y
, 
uöt32_t
 
x_tûe_size
, uöt32_à
y_tûe_size
,

139 
uöt32_t
 
löe_size
, 
boﬁ
 
xmaj‹
)

141 
tûe_size
, 
tûes_≥r_löe
, 
x_tûe_n
, 
y_tûe_n
, 
tûe_off
, 
pos
;

142 
tûe_n
, 
x_tûe_off
, 
y_tûe_off
;

144 
tûes_≥r_löe
 = 
löe_size
 / 
x_tûe_size
;

145 
tûe_size
 = 
x_tûe_size
 * 
y_tûe_size
;

147 
x_tûe_n
 = 
x
 / 
x_tûe_size
;

148 
y_tûe_n
 = 
y
 / 
y_tûe_size
;

149 
tûe_n
 = 
y_tûe_n
 * 
tûes_≥r_löe
 + 
x_tûe_n
;

151 
x_tûe_off
 = 
x
 % 
x_tûe_size
;

152 
y_tûe_off
 = 
y
 % 
y_tûe_size
;

154 i‡(
xmaj‹
)

155 
tûe_off
 = 
y_tûe_off
 * 
x_tûe_size
 + 
x_tûe_off
;

157 
tûe_off
 = 
x_tûe_off
 * 
y_tûe_size
 + 
y_tûe_off
;

159 
pos
 = 
tûe_n
 * 
tûe_size
 + 
tûe_off
;

161  
pos
;

162 
	}
}

164 
	$u¡ûe
(
tûed_pos
, 
x_tûe_size
, 
y_tûe_size
,

165 
uöt32_t
 
löe_size
, 
boﬁ
 
xmaj‹
, *
x
, *
y
)

167 
tûe_n
, 
tûe_off
, 
tûes_≥r_löe
;

168 
x_tûe_off
, 
y_tûe_off
;

169 
x_tûe_n
, 
y_tûe_n
;

170 
tûe_size
;

172 
tûe_size
 = 
x_tûe_size
 * 
y_tûe_size
;

173 
tûes_≥r_löe
 = 
löe_size
 / 
x_tûe_size
;

175 
tûe_n
 = 
tûed_pos
 / 
tûe_size
;

176 
tûe_off
 = 
tûed_pos
 % 
tûe_size
;

178 i‡(
xmaj‹
) {

179 
y_tûe_off
 = 
tûe_off
 / 
x_tûe_size
;

180 
x_tûe_off
 = 
tûe_off
 % 
x_tûe_size
;

182 
y_tûe_off
 = 
tûe_off
 % 
y_tûe_size
;

183 
x_tûe_off
 = 
tûe_off
 / 
y_tûe_size
;

186 
x_tûe_n
 = 
tûe_n
 % 
tûes_≥r_löe
;

187 
y_tûe_n
 = 
tûe_n
 / 
tûes_≥r_löe
;

189 *
x
 = (
x_tûe_n
 * 
x_tûe_size
 + 
x_tûe_off
);

190 *
y
 = 
y_tûe_n
 * 
y_tûe_size
 + 
y_tûe_off
;

191 
	}
}

193 
	$löór_x_y_to_xtûed_pos
(
x
, 
y
, 
uöt32_t
 
°ride
, 
swizzÀ
,

194 
bµ
)

196 
pos
;

197 
pixñ_size
 = 
bµ
 / 8;

199 
x
 *
pixñ_size
;

200 
pos
 = 
	`tûe
(
x
, 
y
, 512, 8, 
°ride
, 
åue
);

201 
pos
 = 
	`swizzÀ_addr
’os, 
swizzÀ
);

202  
pos
 / 
pixñ_size
;

203 
	}
}

205 
	$löór_x_y_to_ytûed_pos
(
x
, 
y
, 
uöt32_t
 
°ride
, 
swizzÀ
,

206 
bµ
)

208 
ow_tûe_n
, 
pos
;

209 
ow_size
 = 16;

210 
pixñ_size
 = 
bµ
 / 8;

215 
x
 *
pixñ_size
;

216 
ow_tûe_n
 = 
	`tûe
(
x
 / 
ow_size
, 
y
, 128 / ow_size, 32,

217 
°ride
 / 
ow_size
, 
Ál£
);

218 
pos
 = 
ow_tûe_n
 * 
ow_size
 + (
x
 % ow_size);

219 
pos
 = 
	`swizzÀ_addr
’os, 
swizzÀ
);

220  
pos
 / 
pixñ_size
;

221 
	}
}

223 
	$xtûed_pos_to_x_y_löór
(
tûed_pos
, 
uöt32_t
 
°ride
,

224 
swizzÀ
, 
bµ
, *
x
, *
y
)

226 
pixñ_size
 = 
bµ
 / 8;

228 
tûed_pos
 = 
	`swizzÀ_addr
—ûed_pos, 
swizzÀ
);

230 
	`u¡ûe
(
tûed_pos
, 512, 8, 
°ride
, 
åue
, 
x
, 
y
);

231 *
x
 /
pixñ_size
;

232 
	}
}

234 
	$ytûed_pos_to_x_y_löór
(
tûed_pos
, 
uöt32_t
 
°ride
,

235 
swizzÀ
, 
bµ
, *
x
, *
y
)

237 
ow_tûe_n
;

238 
ow_size
 = 16;

239 
pixñ_size
 = 
bµ
 / 8;

241 
tûed_pos
 = 
	`swizzÀ_addr
—ûed_pos, 
swizzÀ
);

243 
ow_tûe_n
 = 
tûed_pos
 / 
ow_size
;

244 
	`u¡ûe
(
ow_tûe_n
, 128 / 
ow_size
, 32, 
°ride
 / ow_size, 
Ál£
, 
x
, 
y
);

245 *
x
 *
ow_size
;

246 *
x
 +
tûed_pos
 % 
ow_size
;

247 *
x
 /
pixñ_size
;

248 
	}
}

250 
	$£t_pixñ
(*
_±r
, 
ödex
, 
uöt32_t
 
cﬁ‹
, 
bµ
)

252 i‡(
bµ
 == 16) {

253 
uöt16_t
 *
±r
 = 
_±r
;

254 
±r
[
ödex
] = 
cﬁ‹
;

255 } i‡(
bµ
 == 32) {

256 
uöt32_t
 *
±r
 = 
_±r
;

257 
±r
[
ödex
] = 
cﬁ‹
;

259 
	`igt_as£π_f
(
Ál£
, "bµ: %d\n", 
bµ
);

261 
	}
}

263 
	$swôch_b…_tûög
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
tûög
,

264 
boﬁ
 
⁄
)

266 
uöt32_t
 
bcs_sw˘æ
;

269 i‡(
tûög
 !
I915_TILING_Y
)

272 
bcs_sw˘æ
 = (0x3 << 16Ë| (
⁄
 ? 0x3 : 0x0);

277 
	`BEGIN_BATCH
(4, 0);

278 
	`OUT_BATCH
(
MI_FLUSH_DW
 | 2);

279 
	`OUT_BATCH
(0x0);

280 
	`OUT_BATCH
(0x0);

281 
	`OUT_BATCH
(0x0);

282 
	`ADVANCE_BATCH
();

284 
	`BEGIN_BATCH
(4, 0);

285 
	`OUT_BATCH
(
MI_LOAD_REGISTER_IMM
);

286 
	`OUT_BATCH
(0x22200);

287 
	`OUT_BATCH
(
bcs_sw˘æ
);

288 
	`OUT_BATCH
(
MI_NOOP
);

289 
	`ADVANCE_BATCH
();

290 
	}
}

292 
	$døw_ª˘_±r_löór
(*
±r
, 
uöt32_t
 
°ride
,

293 
ª˘
 *ª˘, 
uöt32_t
 
cﬁ‹
, 
bµ
)

295 
x
, 
y
, 
löe_begö
;

297 
y
 = 
ª˘
->y; y <Ñe˘->y +Ñe˘->
h
; y++) {

298 
löe_begö
 = 
y
 * 
°ride
 / (
bµ
 / 8);

299 
x
 = 
ª˘
->x; x <Ñe˘->x +Ñe˘->
w
; x++)

300 
	`£t_pixñ
(
±r
, 
löe_begö
 + 
x
, 
cﬁ‹
, 
bµ
);

302 
	}
}

304 
	$døw_ª˘_±r_tûed
(*
±r
, 
uöt32_t
 
°ride
, uöt32_à
tûög
,

305 
swizzÀ
, 
ª˘
 *ª˘, 
uöt32_t
 
cﬁ‹
,

306 
bµ
)

308 
x
, 
y
, 
pos
;

310 
y
 = 
ª˘
->y; y <Ñe˘->y +Ñe˘->
h
; y++) {

311 
x
 = 
ª˘
->x; x <Ñe˘->x +Ñe˘->
w
; x++) {

312 
tûög
) {

313 
I915_TILING_X
:

314 
pos
 = 
	`löór_x_y_to_xtûed_pos
(
x
, 
y
, 
°ride
,

315 
swizzÀ
, 
bµ
);

317 
I915_TILING_Y
:

318 
pos
 = 
	`löór_x_y_to_ytûed_pos
(
x
, 
y
, 
°ride
,

319 
swizzÀ
, 
bµ
);

322 
	`igt_as£π
(
Ál£
);

324 
	`£t_pixñ
(
±r
, 
pos
, 
cﬁ‹
, 
bµ
);

327 
	}
}

329 
	$døw_ª˘_mm≠_˝u
(
fd
, 
buf_d©a
 *
buf
, 
ª˘
 *rect,

330 
uöt32_t
 
cﬁ‹
)

332 
uöt32_t
 *
±r
;

333 
uöt32_t
 
tûög
, 
swizzÀ
;

335 
	`gem_£t_domaö
(
fd
, 
buf
->
h™dÀ
, 
I915_GEM_DOMAIN_CPU
,

336 
I915_GEM_DOMAIN_CPU
);

337 
	`igt_ªquúe
(
	`gem_gë_tûög
(
fd
, 
buf
->
h™dÀ
, &
tûög
, &
swizzÀ
));

340 i‡(
tûög
 !
I915_TILING_NONE
)

341 
	`igt_ªquúe
(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 5);

343 
±r
 = 
	`gem_mm≠__˝u
(
fd
, 
buf
->
h™dÀ
, 0, buf->
size
, 0);

345 
tûög
) {

346 
I915_TILING_NONE
:

347 
	`døw_ª˘_±r_löór
(
±r
, 
buf
->
°ride
, 
ª˘
, 
cﬁ‹
, buf->
bµ
);

349 
I915_TILING_X
:

350 
I915_TILING_Y
:

351 
	`døw_ª˘_±r_tûed
(
±r
, 
buf
->
°ride
, 
tûög
, 
swizzÀ
, 
ª˘
,

352 
cﬁ‹
, 
buf
->
bµ
);

355 
	`igt_as£π
(
Ál£
);

359 
	`gem_sw_föish
(
fd
, 
buf
->
h™dÀ
);

361 
	`igt_as£π
(
	`gem_munm≠
(
±r
, 
buf
->
size
) == 0);

362 
	}
}

364 
	$døw_ª˘_mm≠_gâ
(
fd
, 
buf_d©a
 *
buf
, 
ª˘
 *rect,

365 
uöt32_t
 
cﬁ‹
)

367 
uöt32_t
 *
±r
;

369 
	`gem_£t_domaö
(
fd
, 
buf
->
h™dÀ
, 
I915_GEM_DOMAIN_GTT
,

370 
I915_GEM_DOMAIN_GTT
);

372 
±r
 = 
	`gem_mm≠__gâ
(
fd
, 
buf
->
h™dÀ
, buf->
size
, 
PROT_READ
 | 
PROT_WRITE
);

374 
	`døw_ª˘_±r_löór
(
±r
, 
buf
->
°ride
, 
ª˘
, 
cﬁ‹
, buf->
bµ
);

376 
	`igt_as£π
(
	`gem_munm≠
(
±r
, 
buf
->
size
) == 0);

377 
	}
}

379 
	$døw_ª˘_mm≠_wc
(
fd
, 
buf_d©a
 *
buf
, 
ª˘
 *rect,

380 
uöt32_t
 
cﬁ‹
)

382 
uöt32_t
 *
±r
;

383 
uöt32_t
 
tûög
, 
swizzÀ
;

385 
	`gem_£t_domaö
(
fd
, 
buf
->
h™dÀ
, 
I915_GEM_DOMAIN_GTT
,

386 
I915_GEM_DOMAIN_GTT
);

387 
	`igt_ªquúe
(
	`gem_gë_tûög
(
fd
, 
buf
->
h™dÀ
, &
tûög
, &
swizzÀ
));

390 i‡(
tûög
 !
I915_TILING_NONE
)

391 
	`igt_ªquúe
(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 5);

393 
±r
 = 
	`gem_mm≠__wc
(
fd
, 
buf
->
h™dÀ
, 0, buf->
size
,

394 
PROT_READ
 | 
PROT_WRITE
);

396 
tûög
) {

397 
I915_TILING_NONE
:

398 
	`døw_ª˘_±r_löór
(
±r
, 
buf
->
°ride
, 
ª˘
, 
cﬁ‹
, buf->
bµ
);

400 
I915_TILING_X
:

401 
I915_TILING_Y
:

402 
	`døw_ª˘_±r_tûed
(
±r
, 
buf
->
°ride
, 
tûög
, 
swizzÀ
, 
ª˘
,

403 
cﬁ‹
, 
buf
->
bµ
);

406 
	`igt_as£π
(
Ál£
);

410 
	`igt_as£π
(
	`gem_munm≠
(
±r
, 
buf
->
size
) == 0);

411 
	}
}

413 
	$døw_ª˘_pwrôe_u¡ûed
(
fd
, 
buf_d©a
 *
buf
,

414 
ª˘
 *ª˘, 
uöt32_t
 
cﬁ‹
)

416 
i
, 
y
, 
off£t
;

417 
pixñ_size
 = 
buf
->
bµ
 / 8;

418 
uöt8_t
 
tmp
[
ª˘
->
w
 * 
pixñ_size
];

420 
i
 = 0; i < 
ª˘
->
w
; i++)

421 
	`£t_pixñ
(
tmp
, 
i
, 
cﬁ‹
, 
buf
->
bµ
);

423 
y
 = 
ª˘
->y; y <Ñe˘->y +Ñe˘->
h
; y++) {

424 
off£t
 = (
y
 * 
buf
->
°ride
Ë+ (
ª˘
->
x
 * 
pixñ_size
);

425 
	`gem_wrôe
(
fd
, 
buf
->
h™dÀ
, 
off£t
, 
tmp
, 
ª˘
->
w
 * 
pixñ_size
);

427 
	}
}

429 
	$døw_ª˘_pwrôe_tûed
(
fd
, 
buf_d©a
 *
buf
,

430 
uöt32_t
 
tûög
, 
ª˘
 *rect,

431 
uöt32_t
 
cﬁ‹
, uöt32_à
swizzÀ
)

433 
i
;

434 
tûed_pos
, 
x
, 
y
, 
pixñ_size
;

435 
uöt8_t
 
tmp
[4096];

436 
tmp_u£d
 = 0, 
tmp_size
;

437 
boﬁ
 
Êush_tmp
 = 
Ál£
;

438 
tmp_°¨t_pos
 = 0;

439 
pixñs_wrôãn
 = 0;

442 
	`igt_ªquúe
(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 5);

444 
pixñ_size
 = 
buf
->
bµ
 / 8;

445 
tmp_size
 = (
tmp
Ë/ 
pixñ_size
;

450 
i
 = 0; i < 
tmp_size
; i++)

451 
	`£t_pixñ
(
tmp
, 
i
, 
cﬁ‹
, 
buf
->
bµ
);

453 
tûed_pos
 = 0;Åûed_po†< 
buf
->
size
;Åûed_po†+
pixñ_size
) {

454 
tûög
) {

455 
I915_TILING_X
:

456 
	`xtûed_pos_to_x_y_löór
(
tûed_pos
, 
buf
->
°ride
,

457 
swizzÀ
, 
buf
->
bµ
, &
x
, &
y
);

459 
I915_TILING_Y
:

460 
	`ytûed_pos_to_x_y_löór
(
tûed_pos
, 
buf
->
°ride
,

461 
swizzÀ
, 
buf
->
bµ
, &
x
, &
y
);

464 
	`igt_as£π
(
Ál£
);

467 i‡(
x
 >
ª˘
->x && x <Ñe˘->x +Ñe˘->
w
 &&

468 
y
 >
ª˘
->y && y <Ñe˘->y +Ñe˘->
h
) {

469 i‡(
tmp_u£d
 == 0)

470 
tmp_°¨t_pos
 = 
tûed_pos
;

471 
tmp_u£d
++;

473 
Êush_tmp
 = 
åue
;

476 i‡(
tmp_u£d
 =
tmp_size
 || (
Êush_tmp
 &&Åmp_used > 0) ||

477 
tûed_pos
 + 
pixñ_size
 >
buf
->
size
) {

478 
	`gem_wrôe
(
fd
, 
buf
->
h™dÀ
, 
tmp_°¨t_pos
, 
tmp
,

479 
tmp_u£d
 * 
pixñ_size
);

480 
Êush_tmp
 = 
Ál£
;

481 
pixñs_wrôãn
 +
tmp_u£d
;

482 
tmp_u£d
 = 0;

484 i‡(
pixñs_wrôãn
 =
ª˘
->
w
 *Ñe˘->
h
)

488 
	}
}

490 
	$døw_ª˘_pwrôe
(
fd
, 
buf_d©a
 *
buf
,

491 
ª˘
 *ª˘, 
uöt32_t
 
cﬁ‹
)

493 
uöt32_t
 
tûög
, 
swizzÀ
;

495 
	`igt_ªquúe
(
	`gem_gë_tûög
(
fd
, 
buf
->
h™dÀ
, &
tûög
, &
swizzÀ
));

497 
tûög
) {

498 
I915_TILING_NONE
:

499 
	`døw_ª˘_pwrôe_u¡ûed
(
fd
, 
buf
, 
ª˘
, 
cﬁ‹
);

501 
I915_TILING_X
:

502 
I915_TILING_Y
:

503 
	`døw_ª˘_pwrôe_tûed
(
fd
, 
buf
, 
tûög
, 
ª˘
, 
cﬁ‹
, 
swizzÀ
);

506 
	`igt_as£π
(
Ál£
);

509 
	}
}

511 
	$døw_ª˘_b…
(
fd
, 
cmd_d©a
 *cmd_data,

512 
buf_d©a
 *
buf
, 
ª˘
 *rect,

513 
uöt32_t
 
cﬁ‹
)

515 
drm_öãl_bo
 *
d°
;

516 
öãl_b©chbuf„r
 *
b©ch
;

517 
b…_cmd_Àn
, 
b…_cmd_tûög
, 
b…_cmd_dïth
;

518 
uöt32_t
 
devid
 = 
	`öãl_gë_drm_devid
(
fd
);

519 
gí
 = 
	`öãl_gí
(
devid
);

520 
uöt32_t
 
tûög
, 
swizzÀ
;

521 
pôch
;

523 
	`igt_ªquúe
(
	`gem_gë_tûög
(
fd
, 
buf
->
h™dÀ
, &
tûög
, &
swizzÀ
));

525 
d°
 = 
	`gem_h™dÀ_to_libdrm_bo
(
cmd_d©a
->
bufmgr
, 
fd
, "", 
buf
->
h™dÀ
);

526 
	`igt_as£π
(
d°
);

528 
b©ch
 = 
	`öãl_b©chbuf„r_Æloc
(
cmd_d©a
->
bufmgr
, 
devid
);

529 
	`igt_as£π
(
b©ch
);

531 
buf
->
bµ
) {

533 
b…_cmd_dïth
 = 0;

536 
b…_cmd_dïth
 = 1 << 24;

539 
b…_cmd_dïth
 = 3 << 24;

542 
	`igt_as£π
(
Ál£
);

545 
b…_cmd_Àn
 = (
gí
 >= 8) ? 0x5 : 0x4;

546 
b…_cmd_tûög
 = (
tûög
Ë? 
XY_COLOR_BLT_TILED
 : 0;

547 
pôch
 = (
tûög
Ë? 
buf
->
°ride
 / 4 : buf->stride;

549 
	`swôch_b…_tûög
(
b©ch
, 
tûög
, 
åue
);

551 
	`BEGIN_BATCH
(6, 1);

552 
	`OUT_BATCH
(
XY_COLOR_BLT_CMD_NOLEN
 | 
XY_COLOR_BLT_WRITE_ALPHA
 |

553 
XY_COLOR_BLT_WRITE_RGB
 | 
b…_cmd_tûög
 | 
b…_cmd_Àn
);

554 
	`OUT_BATCH
(
b…_cmd_dïth
 | (0xF0 << 16Ë| 
pôch
);

555 
	`OUT_BATCH
((
ª˘
->
y
 << 16Ë|Ñe˘->
x
);

556 
	`OUT_BATCH
(((
ª˘
->
y
 +Ñe˘->
h
Ë<< 16Ë| (ª˘->
x
 +Ñe˘->
w
));

557 
	`OUT_RELOC_FENCED
(
d°
, 0, 
I915_GEM_DOMAIN_RENDER
, 0);

558 
	`OUT_BATCH
(
cﬁ‹
);

559 
	`ADVANCE_BATCH
();

561 
	`swôch_b…_tûög
(
b©ch
, 
tûög
, 
Ál£
);

563 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

564 
	`öãl_b©chbuf„r_‰ì
(
b©ch
);

565 
	}
}

567 
	$døw_ª˘_ªndî
(
fd
, 
cmd_d©a
 *cmd_data,

568 
buf_d©a
 *
buf
, 
ª˘
 *rect,

569 
uöt32_t
 
cﬁ‹
)

571 
drm_öãl_bo
 *
§c
, *
d°
;

572 
uöt32_t
 
devid
 = 
	`öãl_gë_drm_devid
(
fd
);

573 
igt_ªndî_c›yfunc_t
 
ªndîc›y
 = 
	`igt_gë_ªndî_c›yfunc
(
devid
);

574 
igt_buf
 
§c_buf
, 
d°_buf
;

575 
öãl_b©chbuf„r
 *
b©ch
;

576 
uöt32_t
 
tûög
, 
swizzÀ
;

577 
buf_d©a
 
tmp
;

578 
pixñ_size
 = 
buf
->
bµ
 / 8;

579 
adju°ed_w
, 
adju°ed_d°_x
;

581 
	`igt_skù_⁄
(!
ªndîc›y
);

586 
	`igt_skù_⁄
(
ª˘
->
x
 % (32 / 
buf
->
bµ
) != 0 ||

587 
ª˘
->
y
 % (32 / 
buf
->
bµ
) != 0 ||

588 
ª˘
->
w
 % (32 / 
buf
->
bµ
) != 0 ||

589 
ª˘
->
h
 % (32 / 
buf
->
bµ
) != 0);

591 
	`igt_ªquúe
(
	`gem_gë_tûög
(
fd
, 
buf
->
h™dÀ
, &
tûög
, &
swizzÀ
));

594 
tmp
.
size
 = 
ª˘
->
w
 *Ñe˘->
h
 * 
pixñ_size
;

595 
tmp
.
h™dÀ
 = 
	`gem_¸óã
(
fd
,Åmp.
size
);

596 
tmp
.
°ride
 = 
ª˘
->
w
 * 
pixñ_size
;

597 
tmp
.
bµ
 = 
buf
->bpp;

598 
	`døw_ª˘_mm≠_˝u
(
fd
, &
tmp
, &(
ª˘
){0, 0,Ñe˘->
w
,Ñe˘->
h
},

599 
cﬁ‹
);

601 
§c
 = 
	`gem_h™dÀ_to_libdrm_bo
(
cmd_d©a
->
bufmgr
, 
fd
, "", 
tmp
.
h™dÀ
);

602 
	`igt_as£π
(
§c
);

603 
d°
 = 
	`gem_h™dÀ_to_libdrm_bo
(
cmd_d©a
->
bufmgr
, 
fd
, "", 
buf
->
h™dÀ
);

604 
	`igt_as£π
(
d°
);

606 
§c_buf
.
bo
 = 
§c
;

607 
§c_buf
.
°ride
 = 
tmp
.stride;

608 
§c_buf
.
tûög
 = 
I915_TILING_NONE
;

609 
§c_buf
.
size
 = 
tmp
.size;

610 
d°_buf
.
bo
 = 
d°
;

611 
d°_buf
.
°ride
 = 
buf
->stride;

612 
d°_buf
.
tûög
 =Åiling;

613 
d°_buf
.
size
 = 
buf
->size;

615 
b©ch
 = 
	`öãl_b©chbuf„r_Æloc
(
cmd_d©a
->
bufmgr
, 
devid
);

616 
	`igt_as£π
(
b©ch
);

618 
buf
->
bµ
) {

621 
adju°ed_w
 = 
ª˘
->
w
 / (32 / 
buf
->
bµ
);

622 
adju°ed_d°_x
 = 
ª˘
->
x
 / (32 / 
buf
->
bµ
);

625 
	`igt_as£π
(
Ál£
);

628 
	`ªndîc›y
(
b©ch
, 
cmd_d©a
->
c⁄ãxt
, &
§c_buf
, 0, 0, 
adju°ed_w
,

629 
ª˘
->
h
, &
d°_buf
, 
adju°ed_d°_x
,Ñe˘->
y
);

631 
	`öãl_b©chbuf„r_‰ì
(
b©ch
);

632 
	`gem_˛o£
(
fd
, 
tmp
.
h™dÀ
);

633 
	}
}

655 
	$igt_døw_ª˘
(
fd
, 
drm_öãl_bufmgr
 *
bufmgr
, 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

656 
uöt32_t
 
buf_h™dÀ
, uöt32_à
buf_size
, uöt32_à
buf_°ride
,

657 
igt_døw_mëhod
 
mëhod
, 
ª˘_x
, 
ª˘_y
,

658 
ª˘_w
, 
ª˘_h
, 
uöt32_t
 
cﬁ‹
, 
bµ
)

660 
cmd_d©a
 cmd_data = {

661 .
bufmgr
 = bufmgr,

662 .
c⁄ãxt
 = context,

664 
buf_d©a
 
buf
 = {

665 .
h™dÀ
 = 
buf_h™dÀ
,

666 .
size
 = 
buf_size
,

667 .
°ride
 = 
buf_°ride
,

668 .
bµ
 = bpp,

670 
ª˘
Ñect = {

671 .
x
 = 
ª˘_x
,

672 .
y
 = 
ª˘_y
,

673 .
w
 = 
ª˘_w
,

674 .
h
 = 
ª˘_h
,

677 
mëhod
) {

678 
IGT_DRAW_MMAP_CPU
:

679 
	`døw_ª˘_mm≠_˝u
(
fd
, &
buf
, &
ª˘
, 
cﬁ‹
);

681 
IGT_DRAW_MMAP_GTT
:

682 
	`døw_ª˘_mm≠_gâ
(
fd
, &
buf
, &
ª˘
, 
cﬁ‹
);

684 
IGT_DRAW_MMAP_WC
:

685 
	`døw_ª˘_mm≠_wc
(
fd
, &
buf
, &
ª˘
, 
cﬁ‹
);

687 
IGT_DRAW_PWRITE
:

688 
	`døw_ª˘_pwrôe
(
fd
, &
buf
, &
ª˘
, 
cﬁ‹
);

690 
IGT_DRAW_BLT
:

691 
	`døw_ª˘_b…
(
fd
, &
cmd_d©a
, &
buf
, &
ª˘
, 
cﬁ‹
);

693 
IGT_DRAW_RENDER
:

694 
	`døw_ª˘_ªndî
(
fd
, &
cmd_d©a
, &
buf
, &
ª˘
, 
cﬁ‹
);

697 
	`igt_as£π
(
Ál£
);

700 
	}
}

719 
	$igt_døw_ª˘_fb
(
fd
, 
drm_öãl_bufmgr
 *
bufmgr
,

720 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
igt_fb
 *
fb
,

721 
igt_døw_mëhod
 
mëhod
, 
ª˘_x
, 
ª˘_y
,

722 
ª˘_w
, 
ª˘_h
, 
uöt32_t
 
cﬁ‹
)

724 
	`igt_døw_ª˘
(
fd
, 
bufmgr
, 
c⁄ãxt
, 
fb
->
gem_h™dÀ
, fb->
size
, fb->
°ride
,

725 
mëhod
, 
ª˘_x
, 
ª˘_y
, 
ª˘_w
, 
ª˘_h
, 
cﬁ‹
,

726 
	`igt_drm_f‹m©_to_bµ
(
fb
->
drm_f‹m©
));

727 
	}
}

737 
	$igt_døw_fûl_fb
(
fd
, 
igt_fb
 *
fb
, 
uöt32_t
 
cﬁ‹
)

739 
	`igt_døw_ª˘_fb
(
fd
, 
NULL
, NULL, 
fb
, 
IGT_DRAW_MMAP_GTT
,

740 0, 0, 
fb
->
width
, fb->
height
, 
cﬁ‹
);

741 
	}
}

	@igt_draw.h

25 #i‚de‡
__IGT_DRAW_H__


26 
	#__IGT_DRAW_H__


	)

28 
	~<öãl_bufmgr.h
>

29 
	~"igt_fb.h
"

41 
	eigt_døw_mëhod
 {

42 
	mIGT_DRAW_MMAP_CPU
,

43 
	mIGT_DRAW_MMAP_GTT
,

44 
	mIGT_DRAW_MMAP_WC
,

45 
	mIGT_DRAW_PWRITE
,

46 
	mIGT_DRAW_BLT
,

47 
	mIGT_DRAW_RENDER
,

48 
	mIGT_DRAW_METHOD_COUNT
,

51 c⁄° *
igt_døw_gë_mëhod_«me
(
igt_døw_mëhod
 
mëhod
);

53 
igt_døw_ª˘
(
fd
, 
drm_öãl_bufmgr
 *
bufmgr
, 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

54 
uöt32_t
 
buf_h™dÀ
, uöt32_à
buf_size
, uöt32_à
buf_°ride
,

55 
igt_døw_mëhod
 
mëhod
, 
ª˘_x
, 
ª˘_y
,

56 
ª˘_w
, 
ª˘_h
, 
uöt32_t
 
cﬁ‹
, 
bµ
);

58 
igt_døw_ª˘_fb
(
fd
, 
drm_öãl_bufmgr
 *
bufmgr
,

59 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
igt_fb
 *
fb
,

60 
igt_døw_mëhod
 
mëhod
, 
ª˘_x
, 
ª˘_y
,

61 
ª˘_w
, 
ª˘_h
, 
uöt32_t
 
cﬁ‹
);

63 
igt_døw_fûl_fb
(
fd
, 
igt_fb
 *
fb
, 
uöt32_t
 
cﬁ‹
);

	@igt_dummyload.c

25 
	~<time.h
>

26 
	~<sig«l.h
>

27 
	~<±hªad.h
>

29 
	~<i915_drm.h
>

31 
	~"igt_c‹e.h
"

32 
	~"igt_dummylﬂd.h
"

33 
	~"igt_gt.h
"

34 
	~"öãl_chù£t.h
"

35 
	~"öãl_ªg.h
"

36 
	~"io˘l_wøµîs.h
"

51 
	#LOCAL_I915_EXEC_BSD_SHIFT
 (13)

	)

52 
	#LOCAL_I915_EXEC_BSD_MASK
 (3 << 
LOCAL_I915_EXEC_BSD_SHIFT
)

	)

54 
	#ENGINE_MASK
 (
I915_EXEC_RING_MASK
 | 
LOCAL_I915_EXEC_BSD_MASK
)

	)

56 
	#MI_ARB_CHK
 (0x5 << 23)

	)

58 c⁄° 
	gBATCH_SIZE
 = 4096;

59 
IGT_LIST
(
•ö_li°
);

62 
	$fûl_ªloc
(
drm_i915_gem_ªloˇti⁄_íåy
 *
ªloc
,

63 
uöt32_t
 
gem_h™dÀ
, uöt32_à
off£t
,

64 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaös
)

66 
ªloc
->
èrgë_h™dÀ
 = 
gem_h™dÀ
;

67 
ªloc
->
off£t
 = off£à* (
uöt32_t
);

68 
ªloc
->
ªad_domaös
 =Ñead_domains;

69 
ªloc
->
wrôe_domaö
 = 
wrôe_domaös
;

70 
	}
}

72 
	$emô_ªcursive_b©ch
(
igt_•ö_t
 *
•ö
,

73 
fd
, 
uöt32_t
 
˘x
, 
ígöe
,

74 
uöt32_t
 
dï
)

76 
	#SCRATCH
 0

	)

77 
	#BATCH
 1

	)

78 c⁄° 
gí
 = 
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
));

79 
drm_i915_gem_exec_obje˘2
 
obj
[2];

80 
drm_i915_gem_ªloˇti⁄_íåy
 
ªlocs
[2];

81 
drm_i915_gem_execbuf„r2
 
execbuf
;

82 
ígöes
[16];

83 
√ngöe
;

84 
uöt32_t
 *
b©ch
;

85 
i
;

87 
√ngöe
 = 0;

88 i‡(
ígöe
 == -1) {

89 
	`f‹_óch_ígöe
(
fd
, 
ígöe
)

90 i‡(
ígöe
)

91 
ígöes
[
√ngöe
++] = 
ígöe
;

93 
	`gem_ªquúe_rög
(
fd
, 
ígöe
);

94 
ígöes
[
√ngöe
++] = 
ígöe
;

96 
	`igt_ªquúe
(
√ngöe
);

98 
	`mem£t
(&
execbuf
, 0, (execbuf));

99 
	`mem£t
(
obj
, 0, (obj));

100 
	`mem£t
(
ªlocs
, 0, (relocs));

102 
obj
[
BATCH
].
h™dÀ
 = 
	`gem_¸óã
(
fd
, 
BATCH_SIZE
);

103 
b©ch
 = 
	`__gem_mm≠__wc
(
fd
, 
obj
[
BATCH
].
h™dÀ
,

104 0, 
BATCH_SIZE
, 
PROT_WRITE
);

105 i‡(!
b©ch
)

106 
b©ch
 = 
	`__gem_mm≠__gâ
(
fd
, 
obj
[
BATCH
].
h™dÀ
,

107 
BATCH_SIZE
, 
PROT_WRITE
);

108 
	`gem_£t_domaö
(
fd
, 
obj
[
BATCH
].
h™dÀ
,

109 
I915_GEM_DOMAIN_GTT
, I915_GEM_DOMAIN_GTT);

110 
execbuf
.
buf„r_cou¡
++;

112 i‡(
dï
) {

114 
obj
[
SCRATCH
].
h™dÀ
 = 
dï
;

115 
	`fûl_ªloc
(&
ªlocs
[
obj
[
BATCH
].
ªloˇti⁄_cou¡
++],

116 
dï
, 1020,

117 
I915_GEM_DOMAIN_RENDER
,

118 
I915_GEM_DOMAIN_RENDER
);

119 
execbuf
.
buf„r_cou¡
++;

122 
•ö
->
b©ch
 = batch;

123 
•ö
->
h™dÀ
 = 
obj
[
BATCH
].handle;

126 *
b©ch
++ = 
MI_ARB_CHK
;

139 
b©ch
 += 1000;

142 
	`fûl_ªloc
(&
ªlocs
[
obj
[
BATCH
].
ªloˇti⁄_cou¡
],

143 
obj
[
BATCH
].
h™dÀ
, (
b©ch
 - 
•ö
->batch) + 1,

144 
I915_GEM_DOMAIN_COMMAND
, 0);

145 i‡(
gí
 >= 8) {

146 *
b©ch
++ = 
MI_BATCH_BUFFER_START
 | 1 << 8 | 1;

147 *
b©ch
++ = 0;

148 *
b©ch
++ = 0;

149 } i‡(
gí
 >= 6) {

150 *
b©ch
++ = 
MI_BATCH_BUFFER_START
 | 1 << 8;

151 *
b©ch
++ = 0;

153 *
b©ch
++ = 
MI_BATCH_BUFFER_START
 | 2 << 6;

154 *
b©ch
 = 0;

155 i‡(
gí
 < 4) {

156 *
b©ch
 |= 1;

157 
ªlocs
[
obj
[
BATCH
].
ªloˇti⁄_cou¡
].
dñè
 = 1;

159 
b©ch
++;

161 
obj
[
BATCH
].
ªloˇti⁄_cou¡
++;

162 
obj
[
BATCH
].
ªlocs_±r
 = 
	`to_u£r_poöãr
(
ªlocs
);

164 
execbuf
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(
obj
 + (2 -Éxecbuf.
buf„r_cou¡
));

165 
execbuf
.
rsvd1
 = 
˘x
;

167 
i
 = 0; i < 
√ngöe
; i++) {

168 
execbuf
.
Êags
 &~
ENGINE_MASK
;

169 
execbuf
.
Êags
 = 
ígöes
[
i
];

170 
	`gem_execbuf
(
fd
, &
execbuf
);

172 
	}
}

174 
igt_•ö_t
 *

175 
	$__igt_•ö_b©ch_√w
(
fd
, 
uöt32_t
 
˘x
, 
ígöe
, uöt32_à
dï
)

177 
igt_•ö_t
 *
•ö
;

179 
•ö
 = 
	`ˇŒoc
(1, (
igt_•ö
));

180 
	`igt_as£π
(
•ö
);

182 
	`emô_ªcursive_b©ch
(
•ö
, 
fd
, 
˘x
, 
ígöe
, 
dï
);

183 
	`igt_as£π
(
	`gem_bo_busy
(
fd
, 
•ö
->
h™dÀ
));

185 
	`igt_li°_add
(&
•ö
->
lök
, &
•ö_li°
);

187  
•ö
;

188 
	}
}

205 
igt_•ö_t
 *

206 
	$igt_•ö_b©ch_√w
(
fd
, 
uöt32_t
 
˘x
, 
ígöe
, uöt32_à
dï
)

208 
	`igt_ªquúe_gem
(
fd
);

210  
	`__igt_•ö_b©ch_√w
(
fd
, 
˘x
, 
ígöe
, 
dï
);

211 
	}
}

213 
	$nŸify
(
sigvÆ
 
¨g
)

215 
igt_•ö_t
 *
•ö
 = 
¨g
.
sivÆ_±r
;

217 
	`igt_•ö_b©ch_íd
(
•ö
);

218 
	}
}

229 
	$igt_•ö_b©ch_£t_timeout
(
igt_•ö_t
 *
•ö
, 
öt64_t
 
ns
)

231 
timî_t
 
timî
;

232 
sigevít
 
£v
;

233 
ôimî•ec
 
ôs
;

235 
	`igt_as£π
(
ns
 > 0);

236 i‡(!
•ö
)

239 
	`igt_as£π
(!
•ö
->
timî
);

241 
	`mem£t
(&
£v
, 0, (sev));

242 
£v
.
sigev_nŸify
 = 
SIGEV_THREAD
;

243 
£v
.
sigev_vÆue
.
sivÆ_±r
 = 
•ö
;

244 
£v
.
sigev_nŸify_fun˘i⁄
 = 
nŸify
;

245 
	`igt_as£π
(
	`timî_¸óã
(
CLOCK_MONOTONIC
, &
£v
, &
timî
) == 0);

246 
	`igt_as£π
(
timî
);

248 
	`mem£t
(&
ôs
, 0, (its));

249 
ôs
.
ô_vÆue
.
tv_£c
 = 
ns
 / 
NSEC_PER_SEC
;

250 
ôs
.
ô_vÆue
.
tv_n£c
 = 
ns
 % 
NSEC_PER_SEC
;

251 
	`igt_as£π
(
	`timî_£âime
(
timî
, 0, &
ôs
, 
NULL
) == 0);

253 
•ö
->
timî
 =Åimer;

254 
	}
}

262 
	$igt_•ö_b©ch_íd
(
igt_•ö_t
 *
•ö
)

264 i‡(!
•ö
)

267 *
•ö
->
b©ch
 = 
MI_BATCH_BUFFER_END
;

268 
	`__sync_synchr⁄ize
();

269 
	}
}

279 
	$igt_•ö_b©ch_‰ì
(
fd
, 
igt_•ö_t
 *
•ö
)

281 i‡(!
•ö
)

284 
	`igt_li°_dñ
(&
•ö
->
lök
);

286 i‡(
•ö
->
timî
)

287 
	`timî_dñëe
(
•ö
->
timî
);

289 
	`igt_•ö_b©ch_íd
(
•ö
);

290 
	`gem_munm≠
(
•ö
->
b©ch
, 
BATCH_SIZE
);

292 
	`gem_˛o£
(
fd
, 
•ö
->
h™dÀ
);

293 
	`‰ì
(
•ö
);

294 
	}
}

296 
	$igt_ãrmö©e_•ö_b©ches
()

298 
igt_•ö
 *
ôî
;

300 
	`igt_li°_f‹_óch
(
ôî
, &
•ö_li°
, 
lök
)

301 
	`igt_•ö_b©ch_íd
(
ôî
);

302 
	}
}

	@igt_dummyload.h

25 #i‚de‡
__IGT_DUMMYLOAD_H__


26 
	#__IGT_DUMMYLOAD_H__


	)

28 
	~<°döt.h
>

29 
	~<time.h
>

31 
	~"igt_aux.h
"

33 
	sigt_•ö
 {

34 
	mh™dÀ
;

35 
timî_t
 
	mtimî
;

36 
igt_li°
 
	mlök
;

37 
uöt32_t
 *
	mb©ch
;

38 } 
	tigt_•ö_t
;

40 
igt_•ö_t
 *
__igt_•ö_b©ch_√w
(
fd
,

41 
uöt32_t
 
˘x
,

42 
ígöe
,

43 
uöt32_t
 
dï
);

44 
igt_•ö_t
 *
igt_•ö_b©ch_√w
(
fd
,

45 
uöt32_t
 
˘x
,

46 
ígöe
,

47 
uöt32_t
 
dï
);

48 
igt_•ö_b©ch_£t_timeout
(
igt_•ö_t
 *
•ö
, 
öt64_t
 
ns
);

49 
igt_•ö_b©ch_íd
(
igt_•ö_t
 *
•ö
);

50 
igt_•ö_b©ch_‰ì
(
fd
, 
igt_•ö_t
 *
•ö
);

52 
igt_ãrmö©e_•ö_b©ches
();

	@igt_edid_template.h

1 
	#GAMMA
(
x
Ë(((xË* 100Ë- 100)

	)

3 
	#MANUFACTURER_ID
(
a
, 
b
, 
c
) (a - '@') << 2 | (b - '@') >> 3, \

4 (
b
 - '@'Ë<< 5 | (
c
 - '@')

	)

7 
	#ab
(
x
, 
y
Ë((xË& 0xff), ((yË& 0xff), (((xË& 0xf00Ë>> 4Ë| (((yË& 0xf00Ë>> 8)

	)

8 
	#›
(
ho
, 
hp
, 
vo
, 
vp
) ((ho) & 0xff), ((hp) & 0xff), \

9 (((
vo
Ë& 0xfË<< 4Ë| ((
vp
) & 0xf), \

10 (((
ho
Ë& 0x300Ë>> 2Ë| (((
hp
) & 0x300) >> 4) \

11 | (((
vo
Ë& 0x30Ë>> 2Ë| ((
vp
Ë& 0x30 >> 4)

	)

13 
	gEDID_NAME
[
EDID_LENGTH
] = {

15 
MANUFACTURER_ID
('I', 'G', 'T'),

23 0x80, 
HSIZE
, 
VSIZE
, 
GAMMA
(2.20), 0x02,

36 (
CLOCK
 / 10) & 0x00ff, ((CLOCK / 10) & 0xff00) >> 8,

37 
ab
(
HACTIVE
, 
HBLANK
),áb(
VACTIVE
, 
VBLANK
),

38 
›
(
HOFFSET
, 
HPULSE
, 
VOFFSET
, 
VPULSE
),

39 
ab
(
HSIZE
 * 10, 
VSIZE
 * 10),

43 
VFREQ
 - 1, VFREQ + 1,

44 (
CLOCK
 / (
HACTIVE
 + 
HBLANK
)) - 1,

45 (
CLOCK
 / (
HACTIVE
 + 
HBLANK
)) + 1,

46 (
CLOCK
 / 10000) + 1,

58 #unde‡
EDID_NAME


59 #unde‡
VFREQ


60 #unde‡
CLOCK


61 #unde‡
HACTIVE


62 #unde‡
HBLANK


63 #unde‡
VACTIVE


64 #unde‡
VBLANK


65 #unde‡
HOFFSET


66 #unde‡
HPULSE


67 #unde‡
VOFFSET


68 #unde‡
VPULSE


69 #unde‡
HSIZE


70 #unde‡
VSIZE


71 #unde‡
GAMMA


72 #unde‡
MANUFACTURER_ID


73 #unde‡
ab


74 #unde‡
›


	@igt_fb.c

28 
	~<°dio.h
>

29 
	~<m©h.h
>

31 
	~"drmã°.h
"

32 
	~"igt_fb.h
"

33 
	~"igt_kms.h
"

34 
	~"io˘l_wøµîs.h
"

35 
	~"öãl_chù£t.h
"

56 
	#DF
(
did
, 
cid
, 
_bµ
, 
_dïth
) \

57 { 
DRM_FORMAT_
##
did
, 
CAIRO_FORMAT_
##
cid
, #did, 
_bµ
, 
_dïth
 }

	)

58 
	sf‹m©_desc_°ru˘
 {

59 
uöt32_t
 
	mdrm_id
;

60 
ˇúo_f‹m©_t
 
	mˇúo_id
;

61 c⁄° *
	m«me
;

62 
	mbµ
;

63 
	mdïth
;

64 } 
	gf‹m©_desc
[] = {

65 
DF
(
RGB565
, 
RGB16_565
, 16, 16),

67 
DF
(
XRGB8888
, 
RGB24
, 32, 24),

68 
DF
(
XRGB2101010
, 
RGB30
, 32, 30),

69 
DF
(
ARGB8888
, 
ARGB32
, 32, 32),

71 #unde‡
DF


73 
	#f‹_óch_f‹m©
(
f
) \

74 
f
 = 
f‹m©_desc
; f - f‹m©_des¯< 
	`ARRAY_SIZE
(f‹m©_desc); f++)

	)

87 
	$igt_gë_fb_tûe_size
(
fd
, 
uöt64_t
 
tûög
, 
fb_bµ
,

88 *
width_ªt
, *
height_ªt
)

90 
tûög
) {

91 
LOCAL_DRM_FORMAT_MOD_NONE
:

92 *
width_ªt
 = 64;

93 *
height_ªt
 = 1;

95 
LOCAL_I915_FORMAT_MOD_X_TILED
:

96 
	`igt_ªquúe_öãl
(
fd
);

97 i‡(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) == 2) {

98 *
width_ªt
 = 128;

99 *
height_ªt
 = 16;

101 *
width_ªt
 = 512;

102 *
height_ªt
 = 8;

105 
LOCAL_I915_FORMAT_MOD_Y_TILED
:

106 
	`igt_ªquúe_öãl
(
fd
);

107 i‡(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) == 2) {

108 *
width_ªt
 = 128;

109 *
height_ªt
 = 16;

110 } i‡(
	`IS_915
(
	`öãl_gë_drm_devid
(
fd
))) {

111 *
width_ªt
 = 512;

112 *
height_ªt
 = 8;

114 *
width_ªt
 = 128;

115 *
height_ªt
 = 32;

118 
LOCAL_I915_FORMAT_MOD_Yf_TILED
:

119 
	`igt_ªquúe_öãl
(
fd
);

120 
fb_bµ
) {

122 *
width_ªt
 = 64;

123 *
height_ªt
 = 64;

127 *
width_ªt
 = 128;

128 *
height_ªt
 = 32;

132 *
width_ªt
 = 256;

133 *
height_ªt
 = 16;

136 
	`igt_as£π
(
Ál£
);

140 
	`igt_as£π
(
Ál£
);

142 
	}
}

157 
	$igt_ˇlc_fb_size
(
fd
, 
width
, 
height
, 
bµ
, 
uöt64_t
 
tûög
,

158 *
size_ªt
, *
°ride_ªt
)

160 
tûe_width
, 
tûe_height
, 
°ride
, 
size
;

161 
byã_width
 = 
width
 * (
bµ
 / 8);

163 
	`igt_gë_fb_tûe_size
(
fd
, 
tûög
, 
bµ
, &
tûe_width
, &
tûe_height
);

165 i‡(
tûög
 !
LOCAL_DRM_FORMAT_MOD_NONE
 &&

166 
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) <= 3) {

167 
v
;

177 
v
 = 
width
 * 
bµ
 / 8;

178 
°ride
 = 512; såidê< 
v
; stride *= 2)

181 
v
 = 
°ride
 * 
height
;

182 
size
 = 1024*1024; sizê< 
v
; size *= 2)

185 
°ride
 = 
	`ALIGN
(
byã_width
, 
tûe_width
);

186 
size
 = 
°ride
 * 
	`ALIGN
(
height
, 
tûe_height
);

189 *
°ride_ªt
 = 
°ride
;

190 *
size_ªt
 = 
size
;

191 
	}
}

203 
uöt64_t
 
	$igt_fb_mod_to_tûög
(
uöt64_t
 
modifõr
)

205 
modifõr
) {

206 
LOCAL_DRM_FORMAT_MOD_NONE
:

207  
I915_TILING_NONE
;

208 
LOCAL_I915_FORMAT_MOD_X_TILED
:

209  
I915_TILING_X
;

210 
LOCAL_I915_FORMAT_MOD_Y_TILED
:

211  
I915_TILING_Y
;

212 
LOCAL_I915_FORMAT_MOD_Yf_TILED
:

213  
I915_TILING_Yf
;

215 
	`igt_as£π
(0);

217 
	}
}

229 
uöt64_t
 
	$igt_fb_tûög_to_mod
(
uöt64_t
 
tûög
)

231 
tûög
) {

232 
I915_TILING_NONE
:

233  
LOCAL_DRM_FORMAT_MOD_NONE
;

234 
I915_TILING_X
:

235  
LOCAL_I915_FORMAT_MOD_X_TILED
;

236 
I915_TILING_Y
:

237  
LOCAL_I915_FORMAT_MOD_Y_TILED
;

238 
I915_TILING_Yf
:

239  
LOCAL_I915_FORMAT_MOD_Yf_TILED
;

241 
	`igt_as£π
(0);

243 
	}
}

246 
	$¸óã_bo_f‹_fb
(
fd
, 
width
, 
height
, 
uöt32_t
 
f‹m©
,

247 
uöt64_t
 
tûög
, 
size
, 
°ride
,

248 *
size_ªt
, *
°ride_ªt
,

249 
boﬁ
 *
is_dumb
)

251 
bµ
 = 
	`igt_drm_f‹m©_to_bµ
(
f‹m©
);

252 
bo
;

254 i‡(
tûög
 || 
size
 || 
°ride
) {

255 
ˇlcuœãd_size
, 
ˇlcuœãd_°ride
;

257 
	`igt_ˇlc_fb_size
(
fd
, 
width
, 
height
, 
bµ
, 
tûög
,

258 &
ˇlcuœãd_size
, &
ˇlcuœãd_°ride
);

259 i‡(
°ride
 == 0)

260 
°ride
 = 
ˇlcuœãd_°ride
;

261 i‡(
size
 == 0)

262 
size
 = 
ˇlcuœãd_size
;

264 i‡(
is_dumb
)

265 *
is_dumb
 = 
Ál£
;

267 i‡(
	`is_i915_devi˚
(
fd
)) {

268 
uöt32_t
 *
±r
;

270 
bo
 = 
	`gem_¸óã
(
fd
, 
size
);

271 
	`gem_£t_tûög
(
fd
, 
bo
, 
	`igt_fb_mod_to_tûög
(
tûög
), 
°ride
);

274 
±r
 = 
	`gem_mm≠__gâ
(
fd
, 
bo
, 
size
, 
PROT_READ
);

275 
	`igt_as£π
(*
±r
 == 0);

276 
	`gem_munm≠
(
±r
, 
size
);

278 i‡(
size_ªt
)

279 *
size_ªt
 = 
size
;

281 i‡(
°ride_ªt
)

282 *
°ride_ªt
 = 
°ride
;

284  
bo
;

286 
boﬁ
 
drivî_has_gem_≠i
 = 
Ál£
;

288 
	`igt_ªquúe
(
drivî_has_gem_≠i
);

289  -
EINVAL
;

292 i‡(
is_dumb
)

293 *
is_dumb
 = 
åue
;

295  
	`km°e°_dumb_¸óã
(
fd
, 
width
, 
height
, 
bµ
, 
°ride_ªt
,

296 
size_ªt
);

298 
	}
}

318 
	$igt_¸óã_bo_wôh_dimísi⁄s
(
fd
, 
width
, 
height
,

319 
uöt32_t
 
f‹m©
, 
uöt64_t
 
modifõr
,

320 
°ride
, *
size_ªt
,

321 *
°ride_ªt
, 
boﬁ
 *
is_dumb
)

323  
	`¸óã_bo_f‹_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
modifõr
, 0, 
°ride
,

324 
size_ªt
, 
°ride_ªt
, 
is_dumb
);

325 
	}
}

341 
	$igt_∑öt_cﬁ‹
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

342 
r
, 
g
, 
b
)

344 
	`ˇúo_ª˘™gÀ
(
¸
, 
x
, 
y
, 
w
, 
h
);

345 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
r
, 
g
, 
b
);

346 
	`ˇúo_fûl
(
¸
);

347 
	}
}

364 
	$igt_∑öt_cﬁ‹_Æpha
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

365 
r
, 
g
, 
b
, 
a
)

367 
	`ˇúo_ª˘™gÀ
(
¸
, 
x
, 
y
, 
w
, 
h
);

368 
	`ˇúo_£t_sour˚_rgba
(
¸
, 
r
, 
g
, 
b
, 
a
);

369 
	`ˇúo_fûl
(
¸
);

370 
	}
}

387 
	$igt_∑öt_cﬁ‹_gødõ¡
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

388 
r
, 
g
, 
b
)

390 
ˇúo_∑âîn_t
 *
∑t
;

392 
∑t
 = 
	`ˇúo_∑âîn_¸óã_löór
(
x
, 
y
, x + 
w
, y + 
h
);

393 
	`ˇúo_∑âîn_add_cﬁ‹_°›_rgba
(
∑t
, 1, 0, 0, 0, 1);

394 
	`ˇúo_∑âîn_add_cﬁ‹_°›_rgba
(
∑t
, 0, 
r
, 
g
, 
b
, 1);

396 
	`ˇúo_ª˘™gÀ
(
¸
, 
x
, 
y
, 
w
, 
h
);

397 
	`ˇúo_£t_sour˚
(
¸
, 
∑t
);

398 
	`ˇúo_fûl
(
¸
);

399 
	`ˇúo_∑âîn_de°roy
(
∑t
);

400 
	}
}

420 
	$igt_∑öt_cﬁ‹_gødõ¡_ønge
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

421 
§
, 
sg
, 
sb
,

422 
î
, 
eg
, 
eb
)

424 
ˇúo_∑âîn_t
 *
∑t
;

426 
∑t
 = 
	`ˇúo_∑âîn_¸óã_löór
(
x
, 
y
, x + 
w
, y + 
h
);

427 
	`ˇúo_∑âîn_add_cﬁ‹_°›_rgba
(
∑t
, 1, 
§
, 
sg
, 
sb
, 1);

428 
	`ˇúo_∑âîn_add_cﬁ‹_°›_rgba
(
∑t
, 0, 
î
, 
eg
, 
eb
, 1);

430 
	`ˇúo_ª˘™gÀ
(
¸
, 
x
, 
y
, 
w
, 
h
);

431 
	`ˇúo_£t_sour˚
(
¸
, 
∑t
);

432 
	`ˇúo_fûl
(
¸
);

433 
	`ˇúo_∑âîn_de°roy
(
∑t
);

434 
	}
}

437 
	$∑öt_ã°_∑âîns
(
ˇúo_t
 *
¸
, 
width
, 
height
)

439 
gr_height
, 
gr_width
;

440 
x
, 
y
;

442 
y
 = 
height
 * 0.10;

443 
gr_width
 = 
width
 * 0.75;

444 
gr_height
 = 
height
 * 0.08;

445 
x
 = (
width
 / 2Ë- (
gr_width
 / 2);

447 
	`igt_∑öt_cﬁ‹_gødõ¡
(
¸
, 
x
, 
y
, 
gr_width
, 
gr_height
, 1, 0, 0);

449 
y
 +
gr_height
;

450 
	`igt_∑öt_cﬁ‹_gødõ¡
(
¸
, 
x
, 
y
, 
gr_width
, 
gr_height
, 0, 1, 0);

452 
y
 +
gr_height
;

453 
	`igt_∑öt_cﬁ‹_gødõ¡
(
¸
, 
x
, 
y
, 
gr_width
, 
gr_height
, 0, 0, 1);

455 
y
 +
gr_height
;

456 
	`igt_∑öt_cﬁ‹_gødõ¡
(
¸
, 
x
, 
y
, 
gr_width
, 
gr_height
, 1, 1, 1);

457 
	}
}

474 
	$igt_ˇúo_¥ötf_löe
(
ˇúo_t
 *
¸
, 
igt_ãxt_Æign
 
Æign
,

475 
y•acög
, c⁄° *
fmt
, ...)

477 
x
, 
y
, 
xofs
, 
yofs
;

478 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

479 *
ãxt
;

480 
va_li°
 
≠
;

481 
ªt
;

483 
	`va_°¨t
(
≠
, 
fmt
);

484 
ªt
 = 
	`va•rötf
(&
ãxt
, 
fmt
, 
≠
);

485 
	`igt_as£π
(
ªt
 >= 0);

486 
	`va_íd
(
≠
);

488 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

490 
xofs
 = 
yofs
 = 0;

491 i‡(
Æign
 & 
Æign_right
)

492 
xofs
 = -
exã¡s
.
width
;

493 i‡(
Æign
 & 
Æign_h˚¡î
)

494 
xofs
 = -
exã¡s
.
width
 / 2;

496 i‡(
Æign
 & 
Æign_t›
)

497 
yofs
 = 
exã¡s
.
height
;

498 i‡(
Æign
 & 
Æign_v˚¡î
)

499 
yofs
 = 
exã¡s
.
height
 / 2;

501 
	`ˇúo_gë_cuºít_poöt
(
¸
, &
x
, &
y
);

502 i‡(
xofs
 || 
yofs
)

503 
	`ˇúo_ªl_move_to
(
¸
, 
xofs
, 
yofs
);

505 
	`ˇúo_ãxt_∑th
(
¸
, 
ãxt
);

506 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

507 
	`ˇúo_°roke_¥e£rve
(
¸
);

508 
	`ˇúo_£t_sour˚_rgb
(
¸
, 1, 1, 1);

509 
	`ˇúo_fûl
(
¸
);

511 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 + 
exã¡s
.
height
 + 
y•acög
);

513 
	`‰ì
(
ãxt
);

515  
exã¡s
.
width
;

516 
	}
}

519 
	$∑öt_m¨kî
(
ˇúo_t
 *
¸
, 
x
, 
y
)

521 
igt_ãxt_Æign
 
Æign
;

522 
xoff
, 
yoff
;

524 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 20);

525 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 20);

526 
	`ˇúo_move_to
(
¸
, 
x
 - 20, 
y
);

527 
	`ˇúo_löe_to
(
¸
, 
x
 + 20, 
y
);

528 
	`ˇúo_√w_sub_∑th
(
¸
);

529 
	`ˇúo_¨c
(
¸
, 
x
, 
y
, 10, 0, 
M_PI
 * 2);

530 
	`ˇúo_£t_löe_width
(
¸
, 4);

531 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

532 
	`ˇúo_°roke_¥e£rve
(
¸
);

533 
	`ˇúo_£t_sour˚_rgb
(
¸
, 1, 1, 1);

534 
	`ˇúo_£t_löe_width
(
¸
, 2);

535 
	`ˇúo_°roke
(
¸
);

537 
xoff
 = 
x
 ? -20 : 20;

538 
Æign
 = 
x
 ? 
Æign_right
 : 
Æign_À·
;

540 
yoff
 = 
y
 ? -20 : 20;

541 
Æign
 |
y
 ? 
Æign_bŸtom
 : 
Æign_t›
;

543 
	`ˇúo_move_to
(
¸
, 
x
 + 
xoff
, 
y
 + 
yoff
);

544 
	`ˇúo_£t_f⁄t_size
(
¸
, 18);

545 
	`igt_ˇúo_¥ötf_löe
(
¸
, 
Æign
, 0, "(%d, %d)", 
x
, 
y
);

546 
	}
}

562 
	$igt_∑öt_ã°_∑âîn
(
ˇúo_t
 *
¸
, 
width
, 
height
)

564 
	`∑öt_ã°_∑âîns
(
¸
, 
width
, 
height
);

566 
	`ˇúo_£t_löe_ˇp
(
¸
, 
CAIRO_LINE_CAP_SQUARE
);

569 
	`∑öt_m¨kî
(
¸
, 0, 0);

570 
	`∑öt_m¨kî
(
¸
, 
width
, 0);

571 
	`∑öt_m¨kî
(
¸
, 0, 
height
);

572 
	`∑öt_m¨kî
(
¸
, 
width
, 
height
);

574 
	`igt_as£π
(!
	`ˇúo_°©us
(
¸
));

575 
	}
}

577 
ˇúo_°©us_t


578 
	$°dio_ªad_func
(*
˛osuª
, * 
d©a
, 
size
)

580 i‡(
	`‰ód
(
d©a
, 1, 
size
, (
FILE
*)
˛osuª
) != size)

581  
CAIRO_STATUS_READ_ERROR
;

583  
CAIRO_STATUS_SUCCESS
;

584 
	}
}

586 
ˇúo_surÁ˚_t
 *
	$igt_ˇúo_image_surÁ˚_¸óã_‰om_≤g
(c⁄° *
fûíame
)

588 
ˇúo_surÁ˚_t
 *
image
;

589 
FILE
 *
f
;

591 
f
 = 
	`igt_f›í_d©a
(
fûíame
);

592 
image
 = 
	`ˇúo_image_surÁ˚_¸óã_‰om_≤g_°ªam
(&
°dio_ªad_func
, 
f
);

593 
	`f˛o£
(
f
);

595  
image
;

596 
	}
}

610 
	$igt_∑öt_image
(
ˇúo_t
 *
¸
, c⁄° *
fûíame
,

611 
d°_x
, 
d°_y
, 
d°_width
, 
d°_height
)

613 
ˇúo_surÁ˚_t
 *
image
;

614 
img_width
, 
img_height
;

615 
sˇÀ_x
, 
sˇÀ_y
;

617 
image
 = 
	`igt_ˇúo_image_surÁ˚_¸óã_‰om_≤g
(
fûíame
);

618 
	`igt_as£π
(
	`ˇúo_surÁ˚_°©us
(
image
Ë=
CAIRO_STATUS_SUCCESS
);

620 
img_width
 = 
	`ˇúo_image_surÁ˚_gë_width
(
image
);

621 
img_height
 = 
	`ˇúo_image_surÁ˚_gë_height
(
image
);

623 
sˇÀ_x
 = ()
d°_width
 / 
img_width
;

624 
sˇÀ_y
 = ()
d°_height
 / 
img_height
;

626 
	`ˇúo_ßve
(
¸
);

628 
	`ˇúo_å™¶©e
(
¸
, 
d°_x
, 
d°_y
);

629 
	`ˇúo_sˇÀ
(
¸
, 
sˇÀ_x
, 
sˇÀ_y
);

630 
	`ˇúo_£t_sour˚_surÁ˚
(
¸
, 
image
, 0, 0);

631 
	`ˇúo_∑öt
(
¸
);

633 
	`ˇúo_surÁ˚_de°roy
(
image
);

635 
	`ˇúo_ª°‹e
(
¸
);

636 
	}
}

660 
	$igt_¸óã_fb_wôh_bo_size
(
fd
, 
width
, 
height
,

661 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

662 
igt_fb
 *
fb
, 
bo_size
,

663 
bo_°ride
)

665 
uöt32_t
 
fb_id
;

667 
	`mem£t
(
fb
, 0, (*fb));

669 
	`igt_debug
("%s(width=%d, height=%d, f‹m©=0x%x,Åûög=0x%"
PRIx64
", size=%d)\n",

670 
__func__
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
bo_size
);

671 
fb
->
gem_h™dÀ
 = 
	`¸óã_bo_f‹_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
,

672 
bo_size
, 
bo_°ride
, &
fb
->
size
,

673 &
fb
->
°ride
, &fb->
is_dumb
);

674 
	`igt_as£π
(
fb
->
gem_h™dÀ
 > 0);

676 
	`igt_debug
("%s(handle=%d,Öitch=%d)\n",

677 
__func__
, 
fb
->
gem_h™dÀ
, fb->
°ride
);

679 i‡(
tûög
 !
LOCAL_DRM_FORMAT_MOD_NONE
 &&

680 
tûög
 !
LOCAL_I915_FORMAT_MOD_X_TILED
) {

681 
	`do_‹_dõ
(
	`__kms_addfb
(
fd
, 
fb
->
gem_h™dÀ
, 
width
, 
height
,

682 
fb
->
°ride
, 
f‹m©
, 
tûög
,

683 
LOCAL_DRM_MODE_FB_MODIFIERS
, &
fb_id
));

685 
uöt32_t
 
h™dÀs
[4];

686 
uöt32_t
 
pôches
[4];

687 
uöt32_t
 
off£ts
[4];

689 
	`mem£t
(
h™dÀs
, 0, (handles));

690 
	`mem£t
(
pôches
, 0, (pitches));

691 
	`mem£t
(
off£ts
, 0, (offsets));

693 
h™dÀs
[0] = 
fb
->
gem_h™dÀ
;

694 
pôches
[0] = 
fb
->
°ride
;

696 
	`do_‹_dõ
(
	`drmModeAddFB2
(
fd
, 
width
, 
height
, 
f‹m©
,

697 
h™dÀs
, 
pôches
, 
off£ts
,

698 &
fb_id
, 0));

701 
fb
->
width
 = width;

702 
fb
->
height
 = height;

703 
fb
->
tûög
 =Åiling;

704 
fb
->
drm_f‹m©
 = 
f‹m©
;

705 
fb
->
fb_id
 = fb_id;

706 
fb
->
fd
 = fd;

708  
fb_id
;

709 
	}
}

730 
	$igt_¸óã_fb
(
fd
, 
width
, 
height
, 
uöt32_t
 
f‹m©
,

731 
uöt64_t
 
tûög
, 
igt_fb
 *
fb
)

733  
	`igt_¸óã_fb_wôh_bo_size
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
fb
,

735 
	}
}

760 
	$igt_¸óã_cﬁ‹_fb
(
fd
, 
width
, 
height
,

761 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

762 
r
, 
g
, 
b
,

763 
igt_fb
 *
fb
 )

765 
fb_id
;

766 
ˇúo_t
 *
¸
;

768 
fb_id
 = 
	`igt_¸óã_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
fb
);

769 
	`igt_as£π
(
fb_id
);

771 
¸
 = 
	`igt_gë_ˇúo_˘x
(
fd
, 
fb
);

772 
	`igt_∑öt_cﬁ‹
(
¸
, 0, 0, 
width
, 
height
, 
r
, 
g
, 
b
);

773 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
) == 0);

774 
	`ˇúo_de°roy
(
¸
);

776  
fb_id
;

777 
	}
}

799 
	$igt_¸óã_∑âîn_fb
(
fd
, 
width
, 
height
,

800 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

801 
igt_fb
 *
fb
 )

803 
fb_id
;

804 
ˇúo_t
 *
¸
;

806 
fb_id
 = 
	`igt_¸óã_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
fb
);

807 
	`igt_as£π
(
fb_id
);

809 
¸
 = 
	`igt_gë_ˇúo_˘x
(
fd
, 
fb
);

810 
	`igt_∑öt_ã°_∑âîn
(
¸
, 
width
, 
height
);

811 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
) == 0);

812 
	`ˇúo_de°roy
(
¸
);

814  
fb_id
;

815 
	}
}

841 
	$igt_¸óã_cﬁ‹_∑âîn_fb
(
fd
, 
width
, 
height
,

842 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

843 
r
, 
g
, 
b
,

844 
igt_fb
 *
fb
 )

846 
fb_id
;

847 
ˇúo_t
 *
¸
;

849 
fb_id
 = 
	`igt_¸óã_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
fb
);

850 
	`igt_as£π
(
fb_id
);

852 
¸
 = 
	`igt_gë_ˇúo_˘x
(
fd
, 
fb
);

853 
	`igt_∑öt_cﬁ‹
(
¸
, 0, 0, 
width
, 
height
, 
r
, 
g
, 
b
);

854 
	`igt_∑öt_ã°_∑âîn
(
¸
, 
width
, 
height
);

855 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
) == 0);

856 
	`ˇúo_de°roy
(
¸
);

858  
fb_id
;

859 
	}
}

878 
	$igt_¸óã_image_fb
(
fd
, 
width
, 
height
,

879 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

880 c⁄° *
fûíame
,

881 
igt_fb
 *
fb
 )

883 
ˇúo_surÁ˚_t
 *
image
;

884 
uöt32_t
 
fb_id
;

885 
ˇúo_t
 *
¸
;

887 
image
 = 
	`igt_ˇúo_image_surÁ˚_¸óã_‰om_≤g
(
fûíame
);

888 
	`igt_as£π
(
	`ˇúo_surÁ˚_°©us
(
image
Ë=
CAIRO_STATUS_SUCCESS
);

889 i‡(
width
 == 0)

890 
width
 = 
	`ˇúo_image_surÁ˚_gë_width
(
image
);

891 i‡(
height
 == 0)

892 
height
 = 
	`ˇúo_image_surÁ˚_gë_height
(
image
);

893 
	`ˇúo_surÁ˚_de°roy
(
image
);

895 
fb_id
 = 
	`igt_¸óã_fb
(
fd
, 
width
, 
height
, 
f‹m©
, 
tûög
, 
fb
);

897 
¸
 = 
	`igt_gë_ˇúo_˘x
(
fd
, 
fb
);

898 
	`igt_∑öt_image
(
¸
, 
fûíame
, 0, 0, 
width
, 
height
);

899 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
) == 0);

900 
	`ˇúo_de°roy
(
¸
);

902  
fb_id
;

903 
	}
}

905 
	sbox
 {

906 
	mx
, 
	my
, 
	mwidth
, 
	mheight
;

909 
	s°îeo_fb_œyout
 {

910 
	mfb_width
, 
	mfb_height
;

911 
box
 
	mÀ·
, 
	mright
;

914 
	$box_öô
(
box
 *box, 
x
, 
y
, 
bwidth
, 
bheight
)

916 
box
->
x
 = x;

917 
box
->
y
 = y;

918 
box
->
width
 = 
bwidth
;

919 
box
->
height
 = 
bheight
;

920 
	}
}

923 
	$°îeo_fb_œyout_‰om_mode
(
°îeo_fb_œyout
 *
œyout
,

924 
drmModeModeInfo
 *
mode
)

926 
f‹m©
 = 
mode
->
Êags
 & 
DRM_MODE_FLAG_3D_MASK
;

927 c⁄° 
hdi•œy
 = 
mode
->hdi•œy, 
vdi•œy
 = mode->vdisplay;

928 
middÀ
;

930 
f‹m©
) {

931 
DRM_MODE_FLAG_3D_TOP_AND_BOTTOM
:

932 
œyout
->
fb_width
 = 
hdi•œy
;

933 
œyout
->
fb_height
 = 
vdi•œy
;

935 
middÀ
 = 
vdi•œy
 / 2;

936 
	`box_öô
(&
œyout
->
À·
, 0, 0, 
hdi•œy
, 
middÀ
);

937 
	`box_öô
(&
œyout
->
right
,

938 0, 
middÀ
, 
hdi•œy
, 
vdi•œy
 - middle);

940 
DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF
:

941 
œyout
->
fb_width
 = 
hdi•œy
;

942 
œyout
->
fb_height
 = 
vdi•œy
;

944 
middÀ
 = 
hdi•œy
 / 2;

945 
	`box_öô
(&
œyout
->
À·
, 0, 0, 
middÀ
, 
vdi•œy
);

946 
	`box_öô
(&
œyout
->
right
,

947 
middÀ
, 0, 
hdi•œy
 - middÀ, 
vdi•œy
);

949 
DRM_MODE_FLAG_3D_FRAME_PACKING
:

951 
va˘ive_•a˚
 = 
mode
->
vtŸÆ
 - 
vdi•œy
;

953 
œyout
->
fb_width
 = 
hdi•œy
;

954 
œyout
->
fb_height
 = 2 * 
vdi•œy
 + 
va˘ive_•a˚
;

956 
	`box_öô
(&
œyout
->
À·
,

957 0, 0, 
hdi•œy
, 
vdi•œy
);

958 
	`box_öô
(&
œyout
->
right
,

959 0, 
vdi•œy
 + 
va˘ive_•a˚
, 
hdi•œy
, vdisplay);

963 
	`igt_as£π
(0);

965 
	}
}

980 
	$igt_¸óã_°îeo_fb
(
drm_fd
, 
drmModeModeInfo
 *
mode
,

981 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
)

983 
°îeo_fb_œyout
 
œyout
;

984 
ˇúo_t
 *
¸
;

985 
uöt32_t
 
fb_id
;

986 
igt_fb
 
fb
;

988 
	`°îeo_fb_œyout_‰om_mode
(&
œyout
, 
mode
);

989 
fb_id
 = 
	`igt_¸óã_fb
(
drm_fd
, 
œyout
.
fb_width
,Üayout.
fb_height
, 
f‹m©
,

990 
tûög
, &
fb
);

991 
¸
 = 
	`igt_gë_ˇúo_˘x
(
drm_fd
, &
fb
);

993 
	`igt_∑öt_image
(
¸
, "1080p-left.png",

994 
œyout
.
À·
.
x
,Üayout.À·.
y
,

995 
œyout
.
À·
.
width
,Üayout.À·.
height
);

996 
	`igt_∑öt_image
(
¸
, "1080p-right.png",

997 
œyout
.
right
.
x
,Üayout.right.
y
,

998 
œyout
.
right
.
width
,Üayout.right.
height
);

1000 
	`ˇúo_de°roy
(
¸
);

1002  
fb_id
;

1003 
	}
}

1005 
ˇúo_f‹m©_t
 
	$drm_f‹m©_to_ˇúo
(
uöt32_t
 
drm_f‹m©
)

1007 
f‹m©_desc_°ru˘
 *
f
;

1009 
	`f‹_óch_f‹m©
(
f
)

1010 i‡(
f
->
drm_id
 =
drm_f‹m©
)

1011  
f
->
ˇúo_id
;

1013 
	`igt_as£π_f
(0, "can't findá cairo format for %08x (%s)\n",

1014 
drm_f‹m©
, 
	`igt_f‹m©_°r
(drm_format));

1015 
	}
}

1017 
	sfb_blô_u∂ﬂd
 {

1018 
	mfd
;

1019 
igt_fb
 *
	mfb
;

1021 
uöt32_t
 
	mh™dÀ
;

1022 
	msize
, 
	m°ride
;

1023 
uöt8_t
 *
	mm≠
;

1024 
boﬁ
 
	mis_dumb
;

1025 } 
	mlöór
;

1028 
	$de°roy_ˇúo_surÁ˚__blô
(*
¨g
)

1030 
fb_blô_u∂ﬂd
 *
blô
 = 
¨g
;

1031 
igt_fb
 *
fb
 = 
blô
->fb;

1032 
obj_tûög
 = 
	`igt_fb_mod_to_tûög
(
fb
->
tûög
);

1034 
	`gem_munm≠
(
blô
->
löór
.
m≠
, blô->löór.
size
);

1035 
fb
->
ˇúo_surÁ˚
 = 
NULL
;

1037 
	`gem_£t_domaö
(
blô
->
fd
, blô->
löór
.
h™dÀ
,

1038 
I915_GEM_DOMAIN_GTT
, 0);

1040 
	`igt_blôãr_Á°_c›y__øw
(
blô
->
fd
,

1041 
blô
->
löór
.
h™dÀ
,

1042 
blô
->
löór
.
°ride
,

1043 
I915_TILING_NONE
,

1045 
fb
->
width
, fb->
height
,

1046 
fb
->
gem_h™dÀ
,

1047 
fb
->
°ride
,

1048 
obj_tûög
,

1051 
	`gem_sync
(
blô
->
fd
, blô->
löór
.
h™dÀ
);

1052 
	`gem_˛o£
(
blô
->
fd
, blô->
löór
.
h™dÀ
);

1054 
	`‰ì
(
blô
);

1055 
	}
}

1057 
	$¸óã_ˇúo_surÁ˚__blô
(
fd
, 
igt_fb
 *
fb
)

1059 
fb_blô_u∂ﬂd
 *
blô
;

1060 
ˇúo_f‹m©_t
 
ˇúo_f‹m©
;

1061 
obj_tûög
 = 
	`igt_fb_mod_to_tûög
(
fb
->
tûög
);

1063 
blô
 = 
	`mÆloc
((*blit));

1064 
	`igt_as£π
(
blô
);

1071 
blô
->
löór
.
h™dÀ
 = 
	`¸óã_bo_f‹_fb
(
fd
, 
fb
->
width
, fb->
height
,

1072 
fb
->
drm_f‹m©
,

1073 
LOCAL_DRM_FORMAT_MOD_NONE
, 0,

1074 0, &
blô
->
löór
.
size
,

1075 &
blô
->
löór
.
°ride
,

1076 &
blô
->
löór
.
is_dumb
);

1078 
	`igt_as£π
(
blô
->
löór
.
h™dÀ
 > 0);

1080 
blô
->
fd
 = fd;

1081 
blô
->
fb
 = fb;

1084 
	`gem_£t_domaö
(
fd
, 
blô
->
löór
.
h™dÀ
,

1085 
I915_GEM_DOMAIN_GTT
, 0);

1087 
	`igt_blôãr_Á°_c›y__øw
(
fd
,

1088 
fb
->
gem_h™dÀ
,

1089 
fb
->
°ride
,

1090 
obj_tûög
,

1092 
fb
->
width
, fb->
height
,

1093 
blô
->
löór
.
h™dÀ
,

1094 
blô
->
löór
.
°ride
,

1095 
I915_TILING_NONE
,

1098 
	`gem_sync
(
fd
, 
blô
->
löór
.
h™dÀ
);

1100 
	`gem_£t_domaö
(
fd
, 
blô
->
löór
.
h™dÀ
,

1101 
I915_GEM_DOMAIN_CPU
, I915_GEM_DOMAIN_CPU);

1104 
blô
->
löór
.
m≠
 = 
	`gem_mm≠__˝u
(
fd
,

1105 
blô
->
löór
.
h™dÀ
,

1107 
blô
->
löór
.
size
,

1108 
PROT_READ
 | 
PROT_WRITE
);

1110 
ˇúo_f‹m©
 = 
	`drm_f‹m©_to_ˇúo
(
fb
->
drm_f‹m©
);

1111 
fb
->
ˇúo_surÁ˚
 =

1112 
	`ˇúo_image_surÁ˚_¸óã_f‹_d©a
(
blô
->
löór
.
m≠
,

1113 
ˇúo_f‹m©
,

1114 
fb
->
width
, fb->
height
,

1115 
blô
->
löór
.
°ride
);

1116 
fb
->
domaö
 = 
I915_GEM_DOMAIN_GTT
;

1118 
	`ˇúo_surÁ˚_£t_u£r_d©a
(
fb
->
ˇúo_surÁ˚
,

1119 (
ˇúo_u£r_d©a_key_t
 *)
¸óã_ˇúo_surÁ˚__blô
,

1120 
blô
, 
de°roy_ˇúo_surÁ˚__blô
);

1121 
	}
}

1132 
	$igt_dúty_fb
(
fd
, 
igt_fb
 *
fb
)

1134  
	`drmModeDútyFB
(
fb
->
fd
, fb->
fb_id
, 
NULL
, 0);

1135 
	}
}

1137 
	$de°roy_ˇúo_surÁ˚__gâ
(*
¨g
)

1139 
igt_fb
 *
fb
 = 
¨g
;

1141 
	`gem_munm≠
(
	`ˇúo_image_surÁ˚_gë_d©a
(
fb
->
ˇúo_surÁ˚
), fb->
size
);

1142 
fb
->
ˇúo_surÁ˚
 = 
NULL
;

1144 i‡(
fb
->
is_dumb
)

1145 
	`igt_dúty_fb
(
fb
->
fd
, fb);

1146 
	}
}

1148 
	$¸óã_ˇúo_surÁ˚__gâ
(
fd
, 
igt_fb
 *
fb
)

1150 *
±r
;

1152 i‡(
fb
->
is_dumb
)

1153 
±r
 = 
	`km°e°_dumb_m≠_buf„r
(
fd
, 
fb
->
gem_h™dÀ
, fb->
size
,

1154 
PROT_READ
 | 
PROT_WRITE
);

1156 
±r
 = 
	`gem_mm≠__gâ
(
fd
, 
fb
->
gem_h™dÀ
, fb->
size
,

1157 
PROT_READ
 | 
PROT_WRITE
);

1159 
fb
->
ˇúo_surÁ˚
 =

1160 
	`ˇúo_image_surÁ˚_¸óã_f‹_d©a
(
±r
,

1161 
	`drm_f‹m©_to_ˇúo
(
fb
->
drm_f‹m©
),

1162 
fb
->
width
, fb->
height
, fb->
°ride
);

1163 
fb
->
domaö
 = 
I915_GEM_DOMAIN_GTT
;

1165 
	`ˇúo_surÁ˚_£t_u£r_d©a
(
fb
->
ˇúo_surÁ˚
,

1166 (
ˇúo_u£r_d©a_key_t
 *)
¸óã_ˇúo_surÁ˚__gâ
,

1167 
fb
, 
de°roy_ˇúo_surÁ˚__gâ
);

1168 
	}
}

1181 
ˇúo_surÁ˚_t
 *
	$igt_gë_ˇúo_surÁ˚
(
fd
, 
igt_fb
 *
fb
)

1183 i‡(
fb
->
ˇúo_surÁ˚
 =
NULL
) {

1184 i‡(
fb
->
tûög
 =
LOCAL_I915_FORMAT_MOD_Y_TILED
 ||

1185 
fb
->
tûög
 =
LOCAL_I915_FORMAT_MOD_Yf_TILED
)

1186 
	`¸óã_ˇúo_surÁ˚__blô
(
fd
, 
fb
);

1188 
	`¸óã_ˇúo_surÁ˚__gâ
(
fd
, 
fb
);

1191 i‡(!
fb
->
is_dumb
)

1192 
	`gem_£t_domaö
(
fd
, 
fb
->
gem_h™dÀ
, 
I915_GEM_DOMAIN_CPU
,

1193 
I915_GEM_DOMAIN_CPU
);

1195 
	`igt_as£π
(
	`ˇúo_surÁ˚_°©us
(
fb
->
ˇúo_surÁ˚
Ë=
CAIRO_STATUS_SUCCESS
);

1196  
fb
->
ˇúo_surÁ˚
;

1197 
	}
}

1212 
ˇúo_t
 *
	$igt_gë_ˇúo_˘x
(
fd
, 
igt_fb
 *
fb
)

1214 
ˇúo_surÁ˚_t
 *
surÁ˚
;

1215 
ˇúo_t
 *
¸
;

1217 
surÁ˚
 = 
	`igt_gë_ˇúo_surÁ˚
(
fd
, 
fb
);

1218 
¸
 = 
	`ˇúo_¸óã
(
surÁ˚
);

1219 
	`ˇúo_surÁ˚_de°roy
(
surÁ˚
);

1220 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
Ë=
CAIRO_STATUS_SUCCESS
);

1222 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, "Hñvëiˇ", 
CAIRO_FONT_SLANT_NORMAL
,

1223 
CAIRO_FONT_WEIGHT_NORMAL
);

1224 
	`igt_as£π
(
	`ˇúo_°©us
(
¸
Ë=
CAIRO_STATUS_SUCCESS
);

1226  
¸
;

1227 
	}
}

1238 
	$igt_ªmove_fb
(
fd
, 
igt_fb
 *
fb
)

1240 
	`ˇúo_surÁ˚_de°roy
(
fb
->
ˇúo_surÁ˚
);

1241 
	`do_‹_dõ
(
	`drmModeRmFB
(
fd
, 
fb
->
fb_id
));

1242 
	`gem_˛o£
(
fd
, 
fb
->
gem_h™dÀ
);

1243 
	}
}

1254 
uöt32_t
 
	$igt_bµ_dïth_to_drm_f‹m©
(
bµ
, 
dïth
)

1256 
f‹m©_desc_°ru˘
 *
f
;

1258 
	`f‹_óch_f‹m©
(
f
)

1259 i‡(
f
->
bµ
 =bµ && f->
dïth
 == depth)

1260  
f
->
drm_id
;

1263 
	`igt_as£π_f
(0, "ˇn'àföd drm f‹m© wôh bµ=%d, dïth=%d\n", 
bµ
,

1264 
dïth
);

1265 
	}
}

1275 
uöt32_t
 
	$igt_drm_f‹m©_to_bµ
(
uöt32_t
 
drm_f‹m©
)

1277 
f‹m©_desc_°ru˘
 *
f
;

1279 
	`f‹_óch_f‹m©
(
f
)

1280 i‡(
f
->
drm_id
 =
drm_f‹m©
)

1281  
f
->
bµ
;

1283 
	`igt_as£π_f
(0, "can't findá bpp format for %08x (%s)\n",

1284 
drm_f‹m©
, 
	`igt_f‹m©_°r
(drm_format));

1285 
	}
}

1295 c⁄° *
	$igt_f‹m©_°r
(
uöt32_t
 
drm_f‹m©
)

1297 
f‹m©_desc_°ru˘
 *
f
;

1299 
	`f‹_óch_f‹m©
(
f
)

1300 i‡(
f
->
drm_id
 =
drm_f‹m©
)

1301  
f
->
«me
;

1304 
	}
}

1314 
	$igt_gë_Æl_ˇúo_f‹m©s
(c⁄° 
uöt32_t
 **
f‹m©s
, *
f‹m©_cou¡
)

1316 
uöt32_t
 *
drm_f‹m©s
;

1317 
n_f‹m©s
;

1319 i‡(!
drm_f‹m©s
) {

1320 
f‹m©_desc_°ru˘
 *
f
;

1321 
uöt32_t
 *
f‹m©
;

1323 
n_f‹m©s
 = 0;

1324 
	`f‹_óch_f‹m©
(
f
)

1325 i‡(
f
->
ˇúo_id
 !
CAIRO_FORMAT_INVALID
)

1326 
n_f‹m©s
++;

1328 
drm_f‹m©s
 = 
	`ˇŒoc
(
n_f‹m©s
, (*drm_formats));

1329 
f‹m©
 = &
drm_f‹m©s
[0];

1330 
	`f‹_óch_f‹m©
(
f
)

1331 i‡(
f
->
ˇúo_id
 !
CAIRO_FORMAT_INVALID
)

1332 *
f‹m©
++ = 
f
->
drm_id
;

1335 *
f‹m©s
 = 
drm_f‹m©s
;

1336 *
f‹m©_cou¡
 = 
n_f‹m©s
;

1337 
	}
}

	@igt_fb.h

28 #i‚de‡
__IGT_FB_H__


29 
	#__IGT_FB_H__


	)

32 #i‡(!
deföed
(
ANDROID
)Ë|| (deföed(ANDROIDË&& 
ANDROID_HAS_CAIRO
)

33 
	~<ˇúo.h
>

35 
_ˇúo_surÁ˚
 
	tˇúo_surÁ˚_t
;

36 
_ˇúo
 
	tˇúo_t
;

39 
	~<°ddef.h
>

40 
	~<°dboﬁ.h
>

41 
	~<drm_fourcc.h
>

42 
	~<xf86drmMode.h
>

44 
	~<i915_drm.h
>

63 
	sigt_fb
 {

64 
uöt32_t
 
	mfb_id
;

65 
	mfd
;

66 
uöt32_t
 
	mgem_h™dÀ
;

67 
boﬁ
 
	mis_dumb
;

68 
uöt32_t
 
	mdrm_f‹m©
;

69 
	mwidth
;

70 
	mheight
;

71 
	m°ride
;

72 
uöt64_t
 
	mtûög
;

73 
	msize
;

74 
ˇúo_surÁ˚_t
 *
	mˇúo_surÁ˚
;

75 
	mdomaö
;

76 } 
	tigt_fb_t
;

89 
	eigt_ãxt_Æign
 {

90 
	mÆign_À·
,

91 
	mÆign_bŸtom
 = 
Æign_À·
,

92 
	mÆign_right
 = 0x01,

93 
	mÆign_t›
 = 0x02,

94 
	mÆign_v˚¡î
 = 0x04,

95 
	mÆign_h˚¡î
 = 0x08,

98 
igt_gë_fb_tûe_size
(
fd
, 
uöt64_t
 
tûög
, 
fb_bµ
,

99 *
width_ªt
, *
height_ªt
);

100 
igt_ˇlc_fb_size
(
fd
, 
width
, 
height
, 
bµ
, 
uöt64_t
 
tûög
,

101 *
size_ªt
, *
°ride_ªt
);

103 
igt_¸óã_fb_wôh_bo_size
(
fd
, 
width
, 
height
,

104 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

105 
igt_fb
 *
fb
, 
bo_size
,

106 
bo_°ride
);

107 
igt_¸óã_fb
(
fd
, 
width
, 
height
, 
uöt32_t
 
f‹m©
,

108 
uöt64_t
 
tûög
, 
igt_fb
 *
fb
);

109 
igt_¸óã_cﬁ‹_fb
(
fd
, 
width
, 
height
,

110 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

111 
r
, 
g
, 
b
,

112 
igt_fb
 *
fb
 );

113 
igt_¸óã_∑âîn_fb
(
fd
, 
width
, 
height
,

114 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

115 
igt_fb
 *
fb
 );

116 
igt_¸óã_cﬁ‹_∑âîn_fb
(
fd
, 
width
, 
height
,

117 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

118 
r
, 
g
, 
b
,

119 
igt_fb
 *
fb
 );

120 
igt_¸óã_image_fb
(
drm_fd
, 
width
, 
height
,

121 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
,

122 c⁄° *
fûíame
,

123 
igt_fb
 *
fb
 );

124 
igt_¸óã_°îeo_fb
(
drm_fd
, 
drmModeModeInfo
 *
mode
,

125 
uöt32_t
 
f‹m©
, 
uöt64_t
 
tûög
);

126 
igt_ªmove_fb
(
fd
, 
igt_fb
 *
fb
);

127 
igt_dúty_fb
(
fd
, 
igt_fb
 *
fb
);

129 
igt_¸óã_bo_wôh_dimísi⁄s
(
fd
, 
width
, 
height
, 
uöt32_t
 
f‹m©
,

130 
uöt64_t
 
modifõr
, 
°ride
,

131 *
°ride_ªt
, *
size_ªt
,

132 
boﬁ
 *
is_dumb
);

134 
uöt64_t
 
igt_fb_mod_to_tûög
(uöt64_à
modifõr
);

135 
uöt64_t
 
igt_fb_tûög_to_mod
(uöt64_à
tûög
);

138 
ˇúo_surÁ˚_t
 *
igt_gë_ˇúo_surÁ˚
(
fd
, 
igt_fb
 *
fb
);

139 
ˇúo_surÁ˚_t
 *
igt_ˇúo_image_surÁ˚_¸óã_‰om_≤g
(c⁄° *
fûíame
);

140 
ˇúo_t
 *
igt_gë_ˇúo_˘x
(
fd
, 
igt_fb
 *
fb
);

141 
igt_∑öt_cﬁ‹
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

142 
r
, 
g
, 
b
);

143 
igt_∑öt_cﬁ‹_Æpha
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

144 
r
, 
g
, 
b
, 
a
);

145 
igt_∑öt_cﬁ‹_gødõ¡
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

146 
r
, 
g
, 
b
);

147 
igt_∑öt_cﬁ‹_gødõ¡_ønge
(
ˇúo_t
 *
¸
, 
x
, 
y
, 
w
, 
h
,

148 
§
, 
sg
, 
sb
,

149 
î
, 
eg
, 
eb
);

150 
igt_∑öt_ã°_∑âîn
(
ˇúo_t
 *
¸
, 
width
, 
height
);

151 
igt_∑öt_image
(
ˇúo_t
 *
¸
, c⁄° *
fûíame
,

152 
d°_x
, 
d°_y
, 
d°_width
, 
d°_height
);

153 
	$igt_ˇúo_¥ötf_löe
(
ˇúo_t
 *
¸
, 
igt_ãxt_Æign
 
Æign
,

154 
y•acög
, c⁄° *
fmt
, ...)

155 
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 4, 5)));

158 
uöt32_t
 
	`igt_bµ_dïth_to_drm_f‹m©
(
bµ
, 
dïth
);

159 
uöt32_t
 
	`igt_drm_f‹m©_to_bµ
(uöt32_à
drm_f‹m©
);

160 c⁄° *
	`igt_f‹m©_°r
(
uöt32_t
 
drm_f‹m©
);

161 
	`igt_gë_Æl_ˇúo_f‹m©s
(c⁄° 
uöt32_t
 **
f‹m©s
, *
f‹m©_cou¡
);

	@igt_frame.c

27 
	~"c⁄fig.h
"

29 
	~<f˙é.h
>

30 
	~<pixm™.h
>

31 
	~<ˇúo.h
>

32 
	~<g¶/g¶_°©i°ics_doubÀ.h
>

33 
	~<g¶/g¶_fô.h
>

35 
	~"igt_‰ame.h
"

36 
	~"igt_c‹e.h
"

55 
boﬁ
 
	$igt_‰ame_dump_is_íabÀd
()

57  
igt_‰ame_dump_∑th
 !
NULL
;

58 
	}
}

60 
	$igt_wrôe_‰ame_to_≤g
(
ˇúo_surÁ˚_t
 *
surÁ˚
, 
fd
,

61 c⁄° *
quÆifõr
, c⁄° *
suffix
)

63 
∑th
[
PATH_MAX
];

64 c⁄° *
ã°_«me
;

65 c⁄° *
subã°_«me
;

66 
ˇúo_°©us_t
 
°©us
;

67 
ödex
;

69 
ã°_«me
 = 
	`igt_ã°_«me
();

70 
subã°_«me
 = 
	`igt_subã°_«me
();

72 i‡(
suffix
)

73 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s/frame-%s-%s-%s-%s.png",

74 
igt_‰ame_dump_∑th
, 
ã°_«me
, 
subã°_«me
, 
quÆifõr
,

75 
suffix
);

77 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s/frame-%s-%s-%s.png",

78 
igt_‰ame_dump_∑th
, 
ã°_«me
, 
subã°_«me
, 
quÆifõr
);

80 
	`igt_debug
("Dumpög %†‰amêtÿ%s...\n", 
quÆifõr
, 
∑th
);

82 
°©us
 = 
	`ˇúo_surÁ˚_wrôe_to_≤g
(
surÁ˚
, 
∑th
);

84 
	`igt_as£π_eq
(
°©us
, 
CAIRO_STATUS_SUCCESS
);

86 
ödex
 = 
	`°æí
(
∑th
);

88 i‡(
fd
 >0 && 
ödex
 < (
PATH_MAX
 - 1)) {

89 
∑th
[
ödex
++] = '\n';

90 
∑th
[
ödex
] = '\0';

92 
	`wrôe
(
fd
, 
∑th
, 
	`°æí
(path));

94 
	}
}

105 
	$igt_wrôe_com∑ªd_‰ames_to_≤g
(
ˇúo_surÁ˚_t
 *
ª„ªn˚
,

106 
ˇúo_surÁ˚_t
 *
ˇ±uª
,

107 c⁄° *
ª„ªn˚_suffix
,

108 c⁄° *
ˇ±uª_suffix
)

110 *
id
;

111 c⁄° *
ã°_«me
;

112 c⁄° *
subã°_«me
;

113 
∑th
[
PATH_MAX
];

114 
fd
 = -1;

116 i‡(!
	`igt_‰ame_dump_is_íabÀd
())

119 
id
 = 
	`gëív
("IGT_FRAME_DUMP_ID");

121 
ã°_«me
 = 
	`igt_ã°_«me
();

122 
subã°_«me
 = 
	`igt_subã°_«me
();

124 i‡(
id
)

125 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s/frame-%s-%s-%s.txt",

126 
igt_‰ame_dump_∑th
, 
ã°_«me
, 
subã°_«me
, 
id
);

128 
	`¢¥ötf
(
∑th
, 
PATH_MAX
, "%s/frame-%s-%s.txt",

129 
igt_‰ame_dump_∑th
, 
ã°_«me
, 
subã°_«me
);

131 
fd
 = 
	`›í
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0644);

132 
	`igt_as£π
(
fd
 >= 0);

134 
	`igt_debug
("Wrôög dum∞ªp‹àtÿ%s...\n", 
∑th
);

136 
	`igt_wrôe_‰ame_to_≤g
(
ª„ªn˚
, 
fd
, "ª„ªn˚", 
ª„ªn˚_suffix
);

137 
	`igt_wrôe_‰ame_to_≤g
(
ˇ±uª
, 
fd
, "ˇ±uª", 
ˇ±uª_suffix
);

139 
	`˛o£
(
fd
);

140 
	}
}

169 
boﬁ
 
	$igt_check_™Æog_‰ame_m©ch
(
ˇúo_surÁ˚_t
 *
ª„ªn˚
,

170 
ˇúo_surÁ˚_t
 *
ˇ±uª
)

172 
pixm™_image_t
 *
ª„ªn˚_§c
, *
ˇ±uª_§c
;

173 
w
, 
h
;

174 
îr‹_cou¡
[3][256][2] = { 0 };

175 
îr‹_avîage
[4][250];

176 
îr‹_åíd
[250];

177 
c0
, 
c1
, 
cov00
, 
cov01
, 
cov11
, 
sumsq
;

178 
c‹ªœti⁄
;

179 *
ª„ªn˚_pixñs
, *
ˇ±uª_pixñs
;

180 *
p
;

181 *
q
;

182 
boﬁ
 
m©ch
 = 
åue
;

183 
diff
;

184 
x
, 
y
;

185 
i
, 
j
;

187 
w
 = 
	`ˇúo_image_surÁ˚_gë_width
(
ª„ªn˚
);

188 
h
 = 
	`ˇúo_image_surÁ˚_gë_height
(
ª„ªn˚
);

190 
ª„ªn˚_§c
 = 
	`pixm™_image_¸óã_bôs
(

191 
PIXMAN_x8r8g8b8
, 
w
, 
h
,

192 (*)
	`ˇúo_image_surÁ˚_gë_d©a
(
ª„ªn˚
),

193 
	`ˇúo_image_surÁ˚_gë_°ride
(
ª„ªn˚
));

194 
ª„ªn˚_pixñs
 = (*Ë
	`pixm™_image_gë_d©a
(
ª„ªn˚_§c
);

196 
ˇ±uª_§c
 = 
	`pixm™_image_¸óã_bôs
(

197 
PIXMAN_x8r8g8b8
, 
w
, 
h
,

198 (*)
	`ˇúo_image_surÁ˚_gë_d©a
(
ˇ±uª
),

199 
	`ˇúo_image_surÁ˚_gë_°ride
(
ˇ±uª
));

200 
ˇ±uª_pixñs
 = (*Ë
	`pixm™_image_gë_d©a
(
ˇ±uª_§c
);

203 
x
 = 0; x < 
w
; x++) {

204 
y
 = 0; y < 
h
; y++) {

205 
p
 = &
ˇ±uª_pixñs
[(
x
 + 
y
 * 
w
) * 4];

206 
q
 = &
ª„ªn˚_pixñs
[(
x
 + 
y
 * 
w
) * 4];

208 
i
 = 0; i < 3; i++) {

209 
diff
 = (Ë
p
[
i
] - 
q
[i];

210 i‡(
diff
 < 0)

211 
diff
 = -diff;

213 
îr‹_cou¡
[
i
][
q
[i]][0] +
diff
;

214 
îr‹_cou¡
[
i
][
q
[i]][1]++;

220 
i
 = 0; i < 250; i++) {

221 
îr‹_avîage
[0][
i
] = i;

223 
j
 = 1; j < 4; j++) {

224 
îr‹_avîage
[
j
][
i
] = (Ë
îr‹_cou¡
[j-1][i][0] /

225 
îr‹_cou¡
[
j
-1][
i
][1];

227 i‡(
îr‹_avîage
[
j
][
i
] > 60) {

228 
	`igt_w¨n
("ErroráverageÅoo high (%f)\n",

229 
îr‹_avîage
[
j
][
i
]);

231 
m©ch
 = 
Ál£
;

232 
com∂ëe
;

242 
i
 = 1; i < 4; i++) {

243 
	`g¶_fô_löór
((c⁄° *Ë&
îr‹_avîage
[0], 1,

244 (c⁄° *Ë&
îr‹_avîage
[
i
], 1, 250,

245 &
c0
, &
c1
, &
cov00
, &
cov01
, &
cov11
, &
sumsq
);

247 
j
 = 0; j < 250; j++)

248 
îr‹_åíd
[
j
] = 
c0
 + j * 
c1
;

250 
c‹ªœti⁄
 = 
	`g¶_°©s_c‹ªœti⁄
((c⁄° *Ë&
îr‹_åíd
,

252 (c⁄° *Ë&
îr‹_avîage
[
i
],

255 i‡(
c‹ªœti⁄
 < 0.985) {

256 
	`igt_w¨n
("Error withÑeferenceÇot correlated (%f)\n",

257 
c‹ªœti⁄
);

259 
m©ch
 = 
Ál£
;

260 
com∂ëe
;

264 
com∂ëe
:

265 
	`pixm™_image_uƒef
(
ª„ªn˚_§c
);

266 
	`pixm™_image_uƒef
(
ˇ±uª_§c
);

268  
m©ch
;

269 
	}
}

	@igt_frame.h

27 #i‚de‡
IGT_FRAME_H


28 
	#IGT_FRAME_H


	)

30 
	~"c⁄fig.h
"

32 
	~<°dboﬁ.h
>

34 
boﬁ
 
igt_‰ame_dump_is_íabÀd
();

35 
igt_wrôe_com∑ªd_‰ames_to_≤g
(
ˇúo_surÁ˚_t
 *
ª„ªn˚
,

36 
ˇúo_surÁ˚_t
 *
ˇ±uª
,

37 c⁄° *
ª„ªn˚_suffix
,

38 c⁄° *
ˇ±uª_suffix
);

39 
boﬁ
 
igt_check_™Æog_‰ame_m©ch
(
ˇúo_surÁ˚_t
 *
ª„ªn˚
,

40 
ˇúo_surÁ˚_t
 *
ˇ±uª
);

	@igt_gt.c

24 
	~<limôs.h
>

25 
	~<°rög.h
>

26 
	~<°rögs.h
>

27 
	~<sig«l.h
>

28 
	~<î∫o.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/io˘l.h
>

32 
	~<f˙é.h
>

34 
	~"drmã°.h
"

35 
	~"igt_aux.h
"

36 
	~"igt_c‹e.h
"

37 
	~"igt_gt.h
"

38 
	~"igt_sysfs.h
"

39 
	~"igt_debugfs.h
"

40 
	~"io˘l_wøµîs.h
"

41 
	~"öãl_ªg.h
"

42 
	~"öãl_chù£t.h
"

55 
boﬁ
 
	$has_gpu_ª£t
(
fd
)

57 
⁄˚
 = -1;

58 i‡(
⁄˚
 < 0) {

59 
drm_i915_gë∑øm
 
gp
;

60 
vÆ
 = 0;

62 
	`mem£t
(&
gp
, 0, (gp));

63 
gp
.
∑øm
 = 35;

64 
gp
.
vÆue
 = &
vÆ
;

66 i‡(
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
))

67 
⁄˚
 = 
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 5;

69 
⁄˚
 = 
vÆ
 > 0;

71  
⁄˚
;

72 
	}
}

74 
	$ót_îr‹_°©e
(
dev
)

76 
dú
;

78 
dú
 = 
	`igt_sysfs_›í
(
dev
, 
NULL
);

79 i‡(
dú
 < 0)

83 
	`igt_sysfs_£t
(
dú
, "error", "");

84 
	`˛o£
(
dú
);

85 
	}
}

116 
	$igt_ªquúe_h™g_rög
(
fd
, 
rög
)

118 i‡(!
	`igt_check_boﬁón_ív_v¨
("IGT_HANG", 
åue
))

119 
	`igt_skù
("hang injection disabled by user");

121 
	`gem_ªquúe_rög
(
fd
, 
rög
);

122 
	`gem_c⁄ãxt_ªquúe_b™«bÀ
(
fd
);

123 i‡(!
	`igt_check_boﬁón_ív_v¨
("IGT_HANG_WITHOUT_RESET", 
Ál£
))

124 
	`igt_ªquúe
(
	`has_gpu_ª£t
(
fd
));

125 
	}
}

127 
	$c⁄ãxt_gë_b™
(
fd
, 
˘x
)

129 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
;

131 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_BANNABLE
;

132 
∑øm
.
vÆue
 = 0;

133 
∑øm
.
size
 = 0;

135 i‡(
	`__gem_c⁄ãxt_gë_∑øm
(
fd
, &
∑øm
Ë=-
EINVAL
) {

136 
	`igt_as£π
(
∑øm
.
vÆue
 == 0);

137 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_BAN_PERIOD
;

138 
	`gem_c⁄ãxt_gë_∑øm
(
fd
, &
∑øm
);

141  
∑øm
.
vÆue
;

142 
	}
}

144 
	$c⁄ãxt_£t_b™
(
fd
, 
˘x
, 
b™
)

146 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
;

148 
	`mem£t
(&
∑øm
, 0, (param));

149 
∑øm
.
c⁄ãxt
 = 
˘x
;

150 
∑øm
.
vÆue
 = 
b™
;

151 
∑øm
.
size
 = 0;

152 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_BANNABLE
;

154 if(
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
Ë=-
EINVAL
) {

155 
	`igt_as£π
(
∑øm
.
vÆue
 =
b™
);

156 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_BAN_PERIOD
;

157 
	`gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
);

159 
	}
}

161 
igt_h™g_t
 
	$igt_Ælow_h™g
(
fd
, 
˘x
, 
Êags
)

163 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
;

164 
b™
;

166 
	`igt_as£π
(
igt_sysfs_£t_∑ømëî


167 (
fd
, "ª£t", "%d", 
INT_MAX
 ));

169 i‡(!
	`igt_check_boﬁón_ív_v¨
("IGT_HANG", 
åue
))

170 
	`igt_skù
("hang injection disabled by user");

171 
	`gem_c⁄ãxt_ªquúe_b™«bÀ
(
fd
);

172 i‡(!
	`igt_check_boﬁón_ív_v¨
("IGT_HANG_WITHOUT_RESET", 
Ál£
))

173 
	`igt_ªquúe
(
	`has_gpu_ª£t
(
fd
));

175 
∑øm
.
c⁄ãxt
 = 
˘x
;

176 
∑øm
.
size
 = 0;

178 i‡((
Êags
 & 
HANG_ALLOW_CAPTURE
) == 0) {

179 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
;

180 
∑øm
.
vÆue
 = 1;

185 
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
);

188 
b™
 = 
	`c⁄ãxt_gë_b™
(
fd
, 
˘x
);

189 i‡((
Êags
 & 
HANG_ALLOW_BAN
) == 0)

190 
	`c⁄ãxt_£t_b™
(
fd
, 
˘x
, 0);

192  (
igt_h™g
){ 0, 
˘x
, 
b™
, 
Êags
 };

193 
	}
}

195 
	$igt_dißŒow_h™g
(
fd
, 
igt_h™g_t
 
¨g
)

198 
	`c⁄ãxt_£t_b™
(
fd
, 
¨g
.
˘x
,árg.
b™
);

200 i‡((
¨g
.
Êags
 & 
HANG_ALLOW_CAPTURE
) == 0) {

201 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
 = {

202 .
c⁄ãxt
 = 
¨g
.
˘x
,

203 .
∑øm
 = 
LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
,

204 .
vÆue
 = 0,

206 
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
);

208 
	`ót_îr‹_°©e
(
fd
);

210 
	}
}

225 
boﬁ
 
	$has_˘x_exec
(
fd
, 
rög
, 
uöt32_t
 
˘x
)

227 
drm_i915_gem_execbuf„r2
 
execbuf
;

228 
drm_i915_gem_exec_obje˘2
 
exec
;

231 i‡((
rög
 & ~(3<<13)Ë=
I915_EXEC_BSD
) {

232 i‡(
rög
 & (3 << 13Ë&& !
	`gem_has_bsd2
(
fd
))

233  
Ál£
;

236 
	`mem£t
(&
exec
, 0, (exec));

237 
	`mem£t
(&
execbuf
, 0, (execbuf));

238 
execbuf
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(&
exec
);

239 
execbuf
.
buf„r_cou¡
 = 1;

240 
execbuf
.
Êags
 = 
rög
;

241 
execbuf
.
rsvd1
 = 
˘x
;

247  
	`__gem_execbuf
(
fd
, &
execbuf
Ë=-
ENOENT
;

248 
	}
}

266 
igt_h™g_t
 
	$igt_h™g_˘x
(
fd
,

267 
uöt32_t
 
˘x
,

268 
rög
,

269 
Êags
,

270 
uöt64_t
 *
off£t
)

272 
drm_i915_gem_ªloˇti⁄_íåy
 
ªloc
;

273 
drm_i915_gem_execbuf„r2
 
execbuf
;

274 
drm_i915_gem_exec_obje˘2
 
exec
;

275 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
;

276 
uöt32_t
 
b
[16];

277 
b™
;

278 
Àn
;

280 
	`igt_ªquúe_h™g_rög
(
fd
, 
rög
);

283 
	`igt_ªquúe
(
˘x
 =0 || 
	`has_˘x_exec
(
fd
, 
rög
, ctx));

285 
∑øm
.
c⁄ãxt
 = 
˘x
;

286 
∑øm
.
size
 = 0;

288 i‡((
Êags
 & 
HANG_ALLOW_CAPTURE
) == 0) {

289 
∑øm
.∑øm = 
LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
;

290 
∑øm
.
vÆue
 = 1;

295 
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
);

298 
b™
 = 
	`c⁄ãxt_gë_b™
(
fd
, 
˘x
);

300 i‡((
Êags
 & 
HANG_ALLOW_BAN
) == 0)

301 
	`c⁄ãxt_£t_b™
(
fd
, 
˘x
, 0);

303 
	`mem£t
(&
ªloc
, 0, (reloc));

304 
	`mem£t
(&
exec
, 0, (exec));

305 
	`mem£t
(&
execbuf
, 0, (execbuf));

307 
exec
.
h™dÀ
 = 
	`gem_¸óã
(
fd
, 4096);

308 
exec
.
ªloˇti⁄_cou¡
 = 1;

309 
exec
.
ªlocs_±r
 = 
	`to_u£r_poöãr
(&
ªloc
);

311 
	`mem£t
(
b
, 0xc5, (b));

313 
Àn
 = 2;

314 i‡(
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 8)

315 
Àn
++;

316 
b
[0] = 
MI_BATCH_BUFFER_START
 | (
Àn
 - 2);

317 
b
[
Àn
] = 
MI_BATCH_BUFFER_END
;

318 
b
[
Àn
+1] = 
MI_NOOP
;

319 
	`gem_wrôe
(
fd
, 
exec
.
h™dÀ
, 0, 
b
, (b));

321 
ªloc
.
off£t
 = (
uöt32_t
);

322 
ªloc
.
èrgë_h™dÀ
 = 
exec
.
h™dÀ
;

323 
ªloc
.
ªad_domaös
 = 
I915_GEM_DOMAIN_COMMAND
;

325 
execbuf
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(&
exec
);

326 
execbuf
.
buf„r_cou¡
 = 1;

327 
execbuf
.
Êags
 = 
rög
;

328 
	`i915_execbuf„r2_£t_c⁄ãxt_id
(
execbuf
, 
˘x
);

329 
	`gem_execbuf
(
fd
, &
execbuf
);

331 i‡(
off£t
)

332 *
off£t
 = 
exec
.offset;

334  (
igt_h™g_t
){ 
exec
.
h™dÀ
, 
˘x
, 
b™
, 
Êags
 };

335 
	}
}

349 
igt_h™g_t
 
	$igt_h™g_rög
(
fd
, 
rög
)

351  
	`igt_h™g_˘x
(
fd
, 0, 
rög
, 0, 
NULL
);

352 
	}
}

362 
	$igt_po°_h™g_rög
(
fd
, 
igt_h™g_t
 
¨g
)

364 i‡(
¨g
.
h™dÀ
 == 0)

367 
	`gem_£t_domaö
(
fd
, 
¨g
.
h™dÀ
,

368 
I915_GEM_DOMAIN_GTT
, I915_GEM_DOMAIN_GTT);

369 
	`gem_˛o£
(
fd
, 
¨g
.
h™dÀ
);

371 
	`c⁄ãxt_£t_b™
(
fd
, 
¨g
.
˘x
,árg.
b™
);

373 i‡((
¨g
.
Êags
 & 
HANG_ALLOW_CAPTURE
) == 0) {

374 
loˇl_i915_gem_c⁄ãxt_∑øm
 
∑øm
 = {

375 .
c⁄ãxt
 = 
¨g
.
˘x
,

376 .
∑øm
 = 
LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
,

377 .
vÆue
 = 0,

379 
	`__gem_c⁄ãxt_£t_∑øm
(
fd
, &
∑øm
);

381 
	`ót_îr‹_°©e
(
fd
);

383 
	}
}

393 
	$igt_f‹˚_gpu_ª£t
(
drm_fd
)

395 
dú
, 
wedged
;

397 
	`igt_debug
("Triggering GPUÑeset\n");

399 
dú
 = 
	`igt_debugfs_dú
(
drm_fd
);

401 
	`igt_sysfs_£t
(
dú
, "i915_wedged", "-1");

402 
	`igt_sysfs_sˇnf
(
dú
, "i915_wedged", "%d", &
wedged
);

404 
	`˛o£
(
dú
);

406 
	`igt_as£π
(!
wedged
);

407 
	}
}

410 
igt_hñ≥r_¥o˚ss
 
	gh™g_hñ≥r
;

411 
__©åibuã__
((
n‹ëu∫
))

412 
	$h™g_hñ≥r_¥o˚ss
(
pid_t
 
pid
, 
fd
)

415 i‡(
	`kûl
(
pid
, 0))

416 
	`exô
(0);

418 
	`igt_po°_h™g_rög
(
fd
,

419 
	`igt_h™g_rög
(
fd
, 
I915_EXEC_DEFAULT
));

421 
	`¶ìp
(1);

423 
	}
}

437 
	$igt_f‹k_h™g_hñ≥r
()

439 
fd
, 
gí
;

441 
fd
 = 
	`drm_›í_drivî
(
DRIVER_INTEL
);

443 
gí
 = 
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
));

444 
	`igt_skù_⁄
(
gí
 < 5);

446 
	`igt_f‹k_hñ≥r
(&
h™g_hñ≥r
)

447 
	`h™g_hñ≥r_¥o˚ss
(
	`gëµid
(), 
fd
);

449 
	`˛o£
(
fd
);

450 
	}
}

460 
	$igt_°›_h™g_hñ≥r
()

462 i‡(
h™g_hñ≥r
.
ru¬ög
)

463 
	`igt_°›_hñ≥r
(&
h™g_hñ≥r
);

464 
	}
}

475 
	$igt_›í_f‹˚wake_h™dÀ
(
fd
)

477 i‡(
	`gëív
("IGT_NO_FORCEWAKE"))

479  
	`igt_debugfs_›í
(
fd
, "i915_f‹˚wake_u£r", 
O_WRONLY
);

480 
	}
}

482 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

483 
	g˛Êush_size
;

485 
	$igt_£tup_˛Êush
()

487 
FILE
 *
fûe
;

488 *
löe
 = 
NULL
;

489 
size_t
 
size
 = 0;

490 
fú°_°™za
 = 1;

491 
has_˛Êush
 = 0;

493 i‡(
˛Êush_size
)

496 
fûe
 = 
	`f›í
("/proc/cpuinfo", "r");

497 i‡(
fûe
 =
NULL
)

500 
	`gëlöe
(&
löe
, &
size
, 
fûe
) != -1) {

501 i‡(
	`°∫cmp
(
löe
, "processor", 9) == 0) {

502 i‡(!
fú°_°™za
)

504 
fú°_°™za
 = 0;

507 i‡(
	`°∫cmp
(
löe
, "flags", 5) == 0) {

508 i‡(
	`°r°r
(
löe
, "clflush"))

509 
has_˛Êush
 = 1;

512 i‡(
	`°∫cmp
(
löe
, "clflush size", 12) == 0) {

513 *
cﬁ⁄
 = 
	`°rchr
(
löe
, ':');

514 i‡(
cﬁ⁄
)

515 
˛Êush_size
 = 
	`©oi
(
cﬁ⁄
 + 1);

518 
	`‰ì
(
löe
);

519 
	`f˛o£
(
fûe
);

521  
has_˛Êush
 && 
˛Êush_size
;

522 
	}
}

524 
__©åibuã__
((
èrgë
("sse2")))

525 
	$igt_˛Êush_ønge
(*
addr
, 
size
)

527 *
p
, *
íd
;

529 
íd
 = (*)
addr
 + 
size
;

530 
p
 = (*)((
uöçå_t
)
addr
 & ~((uöçå_t)
˛Êush_size
 - 1));

532 
	`__buûtö_ü32_m„n˚
();

533 ; 
p
 < 
íd
;Ö +
˛Êush_size
)

534 
	`__buûtö_ü32_˛Êush
(
p
);

535 
	`__buûtö_ü32_˛Êush
(
íd
 - 1);

536 
	`__buûtö_ü32_m„n˚
();

537 
	}
}

539 
	$igt_£tup_˛Êush
()

543 
	}
}

545 
	$igt_˛Êush_ønge
(*
addr
, 
size
)

547 
	`Ârötf
(
°dîr
, "igt_clflush_range() unsupported\n");

548 
	}
}

560 
	$öãl_dëe˘_™d_˛ór_mis£d_öãºu±s
(
fd
)

562 
mis£d
;

563 
dú
;

565 
	`gem_quõs˚¡_gpu
(
fd
);

567 
dú
 = 
	`igt_debugfs_dú
(
fd
);

569 
mis£d
 = 0;

570 
	`igt_as£π
(
	`igt_sysfs_sˇnf
(
dú
, "i915_rög_mis£d_úq", "%x", &
mis£d
) == 1);

571 i‡(
mis£d
)

572 
	`igt_sysfs_£t
(
dú
, "i915_ring_missed_irq", "0");

574 
	`˛o£
(
dú
);

576 
î∫o
 = 0;

577  
mis£d
;

578 
	}
}

580 c⁄° 
öãl_executi⁄_ígöe
 
	göãl_executi⁄_ígöes
[] = {

581 { "deÁu…", 
NULL
, 0, 0 },

582 { "ªndî", "rcs0", 
I915_EXEC_RENDER
, 0 },

583 { "bsd", "vcs0", 
I915_EXEC_BSD
, 0 },

584 { "bsd1", "vcs0", 
I915_EXEC_BSD
, 1<<13 },

585 { "bsd2", "vcs1", 
I915_EXEC_BSD
, 2<<13 },

586 { "b…", "bcs0", 
I915_EXEC_BLT
, 0 },

587 { "vebox", "vecs0", 
I915_EXEC_VEBOX
, 0 },

588 { 
NULL
, 0, 0 }

591 
boﬁ
 
	$gem_ˇn_°‹e_dw‹d
(
fd
, 
ígöe
)

593 
uöt16_t
 
devid
 = 
	`öãl_gë_drm_devid
(
fd
);

594 c⁄° 
öãl_devi˚_öfo
 *
öfo
 = 
	`öãl_gë_devi˚_öfo
(
devid
);

595 c⁄° 
gí
 = 
	`ffs
(
öfo
->gen);

597 i‡(
gí
 <= 2)

598  
Ál£
;

600 i‡(
gí
 =3 && (
öfo
->
is_gø¡sdÆe
 || info->
is_Æviso
))

601  
Ál£
;

603 i‡(
gí
 =6 && (
ígöe
 & ~(3<<13)Ë=
I915_EXEC_BSD
)

604  
Ál£
;

606 i‡(
öfo
->
is_brﬂdw©î
)

607  
Ál£
;

609  
åue
;

610 
	}
}

	@igt_gt.h

24 #i‚de‡
IGT_GT_H


25 
	#IGT_GT_H


	)

27 
	~"igt_debugfs.h
"

29 
igt_ªquúe_h™g_rög
(
fd
, 
rög
);

31 
	sigt_h™g
 {

32 
	mh™dÀ
;

33 
	m˘x
;

34 
	mb™
;

35 
	mÊags
;

36 } 
	tigt_h™g_t
;

38 
igt_h™g_t
 
igt_Ælow_h™g
(
fd
, 
˘x
, 
Êags
);

39 
igt_dißŒow_h™g
(
fd
, 
igt_h™g_t
 
¨g
);

41 
	#HANG_POISON
 0xc5c5c5c5

	)

43 
igt_h™g_t
 
igt_h™g_˘x
(
fd
,

44 
uöt32_t
 
˘x
,

45 
rög
,

46 
Êags
,

47 
uöt64_t
 *
off£t
);

48 
	#HANG_ALLOW_BAN
 1

	)

49 
	#HANG_ALLOW_CAPTURE
 2

	)

51 
igt_h™g_t
 
igt_h™g_rög
(
fd
, 
rög
);

52 
igt_po°_h™g_rög
(
fd
, 
igt_h™g_t
 
¨g
);

54 
igt_f‹˚_gpu_ª£t
(
fd
);

56 
igt_f‹k_h™g_hñ≥r
();

57 
igt_°›_h™g_hñ≥r
();

59 
igt_›í_f‹˚wake_h™dÀ
(
fd
);

61 
igt_£tup_˛Êush
();

62 
igt_˛Êush_ønge
(*
addr
, 
size
);

64 
öãl_dëe˘_™d_˛ór_mis£d_öãºu±s
(
fd
);

66 c⁄° 
	söãl_executi⁄_ígöe
 {

67 c⁄° *
«me
;

68 c⁄° *
fuŒ_«me
;

69 
exec_id
;

70 
Êags
;

71 } 
öãl_executi⁄_ígöes
[];

73 
	#f‹_if
(
ex¥__
Ëi‡(!”x¥__)Ë{} 

	)

75 
	#f‹_óch_ígöe
(
fd__
, 
Êags__
) \

76 c⁄° 
öãl_executi⁄_ígöe
 *
e__
 = 
öãl_executi⁄_ígöes
;\

77 
e__
->
«me
; \

78 
e__
++) \

79 
	`f‹_if
 (
	`gem_has_rög
(
fd__
, 
Êags__
 = 
e__
->
exec_id
 |É__->
Êags
))

	)

81 
boﬁ
 
gem_ˇn_°‹e_dw‹d
(
fd
, 
ígöe
);

	@igt_gvt.c

24 
	~<sig«l.h
>

25 
	~<dúít.h
>

26 
	~<uni°d.h
>

27 
	~<f˙é.h
>

29 
	~"igt_gvt.h
"

30 
	~"igt_sysfs.h
"

31 
	~"igt_kmod.h
"

32 
	~"drmã°.h
"

41 
boﬁ
 
	$is_gvt_íabÀd
()

43 
boﬁ
 
íabÀd
 = 
Ál£
;

44 
dú
, 
fd
;

46 
fd
 = 
	`__drm_›í_drivî
(
DRIVER_INTEL
);

47 
dú
 = 
	`igt_sysfs_›í_∑ømëîs
(
fd
);

48 i‡(
dú
 < 0)

49  
Ál£
;

51 
íabÀd
 = 
	`igt_sysfs_gë_boﬁón
(
dú
, "enable_gvt");

53 
	`˛o£
(
dú
);

54 
	`˛o£
(
fd
);

56  
íabÀd
;

58 
	}
}

60 
boﬁ
 
	$igt_gvt_lﬂd_moduÀ
()

62 i‡(
	`is_gvt_íabÀd
())

63  
åue
;

65 i‡(
	`igt_i915_drivî_u∆ﬂd
())

66  
Ál£
;

68 i‡(
	`igt_i915_drivî_lﬂd
("enable_gvt=1"))

69  
Ál£
;

71  
	`is_gvt_íabÀd
();

72 
	}
}

74 
	$igt_gvt_u∆ﬂd_moduÀ
()

76 i‡(!
	`is_gvt_íabÀd
())

79 
	`igt_i915_drivî_u∆ﬂd
();

81 
	`igt_i915_drivî_lﬂd
(
NULL
);

83 
	`igt_as£π
(!
	`is_gvt_íabÀd
());

84 
	}
}

	@igt_gvt.h

24 #i‚de‡
IGT_GVT_H


25 
	#IGT_GVT_H


	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

30 
boﬁ
 
igt_gvt_lﬂd_moduÀ
();

31 
igt_gvt_u∆ﬂd_moduÀ
();

	@igt_kmod.c

24 
	~<sig«l.h
>

25 
	~<î∫o.h
>

27 
	~"igt_c‹e.h
"

28 
	~"igt_sysfs.h
"

29 
	~"igt_kmod.h
"

50 
	$squñch
(*
d©a
, 
¥i‹ôy
,

51 c⁄° *
fûe
, 
löe
, c⁄° *
‚
,

52 c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

54 
	}
}

56 
kmod_˘x
 *
	$kmod_˘x
()

58 
kmod_˘x
 *
˘x
;

59 c⁄° **
c⁄fig_∑ths
 = 
NULL
;

60 *
c⁄fig_∑ths_°r
;

61 *
dú«me
;

63 i‡(
˘x
)

64 
out
;

66 
dú«me
 = 
	`gëív
("IGT_KMOD_DIRNAME");

67 i‡(
dú«me
)

68 
	`igt_debug
("kmod dú«mê%s\n", 
dú«me
);

70 
c⁄fig_∑ths_°r
 = 
	`gëív
("IGT_KMOD_CONFIG_PATHS");

71 i‡(
c⁄fig_∑ths_°r
)

72 
	`igt_debug
("kmod c⁄figÖ©h†%s\n", 
c⁄fig_∑ths_°r
);

74 i‡(
c⁄fig_∑ths_°r
) {

75 
cou¡
 = !!
	`°æí
(
c⁄fig_∑ths_°r
);

76 
i
;

77 * 
p
;

79 
p
 = 
c⁄fig_∑ths_°r
;

80 (
p
 = 
	`°rchr
’, ':'))Ëp++, 
cou¡
++;

83 
c⁄fig_∑ths
 = 
	`mÆloc
((*c⁄fig_∑thsË* (
cou¡
 + 1));

84 
	`igt_as£π
(
c⁄fig_∑ths
 !
NULL
);

86 
p
 = 
c⁄fig_∑ths_°r
;

87 
i
 = 0; i < 
cou¡
; ++i) {

88 
c⁄fig_∑ths
[
i
] = 
p
;

90 i‡((
p
 = 
	`°rchr
(p, ':')))

91 *
p
++ = '\0';

93 
c⁄fig_∑ths
[
i
] = 
NULL
;

96 
˘x
 = 
	`kmod_√w
(
dú«me
, 
c⁄fig_∑ths
);

97 
	`igt_as£π
(
˘x
 !
NULL
);

99 
	`‰ì
(
c⁄fig_∑ths
);

101 
	`kmod_£t_log_‚
(
˘x
, 
squñch
, 
NULL
);

102 
out
:

103  
˘x
;

104 
	}
}

116 
boﬁ


117 
	$igt_kmod_is_lﬂded
(c⁄° *
mod_«me
)

119 
kmod_˘x
 *
˘x
 = 
	`kmod_˘x
();

120 
kmod_li°
 *
mod
, *
li°
;

121 
boﬁ
 
ªt
 = 
Ál£
;

123 i‡(
	`kmod_moduÀ_√w_‰om_lﬂded
(
˘x
, &
li°
) < 0)

124 
out
;

126 
	`kmod_li°_f‹óch
(
mod
, 
li°
) {

127 
kmod_moduÀ
 *
kmod
 = 
	`kmod_moduÀ_gë_moduÀ
(
mod
);

128 c⁄° *
kmod_«me
 = 
	`kmod_moduÀ_gë_«me
(
kmod
);

130 i‡(!
	`°rcmp
(
kmod_«me
, 
mod_«me
)) {

131 
	`kmod_moduÀ_uƒef
(
kmod
);

132 
ªt
 = 
åue
;

135 
	`kmod_moduÀ_uƒef
(
kmod
);

137 
	`kmod_moduÀ_uƒef_li°
(
li°
);

138 
out
:

139  
ªt
;

140 
	}
}

142 
	$mod¥obe
(
kmod_moduÀ
 *
kmod
, c⁄° *
›ti⁄s
)

144  
	`kmod_moduÀ_¥obe_ö£π_moduÀ
(
kmod
, 0, 
›ti⁄s
,

145 
NULL
, NULL, NULL);

146 
	}
}

164 
	$igt_kmod_lﬂd
(c⁄° *
mod_«me
, c⁄° *
›ts
)

166 
kmod_˘x
 *
˘x
 = 
	`kmod_˘x
();

167 
kmod_moduÀ
 *
kmod
;

168 
îr
 = 0;

170 
îr
 = 
	`kmod_moduÀ_√w_‰om_«me
(
˘x
, 
mod_«me
, &
kmod
);

171 i‡(
îr
 < 0)

172 
out
;

174 
îr
 = 
	`mod¥obe
(
kmod
, 
›ts
);

175 i‡(
îr
 < 0) {

176 
îr
) {

177 -
EEXIST
:

178 
	`igt_debug
("Module %sálready inserted\n",

179 
	`kmod_moduÀ_gë_«me
(
kmod
));

181 -
ENOENT
:

182 
	`igt_debug
("Unknown symbol in module %s or "

184 
	`kmod_moduÀ_gë_«me
(
kmod
));

187 
	`igt_debug
("CouldÇot insert %s (%s)\n",

188 
	`kmod_moduÀ_gë_«me
(
kmod
), 
	`°ªº‹
(-
îr
));

192 
out
:

193 
	`kmod_moduÀ_uƒef
(
kmod
);

194  
îr
 < 0 ?Érr : 0;

195 
	}
}

210 
	$igt_kmod_u∆ﬂd
(c⁄° *
mod_«me
, 
Êags
)

212 
kmod_˘x
 *
˘x
 = 
	`kmod_˘x
();

213 
kmod_moduÀ
 *
kmod
;

214 
îr
;

216 
îr
 = 
	`kmod_moduÀ_√w_‰om_«me
(
˘x
, 
mod_«me
, &
kmod
);

217 i‡(
îr
 < 0) {

218 
	`igt_debug
("CouldÇŸ u£ moduÀ %†(%s)\n", 
mod_«me
,

219 
	`°ªº‹
(-
îr
));

220 
out
;

223 
îr
 = 
	`kmod_moduÀ_ªmove_moduÀ
(
kmod
, 
Êags
);

224 i‡(
îr
 < 0) {

225 
	`igt_debug
("CouldÇŸÑemovêmoduÀ %†(%s)\n", 
mod_«me
,

226 
	`°ªº‹
(-
îr
));

229 
out
:

230 
	`kmod_moduÀ_uƒef
(
kmod
);

231  
îr
 < 0 ?Érr : 0;

232 
	}
}

240 
	$igt_kmod_li°_lﬂded
()

242 
kmod_˘x
 *
˘x
 = 
	`kmod_˘x
();

243 
kmod_li°
 *
moduÀ
, *
li°
;

245 i‡(
	`kmod_moduÀ_√w_‰om_lﬂded
(
˘x
, &
li°
) < 0)

248 
	`igt_öfo
("Module\t\t Used by\n");

250 
	`kmod_li°_f‹óch
(
moduÀ
, 
li°
) {

251 
kmod_moduÀ
 *
kmod
 = 
	`kmod_moduÀ_gë_moduÀ
(
moduÀ
);

252 
kmod_li°
 *
moduÀ_dïs
, *
moduÀ_dïs_li°
;

254 
	`igt_öfo
("%-24s", 
	`kmod_moduÀ_gë_«me
(
kmod
));

255 
moduÀ_dïs_li°
 = 
	`kmod_moduÀ_gë_hﬁdîs
(
kmod
);

256 i‡(
moduÀ_dïs_li°
) {

258 
	`kmod_li°_f‹óch
(
moduÀ_dïs
, 
moduÀ_dïs_li°
) {

259 
kmod_moduÀ
 *
kmod_dï
;

261 
kmod_dï
 = 
	`kmod_moduÀ_gë_moduÀ
(
moduÀ_dïs
);

262 
	`igt_öfo
("%s", 
	`kmod_moduÀ_gë_«me
(
kmod_dï
));

264 i‡(
	`kmod_li°_√xt
(
moduÀ_dïs_li°
, 
moduÀ_dïs
))

265 
	`igt_öfo
(",");

267 
	`kmod_moduÀ_uƒef
(
kmod_dï
);

270 
	`kmod_moduÀ_uƒef_li°
(
moduÀ_dïs_li°
);

272 
	`igt_öfo
("\n");

273 
	`kmod_moduÀ_uƒef
(
kmod
);

276 
	`kmod_moduÀ_uƒef_li°
(
li°
);

277 
	}
}

287 
	$igt_i915_drivî_lﬂd
(c⁄° *
›ts
)

289 i‡(
›ts
)

290 
	`igt_öfo
("Rñﬂdög i915 wôh %s\n\n", 
›ts
);

292 i‡(
	`igt_kmod_lﬂd
("i915", 
›ts
)) {

293 
	`igt_w¨n
("CouldÇotÜoad i915\n");

294  
IGT_EXIT_FAILURE
;

297 
	`kick_fbc⁄
(
åue
);

298 
	`igt_kmod_lﬂd
("¢d_hda_öãl", 
NULL
);

300  
IGT_EXIT_SUCCESS
;

301 
	}
}

310 
	$igt_i915_drivî_u∆ﬂd
()

313 
	`kick_fbc⁄
(
Ál£
);

315 i‡(
	`igt_kmod_is_lﬂded
("snd_hda_intel")) {

316 
	`igt_ãrmö©e_¥o˚ss
(
SIGTERM
, "alsactl");

319 
	`kick_¢d_hda_öãl
();

321 i‡(
	`igt_kmod_u∆ﬂd
("snd_hda_intel", 0)) {

322 
	`igt_w¨n
("CouldÇot unload snd_hda_intel\n");

323 
	`igt_kmod_li°_lﬂded
();

324 
	`igt_lsof
("/dev/snd");

325  
IGT_EXIT_FAILURE
;

330 i‡(
	`igt_kmod_is_lﬂded
("intel_ips"))

331 
	`igt_kmod_u∆ﬂd
("intel_ips", 0);

333 i‡(
	`igt_kmod_is_lﬂded
("i915")) {

334 i‡(
	`igt_kmod_u∆ﬂd
("i915", 0)) {

335 
	`igt_w¨n
("CouldÇot unload i915\n");

336 
	`igt_kmod_li°_lﬂded
();

337 
	`igt_lsof
("/dev/dri");

338  
IGT_EXIT_SKIP
;

342 i‡(
	`igt_kmod_is_lﬂded
("intel-gtt"))

343 
	`igt_kmod_u∆ﬂd
("intel-gtt", 0);

345 
	`igt_kmod_u∆ﬂd
("drm_kms_helper", 0);

346 
	`igt_kmod_u∆ﬂd
("drm", 0);

348 i‡(
	`igt_kmod_is_lﬂded
("i915")) {

349 
	`igt_w¨n
("i915.ko stillÜoaded!\n");

350  
IGT_EXIT_FAILURE
;

353  
IGT_EXIT_SUCCESS
;

354 
	}
}

356 
	$kmsg_dump
(
fd
)

358 
FILE
 *
fûe
;

360 
fûe
 = 
NULL
;

361 i‡(
fd
 != -1)

362 
fûe
 = 
	`fd›í
(
fd
, "r");

363 i‡(
fûe
) {

364 
size_t
 
Àn
 = 0;

365 *
löe
 = 
NULL
;

367 
	`gëlöe
(&
löe
, &
Àn
, 
fûe
) != -1) {

368 *
°¨t
 = 
	`°rchr
(
löe
, ':');

369 i‡(
°¨t
)

370 
	`igt_w¨n
("%s", 
°¨t
 + 2);

373 
	`‰ì
(
löe
);

374 
	`f˛o£
(
fûe
);

376 
	`igt_w¨n
("UnableÅoÑetrieve kernelÜog (from /dev/kmsg)\n");

378 
	}
}

380 
	$ã°s_add
(
igt_k£l·e°_li°
 *
é
, 
igt_li°
 *
li°
)

382 
igt_k£l·e°_li°
 *
pos
;

384 
	`igt_li°_f‹_óch
(
pos
, 
li°
, 
lök
)

385 i‡(
pos
->
numbî
 > 
é
->number)

388 
	`igt_li°_add_èû
(&
é
->
lök
, &
pos
->link);

389 
	}
}

391 
	$igt_k£l·e°_gë_ã°s
(
kmod_moduÀ
 *
kmod
,

392 c⁄° *
fûãr
,

393 
igt_li°
 *
ã°s
)

395 c⁄° *
∑øm_¥efix
 = "igt__";

396 c⁄° 
¥efix_Àn
 = 
	`°æí
(
∑øm_¥efix
);

397 
kmod_li°
 *
d
, *
¥e
;

398 
igt_k£l·e°_li°
 *
é
;

400 
¥e
 = 
NULL
;

401 i‡(!
	`kmod_moduÀ_gë_öfo
(
kmod
, &
¥e
))

404 
	`kmod_li°_f‹óch
(
d
, 
¥e
) {

405 c⁄° *
key
, *
vÆ
;

406 *
cﬁ⁄
;

407 
off£t
;

409 
key
 = 
	`kmod_moduÀ_öfo_gë_key
(
d
);

410 i‡(
	`°rcmp
(
key
, "parmtype"))

413 
vÆ
 = 
	`kmod_moduÀ_öfo_gë_vÆue
(
d
);

414 i‡(!
vÆ
 || 
	`°∫cmp
(vÆ, 
∑øm_¥efix
, 
¥efix_Àn
))

417 
off£t
 = 
	`°æí
(
vÆ
) + 1;

418 
é
 = 
	`mÆloc
((*éË+ 
off£t
);

419 i‡(!
é
)

422 
	`mem˝y
(
é
->
∑øm
, 
vÆ
, 
off£t
);

423 
cﬁ⁄
 = 
	`°rchr
(
é
->
∑øm
, ':');

424 *
cﬁ⁄
 = '\0';

426 
é
->
numbî
 = 0;

427 
é
->
«me
 =Ål->
∑øm
 + 
¥efix_Àn
;

428 i‡(
	`ssˇnf
(
é
->
«me
, "%u__%n",

429 &
é
->
numbî
, &
off£t
) == 1)

430 
é
->
«me
 +
off£t
;

432 i‡(
fûãr
 && 
	`°∫cmp
(
é
->
«me
, fûãr, 
	`°æí
(filter))) {

433 
	`‰ì
(
é
);

437 
	`ã°s_add
(
é
, 
ã°s
);

439 
	`kmod_moduÀ_öfo_‰ì_li°
(
¥e
);

440 
	}
}

442 
	$›í_∑ømëîs
(c⁄° *
moduÀ_«me
)

444 
∑th
[256];

446 
	`¢¥ötf
(
∑th
, ’©h), "/sys/moduÀ/%s/∑ømëîs", 
moduÀ_«me
);

447  
	`›í
(
∑th
, 
O_RDONLY
);

448 
	}
}

450 
	$igt_k£l·e°_öô
(
igt_k£l·e°
 *
t°
,

451 c⁄° *
moduÀ_«me
)

453 
îr
;

455 
	`mem£t
(
t°
, 0, (*tst));

457 
t°
->
moduÀ_«me
 = 
	`°rdup
(module_name);

458 i‡(!
t°
->
moduÀ_«me
)

461 
t°
->
kmsg
 = -1;

463 
îr
 = 
	`kmod_moduÀ_√w_‰om_«me
(
	`kmod_˘x
(), 
moduÀ_«me
, &
t°
->
kmod
);

464 i‡(
îr
)

465  
îr
;

468 
	}
}

470 
	$igt_k£l·e°_begö
(
igt_k£l·e°
 *
t°
)

472 
îr
;

474 i‡(
	`°rcmp
(
t°
->
moduÀ_«me
, "i915") == 0)

475 
	`igt_i915_drivî_u∆ﬂd
();

477 
îr
 = 
	`kmod_moduÀ_ªmove_moduÀ
(
t°
->
kmod
, 
KMOD_REMOVE_FORCE
);

478 
	`igt_ªquúe
(
îr
 =0 ||Éº =-
ENOENT
);

480 
t°
->
kmsg
 = 
	`›í
("/dev/kmsg", 
O_RDONLY
 | 
O_NONBLOCK
);

483 
	}
}

485 
	$igt_k£l·e°_execuã
(
igt_k£l·e°
 *
t°
,

486 
igt_k£l·e°_li°
 *
é
,

487 c⁄° *
›ti⁄s
,

488 c⁄° *
ªsu…
)

490 
buf
[1024];

491 
îr
;

493 
	`l£ek
(
t°
->
kmsg
, 0, 
SEEK_END
);

495 
	`¢¥ötf
(
buf
, (buf), "%s=1 %s", 
é
->
∑øm
, 
›ti⁄s
 ?: "");

497 
îr
 = 
	`mod¥obe
(
t°
->
kmod
, 
buf
);

498 i‡(
îr
 =0 && 
ªsu…
) {

499 
dú
 = 
	`›í_∑ømëîs
(
t°
->
moduÀ_«me
);

500 
	`igt_sysfs_sˇnf
(
dú
, 
ªsu…
, "%d", &
îr
);

501 
	`˛o£
(
dú
);

503 i‡(
îr
 =-
ENOTTY
)

504 
îr
 = 0;

505 i‡(
îr
)

506 
	`kmsg_dump
(
t°
->
kmsg
);

508 
	`kmod_moduÀ_ªmove_moduÀ
(
t°
->
kmod
, 0);

510 
î∫o
 = 0;

511 
	`igt_as£π_f
(
îr
 == 0,

513 
t°
->
moduÀ_«me
, 
buf
, 
	`°ªº‹
(-
îr
), -err);

515  
îr
;

516 
	}
}

518 
	$igt_k£l·e°_íd
(
igt_k£l·e°
 *
t°
)

520 
	`kmod_moduÀ_ªmove_moduÀ
(
t°
->
kmod
, 
KMOD_REMOVE_FORCE
);

521 
	`˛o£
(
t°
->
kmsg
);

523 i‡(
	`°rcmp
(
t°
->
moduÀ_«me
, "i915") == 0)

524 
	`igt_i915_drivî_lﬂd
(
NULL
);

525 
	}
}

527 
	$igt_k£l·e°_föi
(
igt_k£l·e°
 *
t°
)

529 
	`‰ì
(
t°
->
moduÀ_«me
);

530 
	`kmod_moduÀ_uƒef
(
t°
->
kmod
);

531 
	}
}

533 
	$igt_k£l·e°s
(c⁄° *
moduÀ_«me
,

534 c⁄° *
›ti⁄s
,

535 c⁄° *
ªsu…
,

536 c⁄° *
fûãr
)

538 
igt_k£l·e°
 
t°
;

539 
	`IGT_LIST
(
ã°s
);

540 
igt_k£l·e°_li°
 *
é
, *
ä
;

542 i‡(
	`igt_k£l·e°_öô
(&
t°
, 
moduÀ_«me
) != 0)

545 
igt_fixtuª


546 
	`igt_ªquúe
(
	`igt_k£l·e°_begö
(&
t°
) == 0);

548 
	`igt_k£l·e°_gë_ã°s
(
t°
.
kmod
, 
fûãr
, &
ã°s
);

549 
	`igt_li°_f‹_óch_ß„
(
é
, 
ä
, &
ã°s
, 
lök
) {

550 
	`igt_subã°_f
("%s", 
é
->
«me
)

551 
	`igt_k£l·e°_execuã
(&
t°
, 
é
, 
›ti⁄s
, 
ªsu…
);

552 
	`‰ì
(
é
);

555 
igt_fixtuª
 {

556 
	`igt_k£l·e°_íd
(&
t°
);

557 
	`igt_ªquúe
(!
	`igt_li°_em±y
(&
ã°s
));

560 
	`igt_k£l·e°_föi
(&
t°
);

561 
	}
}

	@igt_kmod.h

24 #i‚de‡
IGT_KMOD_H


25 
	#IGT_KMOD_H


	)

27 #ifde‡
ANDROID


28 
	~<libkmod/libkmod.h
>

30 
	~<libkmod.h
>

33 
	~"igt_aux.h
"

35 
boﬁ
 
igt_kmod_is_lﬂded
(c⁄° *
mod_«me
);

36 
igt_kmod_li°_lﬂded
();

38 
igt_kmod_lﬂd
(c⁄° *
mod_«me
, c⁄° *
›ts
);

39 
igt_kmod_u∆ﬂd
(c⁄° *
mod_«me
, 
Êags
);

41 
igt_i915_drivî_lﬂd
(c⁄° *
›ts
);

42 
igt_i915_drivî_u∆ﬂd
();

44 
igt_k£l·e°s
(c⁄° *
moduÀ_«me
,

45 c⁄° *
moduÀ_›ti⁄s
,

46 c⁄° *
ªsu…_›ti⁄
,

47 c⁄° *
fûãr
);

49 
	sigt_k£l·e°
 {

50 
kmod_moduÀ
 *
	mkmod
;

51 *
	mmoduÀ_«me
;

52 
	mkmsg
;

55 
	sigt_k£l·e°_li°
 {

56 
igt_li°
 
	mlök
;

57 
	mnumbî
;

58 *
	m«me
;

59 
	m∑øm
[];

62 
igt_k£l·e°_öô
(
igt_k£l·e°
 *
t°
,

63 c⁄° *
moduÀ_«me
);

64 
igt_k£l·e°_begö
(
igt_k£l·e°
 *
t°
);

66 
igt_k£l·e°_gë_ã°s
(
kmod_moduÀ
 *
kmod
,

67 c⁄° *
fûãr
,

68 
igt_li°
 *
ã°s
);

69 
igt_k£l·e°_execuã
(
igt_k£l·e°
 *
t°
,

70 
igt_k£l·e°_li°
 *
é
,

71 c⁄° *
moduÀ_›ti⁄s
,

72 c⁄° *
ªsu…
);

74 
igt_k£l·e°_íd
(
igt_k£l·e°
 *
t°
);

75 
igt_k£l·e°_föi
(
igt_k£l·e°
 *
t°
);

	@igt_kms.c

28 
	~"c⁄fig.h
"

29 
	~<uni°d.h
>

30 
	~<°dio.h
>

31 
	~<°d¨g.h
>

32 
	~<f˙é.h
>

33 
	~<sys/°©.h
>

34 
	~<°rög.h
>

35 
	~<°dlib.h
>

36 #ifde‡
HAVE_LINUX_KD_H


37 
	~<löux/kd.h
>

38 #ñi‡
HAVE_SYS_KD_H


39 
	~<sys/kd.h
>

41 #ifde‡
HAVE_UDEV


42 
	~<libudev.h
>

43 
	~<pﬁl.h
>

45 
	~<î∫o.h
>

46 
	~<time.h
>

48 
	~<i915_drm.h
>

50 
	~"drmã°.h
"

51 
	~"igt_kms.h
"

52 
	~"igt_aux.h
"

53 
	~"öãl_chù£t.h
"

54 
	~"igt_debugfs.h
"

55 
	~"igt_sysfs.h
"

56 
	~"sw_sync.h
"

82 
	#MAX_CONNECTORS
 32

	)

83 *
	gf‹˚d_c⁄√˘‹s
[
MAX_CONNECTORS
 + 1];

84 
	gf‹˚d_c⁄√˘‹s_devi˚
[
MAX_CONNECTORS
 + 1];

86 
	$upd©e_edid_csum
(*
edid
, 
˚a_pos
)

88 
i
, 
sum
 = 0;

89 
tm
 *tm;

90 
time_t
 
t
;

93 
t
 = 
	`time
(
NULL
);

94 
tm
 = 
	`loˇ…ime
(&
t
);

95 
edid
[17] = 
tm
->
tm_yór
 - 90;

98 
i
 = 0; i < 127; i++) {

99 
sum
 = sum + 
edid
[
˚a_pos
 + 
i
];

101 
edid
[
˚a_pos
 + 127] = 256 - 
sum
;

102 
	}
}

104 
	#VFREQ
 60

	)

105 
	#CLOCK
 148500

	)

106 
	#HACTIVE
 1920

	)

107 
	#HBLANK
 280

	)

108 
	#VACTIVE
 1080

	)

109 
	#VBLANK
 45

	)

110 
	#HOFFSET
 88

	)

111 
	#HPULSE
 44

	)

112 
	#VOFFSET
 4

	)

113 
	#VPULSE
 5

	)

115 
	#HSIZE
 52

	)

116 
	#VSIZE
 30

	)

118 
	#EDID_NAME
 
ba£_edid


	)

119 
	~"igt_edid_ãm∂©e.h
"

137 c⁄° * 
	$igt_kms_gë_ba£_edid
()

139 
	`upd©e_edid_csum
(
ba£_edid
, 0);

141  
ba£_edid
;

142 
	}
}

144 
	#VFREQ
 60

	)

145 
	#CLOCK
 101000

	)

146 
	#HACTIVE
 1400

	)

147 
	#HBLANK
 160

	)

148 
	#VACTIVE
 1050

	)

149 
	#VBLANK
 30

	)

150 
	#HOFFSET
 48

	)

151 
	#HPULSE
 32

	)

152 
	#VOFFSET
 3

	)

153 
	#VPULSE
 4

	)

155 
	#HSIZE
 52

	)

156 
	#VSIZE
 30

	)

158 
	#EDID_NAME
 
Æt_edid


	)

159 
	~"igt_edid_ãm∂©e.h
"

161 c⁄° *
	gigt_∂™e_¥›_«mes
[
IGT_NUM_PLANE_PROPS
] = {

177 c⁄° *
	gigt_¸tc_¥›_«mes
[
IGT_NUM_CRTC_PROPS
] = {

189 c⁄° *
	gigt_c⁄√˘‹_¥›_«mes
[
IGT_NUM_CONNECTOR_PROPS
] = {

201 
	$igt_fûl_∂™e_¥›s
(
igt_di•œy_t
 *
di•œy
, 
igt_∂™e_t
 *
∂™e
,

202 
num_¥›s
, c⁄° **
¥›_«mes
)

204 
drmModeObje˘Pr›îtõsPå
 
¥›s
;

205 
i
, 
j
, 
fd
;

207 
fd
 = 
di•œy
->
drm_fd
;

209 
¥›s
 = 
	`drmModeObje˘GëPr›îtõs
(
fd
, 
∂™e
->
drm_∂™e
->
∂™e_id
, 
DRM_MODE_OBJECT_PLANE
);

210 
	`igt_as£π
(
¥›s
);

212 
i
 = 0; i < 
¥›s
->
cou¡_¥›s
; i++) {

213 
drmModePr›îtyPå
 
¥›
 =

214 
	`drmModeGëPr›îty
(
fd
, 
¥›s
->¥›s[
i
]);

216 
j
 = 0; j < 
num_¥›s
; j++) {

217 i‡(
	`°rcmp
(
¥›
->
«me
, 
¥›_«mes
[
j
]) != 0)

220 
∂™e
->
¥›s
[
j
] =Ör›s->¥›s[
i
];

224 
	`drmModeFªePr›îty
(
¥›
);

227 
	`drmModeFªeObje˘Pr›îtõs
(
¥›s
);

228 
	}
}

235 
	$igt_©omic_fûl_c⁄√˘‹_¥›s
(
igt_di•œy_t
 *
di•œy
, 
igt_ouçut_t
 *
ouçut
,

236 
num_c⁄√˘‹_¥›s
, c⁄° **
c⁄n_¥›_«mes
)

238 
drmModeObje˘Pr›îtõsPå
 
¥›s
;

239 
i
, 
j
, 
fd
;

241 
fd
 = 
di•œy
->
drm_fd
;

243 
¥›s
 = 
	`drmModeObje˘GëPr›îtõs
(
fd
, 
ouçut
->
c⁄fig
.
c⁄√˘‹
->
c⁄√˘‹_id
, 
DRM_MODE_OBJECT_CONNECTOR
);

244 
	`igt_as£π
(
¥›s
);

246 
i
 = 0; i < 
¥›s
->
cou¡_¥›s
; i++) {

247 
drmModePr›îtyPå
 
¥›
 =

248 
	`drmModeGëPr›îty
(
fd
, 
¥›s
->¥›s[
i
]);

250 
j
 = 0; j < 
num_c⁄√˘‹_¥›s
; j++) {

251 i‡(
	`°rcmp
(
¥›
->
«me
, 
c⁄n_¥›_«mes
[
j
]) != 0)

254 
ouçut
->
¥›s
[
j
] =Ör›s->¥›s[
i
];

258 
	`drmModeFªePr›îty
(
¥›
);

261 
	`drmModeFªeObje˘Pr›îtõs
(
¥›s
);

262 
	}
}

265 
	$igt_fûl_pùe_¥›s
(
igt_di•œy_t
 *
di•œy
, 
igt_pùe_t
 *
pùe
,

266 
num_¸tc_¥›s
, c⁄° **
¸tc_¥›_«mes
)

268 
drmModeObje˘Pr›îtõsPå
 
¥›s
;

269 
i
, 
j
, 
fd
;

271 
fd
 = 
di•œy
->
drm_fd
;

273 
¥›s
 = 
	`drmModeObje˘GëPr›îtõs
(
fd
, 
pùe
->
¸tc_id
, 
DRM_MODE_OBJECT_CRTC
);

274 
	`igt_as£π
(
¥›s
);

276 
i
 = 0; i < 
¥›s
->
cou¡_¥›s
; i++) {

277 
drmModePr›îtyPå
 
¥›
 =

278 
	`drmModeGëPr›îty
(
fd
, 
¥›s
->¥›s[
i
]);

280 
j
 = 0; j < 
num_¸tc_¥›s
; j++) {

281 i‡(
	`°rcmp
(
¥›
->
«me
, 
¸tc_¥›_«mes
[
j
]) != 0)

284 
pùe
->
¥›s
[
j
] =Ör›s->¥›s[
i
];

288 
	`drmModeFªePr›îty
(
¥›
);

291 
	`drmModeFªeObje˘Pr›îtõs
(
¥›s
);

292 
	}
}

311 c⁄° * 
	$igt_kms_gë_Æt_edid
()

313 
	`upd©e_edid_csum
(
Æt_edid
, 0);

315  
Æt_edid
;

316 
	}
}

324 c⁄° *
	$km°e°_pùe_«me
(
pùe
Öipe)

326 c⁄° *
°r
[] = { "A", "B", "C", "D", "E", "F"};

328 i‡(
pùe
 =
PIPE_NONE
)

331 i‡(
pùe
 >
IGT_MAX_PIPES
)

334  
°r
[
pùe
];

335 
	}
}

343 
	$km°e°_pùe_to_ödex
(
pùe
)

345 i‡(
pùe
 == 'A')

347 i‡(
pùe
 == 'B')

349 i‡(
pùe
 == 'C')

351 i‡(
pùe
 == 'D')

353 i‡(
pùe
 == 'E')

355 i‡(
pùe
 == 'F')

358  -
EINVAL
;

359 
	}
}

367 c⁄° *
	$km°e°_∂™e_ty≥_«me
(
∂™e_ty≥
)

369 c⁄° *
«mes
[] = {

370 [
DRM_PLANE_TYPE_OVERLAY
] = "overlay",

371 [
DRM_PLANE_TYPE_PRIMARY
] = "primary",

372 [
DRM_PLANE_TYPE_CURSOR
] = "cursor",

375 
	`igt_as£π
(
∂™e_ty≥
 < 
	`ARRAY_SIZE
(
«mes
) &&Çames[plane_type]);

377  
«mes
[
∂™e_ty≥
];

378 
	}
}

380 c⁄° *
	$mode_°îeo_«me
(c⁄° 
drmModeModeInfo
 *
mode
)

382 
mode
->
Êags
 & 
DRM_MODE_FLAG_3D_MASK
) {

383 
DRM_MODE_FLAG_3D_FRAME_PACKING
:

385 
DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE
:

387 
DRM_MODE_FLAG_3D_LINE_ALTERNATIVE
:

389 
DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL
:

391 
DRM_MODE_FLAG_3D_L_DEPTH
:

393 
DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH
:

395 
DRM_MODE_FLAG_3D_TOP_AND_BOTTOM
:

397 
DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF
:

400  
NULL
;

402 
	}
}

410 
	$km°e°_dump_mode
(
drmModeModeInfo
 *
mode
)

412 c⁄° *
°îeo
 = 
	`mode_°îeo_«me
(
mode
);

414 
	`igt_öfo
(" %s %d %d %d %d %d %d %d %d %d 0x%x 0x%x %d%s%s%s\n",

415 
mode
->
«me
, mode->
vª‰esh
,

416 
mode
->
hdi•œy
, mode->
hsync_°¨t
,

417 
mode
->
hsync_íd
, mode->
htŸÆ
,

418 
mode
->
vdi•œy
, mode->
vsync_°¨t
,

419 
mode
->
vsync_íd
, mode->
vtŸÆ
,

420 
mode
->
Êags
, mode->
ty≥
, mode->
˛ock
,

421 
°îeo
 ? " (3D:" : "",

422 
°îeo
 ? stereo : "", stereo ? ")" : "");

423 
	}
}

436 
	$km°e°_gë_pùe_‰om_¸tc_id
(
fd
, 
¸tc_id
)

438 
drmModeRes
 *
ªs
;

439 
drmModeCπc
 *
¸tc
;

440 
i
, 
cur_id
;

442 
ªs
 = 
	`drmModeGëResour˚s
(
fd
);

443 
	`igt_as£π
(
ªs
);

445 
i
 = 0; i < 
ªs
->
cou¡_¸tcs
; i++) {

446 
¸tc
 = 
	`drmModeGëCπc
(
fd
, 
ªs
->
¸tcs
[
i
]);

447 
	`igt_as£π
(
¸tc
);

448 
cur_id
 = 
¸tc
->
¸tc_id
;

449 
	`drmModeFªeCπc
(
¸tc
);

450 i‡(
cur_id
 =
¸tc_id
)

454 
	`igt_as£π
(
i
 < 
ªs
->
cou¡_¸tcs
);

456 
	`drmModeFªeResour˚s
(
ªs
);

458  
i
;

459 
	}
}

472 
uöt32_t
 
	$km°e°_föd_¸tc_f‹_c⁄√˘‹
(
fd
, 
drmModeRes
 *
ªs
,

473 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

474 
uöt32_t
 
¸tc_bœckli°_idx_mask
)

476 
drmModeEncodî
 *
e
;

477 
uöt32_t
 
possibÀ_¸tcs
;

478 
i
, 
j
;

480 
i
 = 0; i < 
c⁄√˘‹
->
cou¡_ícodîs
; i++) {

481 
e
 = 
	`drmModeGëEncodî
(
fd
, 
c⁄√˘‹
->
ícodîs
[
i
]);

482 
possibÀ_¸tcs
 = 
e
->possibÀ_¸tc†& ~
¸tc_bœckli°_idx_mask
;

483 
	`drmModeFªeEncodî
(
e
);

485 
j
 = 0; 
possibÀ_¸tcs
 >> j; j++)

486 i‡(
possibÀ_¸tcs
 & (1 << 
j
))

487  
ªs
->
¸tcs
[
j
];

490 
	`igt_as£π
(
Ál£
);

491 
	}
}

507 
uöt32_t
 
	$km°e°_dumb_¸óã
(
fd
, 
width
, 
height
, 
bµ
,

508 *
°ride
, *
size
)

510 
drm_mode_¸óã_dumb
 
¸óã
;

512 
	`mem£t
(&
¸óã
, 0, (create));

513 
¸óã
.
width
 = width;

514 
¸óã
.
height
 = height;

515 
¸óã
.
bµ
 = bpp;

517 
¸óã
.
h™dÀ
 = 0;

518 
	`do_io˘l
(
fd
, 
DRM_IOCTL_MODE_CREATE_DUMB
, &
¸óã
);

519 
	`igt_as£π
(
¸óã
.
h™dÀ
);

520 
	`igt_as£π
(
¸óã
.
size
 >
width
 * 
height
 * 
bµ
 / 8);

522 i‡(
°ride
)

523 *
°ride
 = 
¸óã
.
pôch
;

525 i‡(
size
)

526 *
size
 = 
¸óã
.size;

528  
¸óã
.
h™dÀ
;

529 
	}
}

531 *
	$km°e°_dumb_m≠_buf„r
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
,

532 
¥Ÿ
)

534 
drm_mode_m≠_dumb
 
¨g
 = {};

535 *
±r
;

537 
¨g
.
h™dÀ
 = handle;

539 
	`do_io˘l
(
fd
, 
DRM_IOCTL_MODE_MAP_DUMB
, &
¨g
);

541 
±r
 = 
	`mm≠
(
NULL
, 
size
, 
¥Ÿ
, 
MAP_SHARED
, 
fd
, 
¨g
.
off£t
);

542 
	`igt_as£π
(
±r
 !
MAP_FAILED
);

544  
±r
;

545 
	}
}

551 sig√d 
	$£t_vt_mode
(
mode
)

553 
fd
;

554 
¥ev_mode
;

555 c⁄° 
TTY0
[] = "/dev/tty0";

557 i‡(
	`ac˚ss
(
TTY0
, 
F_OK
)) {

561 
	`igt_debug
("VT: %s: %s, cannot change its mode\n",

562 
TTY0
, 
	`°ªº‹
(
î∫o
));

563  
KD_GRAPHICS
;

566 
fd
 = 
	`›í
(
TTY0
, 
O_RDONLY
);

567 i‡(
fd
 < 0)

568  -
î∫o
;

570 
¥ev_mode
 = 0;

571 i‡(
	`drmIo˘l
(
fd
, 
KDGETMODE
, &
¥ev_mode
))

572 
îr
;

573 i‡(
	`drmIo˘l
(
fd
, 
KDSETMODE
, (*)
mode
))

574 
îr
;

576 
	`˛o£
(
fd
);

578  
¥ev_mode
;

579 
îr
:

580 
	`˛o£
(
fd
);

582  -
î∫o
;

583 
	}
}

585 
	g‹ig_vt_mode
 = -1UL;

592 
	$km°e°_ª°‹e_vt_mode
()

594 
ªt
;

596 i‡(
‹ig_vt_mode
 != -1UL) {

597 
ªt
 = 
	`£t_vt_mode
(
‹ig_vt_mode
);

599 
	`igt_as£π
(
ªt
 >= 0);

600 
	`igt_debug
("VT: origöÆ modê0x%lxÑe°‹ed\n", 
‹ig_vt_mode
);

601 
‹ig_vt_mode
 = -1UL;

603 
	}
}

615 
	$km°e°_£t_vt_gøphics_mode
()

617 
ªt
;

619 
	`igt_ö°Æl_exô_h™dÀr
((
igt_exô_h™dÀr_t
Ë
km°e°_ª°‹e_vt_mode
);

621 
ªt
 = 
	`£t_vt_mode
(
KD_GRAPHICS
);

623 
	`igt_as£π
(
ªt
 >= 0);

624 
‹ig_vt_mode
 = 
ªt
;

626 
	`igt_debug
("VT: gøphic†modê£à(modêwa†0x%lx)\n", 
ªt
);

627 
	}
}

630 
	$ª£t_c⁄√˘‹s_©_exô
(
sig
)

632 
	`igt_ª£t_c⁄√˘‹s
();

633 
	}
}

645 
boﬁ
 
	$km°e°_f‹˚_c⁄√˘‹
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

646 
km°e°_f‹˚_c⁄√˘‹_°©e
 
°©e
)

648 *
∑th
, **
tmp
;

649 c⁄° *
vÆue
;

650 
drmModeC⁄√˘‹
 *
ãmp
;

651 
uöt32_t
 
devid
;

652 
Àn
, 
dú
, 
idx
;

654 i‡(
	`is_i915_devi˚
(
drm_fd
)) {

655 
devid
 = 
	`öãl_gë_drm_devid
(
drm_fd
);

662 i‡((
c⁄√˘‹
->
c⁄√˘‹_ty≥
 =
DRM_MODE_CONNECTOR_HDMIA
 ||

663 
c⁄√˘‹
->
c⁄√˘‹_ty≥
 =
DRM_MODE_CONNECTOR_HDMIB
 ||

664 
c⁄√˘‹
->
c⁄√˘‹_ty≥
 =
DRM_MODE_CONNECTOR_Di•œyP‹t
)

665 && (
	`IS_HASWELL
(
devid
Ë|| 
	`IS_BROADWELL
(devid)))

666  
Ál£
;

669 
°©e
) {

670 
FORCE_CONNECTOR_ON
:

671 
vÆue
 = "on";

673 
FORCE_CONNECTOR_DIGITAL
:

674 
vÆue
 = "on-digital";

676 
FORCE_CONNECTOR_OFF
:

677 
vÆue
 = "off";

681 
FORCE_CONNECTOR_UNSPECIFIED
:

682 
vÆue
 = "detect";

686 
dú
 = 
	`igt_sysfs_›í
(
drm_fd
, &
idx
);

687 i‡(
dú
 < 0)

688  
Ál£
;

690 i‡(
	`a•rötf
(&
∑th
, "card%d-%s-%d/status",

691 
idx
,

692 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c⁄√˘‹
->
c⁄√˘‹_ty≥
),

693 
c⁄√˘‹
->
c⁄√˘‹_ty≥_id
) < 0) {

694 
	`˛o£
(
dú
);

695  
Ál£
;

698 i‡(!
	`igt_sysfs_£t
(
dú
, 
∑th
, 
vÆue
)) {

699 
	`˛o£
(
dú
);

700  
Ál£
;

703 
Àn
 = 0, 
tmp
 = 
f‹˚d_c⁄√˘‹s
; *tmp;Åmp++) {

705 i‡(
	`°rcmp
(*
tmp
, 
∑th
) == 0) {

706 
Àn
 = -1;

709 
Àn
++;

712 i‡(
Àn
 !-1 &&Üí < 
MAX_CONNECTORS
) {

713 
f‹˚d_c⁄√˘‹s
[
Àn
] = 
∑th
;

714 
f‹˚d_c⁄√˘‹s_devi˚
[
Àn
] = 
dú
;

717 i‡(
Àn
 >
MAX_CONNECTORS
)

718 
	`igt_w¨n
("ConnectorÜimitÑeached, %s willÇot beÑeset\n",

719 
∑th
);

721 
	`igt_debug
("C⁄√˘‹ %†i†now f‹˚d %s\n", 
∑th
, 
vÆue
);

722 
	`igt_debug
("Current forced connectors:\n");

723 
tmp
 = 
f‹˚d_c⁄√˘‹s
;

724 *
tmp
) {

725 
	`igt_debug
("\t%s\n", *
tmp
);

726 
tmp
++;

729 
	`igt_ö°Æl_exô_h™dÀr
(
ª£t_c⁄√˘‹s_©_exô
);

733 
ãmp
 = 
	`drmModeGëC⁄√˘‹
(
drm_fd
, 
c⁄√˘‹
->
c⁄√˘‹_id
);

734 
	`drmModeFªeC⁄√˘‹
(
ãmp
);

736  
åue
;

737 
	}
}

751 
	$km°e°_f‹˚_edid
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

752 c⁄° *
edid
, 
size_t
 
Àngth
)

754 *
∑th
;

755 
debugfs_fd
, 
ªt
;

756 
drmModeC⁄√˘‹
 *
ãmp
;

758 
	`igt_as£π_√q
(
	`a•rötf
(&
∑th
, "%s-%d/edid_ovîride", 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c⁄√˘‹
->
c⁄√˘‹_ty≥
), c⁄√˘‹->
c⁄√˘‹_ty≥_id
),

760 
debugfs_fd
 = 
	`igt_debugfs_›í
(
drm_fd
, 
∑th
, 
O_WRONLY
 | 
O_TRUNC
);

761 
	`‰ì
(
∑th
);

763 
	`igt_as£π
(
debugfs_fd
 != -1);

765 i‡(
Àngth
 == 0)

766 
ªt
 = 
	`wrôe
(
debugfs_fd
, "reset", 5);

768 
ªt
 = 
	`wrôe
(
debugfs_fd
, 
edid
, 
Àngth
);

769 
	`˛o£
(
debugfs_fd
);

773 
ãmp
 = 
	`drmModeGëC⁄√˘‹
(
drm_fd
, 
c⁄√˘‹
->
c⁄√˘‹_id
);

774 
	`drmModeFªeC⁄√˘‹
(
ãmp
);

776 
	`igt_as£π
(
ªt
 != -1);

777 
	}
}

789 
boﬁ
 
	$km°e°_gë_c⁄√˘‹_deÁu…_mode
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

790 
drmModeModeInfo
 *
mode
)

792 
i
;

794 i‡(!
c⁄√˘‹
->
cou¡_modes
) {

795 
	`igt_w¨n
("no modes for connector %d\n",

796 
c⁄√˘‹
->
c⁄√˘‹_id
);

797  
Ál£
;

800 
i
 = 0; i < 
c⁄√˘‹
->
cou¡_modes
; i++) {

801 i‡(
i
 == 0 ||

802 
c⁄√˘‹
->
modes
[
i
].
ty≥
 & 
DRM_MODE_TYPE_PREFERRED
) {

803 *
mode
 = 
c⁄√˘‹
->
modes
[
i
];

804 i‡(
mode
->
ty≥
 & 
DRM_MODE_TYPE_PREFERRED
)

809  
åue
;

810 
	}
}

813 
	$_km°e°_c⁄√˘‹_c⁄fig_¸tc_mask
(
drm_fd
,

814 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

815 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
)

817 
i
;

819 
c⁄fig
->
vÆid_¸tc_idx_mask
 = 0;

822 
i
 = 0; i < 
c⁄√˘‹
->
cou¡_ícodîs
; i++) {

823 
drmModeEncodî
 *
ícodî
 = 
	`drmModeGëEncodî
(
drm_fd
,

824 
c⁄√˘‹
->
ícodîs
[
i
]);

826 i‡(!
ícodî
) {

827 
	`igt_w¨n
("couldÇot getÉncoder %d: %s\n",

828 
c⁄√˘‹
->
ícodîs
[
i
],

829 
	`°ªº‹
(
î∫o
));

834 
c⁄fig
->
vÆid_¸tc_idx_mask
 |
ícodî
->
possibÀ_¸tcs
;

835 
	`drmModeFªeEncodî
(
ícodî
);

837 
	}
}

839 
drmModeEncodî
 *

840 
	$_km°e°_c⁄√˘‹_c⁄fig_föd_ícodî
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
, 
pùe
Öipe)

842 
i
;

844 
i
 = 0; i < 
c⁄√˘‹
->
cou¡_ícodîs
; i++) {

845 
drmModeEncodî
 *
ícodî
 = 
	`drmModeGëEncodî
(
drm_fd
, 
c⁄√˘‹
->
ícodîs
[
i
]);

847 i‡(!
ícodî
) {

848 
	`igt_w¨n
("couldÇot getÉncoder %d: %s\n",

849 
c⁄√˘‹
->
ícodîs
[
i
],

850 
	`°ªº‹
(
î∫o
));

855 i‡(
ícodî
->
possibÀ_¸tcs
 & (1 << 
pùe
))

856  
ícodî
;

858 
	`drmModeFªeEncodî
(
ícodî
);

861 
	`igt_as£π
(
Ál£
);

862  
NULL
;

863 
	}
}

876 
boﬁ
 
	$_km°e°_c⁄√˘‹_c⁄fig
(
drm_fd
, 
uöt32_t
 
c⁄√˘‹_id
,

877 
¸tc_idx_mask
,

878 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
,

879 
boﬁ
 
¥obe
)

881 
drmModeRes
 *
ªsour˚s
;

882 
drmModeC⁄√˘‹
 *
c⁄√˘‹
;

884 
c⁄fig
->
pùe
 = 
PIPE_NONE
;

886 
ªsour˚s
 = 
	`drmModeGëResour˚s
(
drm_fd
);

887 i‡(!
ªsour˚s
) {

888 
	`igt_w¨n
("drmModeGetResources failed");

889 
îr1
;

893 i‡(
¥obe
)

894 
c⁄√˘‹
 = 
	`drmModeGëC⁄√˘‹
(
drm_fd
, 
c⁄√˘‹_id
);

896 
c⁄√˘‹
 = 
	`drmModeGëC⁄√˘‹Cuºít
(
drm_fd
, 
c⁄√˘‹_id
);

898 i‡(!
c⁄√˘‹
)

899 
îr2
;

901 i‡(
c⁄√˘‹
->
c⁄√˘‹_id
 != connector_id) {

902 
	`igt_w¨n
("connector id doesn't match (%d != %d)\n",

903 
c⁄√˘‹
->
c⁄√˘‹_id
, connector_id);

904 
îr3
;

912 
	`_km°e°_c⁄√˘‹_c⁄fig_¸tc_mask
(
drm_fd
, 
c⁄√˘‹
, 
c⁄fig
);

914 i‡(!
c⁄√˘‹
->
cou¡_modes
)

915 
	`mem£t
(&
c⁄fig
->
deÁu…_mode
, 0, (config->default_mode));

916 i‡(!
	`km°e°_gë_c⁄√˘‹_deÁu…_mode
(
drm_fd
, 
c⁄√˘‹
,

917 &
c⁄fig
->
deÁu…_mode
))

918 
îr3
;

920 
c⁄fig
->
c⁄√˘‹
 = connector;

922 
¸tc_idx_mask
 &
c⁄fig
->
vÆid_¸tc_idx_mask
;

923 i‡(!
¸tc_idx_mask
)

925 
îr2
;

927 
c⁄fig
->
pùe
 = 
	`ffs
(
¸tc_idx_mask
) - 1;

929 
c⁄fig
->
ícodî
 = 
	`_km°e°_c⁄√˘‹_c⁄fig_föd_ícodî
(
drm_fd
, 
c⁄√˘‹
, c⁄fig->
pùe
);

930 
c⁄fig
->
¸tc
 = 
	`drmModeGëCπc
(
drm_fd
, 
ªsour˚s
->
¸tcs
[c⁄fig->
pùe
]);

932 i‡(
c⁄√˘‹
->
c⁄√˘i⁄
 !
DRM_MODE_CONNECTED
)

933 
îr2
;

935 i‡(!
c⁄√˘‹
->
cou¡_modes
) {

936 
	`igt_w¨n
("c⁄√˘‹ %d/%s-%d ha†nÿmodes\n", 
c⁄√˘‹_id
,

937 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c⁄√˘‹
->
c⁄√˘‹_ty≥
),

938 
c⁄√˘‹
->
c⁄√˘‹_ty≥_id
);

939 
îr2
;

942 
	`drmModeFªeResour˚s
(
ªsour˚s
);

943  
åue
;

944 
îr3
:

945 
	`drmModeFªeC⁄√˘‹
(
c⁄√˘‹
);

946 
îr2
:

947 
	`drmModeFªeResour˚s
(
ªsour˚s
);

948 
îr1
:

949  
Ál£
;

950 
	}
}

962 
boﬁ
 
	$km°e°_gë_c⁄√˘‹_c⁄fig
(
drm_fd
, 
uöt32_t
 
c⁄√˘‹_id
,

963 
¸tc_idx_mask
,

964 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
)

966  
	`_km°e°_c⁄√˘‹_c⁄fig
(
drm_fd
, 
c⁄√˘‹_id
, 
¸tc_idx_mask
,

967 
c⁄fig
, 0);

968 
	}
}

981 
boﬁ
 
	$km°e°_¥obe_c⁄√˘‹_c⁄fig
(
drm_fd
, 
uöt32_t
 
c⁄√˘‹_id
,

982 
¸tc_idx_mask
,

983 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
)

985  
	`_km°e°_c⁄√˘‹_c⁄fig
(
drm_fd
, 
c⁄√˘‹_id
, 
¸tc_idx_mask
,

986 
c⁄fig
, 1);

987 
	}
}

995 
	$km°e°_‰ì_c⁄√˘‹_c⁄fig
(
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
)

997 
	`drmModeFªeCπc
(
c⁄fig
->
¸tc
);

998 
c⁄fig
->
¸tc
 = 
NULL
;

1000 
	`drmModeFªeEncodî
(
c⁄fig
->
ícodî
);

1001 
c⁄fig
->
ícodî
 = 
NULL
;

1003 
	`drmModeFªeC⁄√˘‹
(
c⁄fig
->
c⁄√˘‹
);

1004 
c⁄fig
->
c⁄√˘‹
 = 
NULL
;

1005 
	}
}

1015 
	$km°e°_£t_c⁄√˘‹_dpms
(
fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
, 
mode
)

1017 
i
, 
dpms
 = 0;

1018 
boﬁ
 
found_ô
 = 
Ál£
;

1020 
i
 = 0; i < 
c⁄√˘‹
->
cou¡_¥›s
; i++) {

1021 
drm_mode_gë_¥›îty
 
¥›
;

1023 
¥›
.
¥›_id
 = 
c⁄√˘‹
->
¥›s
[
i
];

1024 
¥›
.
cou¡_vÆues
 = 0;

1025 
¥›
.
cou¡_íum_blobs
 = 0;

1026 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_MODE_GETPROPERTY
, &
¥›
))

1029 i‡(
	`°rcmp
(
¥›
.
«me
, "DPMS"))

1032 
dpms
 = 
¥›
.
¥›_id
;

1033 
found_ô
 = 
åue
;

1036 
	`igt_as£π_f
(
found_ô
, "DPMSÖropertyÇot found on %d\n",

1037 
c⁄√˘‹
->
c⁄√˘‹_id
);

1039 
	`igt_as£π
(
	`drmModeC⁄√˘‹SëPr›îty
(
fd
, 
c⁄√˘‹
->
c⁄√˘‹_id
,

1040 
dpms
, 
mode
) == 0);

1041 
	}
}

1058 
boﬁ


1059 
	$km°e°_gë_¥›îty
(
drm_fd
, 
uöt32_t
 
obje˘_id
, uöt32_à
obje˘_ty≥
,

1060 c⁄° *
«me
, 
uöt32_t
 *
¥›_id
 ,

1061 
uöt64_t
 *
vÆue
 ,

1062 
drmModePr›îtyPå
 *
¥›
 )

1064 
drmModeObje˘Pr›îtõsPå
 
¥›li°
;

1065 
drmModePr›îtyPå
 
_¥›
;

1066 
boﬁ
 
found
 = 
Ál£
;

1067 
i
;

1069 
¥›li°
 = 
	`drmModeObje˘GëPr›îtõs
(
drm_fd
, 
obje˘_id
, 
obje˘_ty≥
);

1070 
i
 = 0; i < 
¥›li°
->
cou¡_¥›s
; i++) {

1071 
_¥›
 = 
	`drmModeGëPr›îty
(
drm_fd
, 
¥›li°
->
¥›s
[
i
]);

1072 i‡(!
_¥›
)

1075 i‡(
	`°rcmp
(
_¥›
->
«me
,Çame) == 0) {

1076 
found
 = 
åue
;

1077 i‡(
¥›_id
)

1078 *
¥›_id
 = 
¥›li°
->
¥›s
[
i
];

1079 i‡(
vÆue
)

1080 *
vÆue
 = 
¥›li°
->
¥›_vÆues
[
i
];

1081 i‡(
¥›
)

1082 *
¥›
 = 
_¥›
;

1084 
	`drmModeFªePr›îty
(
_¥›
);

1088 
	`drmModeFªePr›îty
(
_¥›
);

1091 
	`drmModeFªeObje˘Pr›îtõs
(
¥›li°
);

1092  
found
;

1093 
	}
}

1095 
	sedid_block
 {

1096 
	mpos
;

1097 *
	md©a
;

1100 
	#DTD_SUPPORTS_AUDIO
 1<<6

	)

1102 
edid_block


1103 
	$öô_˚a_block
(c⁄° *
edid
, 
size_t
 
Àngth
,

1104 *
√w_edid_±r
[], 
size_t
 *
√w_Àngth
,

1105 
exåa_exãnsi⁄s_Àngth
,

1106 
uöt32_t
 
dtd_suµ‹t
)

1108 
edid_block
 
√w_edid
;

1109 
n_exãnsi⁄s
;

1110 
pos
;

1111 c⁄° 
˚a_hódî_Àn
 = 4, 
video_block_Àn
 = 6;

1113 
	`igt_as£π
(
√w_edid_±r
 !
NULL
 && 
√w_Àngth
 != NULL);

1115 *
√w_Àngth
 = 
Àngth
 + 128;

1117 
√w_edid
.
d©a
 = 
	`ˇŒoc
(*
√w_Àngth
, ());

1118 
	`igt_as£π_f
(
√w_edid
.
d©a
, "FaûedÅÿÆloˇã %zu byã†f‹Édid\n", (
√w_Àngth
));

1119 
	`mem˝y
(
√w_edid
.
d©a
, 
edid
, 
Àngth
);

1120 *
√w_edid_±r
 = 
√w_edid
.
d©a
;

1122 
n_exãnsi⁄s
 = 
√w_edid
.
d©a
[126];

1123 
n_exãnsi⁄s
++;

1124 
√w_edid
.
d©a
[126] = 
n_exãnsi⁄s
;

1126 
	`upd©e_edid_csum
(
√w_edid
.
d©a
, 0);

1129 
pos
 = 
Àngth
;

1130 
√w_edid
.
d©a
[
pos
++] = 0x2;

1131 
√w_edid
.
d©a
[
pos
++] = 0x3;

1132 
√w_edid
.
d©a
[
pos
++] = 
˚a_hódî_Àn
 + 
video_block_Àn
 +

1133 
exåa_exãnsi⁄s_Àngth
;

1134 
√w_edid
.
d©a
[
pos
++] = 
dtd_suµ‹t
;

1137 
√w_edid
.
d©a
[
pos
++] = 2 << 5 | (
video_block_Àn
 - 1);

1138 
√w_edid
.
d©a
[
pos
++] = 32 | 0x80;

1139 
√w_edid
.
d©a
[
pos
++] = 5;

1140 
√w_edid
.
d©a
[
pos
++] = 20;

1141 
√w_edid
.
d©a
[
pos
++] = 4;

1142 
√w_edid
.
d©a
[
pos
++] = 19;

1143 
√w_edid
.
pos
 =Öos;

1145  
√w_edid
;

1146 
	}
}

1158 
	$km°e°_edid_add_3d
(c⁄° *
edid
, 
size_t
 
Àngth
,

1159 *
√w_edid_±r
[], 
size_t
 *
√w_Àngth
)

1161 
vsdb_block_Àn
 = 11;

1162 
edid_block
 
√w_edid
 = 
	`öô_˚a_block
(
edid
, 
Àngth
, 
√w_edid_±r
,

1163 
√w_Àngth
, 
vsdb_block_Àn
,

1165 
pos
 = 
√w_edid
.pos;

1168 
√w_edid
.
d©a
[
pos
++] = 3 << 5 | (
vsdb_block_Àn
 - 1);

1170 
√w_edid
.
d©a
[
pos
++] = 0x3;

1171 
√w_edid
.
d©a
[
pos
++] = 0xc;

1172 
√w_edid
.
d©a
[
pos
++] = 0x0;

1174 
√w_edid
.
d©a
[
pos
++] = 0x10;

1175 
√w_edid
.
d©a
[
pos
++] = 0x00;

1177 
√w_edid
.
d©a
[
pos
++] = 0x00;

1179 
√w_edid
.
d©a
[
pos
++] = 0x00;

1181 
√w_edid
.
d©a
[
pos
++] = 0x20;

1183 
√w_edid
.
d©a
[
pos
++] = 0x80;

1184 
√w_edid
.
d©a
[
pos
++] = 0x00;

1186 
	`upd©e_edid_csum
(
√w_edid
.
d©a
, 
Àngth
);

1187 
	}
}

1199 
	$km°e°_edid_add_4k
(c⁄° *
edid
, 
size_t
 
Àngth
,

1200 *
√w_edid_±r
[], 
size_t
 *
√w_Àngth
)

1202 
vsdb_block_Àn
 = 12;

1203 
edid_block
 
√w_edid
 = 
	`öô_˚a_block
(
edid
, 
Àngth
, 
√w_edid_±r
,

1204 
√w_Àngth
, 
vsdb_block_Àn
,

1206 
pos
 = 
√w_edid
.pos;

1209 
√w_edid
.
d©a
[
pos
++] = 3 << 5 | (
vsdb_block_Àn
 - 1);

1211 
√w_edid
.
d©a
[
pos
++] = 0x3;

1212 
√w_edid
.
d©a
[
pos
++] = 0xc;

1213 
√w_edid
.
d©a
[
pos
++] = 0x0;

1215 
√w_edid
.
d©a
[
pos
++] = 0x10;

1216 
√w_edid
.
d©a
[
pos
++] = 0x00;

1218 
√w_edid
.
d©a
[
pos
++] = 0x00;

1220 
√w_edid
.
d©a
[
pos
++] = 0x00;

1222 
√w_edid
.
d©a
[
pos
++] = 0x20;

1224 
√w_edid
.
d©a
[
pos
++] = 0x00;

1227 
√w_edid
.
d©a
[
pos
++] = 0x20;

1229 
√w_edid
.
d©a
[
pos
++] = 0x01;

1231 
	`upd©e_edid_csum
(
√w_edid
.
d©a
, 
Àngth
);

1232 
	}
}

1245 
	$km°e°_edid_add_audio
(c⁄° *
edid
, 
size_t
 
Àngth
,

1246 *
√w_edid_±r
[], 
size_t
 *
√w_Àngth
)

1248 
vsdb_block_Àn
 = 10, 
audio_block_Àn
 = 4, 
•kr_block_Àn
 = 4;

1249 
edid_block
 
√w_edid
 = 
	`öô_˚a_block
(
edid
, 
Àngth
, 
√w_edid_±r
,

1250 
√w_Àngth
,

1251 
vsdb_block_Àn
 +

1252 
audio_block_Àn
 +

1253 
•kr_block_Àn
,

1254 
DTD_SUPPORTS_AUDIO
);

1255 
pos
 = 
√w_edid
.pos;

1258 
√w_edid
.
d©a
[
pos
++] = (1 << 5Ë| (
audio_block_Àn
 - 1);

1259 
√w_edid
.
d©a
[
pos
++] = 0x09;

1260 
√w_edid
.
d©a
[
pos
++] = 0x07;

1261 
√w_edid
.
d©a
[
pos
++] = 0x07;

1266 
√w_edid
.
d©a
[
pos
++] = 3 << 5 | (
vsdb_block_Àn
 - 1);

1268 
√w_edid
.
d©a
[
pos
++] = 0x3;

1269 
√w_edid
.
d©a
[
pos
++] = 0xc;

1270 
√w_edid
.
d©a
[
pos
++] = 0x0;

1272 
√w_edid
.
d©a
[
pos
++] = 0x10;

1273 
√w_edid
.
d©a
[
pos
++] = 0x00;

1275 
√w_edid
.
d©a
[
pos
++] = 0x00;

1277 
√w_edid
.
d©a
[
pos
++] = 0x00;

1279 
√w_edid
.
d©a
[
pos
++] = 0x20;

1281 
√w_edid
.
d©a
[
pos
++] = 0x00;

1284 
√w_edid
.
d©a
[
pos
++] = (4 << 5Ë| (
•kr_block_Àn
 - 1);

1285 
√w_edid
.
d©a
[
pos
++] = (1 << 5);

1286 
√w_edid
.
d©a
[
pos
++] = 0x00;

1287 
√w_edid
.
d©a
[
pos
++] = 0x00;

1289 
	`upd©e_edid_csum
(
√w_edid
.
d©a
, 
Àngth
);

1290 
	}
}

1299 
	$km°e°_un£t_Æl_¸tcs
(
drm_fd
, 
drmModeResPå
 
ªsour˚s
)

1301 
i
, 
rc
;

1303 
i
 = 0; i < 
ªsour˚s
->
cou¡_¸tcs
; i++) {

1304 
rc
 = 
	`drmModeSëCπc
(
drm_fd
, 
ªsour˚s
->
¸tcs
[
i
], 0, 0, 0, 
NULL
,

1305 0, 
NULL
);

1306 
	`igt_as£π
(
rc
 == 0);

1308 
	}
}

1318 
	$km°e°_gë_¸tc_idx
(
drmModeRes
 *
ªs
, 
uöt32_t
 
¸tc_id
)

1320 
i
;

1322 
i
 = 0; i < 
ªs
->
cou¡_¸tcs
; i++)

1323 i‡(
ªs
->
¸tcs
[
i
] =
¸tc_id
)

1324  
i
;

1326 
	`igt_as£π
(
Ál£
);

1327 
	}
}

1329 
ölöe
 
uöt32_t
 
	$pùe_£À˘
(
pùe
)

1331 i‡(
pùe
 > 1)

1332  
pùe
 << 
DRM_VBLANK_HIGH_CRTC_SHIFT
;

1333 i‡(
pùe
 > 0)

1334  
DRM_VBLANK_SECONDARY
;

1337 
	}
}

1339 
	$km°e°_gë_vbœnk
(
fd
, 
pùe
, 
Êags
)

1341 
drm_waô_vbœnk
 
vbl
;

1343 
	`mem£t
(&
vbl
, 0, (vbl));

1344 
vbl
.
ªque°
.
ty≥
 = 
DRM_VBLANK_RELATIVE
 | 
	`pùe_£À˘
(
pùe
Ë| 
Êags
;

1345 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_WAIT_VBLANK
, &
vbl
))

1348  
vbl
.
ª∂y
.
£quí˚
;

1349 
	}
}

1351 
	$gë_∂™e
(*
°r
, 
ty≥
, 
km°e°_∂™e
 *
∂™e
)

1353 
ªt
;

1354 
buf
[256];

1356 
∂™e
->
ty≥
 =Åype;

1357 
ªt
 = 
	`ssˇnf
(
°r
 + 12, "%d%*c %*s %[^n]s",

1358 &
∂™e
->
id
,

1359 
buf
);

1360 
	`igt_as£π_eq
(
ªt
, 2);

1362 
ªt
 = 
	`ssˇnf
(
buf
 + 9, "%4d%*c%4d%*c", &
∂™e
->
pos_x
, &∂™e->
pos_y
);

1363 
	`igt_as£π_eq
(
ªt
, 2);

1365 
ªt
 = 
	`ssˇnf
(
buf
 + 30, "%4d%*c%4d%*c", &
∂™e
->
width
, &∂™e->
height
);

1366 
	`igt_as£π_eq
(
ªt
, 2);

1367 
	}
}

1369 
	$∑r£_∂™es
(
FILE
 *
fid
, 
km°e°_∂™e
 *
∂™es
)

1371 
tmp
[256];

1372 
n_∂™es
;

1374 
n_∂™es
 = 0;

1375 
	`fgës
(
tmp
, 256, 
fid
Ë!
NULL
) {

1376 i‡(
	`°r°r
(
tmp
, "ty≥=PRI"Ë!
NULL
) {

1377 i‡(
∂™es
) {

1378 
	`gë_∂™e
(
tmp
, 
DRM_PLANE_TYPE_PRIMARY
, &
∂™es
[
n_∂™es
]);

1379 
∂™es
[
n_∂™es
].
ödex
 =Ç_planes;

1381 
n_∂™es
++;

1382 } i‡(
	`°r°r
(
tmp
, "ty≥=OVL"Ë!
NULL
) {

1383 i‡(
∂™es
) {

1384 
	`gë_∂™e
(
tmp
, 
DRM_PLANE_TYPE_OVERLAY
, &
∂™es
[
n_∂™es
]);

1385 
∂™es
[
n_∂™es
].
ödex
 =Ç_planes;

1387 
n_∂™es
++;

1388 } i‡(
	`°r°r
(
tmp
, "ty≥=CUR"Ë!
NULL
) {

1389 i‡(
∂™es
) {

1390 
	`gë_∂™e
(
tmp
, 
DRM_PLANE_TYPE_CURSOR
, &
∂™es
[
n_∂™es
]);

1391 
∂™es
[
n_∂™es
].
ödex
 =Ç_planes;

1393 
n_∂™es
++;

1398  
n_∂™es
;

1399 
	}
}

1401 
	$∑r£_¸tc
(*
öfo
, 
km°e°_¸tc
 *
¸tc
)

1403 
buf
[256];

1404 
ªt
;

1405 
pùe
;

1407 
ªt
 = 
	`ssˇnf
(
öfo
 + 4, "%d%*c %*s %c%*c %*s %s%*c",

1408 &
¸tc
->
id
, &
pùe
, 
buf
);

1409 
	`igt_as£π_eq
(
ªt
, 3);

1411 
¸tc
->
pùe
 = 
	`km°e°_pùe_to_ödex
(pipe);

1412 
	`igt_as£π
(
¸tc
->
pùe
 >= 0);

1414 
ªt
 = 
	`ssˇnf
(
buf
 + 6, "%d%*c%d%*c",

1415 &
¸tc
->
width
, &¸tc->
height
);

1416 
	`igt_as£π_eq
(
ªt
, 2);

1417 
	}
}

1419 
	$km°e°_gë_¸tc
(
devi˚
, 
pùe
Öùe, 
km°e°_¸tc
 *
¸tc
)

1421 
tmp
[256];

1422 
FILE
 *
fûe
;

1423 
n¸tc
;

1424 
löe
;

1425 
n
;

1426 
fd
;

1428 
fd
 = 
	`igt_debugfs_›í
(
devi˚
, "i915_di•œy_öfo", 
O_RDONLY
);

1429 
fûe
 = 
	`fd›í
(
fd
, "r");

1430 
	`igt_skù_⁄
(
fûe
 =
NULL
);

1432 
n¸tc
 = 0;

1433 
löe
 = 0;

1434 
	`fgës
(
tmp
, 256, 
fûe
Ë!
NULL
) {

1435 i‡((
	`°r°r
(
tmp
, "CRTC"Ë!
NULL
Ë&& (
löe
 > 0)) {

1436 i‡(
	`°r°r
(
tmp
, "a˘ive=yes"Ë!
NULL
) {

1437 
¸tc
->
a˘ive
 = 
åue
;

1438 
	`∑r£_¸tc
(
tmp
, 
¸tc
);

1440 
n
 = 
	`·ñl
(
fûe
);

1441 
¸tc
->
n_∂™es
 = 
	`∑r£_∂™es
(
fûe
, 
NULL
);

1442 
¸tc
->
∂™es
 = 
	`ˇŒoc
(¸tc->
n_∂™es
, (*crtc->planes));

1443 
	`igt_as£π_f
(
¸tc
->
∂™es
, "FaûedÅÿÆloˇã mem‹y f‹ %dÖœ√s\n", cπc->
n_∂™es
);

1445 
	`f£ek
(
fûe
, 
n
, 
SEEK_SET
);

1446 
	`∑r£_∂™es
(
fûe
, 
¸tc
->
∂™es
);

1448 i‡(
¸tc
->
pùe
 !=Öipe) {

1449 
	`‰ì
(
¸tc
->
∂™es
);

1451 
n¸tc
++;

1457 
löe
++;

1460 
	`f˛o£
(
fûe
);

1461 
	`˛o£
(
fd
);

1463 
	`igt_as£π
(
n¸tc
 == 1);

1464 
	}
}

1466 
	$igt_as£π_∂™e_visibÀ
(
fd
, 
pùe
Öùe, 
boﬁ
 
visibûôy
)

1468 
km°e°_¸tc
 
¸tc
;

1469 
i
;

1470 
boﬁ
 
visibÀ
;

1472 
	`km°e°_gë_¸tc
(
fd
, 
pùe
, &
¸tc
);

1474 
visibÀ
 = 
åue
;

1475 
i
 = 0; i < 
¸tc
.
n_∂™es
; i++) {

1476 i‡(
¸tc
.
∂™es
[
i
].
ty≥
 =
DRM_PLANE_TYPE_PRIMARY
)

1479 i‡(
¸tc
.
∂™es
[
i
].
pos_x
 > cπc.
width
) {

1480 
visibÀ
 = 
Ál£
;

1482 } i‡(
¸tc
.
∂™es
[
i
].
pos_y
 > cπc.
height
) {

1483 
visibÀ
 = 
Ál£
;

1488 
	`‰ì
(
¸tc
.
∂™es
);

1489 
	`igt_as£π_eq
(
visibÀ
, 
visibûôy
);

1490 
	}
}

1496 
	#LOG_SPACES
 " "

	)

1497 
	#LOG_N_SPACES
 ((
LOG_SPACES
Ë- 1)

	)

1499 
	#LOG_INDENT
(
d
, 
£˘i⁄
) \

1501 
	`igt_di•œy_log
(
d
, "%†{\n", 
£˘i⁄
); \

1502 
	`igt_di•œy_log_shi·
(
d
, 1); \

1503 } 0)

	)

1504 
	#LOG_UNINDENT
(
d
) \

1506 
	`igt_di•œy_log_shi·
(
d
, -1); \

1507 
	`igt_di•œy_log
(
d
, "}\n"); \

1508 } 0)

	)

1509 
	#LOG
(
d
, 
fmt
, ...Ë
	`igt_di•œy_log
(d, fmt, ## 
__VA_ARGS__
)

	)

1511 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 2, 3)))

1512 
	$igt_di•œy_log
(
igt_di•œy_t
 *
di•œy
, c⁄° *
fmt
, ...)

1514 
va_li°
 
¨gs
;

1515 
i
;

1517 
	`va_°¨t
(
¨gs
, 
fmt
);

1518 
	`igt_debug
("display: ");

1519 
i
 = 0; i < 
di•œy
->
log_shi·
; i++)

1520 
	`igt_debug
("%s", 
LOG_SPACES
);

1521 
	`igt_vlog
(
IGT_LOG_DOMAIN
, 
IGT_LOG_DEBUG
, 
fmt
, 
¨gs
);

1522 
	`va_íd
(
¨gs
);

1523 
	}
}

1525 
	$igt_di•œy_log_shi·
(
igt_di•œy_t
 *
di•œy
, 
shi·
)

1527 
di•œy
->
log_shi·
 +
shi·
;

1528 
	`igt_as£π
(
di•œy
->
log_shi·
 >= 0);

1529 
	}
}

1531 
	$igt_ouçut_ª‰esh
(
igt_ouçut_t
 *
ouçut
)

1533 
igt_di•œy_t
 *
di•œy
 = 
ouçut
->display;

1534 
¸tc_idx_mask
 = 0;

1536 i‡(
ouçut
->
≥ndög_pùe
 !
PIPE_NONE
)

1537 
¸tc_idx_mask
 = 1 << 
ouçut
->
≥ndög_pùe
;

1539 
	`km°e°_‰ì_c⁄√˘‹_c⁄fig
(&
ouçut
->
c⁄fig
);

1541 
	`_km°e°_c⁄√˘‹_c⁄fig
(
di•œy
->
drm_fd
, 
ouçut
->
id
, 
¸tc_idx_mask
,

1542 &
ouçut
->
c⁄fig
, ouçut->
f‹˚_ª¥obe
);

1543 
ouçut
->
f‹˚_ª¥obe
 = 
Ál£
;

1545 i‡(!
ouçut
->
«me
 && ouçut->
c⁄fig
.
c⁄√˘‹
) {

1546 
drmModeC⁄√˘‹
 *
c
 = 
ouçut
->
c⁄fig
.
c⁄√˘‹
;

1548 
	`igt_as£π_√q
(
	`a•rötf
(&
ouçut
->
«me
, "%s-%d", 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c
->
c⁄√˘‹_ty≥
), c->
c⁄√˘‹_ty≥_id
),

1552 i‡(
ouçut
->
c⁄fig
.
c⁄√˘‹
) {

1553 
	`igt_©omic_fûl_c⁄√˘‹_¥›s
(
di•œy
, 
ouçut
,

1554 
IGT_NUM_CONNECTOR_PROPS
, 
igt_c⁄√˘‹_¥›_«mes
);

1556 i‡(
ouçut
->
¥›s
[
IGT_CONNECTOR_BROADCAST_RGB
])

1557 
	`igt_ouçut_£t_¥›_vÆue
(
ouçut
,

1558 
IGT_CONNECTOR_BROADCAST_RGB
,

1559 
BROADCAST_RGB_FULL
);

1562 
	`LOG
(
di•œy
, "%s: Sñe˘ögÖùê%s\n", 
ouçut
->
«me
,

1563 
	`km°e°_pùe_«me
(
ouçut
->
≥ndög_pùe
));

1564 
	}
}

1566 
boﬁ


1567 
	$gë_∂™e_¥›îty
(
drm_fd
, 
uöt32_t
 
∂™e_id
, c⁄° *
«me
,

1568 
uöt32_t
 *
¥›_id
 , 
uöt64_t
 *
vÆue
 ,

1569 
drmModePr›îtyPå
 *
¥›
 )

1571  
	`km°e°_gë_¥›îty
(
drm_fd
, 
∂™e_id
, 
DRM_MODE_OBJECT_PLANE
,

1572 
«me
, 
¥›_id
, 
vÆue
, 
¥›
);

1573 
	}
}

1576 
	$igt_∂™e_£t_¥›îty
(
igt_∂™e_t
 *
∂™e
, 
uöt32_t
 
¥›_id
, 
uöt64_t
 
vÆue
)

1578 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

1579 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

1581  
	`drmModeObje˘SëPr›îty
(
di•œy
->
drm_fd
, 
∂™e
->
drm_∂™e
->
∂™e_id
,

1582 
DRM_MODE_OBJECT_PLANE
, 
¥›_id
, 
vÆue
);

1583 
	}
}

1585 
boﬁ


1586 
	$gë_¸tc_¥›îty
(
drm_fd
, 
uöt32_t
 
¸tc_id
, c⁄° *
«me
,

1587 
uöt32_t
 *
¥›_id
 , 
uöt64_t
 *
vÆue
 ,

1588 
drmModePr›îtyPå
 *
¥›
 )

1590  
	`km°e°_gë_¥›îty
(
drm_fd
, 
¸tc_id
, 
DRM_MODE_OBJECT_CRTC
,

1591 
«me
, 
¥›_id
, 
vÆue
, 
¥›
);

1592 
	}
}

1599 
	$gë_drm_∂™e_ty≥
(
drm_fd
, 
uöt32_t
 
∂™e_id
)

1601 
uöt64_t
 
vÆue
;

1602 
boﬁ
 
has_¥›
;

1604 
has_¥›
 = 
	`gë_∂™e_¥›îty
(
drm_fd
, 
∂™e_id
, "type",

1605 
NULL
 , &
vÆue
, NULL);

1606 i‡(
has_¥›
)

1607  ()
vÆue
;

1609  
DRM_PLANE_TYPE_OVERLAY
;

1610 
	}
}

1621 
	$igt_di•œy_öô
(
igt_di•œy_t
 *
di•œy
, 
drm_fd
)

1623 
drmModeRes
 *
ªsour˚s
;

1624 
drmModePœ√Res
 *
∂™e_ªsour˚s
;

1625 
i
;

1627 
	`mem£t
(
di•œy
, 0, (
igt_di•œy_t
));

1629 
	`LOG_INDENT
(
di•œy
, "init");

1631 
di•œy
->
drm_fd
 = drm_fd;

1633 
ªsour˚s
 = 
	`drmModeGëResour˚s
(
di•œy
->
drm_fd
);

1634 
	`igt_as£π
(
ªsour˚s
);

1640 
di•œy
->
n_pùes
 = 
ªsour˚s
->
cou¡_¸tcs
;

1641 
di•œy
->
pùes
 = 
	`ˇŒoc
((
igt_pùe_t
), di•œy->
n_pùes
);

1642 
	`igt_as£π_f
(
di•œy
->
pùes
, "FaûedÅÿÆloˇã mem‹y f‹ %dÖùes\n", di•œy->
n_pùes
);

1644 
	`drmSëClõ¡C≠
(
drm_fd
, 
DRM_CLIENT_CAP_UNIVERSAL_PLANES
, 1);

1645 i‡(
	`drmSëClõ¡C≠
(
drm_fd
, 
DRM_CLIENT_CAP_ATOMIC
, 1) == 0)

1646 
di•œy
->
is_©omic
 = 1;

1648 
∂™e_ªsour˚s
 = 
	`drmModeGëPœ√Resour˚s
(
di•œy
->
drm_fd
);

1649 
	`igt_as£π
(
∂™e_ªsour˚s
);

1651 
i
 = 0; i < 
di•œy
->
n_pùes
; i++) {

1652 
igt_pùe_t
 *
pùe
 = &
di•œy
->
pùes
[
i
];

1653 
igt_∂™e_t
 *
∂™e
;

1654 
p
 = 1;

1655 
j
, 
ty≥
;

1656 
uöt8_t
 
œ°_∂™e
 = 0, 
n_∂™es
 = 0;

1658 
pùe
->
¸tc_id
 = 
ªsour˚s
->
¸tcs
[
i
];

1659 
pùe
->
di•œy
 = display;

1660 
pùe
->pùê
i
;

1661 
pùe
->
∂™e_curs‹
 = -1;

1662 
pùe
->
∂™e_¥im¨y
 = -1;

1663 
pùe
->
∂™es
 = 
NULL
;

1664 
pùe
->
out_„n˚_fd
 = -1;

1666 
	`igt_fûl_pùe_¥›s
(
di•œy
, 
pùe
, 
IGT_NUM_CRTC_PROPS
, 
igt_¸tc_¥›_«mes
);

1669 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe
, 
IGT_CRTC_MODE_ID
);

1670 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe
, 
IGT_CRTC_ACTIVE
);

1672 
	`gë_¸tc_¥›îty
(
di•œy
->
drm_fd
, 
pùe
->
¸tc_id
,

1673 "background_cﬁ‹", 
NULL
,

1674 &
pùe
->
vÆues
[
IGT_CRTC_BACKGROUND
],

1675 
NULL
);

1678 
j
 = 0; j < 
∂™e_ªsour˚s
->
cou¡_∂™es
; j++) {

1679 
drmModePœ√
 *
drm_∂™e
;

1681 
drm_∂™e
 = 
	`drmModeGëPœ√
(
di•œy
->
drm_fd
,

1682 
∂™e_ªsour˚s
->
∂™es
[
j
]);

1683 
	`igt_as£π
(
drm_∂™e
);

1685 i‡(
drm_∂™e
->
possibÀ_¸tcs
 & (1 << 
i
))

1686 
n_∂™es
++;

1688 
	`drmModeFªePœ√
(
drm_∂™e
);

1691 
	`igt_as£π_…e
(0, 
n_∂™es
);

1692 
pùe
->
∂™es
 = 
	`ˇŒoc
((
igt_∂™e_t
), 
n_∂™es
);

1693 
	`igt_as£π_f
(
pùe
->
∂™es
, "FaûedÅÿÆloˇã mem‹y f‹ %dÖœ√s\n", 
n_∂™es
);

1694 
œ°_∂™e
 = 
n_∂™es
 - 1;

1697 
j
 = 0; j < 
∂™e_ªsour˚s
->
cou¡_∂™es
; j++) {

1698 
drmModePœ√
 *
drm_∂™e
;

1700 
drm_∂™e
 = 
	`drmModeGëPœ√
(
di•œy
->
drm_fd
,

1701 
∂™e_ªsour˚s
->
∂™es
[
j
]);

1702 
	`igt_as£π
(
drm_∂™e
);

1704 i‡(!(
drm_∂™e
->
possibÀ_¸tcs
 & (1 << 
i
))) {

1705 
	`drmModeFªePœ√
(
drm_∂™e
);

1709 
ty≥
 = 
	`gë_drm_∂™e_ty≥
(
di•œy
->
drm_fd
,

1710 
∂™e_ªsour˚s
->
∂™es
[
j
]);

1712 i‡(
ty≥
 =
DRM_PLANE_TYPE_PRIMARY
 && 
pùe
->
∂™e_¥im¨y
 == -1) {

1713 
∂™e
 = &
pùe
->
∂™es
[0];

1714 
∂™e
->
ödex
 = 0;

1715 
pùe
->
∂™e_¥im¨y
 = 0;

1716 } i‡(
ty≥
 =
DRM_PLANE_TYPE_CURSOR
 && 
pùe
->
∂™e_curs‹
 == -1) {

1717 
∂™e
 = &
pùe
->
∂™es
[
œ°_∂™e
];

1718 
∂™e
->
ödex
 = 
œ°_∂™e
;

1719 
pùe
->
∂™e_curs‹
 = 
œ°_∂™e
;

1720 
di•œy
->
has_curs‹_∂™e
 = 
åue
;

1722 
∂™e
 = &
pùe
->
∂™es
[
p
];

1723 
∂™e
->
ödex
 = 
p
++;

1726 
	`igt_as£π_f
(
∂™e
->
ödex
 < 
n_∂™es
, "n_planes <Ölane->index failed\n");

1727 
∂™e
->
ty≥
 =Åype;

1728 
∂™e
->
pùe
 =Öipe;

1729 
∂™e
->
drm_∂™e
 = drm_plane;

1730 
∂™e
->
vÆues
[
IGT_PLANE_IN_FENCE_FD
] = ~0ULL;

1732 
	`igt_fûl_∂™e_¥›s
(
di•œy
, 
∂™e
, 
IGT_NUM_PLANE_PROPS
, 
igt_∂™e_¥›_«mes
);

1734 
	`gë_∂™e_¥›îty
(
di•œy
->
drm_fd
, 
drm_∂™e
->
∂™e_id
,

1736 &
∂™e
->
¥›s
[
IGT_PLANE_ROTATION
],

1737 &
∂™e
->
vÆues
[
IGT_PLANE_ROTATION
],

1738 
NULL
);

1741 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_FB_ID
);

1742 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_CRTC_ID
);

1749 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_CRTC_X
);

1750 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_CRTC_Y
);

1757 
	`igt_as£π_eq
(
pùe
->
∂™e_¥im¨y
, 0);

1760 i‡(
di•œy
->
has_curs‹_∂™e
)

1761 
	`igt_as£π_eq
(
p
, 
œ°_∂™e
);

1763 
	`igt_as£π_eq
(
p
, 
n_∂™es
);

1765 
pùe
->
n_∂™es
 =Ç_planes;

1773 
di•œy
->
n_ouçuts
 = 
ªsour˚s
->
cou¡_c⁄√˘‹s
;

1774 
di•œy
->
ouçuts
 = 
	`ˇŒoc
(di•œy->
n_ouçuts
, (
igt_ouçut_t
));

1775 
	`igt_as£π_f
(
di•œy
->
ouçuts
, "FaûedÅÿÆloˇã mem‹y f‹ %d ouçuts\n", di•œy->
n_ouçuts
);

1777 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++) {

1778 
igt_ouçut_t
 *
ouçut
 = &
di•œy
->
ouçuts
[
i
];

1784 
ouçut
->
f‹˚_ª¥obe
 = 
åue
;

1785 
ouçut
->
≥ndög_pùe
 = 
PIPE_NONE
;

1786 
ouçut
->
id
 = 
ªsour˚s
->
c⁄√˘‹s
[
i
];

1787 
ouçut
->
di•œy
 = display;

1789 
	`igt_ouçut_ª‰esh
(
ouçut
);

1791 
	`igt_ouçut_£t_¥›_ch™ged
(
ouçut
, 
IGT_CONNECTOR_CRTC_ID
);

1794 
	`drmModeFªePœ√Resour˚s
(
∂™e_ªsour˚s
);

1795 
	`drmModeFªeResour˚s
(
ªsour˚s
);

1797 
	`LOG_UNINDENT
(
di•œy
);

1798 
	}
}

1800 
	$igt_di•œy_gë_n_pùes
(
igt_di•œy_t
 *
di•œy
)

1802  
di•œy
->
n_pùes
;

1803 
	}
}

1805 
	$igt_di•œy_ªquúe_ouçut
(
igt_di•œy_t
 *
di•œy
)

1807 
pùe
Öipe;

1808 
igt_ouçut_t
 *
ouçut
;

1810 
	`f‹_óch_pùe_wôh_vÆid_ouçut
(
di•œy
, 
pùe
, 
ouçut
)

1813 
	`igt_skù
("No valid crtc/connector combinations found.\n");

1814 
	}
}

1816 
	$igt_di•œy_ªquúe_ouçut_⁄_pùe
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öipe)

1818 
igt_ouçut_t
 *
ouçut
;

1820 
	`igt_skù_⁄_f
(
	`igt_di•œy_gë_n_pùes
(
di•œy
Ë< 
pùe
,

1821 "Pùê%†d€†nŸÉxi°.\n", 
	`km°e°_pùe_«me
(
pùe
));

1823 
	`f‹_óch_vÆid_ouçut_⁄_pùe
(
di•œy
, 
pùe
, 
ouçut
)

1826 
	`igt_skù
("NÿvÆid c⁄√˘‹ found o¿pùê%s\n", 
	`km°e°_pùe_«me
(
pùe
));

1827 
	}
}

1839 
igt_ouçut_t
 *
	$igt_ouçut_‰om_c⁄√˘‹
(
igt_di•œy_t
 *
di•œy
,

1840 
drmModeC⁄√˘‹
 *
c⁄√˘‹
)

1842 
igt_ouçut_t
 *
ouçut
, *
found
 = 
NULL
;

1844 
	`f‹_óch_c⁄√˘ed_ouçut
(
di•œy
, 
ouçut
) {

1845 i‡(
ouçut
->
c⁄fig
.
c⁄√˘‹
->
c⁄√˘‹_id
 ==

1846 
c⁄√˘‹
->
c⁄√˘‹_id
) {

1847 
found
 = 
ouçut
;

1852  
found
;

1853 
	}
}

1855 
	$igt_pùe_föi
(
igt_pùe_t
 *
pùe
)

1857 
i
;

1859 
i
 = 0; i < 
pùe
->
n_∂™es
; i++) {

1860 
igt_∂™e_t
 *
∂™e
 = &
pùe
->
∂™es
[
i
];

1862 i‡(
∂™e
->
drm_∂™e
) {

1863 
	`drmModeFªePœ√
(
∂™e
->
drm_∂™e
);

1864 
∂™e
->
drm_∂™e
 = 
NULL
;

1868 
	`‰ì
(
pùe
->
∂™es
);

1869 
pùe
->
∂™es
 = 
NULL
;

1871 i‡(
pùe
->
out_„n˚_fd
 != -1)

1872 
	`˛o£
(
pùe
->
out_„n˚_fd
);

1873 
	}
}

1875 
	$igt_ouçut_föi
(
igt_ouçut_t
 *
ouçut
)

1877 
	`km°e°_‰ì_c⁄√˘‹_c⁄fig
(&
ouçut
->
c⁄fig
);

1878 
	`‰ì
(
ouçut
->
«me
);

1879 
ouçut
->
«me
 = 
NULL
;

1880 
	}
}

1889 
	$igt_di•œy_föi
(
igt_di•œy_t
 *
di•œy
)

1891 
i
;

1893 
i
 = 0; i < 
di•œy
->
n_pùes
; i++)

1894 
	`igt_pùe_föi
(&
di•œy
->
pùes
[
i
]);

1896 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++)

1897 
	`igt_ouçut_föi
(&
di•œy
->
ouçuts
[
i
]);

1898 
	`‰ì
(
di•œy
->
ouçuts
);

1899 
di•œy
->
ouçuts
 = 
NULL
;

1900 
	`‰ì
(
di•œy
->
pùes
);

1901 
di•œy
->
pùes
 = 
NULL
;

1902 
	}
}

1904 
	$igt_di•œy_ª‰esh
(
igt_di•œy_t
 *
di•œy
)

1906 
igt_ouçut_t
 *
ouçut
;

1907 
i
;

1909 
pùes_ö_u£
 = 0;

1912 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++) {

1913 
ouçut
 = &
di•œy
->
ouçuts
[
i
];

1915 i‡(
ouçut
->
≥ndög_pùe
 !
PIPE_NONE
) {

1916 i‡(
pùes_ö_u£
 & (1 << 
ouçut
->
≥ndög_pùe
))

1917 
ªp‹t_dup
;

1919 
pùes_ö_u£
 |1 << 
ouçut
->
≥ndög_pùe
;

1922 i‡(
ouçut
->
f‹˚_ª¥obe
)

1923 
	`igt_ouçut_ª‰esh
(
ouçut
);

1928 
ªp‹t_dup
:

1929 ; 
i
 > 0; i--) {

1930 
igt_ouçut_t
 *
b
 = &
di•œy
->
ouçuts
[
i
 - 1];

1932 
	`igt_as£π_f
(
ouçut
->
≥ndög_pùe
 !=

1933 
b
->
≥ndög_pùe
,

1935 
	`igt_ouçut_«me
(
ouçut
), igt_ouçut_«me(
b
),

1936 
	`km°e°_pùe_«me
(
ouçut
->
≥ndög_pùe
));

1938 
	}
}

1940 
igt_pùe_t
 *
	$igt_ouçut_gë_drivög_pùe
(
igt_ouçut_t
 *
ouçut
)

1942 
igt_di•œy_t
 *
di•œy
 = 
ouçut
->display;

1943 
pùe
Öipe;

1945 i‡(
ouçut
->
≥ndög_pùe
 =
PIPE_NONE
) {

1949  
NULL
;

1955 
pùe
 = 
ouçut
->
≥ndög_pùe
;

1958 
	`igt_as£π
(
pùe
 >0 &&Öùê< 
di•œy
->
n_pùes
);

1960  &
di•œy
->
pùes
[
pùe
];

1961 
	}
}

1963 
igt_∂™e_t
 *
	$igt_pùe_gë_∂™e
(
igt_pùe_t
 *
pùe
, 
∂™e_idx
)

1965 
	`igt_ªquúe_f
(
∂™e_idx
 >0 &&Öœ√_idx < 
pùe
->
n_∂™es
,

1967 
∂™e_idx
, 
pùe
->
n_∂™es
);

1969  &
pùe
->
∂™es
[
∂™e_idx
];

1970 
	}
}

1973 
igt_∂™e_t
 *
	$igt_pùe_gë_∂™e_ty≥
(
igt_pùe_t
 *
pùe
, 
∂™e_ty≥
)

1975 
i
, 
∂™e_idx
 = -1;

1977 
∂™e_ty≥
) {

1978 
DRM_PLANE_TYPE_CURSOR
:

1979 
∂™e_idx
 = 
pùe
->
∂™e_curs‹
;

1981 
DRM_PLANE_TYPE_PRIMARY
:

1982 
∂™e_idx
 = 
pùe
->
∂™e_¥im¨y
;

1984 
DRM_PLANE_TYPE_OVERLAY
:

1985 
i
 = 0; i < 
pùe
->
n_∂™es
; i++)

1986 i‡(
pùe
->
∂™es
[
i
].
ty≥
 =
DRM_PLANE_TYPE_OVERLAY
)

1987 
∂™e_idx
 = 
i
;

1993 
	`igt_ªquúe_f
(
∂™e_idx
 >0 &&Öœ√_idx < 
pùe
->
n_∂™es
,

1995 
∂™e_idx
, 
∂™e_ty≥
, 
pùe
->
n_∂™es
);

1997  &
pùe
->
∂™es
[
∂™e_idx
];

1998 
	}
}

2000 
igt_ouçut_t
 *
	$igt_pùe_gë_ouçut
(
igt_pùe_t
 *
pùe
)

2002 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

2003 
i
;

2005 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++) {

2006 
igt_ouçut_t
 *
ouçut
 = &
di•œy
->
ouçuts
[
i
];

2008 i‡(
ouçut
->
≥ndög_pùe
 =
pùe
->pipe)

2009  
ouçut
;

2012  
NULL
;

2013 
	}
}

2015 
uöt32_t
 
	$igt_∂™e_gë_fb_id
(
igt_∂™e_t
 *
∂™e
)

2017  
∂™e
->
vÆues
[
IGT_PLANE_FB_ID
];

2018 
	}
}

2020 
	#CHECK_RETURN
(
r
, 
Áû
) { \

2021 i‡(
r
 && !
Áû
) \

2022  
r
; \

2023 
	`igt_as£π_eq
(
r
, 0); \

2024 }

	)

2030 
	$igt_©omic_¥ï¨e_∂™e_commô
(
igt_∂™e_t
 *
∂™e
, 
igt_pùe_t
 *
pùe
,

2031 
drmModeAtomicReq
 *
ªq
)

2033 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

2034 
i
;

2036 
	`igt_as£π
(
∂™e
->
drm_∂™e
);

2038 
	`LOG
(
di•œy
,

2040 
	`km°e°_pùe_«me
(
pùe
->pipe),

2041 
∂™e
->
ödex
,

2042 
	`igt_∂™e_gë_fb_id
(
∂™e
));

2044 
i
 = 0; i < 
IGT_NUM_PLANE_PROPS
; i++) {

2045 i‡(!
	`igt_∂™e_is_¥›_ch™ged
(
∂™e
, 
i
))

2049 
	`igt_as£π
(
∂™e
->
¥›s
[
i
]);

2051 
	`igt_debug
("∂™ê%s.%d: SëtögÖr›îty \"%s\"Åÿ0x%"
PRIx64
"/%"
PRIi64
"\n",

2052 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
igt_∂™e_¥›_«mes
[
i
],

2053 
∂™e
->
vÆues
[
i
],Ölane->values[i]);

2055 
	`igt_as£π_…
(0, 
	`drmModeAtomicAddPr›îty
(
ªq
, 
∂™e
->
drm_∂™e
->
∂™e_id
,

2056 
∂™e
->
¥›s
[
i
],

2057 
∂™e
->
vÆues
[
i
]));

2059 
	}
}

2071 
	#LEGACY_PLANE_COMMIT_MASK
 \

2072 (((1ULL << 
IGT_NUM_PLANE_PROPS
) - 1) & \

2073 ~(
IGT_PLANE_COORD_CHANGED_MASK
 | \

2074 (1ULL << 
IGT_PLANE_FB_ID
) | \

2075 (1ULL << 
IGT_PLANE_CRTC_ID
) | \

2076 (1ULL << 
IGT_PLANE_IN_FENCE_FD
)))

	)

2084 
	$igt_drm_∂™e_commô
(
igt_∂™e_t
 *
∂™e
,

2085 
igt_pùe_t
 *
pùe
,

2086 
boﬁ
 
Áû_⁄_îr‹
)

2088 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

2089 
uöt32_t
 
fb_id
, 
¸tc_id
;

2090 
ªt
, 
i
;

2091 
uöt32_t
 
§c_x
;

2092 
uöt32_t
 
§c_y
;

2093 
uöt32_t
 
§c_w
;

2094 
uöt32_t
 
§c_h
;

2095 
öt32_t
 
¸tc_x
;

2096 
öt32_t
 
¸tc_y
;

2097 
uöt32_t
 
¸tc_w
;

2098 
uöt32_t
 
¸tc_h
;

2099 
uöt64_t
 
ch™ged_mask
;

2100 
boﬁ
 
£çœ√
 =

2101 
	`igt_∂™e_is_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_FB_ID
) ||

2102 
∂™e
->
ch™ged
 & 
IGT_PLANE_COORD_CHANGED_MASK
;

2104 
	`igt_as£π
(
∂™e
->
drm_∂™e
);

2106 
fb_id
 = 
	`igt_∂™e_gë_fb_id
(
∂™e
);

2107 
¸tc_id
 = 
pùe
->crtc_id;

2109 i‡(
£çœ√
 && 
fb_id
 == 0) {

2110 
	`LOG
(
di•œy
,

2112 
	`km°e°_pùe_«me
(
pùe
->pipe),

2113 
∂™e
->
ödex
);

2115 
ªt
 = 
	`drmModeSëPœ√
(
di•œy
->
drm_fd
,

2116 
∂™e
->
drm_∂™e
->
∂™e_id
,

2117 
¸tc_id
,

2118 
fb_id
,

2122 
	`IGT_FIXED
(0,0),

2123 
	`IGT_FIXED
(0,0),

2124 
	`IGT_FIXED
(0,0),

2125 
	`IGT_FIXED
(0,0) );

2127 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2128 } i‡(
£çœ√
) {

2129 
§c_x
 = 
∂™e
->
vÆues
[
IGT_PLANE_SRC_X
];

2130 
§c_y
 = 
∂™e
->
vÆues
[
IGT_PLANE_SRC_Y
];

2131 
§c_w
 = 
∂™e
->
vÆues
[
IGT_PLANE_SRC_W
];

2132 
§c_h
 = 
∂™e
->
vÆues
[
IGT_PLANE_SRC_H
];

2133 
¸tc_x
 = 
∂™e
->
vÆues
[
IGT_PLANE_CRTC_X
];

2134 
¸tc_y
 = 
∂™e
->
vÆues
[
IGT_PLANE_CRTC_Y
];

2135 
¸tc_w
 = 
∂™e
->
vÆues
[
IGT_PLANE_CRTC_W
];

2136 
¸tc_h
 = 
∂™e
->
vÆues
[
IGT_PLANE_CRTC_H
];

2138 
	`LOG
(
di•œy
,

2141 
	`km°e°_pùe_«me
(
pùe
->pipe),

2142 
∂™e
->
ödex
,

2143 
fb_id
,

2144 
§c_x
 >> 16, 
§c_y
 >> 16, 
§c_w
 >> 16, 
§c_h
 >> 16,

2145 
¸tc_x
, 
¸tc_y
, 
¸tc_w
, 
¸tc_h
);

2147 
ªt
 = 
	`drmModeSëPœ√
(
di•œy
->
drm_fd
,

2148 
∂™e
->
drm_∂™e
->
∂™e_id
,

2149 
¸tc_id
,

2150 
fb_id
,

2152 
¸tc_x
, 
¸tc_y
,

2153 
¸tc_w
, 
¸tc_h
,

2154 
§c_x
, 
§c_y
,

2155 
§c_w
, 
§c_h
);

2157 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2160 
ch™ged_mask
 = 
∂™e
->
ch™ged
 & 
LEGACY_PLANE_COMMIT_MASK
;

2162 
i
 = 0; i < 
IGT_NUM_PLANE_PROPS
; i++) {

2163 i‡(!(
ch™ged_mask
 & (1 << 
i
)))

2166 
	`LOG
(
di•œy
, "SëPr›Öœ√ %s.%d \"%s\"Åÿ0x%"
PRIx64
"/%"
PRIi64
"\n",

2167 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
igt_∂™e_¥›_«mes
[
i
],

2168 
∂™e
->
vÆues
[
i
],Ölane->values[i]);

2170 
	`igt_as£π
(
∂™e
->
¥›s
[
i
]);

2172 
ªt
 = 
	`igt_∂™e_£t_¥›îty
(
∂™e
,

2173 
∂™e
->
¥›s
[
i
],

2174 
∂™e
->
vÆues
[
i
]);

2176 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2180 
	}
}

2188 
	$igt_curs‹_commô_Àgacy
(
igt_∂™e_t
 *
curs‹
,

2189 
igt_pùe_t
 *
pùe
,

2190 
boﬁ
 
Áû_⁄_îr‹
)

2192 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

2193 
uöt32_t
 
¸tc_id
 = 
pùe
->crtc_id;

2194 
ªt
;

2196 i‡(
	`igt_∂™e_is_¥›_ch™ged
(
curs‹
, 
IGT_PLANE_FB_ID
)) {

2197 i‡(
curs‹
->
gem_h™dÀ
)

2198 
	`LOG
(
di•œy
,

2200 
	`km°e°_pùe_«me
(
pùe
->pipe),

2201 
curs‹
->
gem_h™dÀ
,

2202 ()
curs‹
->
vÆues
[
IGT_PLANE_CRTC_W
],

2203 ()
curs‹
->
vÆues
[
IGT_PLANE_CRTC_H
]);

2205 
	`LOG
(
di•œy
,

2207 
	`km°e°_pùe_«me
(
pùe
->pipe));

2209 
ªt
 = 
	`drmModeSëCurs‹
(
di•œy
->
drm_fd
, 
¸tc_id
,

2210 
curs‹
->
gem_h™dÀ
,

2211 
curs‹
->
vÆues
[
IGT_PLANE_CRTC_W
],

2212 
curs‹
->
vÆues
[
IGT_PLANE_CRTC_H
]);

2213 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2216 i‡(
	`igt_∂™e_is_¥›_ch™ged
(
curs‹
, 
IGT_PLANE_CRTC_X
) ||

2217 
	`igt_∂™e_is_¥›_ch™ged
(
curs‹
, 
IGT_PLANE_CRTC_Y
)) {

2218 
x
 = 
curs‹
->
vÆues
[
IGT_PLANE_CRTC_X
];

2219 
y
 = 
curs‹
->
vÆues
[
IGT_PLANE_CRTC_Y
];

2221 
	`LOG
(
di•œy
,

2223 
	`km°e°_pùe_«me
(
pùe
->pipe),

2224 
x
, 
y
);

2226 
ªt
 = 
	`drmModeMoveCurs‹
(
di•œy
->
drm_fd
, 
¸tc_id
, 
x
, 
y
);

2227 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2231 
	}
}

2237 
	$igt_¥im¨y_∂™e_commô_Àgacy
(
igt_∂™e_t
 *
¥im¨y
,

2238 
igt_pùe_t
 *
pùe
,

2239 
boﬁ
 
Áû_⁄_îr‹
)

2241 
igt_di•œy
 *
di•œy
 = 
¥im¨y
->
pùe
->display;

2242 
igt_ouçut_t
 *
ouçut
 = 
	`igt_pùe_gë_ouçut
(
pùe
);

2243 
drmModeModeInfo
 *
mode
;

2244 
uöt32_t
 
fb_id
, 
¸tc_id
;

2245 
ªt
;

2248 
	`igt_as£π
((
¥im¨y
->
vÆues
[
IGT_PLANE_CRTC_X
] =0 &&Örim¨y->vÆues[
IGT_PLANE_CRTC_Y
] == 0));

2251 
	`igt_as£π
(!
	`igt_∂™e_is_¥›_ch™ged
(
¥im¨y
, 
IGT_PLANE_ROTATION
));

2253 i‡(!
	`igt_∂™e_is_¥›_ch™ged
(
¥im¨y
, 
IGT_PLANE_FB_ID
) &&

2254 !(
¥im¨y
->
ch™ged
 & 
IGT_PLANE_COORD_CHANGED_MASK
) &&

2255 !
	`igt_pùe_obj_is_¥›_ch™ged
(
¥im¨y
->
pùe
, 
IGT_CRTC_MODE_ID
))

2258 
¸tc_id
 = 
pùe
->crtc_id;

2259 
fb_id
 = 
ouçut
 ? 
	`igt_∂™e_gë_fb_id
(
¥im¨y
) : 0;

2260 i‡(
fb_id
)

2261 
mode
 = 
	`igt_ouçut_gë_mode
(
ouçut
);

2263 
mode
 = 
NULL
;

2265 i‡(
fb_id
) {

2266 
uöt32_t
 
§c_x
 = 
¥im¨y
->
vÆues
[
IGT_PLANE_SRC_X
] >> 16;

2267 
uöt32_t
 
§c_y
 = 
¥im¨y
->
vÆues
[
IGT_PLANE_SRC_Y
] >> 16;

2269 
	`LOG
(
di•œy
,

2272 
	`igt_ouçut_«me
(
ouçut
),

2273 
	`km°e°_pùe_«me
(
pùe
->pipe),

2274 
fb_id
,

2275 
§c_x
, 
§c_y
,

2276 
mode
->
hdi•œy
, mode->
vdi•œy
);

2278 
ªt
 = 
	`drmModeSëCπc
(
di•œy
->
drm_fd
,

2279 
¸tc_id
,

2280 
fb_id
,

2281 
§c_x
, 
§c_y
,

2282 &
ouçut
->
id
,

2284 
mode
);

2286 
	`LOG
(
di•œy
,

2288 
	`km°e°_pùe_«me
(
pùe
->pipe));

2290 
ªt
 = 
	`drmModeSëCπc
(
di•œy
->
drm_fd
,

2291 
¸tc_id
,

2292 
fb_id
,

2294 
NULL
,

2296 
NULL
 );

2299 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2302 
	}
}

2309 
	$igt_∂™e_commô
(
igt_∂™e_t
 *
∂™e
,

2310 
igt_pùe_t
 *
pùe
,

2311 
igt_commô_°yÀ
 
s
,

2312 
boﬁ
 
Áû_⁄_îr‹
)

2314 i‡(
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_CURSOR
 && 
s
 =
COMMIT_LEGACY
) {

2315  
	`igt_curs‹_commô_Àgacy
(
∂™e
, 
pùe
, 
Áû_⁄_îr‹
);

2316 } i‡(
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_PRIMARY
 && 
s
 =
COMMIT_LEGACY
) {

2317  
	`igt_¥im¨y_∂™e_commô_Àgacy
(
∂™e
, 
pùe
,

2318 
Áû_⁄_îr‹
);

2320  
	`igt_drm_∂™e_commô
(
∂™e
, 
pùe
, 
Áû_⁄_îr‹
);

2322 
	}
}

2324 
boﬁ
 
	$is_©omic_¥›
(
igt_©omic_¸tc_¥›îtõs
 
¥›
)

2326 i‡(
¥›
 =
IGT_CRTC_MODE_ID
 ||

2327 
¥›
 =
IGT_CRTC_ACTIVE
 ||

2328 
¥›
 =
IGT_CRTC_OUT_FENCE_PTR
)

2329  
åue
;

2331  
Ál£
;

2332 
	}
}

2344 
	$igt_pùe_commô
(
igt_pùe_t
 *
pùe
,

2345 
igt_commô_°yÀ
 
s
,

2346 
boﬁ
 
Áû_⁄_îr‹
)

2348 
i
;

2349 
ªt
;

2351 
i
 = 0; i < 
IGT_NUM_CRTC_PROPS
; i++)

2352 i‡(
	`igt_pùe_obj_is_¥›_ch™ged
(
pùe
, 
i
) &&

2353 !
	`is_©omic_¥›
(
i
)) {

2354 
	`igt_as£π
(
pùe
->
¥›s
[
i
]);

2356 
ªt
 = 
	`drmModeObje˘SëPr›îty
(
pùe
->
di•œy
->
drm_fd
,

2357 
pùe
->
¸tc_id
, 
DRM_MODE_OBJECT_CRTC
,

2358 
pùe
->
¥›s
[
i
],Öùe->
vÆues
[i]);

2360 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2363 
i
 = 0; i < 
pùe
->
n_∂™es
; i++) {

2364 
igt_∂™e_t
 *
∂™e
 = &
pùe
->
∂™es
[
i
];

2366 
ªt
 = 
	`igt_∂™e_commô
(
∂™e
, 
pùe
, 
s
, 
Áû_⁄_îr‹
);

2367 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2371 
	}
}

2373 
	$igt_ouçut_commô
(
igt_ouçut_t
 *
ouçut
,

2374 
igt_commô_°yÀ
 
s
,

2375 
boﬁ
 
Áû_⁄_îr‹
)

2377 
i
, 
ªt
;

2379 
i
 = 0; i < 
IGT_NUM_CONNECTOR_PROPS
; i++) {

2380 i‡(!
	`igt_ouçut_is_¥›_ch™ged
(
ouçut
, 
i
))

2384 i‡(
i
 =
IGT_CONNECTOR_CRTC_ID
)

2387 
	`igt_as£π
(
ouçut
->
¥›s
[
i
]);

2389 i‡(
s
 =
COMMIT_LEGACY
)

2390 
ªt
 = 
	`drmModeC⁄√˘‹SëPr›îty
(
ouçut
->
di•œy
->
drm_fd
, ouçut->
id
,

2391 
ouçut
->
¥›s
[
i
], ouçut->
vÆues
[i]);

2393 
ªt
 = 
	`drmModeObje˘SëPr›îty
(
ouçut
->
di•œy
->
drm_fd
, ouçut->
id
,

2394 
DRM_MODE_OBJECT_CONNECTOR
,

2395 
ouçut
->
¥›s
[
i
], ouçut->
vÆues
[i]);

2397 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2401 
	}
}

2403 
uöt64_t
 
	$igt_mode_obje˘_gë_¥›
(
igt_di•œy_t
 *
di•œy
,

2404 
uöt32_t
 
obje˘_ty≥
,

2405 
uöt32_t
 
obje˘_id
,

2406 
uöt32_t
 
¥›
)

2408 
drmModeObje˘Pr›îtõsPå
 
¥›li°
;

2409 
boﬁ
 
found
 = 
Ál£
;

2410 
i
;

2411 
uöt64_t
 
ªt
;

2413 
¥›li°
 = 
	`drmModeObje˘GëPr›îtõs
(
di•œy
->
drm_fd
, 
obje˘_id
, 
obje˘_ty≥
);

2414 
i
 = 0; i < 
¥›li°
->
cou¡_¥›s
; i++) {

2415 i‡(
¥›li°
->
¥›s
[
i
] !
¥›
)

2418 
found
 = 
åue
;

2422 
	`igt_as£π
(
found
);

2424 
ªt
 = 
¥›li°
->
¥›_vÆues
[
i
];

2426 
	`drmModeFªeObje˘Pr›îtõs
(
¥›li°
);

2427  
ªt
;

2428 
	}
}

2440 
uöt64_t
 
	$igt_∂™e_gë_¥›
(
igt_∂™e_t
 *
∂™e
, 
igt_©omic_∂™e_¥›îtõs
 
¥›
)

2442 
	`igt_as£π
(
	`igt_∂™e_has_¥›
(
∂™e
, 
¥›
));

2444  
	`igt_mode_obje˘_gë_¥›
(
∂™e
->
pùe
->
di•œy
, 
DRM_MODE_OBJECT_PLANE
,

2445 
∂™e
->
drm_∂™e
->
∂™e_id
,Öœ√->
¥›s
[
¥›
]);

2446 
	}
}

2462 
	$igt_∂™e_ª∂a˚_¥›_blob
(
igt_∂™e_t
 *
∂™e
, 
igt_©omic_∂™e_¥›îtõs
 
¥›
, c⁄° *
±r
, 
size_t
 
Àngth
)

2464 
igt_di•œy_t
 *
di•œy
 = 
∂™e
->
pùe
->display;

2465 
uöt64_t
 *
blob
 = &
∂™e
->
vÆues
[
¥›
];

2466 
uöt32_t
 
blob_id
 = 0;

2468 i‡(*
blob
 != 0)

2469 
	`igt_as£π
(
	`drmModeDe°royPr›îtyBlob
(
di•œy
->
drm_fd
,

2470 *
blob
) == 0);

2472 i‡(
Àngth
 > 0)

2473 
	`igt_as£π
(
	`drmModeCª©ePr›îtyBlob
(
di•œy
->
drm_fd
,

2474 
±r
, 
Àngth
, &
blob_id
) == 0);

2476 *
blob
 = 
blob_id
;

2477 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
¥›
);

2478 
	}
}

2490 
uöt64_t
 
	$igt_ouçut_gë_¥›
(
igt_ouçut_t
 *
ouçut
, 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
)

2492 
	`igt_as£π
(
	`igt_ouçut_has_¥›
(
ouçut
, 
¥›
));

2494  
	`igt_mode_obje˘_gë_¥›
(
ouçut
->
di•œy
, 
DRM_MODE_OBJECT_CONNECTOR
,

2495 
ouçut
->
id
, ouçut->
¥›s
[
¥›
]);

2496 
	}
}

2512 
	$igt_ouçut_ª∂a˚_¥›_blob
(
igt_ouçut_t
 *
ouçut
, 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
, c⁄° *
±r
, 
size_t
 
Àngth
)

2514 
igt_di•œy_t
 *
di•œy
 = 
ouçut
->display;

2515 
uöt64_t
 *
blob
 = &
ouçut
->
vÆues
[
¥›
];

2516 
uöt32_t
 
blob_id
 = 0;

2518 i‡(*
blob
 != 0)

2519 
	`igt_as£π
(
	`drmModeDe°royPr›îtyBlob
(
di•œy
->
drm_fd
,

2520 *
blob
) == 0);

2522 i‡(
Àngth
 > 0)

2523 
	`igt_as£π
(
	`drmModeCª©ePr›îtyBlob
(
di•œy
->
drm_fd
,

2524 
±r
, 
Àngth
, &
blob_id
) == 0);

2526 *
blob
 = 
blob_id
;

2527 
	`igt_ouçut_£t_¥›_ch™ged
(
ouçut
, 
¥›
);

2528 
	}
}

2540 
uöt64_t
 
	$igt_pùe_obj_gë_¥›
(
igt_pùe_t
 *
pùe
, 
igt_©omic_¸tc_¥›îtõs
 
¥›
)

2542 
	`igt_as£π
(
	`igt_pùe_obj_has_¥›
(
pùe
, 
¥›
));

2544  
	`igt_mode_obje˘_gë_¥›
(
pùe
->
di•œy
, 
DRM_MODE_OBJECT_CRTC
,

2545 
pùe
->
¸tc_id
,Öùe->
¥›s
[
¥›
]);

2546 
	}
}

2565 
	$igt_pùe_obj_ª∂a˚_¥›_blob
(
igt_pùe_t
 *
pùe
, 
igt_©omic_¸tc_¥›îtõs
 
¥›
, c⁄° *
±r
, 
size_t
 
Àngth
)

2567 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

2568 
uöt64_t
 *
blob
 = &
pùe
->
vÆues
[
¥›
];

2569 
uöt32_t
 
blob_id
 = 0;

2571 i‡(*
blob
 != 0)

2572 
	`igt_as£π
(
	`drmModeDe°royPr›îtyBlob
(
di•œy
->
drm_fd
,

2573 *
blob
) == 0);

2575 i‡(
Àngth
 > 0)

2576 
	`igt_as£π
(
	`drmModeCª©ePr›îtyBlob
(
di•œy
->
drm_fd
,

2577 
±r
, 
Àngth
, &
blob_id
) == 0);

2579 *
blob
 = 
blob_id
;

2580 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe
, 
¥›
);

2581 
	}
}

2586 
	$igt_©omic_¥ï¨e_¸tc_commô
(
igt_pùe_t
 *
pùe_obj
, 
drmModeAtomicReq
 *
ªq
)

2588 
i
;

2590 
i
 = 0; i < 
IGT_NUM_CRTC_PROPS
; i++) {

2591 i‡(!
	`igt_pùe_obj_is_¥›_ch™ged
(
pùe_obj
, 
i
))

2594 
	`igt_debug
("Pùê%s: SëtögÖr›îty \"%s\"Åÿ0x%"
PRIx64
"/%"
PRIi64
"\n",

2595 
	`km°e°_pùe_«me
(
pùe_obj
->
pùe
), 
igt_¸tc_¥›_«mes
[
i
],

2596 
pùe_obj
->
vÆues
[
i
],Öipe_obj->values[i]);

2598 
	`igt_as£π_…
(0, 
	`drmModeAtomicAddPr›îty
(
ªq
, 
pùe_obj
->
¸tc_id
,Öùe_obj->
¥›s
[
i
],Öùe_obj->
vÆues
[i]));

2601 i‡(
pùe_obj
->
out_„n˚_fd
 != -1) {

2602 
	`˛o£
(
pùe_obj
->
out_„n˚_fd
);

2603 
pùe_obj
->
out_„n˚_fd
 = -1;

2605 
	}
}

2610 
	$igt_©omic_¥ï¨e_c⁄√˘‹_commô
(
igt_ouçut_t
 *
ouçut
, 
drmModeAtomicReq
 *
ªq
)

2613 
i
;

2615 
i
 = 0; i < 
IGT_NUM_CONNECTOR_PROPS
; i++) {

2616 i‡(!
	`igt_ouçut_is_¥›_ch™ged
(
ouçut
, 
i
))

2620 
	`igt_as£π
(
ouçut
->
¥›s
[
i
]);

2622 
	`igt_debug
("%s: SëtögÖr›îty \"%s\"Åÿ0x%"
PRIx64
"/%"
PRIi64
"\n",

2623 
	`igt_ouçut_«me
(
ouçut
), 
igt_c⁄√˘‹_¥›_«mes
[
i
],

2624 
ouçut
->
vÆues
[
i
], output->values[i]);

2626 
	`igt_as£π_…
(0, 
	`drmModeAtomicAddPr›îty
(
ªq
,

2627 
ouçut
->
c⁄fig
.
c⁄√˘‹
->
c⁄√˘‹_id
,

2628 
ouçut
->
¥›s
[
i
],

2629 
ouçut
->
vÆues
[
i
]));

2631 
	}
}

2637 
	$igt_©omic_commô
(
igt_di•œy_t
 *
di•œy
, 
uöt32_t
 
Êags
, *
u£r_d©a
)

2640 
ªt
 = 0, 
i
;

2641 
pùe
Öipe;

2642 
drmModeAtomicReq
 *
ªq
;

2643 
igt_ouçut_t
 *
ouçut
;

2645 i‡(
di•œy
->
is_©omic
 != 1)

2647 
ªq
 = 
	`drmModeAtomicAŒoc
();

2648 
	`drmModeAtomicSëCurs‹
(
ªq
, 0);

2650 
	`f‹_óch_pùe
(
di•œy
, 
pùe
) {

2651 
igt_pùe_t
 *
pùe_obj
 = &
di•œy
->
pùes
[
pùe
];

2652 
igt_∂™e_t
 *
∂™e
;

2657 i‡(
pùe_obj
->
ch™ged
)

2658 
	`igt_©omic_¥ï¨e_¸tc_commô
(
pùe_obj
, 
ªq
);

2660 
	`f‹_óch_∂™e_⁄_pùe
(
di•œy
, 
pùe
, 
∂™e
) {

2661 i‡(
∂™e
->
ch™ged
)

2662 
	`igt_©omic_¥ï¨e_∂™e_commô
(
∂™e
, 
pùe_obj
, 
ªq
);

2667 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++) {

2668 
ouçut
 = &
di•œy
->
ouçuts
[
i
];

2670 i‡(!
ouçut
->
c⁄fig
.
c⁄√˘‹
 || !ouçut->
ch™ged
)

2673 
	`LOG
(
di•œy
, "%s:Öreparingátomic,Öipe: %s\n",

2674 
	`igt_ouçut_«me
(
ouçut
),

2675 
	`km°e°_pùe_«me
(
ouçut
->
c⁄fig
.
pùe
));

2677 
	`igt_©omic_¥ï¨e_c⁄√˘‹_commô
(
ouçut
, 
ªq
);

2680 
ªt
 = 
	`drmModeAtomicCommô
(
di•œy
->
drm_fd
, 
ªq
, 
Êags
, 
u£r_d©a
);

2682 
	`drmModeAtomicFªe
(
ªq
);

2683  
ªt
;

2685 
	}
}

2688 
	$di•œy_commô_ch™ged
(
igt_di•œy_t
 *
di•œy
, 
igt_commô_°yÀ
 
s
)

2690 
i
;

2691 
pùe
Öipe;

2693 
	`f‹_óch_pùe
(
di•œy
, 
pùe
) {

2694 
igt_pùe_t
 *
pùe_obj
 = &
di•œy
->
pùes
[
pùe
];

2695 
igt_∂™e_t
 *
∂™e
;

2697 i‡(
s
 =
COMMIT_ATOMIC
) {

2698 i‡(
	`igt_pùe_obj_is_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_OUT_FENCE_PTR
))

2699 
	`igt_as£π
(
pùe_obj
->
out_„n˚_fd
 >= 0);

2701 
pùe_obj
->
vÆues
[
IGT_CRTC_OUT_FENCE_PTR
] = 0;

2702 
pùe_obj
->
ch™ged
 = 0;

2704 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_BACKGROUND
);

2705 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_CTM
);

2706 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_DEGAMMA_LUT
);

2707 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_GAMMA_LUT
);

2709 i‡(
s
 !
COMMIT_UNIVERSAL
) {

2710 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_MODE_ID
);

2711 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_ACTIVE
);

2715 
	`f‹_óch_∂™e_⁄_pùe
(
di•œy
, 
pùe
, 
∂™e
) {

2716 i‡(
s
 =
COMMIT_ATOMIC
) {

2717 
fd
;

2718 
∂™e
->
ch™ged
 = 0;

2720 
fd
 = 
∂™e
->
vÆues
[
IGT_PLANE_IN_FENCE_FD
];

2721 i‡(
fd
 != -1)

2722 
	`˛o£
(
fd
);

2725 
∂™e
->
vÆues
[
IGT_PLANE_IN_FENCE_FD
] = -1;

2727 
∂™e
->
ch™ged
 &~
IGT_PLANE_COORD_CHANGED_MASK
;

2729 
	`igt_∂™e_˛ór_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_CRTC_ID
);

2730 
	`igt_∂™e_˛ór_¥›_ch™ged
(
∂™e
, 
IGT_PLANE_FB_ID
);

2732 i‡(
s
 !
COMMIT_LEGACY
 ||

2733 !(
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_PRIMARY
 ||

2734 
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_CURSOR
))

2735 
∂™e
->
ch™ged
 &~
LEGACY_PLANE_COMMIT_MASK
;

2740 
i
 = 0; i < 
di•œy
->
n_ouçuts
; i++) {

2741 
igt_ouçut_t
 *
ouçut
 = &
di•œy
->
ouçuts
[
i
];

2743 i‡(
s
 !
COMMIT_UNIVERSAL
)

2744 
ouçut
->
ch™ged
 = 0;

2747 
ouçut
->
ch™ged
 &1 << 
IGT_CONNECTOR_CRTC_ID
;

2749 
	}
}

2760 
	$do_di•œy_commô
(
igt_di•œy_t
 *
di•œy
,

2761 
igt_commô_°yÀ
 
s
,

2762 
boﬁ
 
Áû_⁄_îr‹
)

2764 
i
, 
ªt
 = 0;

2765 
pùe
Öipe;

2766 
	`LOG_INDENT
(
di•œy
, "commit");

2768 
	`igt_di•œy_ª‰esh
(
di•œy
);

2770 i‡(
s
 =
COMMIT_ATOMIC
) {

2771 
ªt
 = 
	`igt_©omic_commô
(
di•œy
, 
DRM_MODE_ATOMIC_ALLOW_MODESET
, 
NULL
);

2773 
	`f‹_óch_pùe
(
di•œy
, 
pùe
) {

2774 
igt_pùe_t
 *
pùe_obj
 = &
di•œy
->
pùes
[
pùe
];

2776 
ªt
 = 
	`igt_pùe_commô
(
pùe_obj
, 
s
, 
Áû_⁄_îr‹
);

2777 i‡(
ªt
)

2781 
i
 = 0; !
ªt
 && i < 
di•œy
->
n_ouçuts
; i++)

2782 
ªt
 = 
	`igt_ouçut_commô
(&
di•œy
->
ouçuts
[
i
], 
s
, 
Áû_⁄_îr‹
);

2785 
	`LOG_UNINDENT
(
di•œy
);

2786 
	`CHECK_RETURN
(
ªt
, 
Áû_⁄_îr‹
);

2788 
	`di•œy_commô_ch™ged
(
di•œy
, 
s
);

2790 
	`igt_debug_waô_f‹_key¥ess
("modeset");

2793 
	}
}

2814 
	$igt_di•œy_åy_commô_©omic
(
igt_di•œy_t
 *
di•œy
, 
uöt32_t
 
Êags
, *
u£r_d©a
)

2816 
ªt
;

2818 
	`LOG_INDENT
(
di•œy
, "commit");

2820 
	`igt_di•œy_ª‰esh
(
di•œy
);

2822 
ªt
 = 
	`igt_©omic_commô
(
di•œy
, 
Êags
, 
u£r_d©a
);

2824 
	`LOG_UNINDENT
(
di•œy
);

2826 i‡(
ªt
 || (
Êags
 & 
DRM_MODE_ATOMIC_TEST_ONLY
))

2827  
ªt
;

2829 
	`di•œy_commô_ch™ged
(
di•œy
, 
COMMIT_ATOMIC
);

2831 
	`igt_debug_waô_f‹_key¥ess
("modeset");

2834 
	}
}

2854 
	$igt_di•œy_commô_©omic
(
igt_di•œy_t
 *
di•œy
, 
uöt32_t
 
Êags
, *
u£r_d©a
)

2856 
ªt
 = 
	`igt_di•œy_åy_commô_©omic
(
di•œy
, 
Êags
, 
u£r_d©a
);

2858 
	`igt_as£π_eq
(
ªt
, 0);

2859 
	}
}

2879 
	$igt_di•œy_commô2
(
igt_di•œy_t
 *
di•œy
,

2880 
igt_commô_°yÀ
 
s
)

2882 
	`do_di•œy_commô
(
di•œy
, 
s
, 
åue
);

2885 
	}
}

2906 
	$igt_di•œy_åy_commô2
(
igt_di•œy_t
 *
di•œy
, 
igt_commô_°yÀ
 
s
)

2908  
	`do_di•œy_commô
(
di•œy
, 
s
, 
Ál£
);

2909 
	}
}

2921 
	$igt_di•œy_commô
(
igt_di•œy_t
 *
di•œy
)

2923  
	`igt_di•œy_commô2
(
di•œy
, 
COMMIT_LEGACY
);

2924 
	}
}

2926 c⁄° *
	$igt_ouçut_«me
(
igt_ouçut_t
 *
ouçut
)

2928  
ouçut
->
«me
;

2929 
	}
}

2931 
drmModeModeInfo
 *
	$igt_ouçut_gë_mode
(
igt_ouçut_t
 *
ouçut
)

2933 i‡(
ouçut
->
u£_ovîride_mode
)

2934  &
ouçut
->
ovîride_mode
;

2936  &
ouçut
->
c⁄fig
.
deÁu…_mode
;

2937 
	}
}

2948 
	$igt_ouçut_ovîride_mode
(
igt_ouçut_t
 *
ouçut
, 
drmModeModeInfo
 *
mode
)

2950 
igt_pùe_t
 *
pùe
 = 
	`igt_ouçut_gë_drivög_pùe
(
ouçut
);

2952 i‡(
mode
)

2953 
ouçut
->
ovîride_mode
 = *
mode
;

2955 
ouçut
->
u£_ovîride_mode
 = !!
mode
;

2957 i‡(
pùe
) {

2958 i‡(
ouçut
->
di•œy
->
is_©omic
)

2959 
	`igt_pùe_obj_ª∂a˚_¥›_blob
(
pùe
, 
IGT_CRTC_MODE_ID
, 
	`igt_ouçut_gë_mode
(
ouçut
), (*
mode
));

2961 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe
, 
IGT_CRTC_MODE_ID
);

2963 
	}
}

2965 
	$igt_ouçut_£t_pùe
(
igt_ouçut_t
 *
ouçut
, 
pùe
Öipe)

2967 
igt_di•œy_t
 *
di•œy
 = 
ouçut
->display;

2968 
igt_pùe_t
 *
ﬁd_pùe
 = 
NULL
, *
pùe_obj
 = NULL;;

2970 
	`igt_as£π
(
ouçut
->
«me
);

2972 i‡(
ouçut
->
≥ndög_pùe
 !
PIPE_NONE
)

2973 
ﬁd_pùe
 = 
	`igt_ouçut_gë_drivög_pùe
(
ouçut
);

2975 i‡(
pùe
 !
PIPE_NONE
)

2976 
pùe_obj
 = &
di•œy
->
pùes
[
pùe
];

2978 
	`LOG
(
di•œy
, "%s: së_pùe(%s)\n", 
	`igt_ouçut_«me
(
ouçut
),

2979 
	`km°e°_pùe_«me
(
pùe
));

2980 
ouçut
->
≥ndög_pùe
 = 
pùe
;

2982 i‡(
ﬁd_pùe
) {

2983 
igt_ouçut_t
 *
ﬁd_ouçut
;

2985 
ﬁd_ouçut
 = 
	`igt_pùe_gë_ouçut
(
ﬁd_pùe
);

2986 i‡(!
ﬁd_ouçut
) {

2987 i‡(
di•œy
->
is_©omic
)

2988 
	`igt_pùe_obj_ª∂a˚_¥›_blob
(
ﬁd_pùe
, 
IGT_CRTC_MODE_ID
, 
NULL
, 0);

2990 
	`igt_pùe_obj_£t_¥›_ch™ged
(
ﬁd_pùe
, 
IGT_CRTC_MODE_ID
);

2992 
	`igt_pùe_obj_£t_¥›_vÆue
(
ﬁd_pùe
, 
IGT_CRTC_ACTIVE
, 0);

2996 
	`igt_ouçut_£t_¥›_vÆue
(
ouçut
, 
IGT_CONNECTOR_CRTC_ID
, 
pùe
 =
PIPE_NONE
 ? 0 : 
di•œy
->
pùes
[pùe].
¸tc_id
);

2998 
	`igt_ouçut_ª‰esh
(
ouçut
);

3000 i‡(
pùe_obj
) {

3001 i‡(
di•œy
->
is_©omic
)

3002 
	`igt_pùe_obj_ª∂a˚_¥›_blob
(
pùe_obj
, 
IGT_CRTC_MODE_ID
, 
	`igt_ouçut_gë_mode
(
ouçut
), (
drmModeModeInfo
));

3004 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_MODE_ID
);

3006 
	`igt_pùe_obj_£t_¥›_vÆue
(
pùe_obj
, 
IGT_CRTC_ACTIVE
, 1);

3008 
	}
}

3022 
	$igt_pùe_ª‰esh
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öùe, 
boﬁ
 
f‹˚
)

3024 
igt_pùe_t
 *
pùe_obj
 = &
di•œy
->
pùes
[
pùe
];

3026 i‡(
f‹˚
 && 
di•œy
->
is_©omic
) {

3027 
igt_ouçut_t
 *
ouçut
 = 
	`igt_pùe_gë_ouçut
(
pùe_obj
);

3029 
pùe_obj
->
vÆues
[
IGT_CRTC_MODE_ID
] = 0;

3030 i‡(
ouçut
)

3031 
	`igt_pùe_obj_ª∂a˚_¥›_blob
(
pùe_obj
, 
IGT_CRTC_MODE_ID
, 
	`igt_ouçut_gë_mode
(
ouçut
), (
drmModeModeInfo
));

3033 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe_obj
, 
IGT_CRTC_MODE_ID
);

3034 
	}
}

3036 
igt_∂™e_t
 *
	$igt_ouçut_gë_∂™e
(
igt_ouçut_t
 *
ouçut
, 
∂™e_idx
)

3038 
igt_pùe_t
 *
pùe
;

3040 
pùe
 = 
	`igt_ouçut_gë_drivög_pùe
(
ouçut
);

3041 
	`igt_as£π
(
pùe
);

3043  
	`igt_pùe_gë_∂™e
(
pùe
, 
∂™e_idx
);

3044 
	}
}

3046 
igt_∂™e_t
 *
	$igt_ouçut_gë_∂™e_ty≥
(
igt_ouçut_t
 *
ouçut
, 
∂™e_ty≥
)

3048 
igt_pùe_t
 *
pùe
;

3050 
pùe
 = 
	`igt_ouçut_gë_drivög_pùe
(
ouçut
);

3051 
	`igt_as£π
(
pùe
);

3053  
	`igt_pùe_gë_∂™e_ty≥
(
pùe
, 
∂™e_ty≥
);

3054 
	}
}

3056 
	$igt_∂™e_£t_fb
(
igt_∂™e_t
 *
∂™e
, 
igt_fb
 *
fb
)

3058 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3059 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3061 
	`LOG
(
di•œy
, "%s.%d:Öœ√_£t_fb(%d)\n", 
	`km°e°_pùe_«me
(
pùe
->pipe),

3062 
∂™e
->
ödex
, 
fb
 ? fb->
fb_id
 : 0);

3064 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_CRTC_ID
, 
fb
 ? 
pùe
->
¸tc_id
 : 0);

3065 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_FB_ID
, 
fb
 ? fb->
fb_id
 : 0);

3067 i‡(
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_CURSOR
 && 
fb
)

3068 
∂™e
->
gem_h™dÀ
 = 
fb
->gem_handle;

3070 
∂™e
->
gem_h™dÀ
 = 0;

3073 i‡(
fb
) {

3075 
	`igt_∂™e_£t_size
(
∂™e
, 
fb
->
width
, fb->
height
);

3078 
	`igt_fb_£t_posôi⁄
(
fb
, 
∂™e
, 0, 0);

3079 
	`igt_fb_£t_size
(
fb
, 
∂™e
, fb->
width
, fb->
height
);

3081 
	`igt_∂™e_£t_size
(
∂™e
, 0, 0);

3084 
	`igt_fb_£t_posôi⁄
(
fb
, 
∂™e
, 0, 0);

3085 
	`igt_fb_£t_size
(
fb
, 
∂™e
, 0, 0);

3087 
	}
}

3097 
	$igt_∂™e_£t_„n˚_fd
(
igt_∂™e_t
 *
∂™e
, 
„n˚_fd
)

3099 
öt64_t
 
fd
;

3101 
fd
 = 
∂™e
->
vÆues
[
IGT_PLANE_IN_FENCE_FD
];

3102 i‡(
fd
 != -1)

3103 
	`˛o£
(
fd
);

3105 i‡(
„n˚_fd
 != -1) {

3106 
fd
 = 
	`dup
(
„n˚_fd
);

3107 
	`igt_Áû_⁄
(
fd
 == -1);

3109 
fd
 = -1;

3111 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_IN_FENCE_FD
, 
fd
);

3112 
	}
}

3114 
	$igt_∂™e_£t_posôi⁄
(
igt_∂™e_t
 *
∂™e
, 
x
, 
y
)

3116 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3117 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3119 
	`LOG
(
di•œy
, "%s.%d:Ölane_set_position(%d,%d)\n",

3120 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
x
, 
y
);

3122 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_CRTC_X
, 
x
);

3123 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_CRTC_Y
, 
y
);

3124 
	}
}

3136 
	$igt_∂™e_£t_size
(
igt_∂™e_t
 *
∂™e
, 
w
, 
h
)

3138 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3139 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3141 
	`LOG
(
di•œy
, "%s.%d:Ölane_set_size (%dx%d)\n",

3142 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
w
, 
h
);

3144 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_CRTC_W
, 
w
);

3145 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_CRTC_H
, 
h
);

3146 
	}
}

3158 
	$igt_fb_£t_posôi⁄
(
igt_fb
 *
fb
, 
igt_∂™e_t
 *
∂™e
,

3159 
uöt32_t
 
x
, uöt32_à
y
)

3161 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3162 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3164 
	`LOG
(
di•œy
, "%s.%d: fb_set_position(%d,%d)\n",

3165 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
x
, 
y
);

3167 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_SRC_X
, 
	`IGT_FIXED
(
x
, 0));

3168 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_SRC_Y
, 
	`IGT_FIXED
(
y
, 0));

3169 
	}
}

3182 
	$igt_fb_£t_size
(
igt_fb
 *
fb
, 
igt_∂™e_t
 *
∂™e
,

3183 
uöt32_t
 
w
, uöt32_à
h
)

3185 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3186 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3188 
	`LOG
(
di•œy
, "%s.%d: fb_set_size(%dx%d)\n",

3189 
	`km°e°_pùe_«me
(
pùe
->pùe), 
∂™e
->
ödex
, 
w
, 
h
);

3191 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_SRC_W
, 
	`IGT_FIXED
(
w
, 0));

3192 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_SRC_H
, 
	`IGT_FIXED
(
h
, 0));

3193 
	}
}

3195 c⁄° *
	$rŸ©i⁄_«me
(
igt_rŸ©i⁄_t
 
rŸ©i⁄
)

3197 
rŸ©i⁄
) {

3198 
IGT_ROTATION_0
:

3200 
IGT_ROTATION_90
:

3202 
IGT_ROTATION_180
:

3204 
IGT_ROTATION_270
:

3207 
	`igt_as£π
(0);

3209 
	}
}

3211 
	$igt_∂™e_£t_rŸ©i⁄
(
igt_∂™e_t
 *
∂™e
, 
igt_rŸ©i⁄_t
 
rŸ©i⁄
)

3213 
igt_pùe_t
 *
pùe
 = 
∂™e
->pipe;

3214 
igt_di•œy_t
 *
di•œy
 = 
pùe
->display;

3216 
	`LOG
(
di•œy
, "%s.%d:Ölane_set_rotation(%s)\n",

3217 
	`km°e°_pùe_«me
(
pùe
->pipe),

3218 
∂™e
->
ödex
, 
	`rŸ©i⁄_«me
(
rŸ©i⁄
));

3220 
	`igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
IGT_PLANE_ROTATION
, 
rŸ©i⁄
);

3221 
	}
}

3230 
	$igt_pùe_ªque°_out_„n˚
(
igt_pùe_t
 *
pùe
)

3232 
	`igt_pùe_obj_£t_¥›_vÆue
(
pùe
, 
IGT_CRTC_OUT_FENCE_PTR
, (
±rdiff_t
)&pùe->
out_„n˚_fd
);

3233 
	}
}

3235 
	$igt_waô_f‹_vbœnk_cou¡
(
drm_fd
, 
pùe
Öùe, 
cou¡
)

3237 
drmVBœnk
 
waô_vbl
;

3238 
uöt32_t
 
pùe_id_Êag
;

3240 
	`mem£t
(&
waô_vbl
, 0, (wait_vbl));

3241 
pùe_id_Êag
 = 
	`km°e°_gë_vbl_Êag
(
pùe
);

3243 
waô_vbl
.
ªque°
.
ty≥
 = 
DRM_VBLANK_RELATIVE
;

3244 
waô_vbl
.
ªque°
.
ty≥
 |
pùe_id_Êag
;

3245 
waô_vbl
.
ªque°
.
£quí˚
 = 
cou¡
;

3247 
	`igt_as£π
(
	`drmWaôVBœnk
(
drm_fd
, &
waô_vbl
) == 0);

3248 
	}
}

3250 
	$igt_waô_f‹_vbœnk
(
drm_fd
, 
pùe
Öipe)

3252 
	`igt_waô_f‹_vbœnk_cou¡
(
drm_fd
, 
pùe
, 1);

3253 
	}
}

3264 
	$igt_íabÀ_c⁄√˘‹s
()

3266 
drmModeRes
 *
ªs
;

3267 
drm_fd
;

3269 
drm_fd
 = 
	`drm_›í_drivî
(
DRIVER_ANY
);

3271 
ªs
 = 
	`drmModeGëResour˚s
(
drm_fd
);

3272 
	`igt_as£π
(
ªs
 !
NULL
);

3274 
i
 = 0; i < 
ªs
->
cou¡_c⁄√˘‹s
; i++) {

3275 
drmModeC⁄√˘‹
 *
c
;

3278 
c
 = 
	`drmModeGëC⁄√˘‹
(
drm_fd
, 
ªs
->
c⁄√˘‹s
[
i
]);

3279 i‡(!
c
) {

3280 
	`igt_w¨n
("CouldÇŸÑód c⁄√˘‹ %u: %m\n", 
ªs
->
c⁄√˘‹s
[
i
]);

3286 i‡(
c
->
c⁄√˘i⁄
 =
DRM_MODE_CONNECTED
)

3290 i‡(
c
->
c⁄√˘‹_ty≥
 =
DRM_MODE_CONNECTOR_VGA
) {

3291 i‡(!
	`km°e°_f‹˚_c⁄√˘‹
(
drm_fd
, 
c
, 
FORCE_CONNECTOR_ON
))

3292 
	`igt_öfo
("UnableÅo force state on %s-%d\n",

3293 
	`km°e°_c⁄√˘‹_ty≥_°r
(
c
->
c⁄√˘‹_ty≥
),

3294 
c
->
c⁄√˘‹_ty≥_id
);

3297 
	`drmModeFªeC⁄√˘‹
(
c
);

3300 
	`˛o£
(
drm_fd
);

3301 
	}
}

3308 
	$igt_ª£t_c⁄√˘‹s
()

3312 
i
 = 0; 
f‹˚d_c⁄√˘‹s
[i]; i++)

3313 
	`igt_sysfs_£t
(
f‹˚d_c⁄√˘‹s_devi˚
[
i
],

3314 
f‹˚d_c⁄√˘‹s
[
i
],

3316 
	}
}

3318 #ifde‡
HAVE_UDEV


3327 
udev_m⁄ô‹
 *
	$igt_w©ch_hŸ∂ug
()

3329 
udev
 *udev;

3330 
udev_m⁄ô‹
 *
m⁄
;

3331 
ªt
, 
Êags
, 
fd
;

3333 
udev
 = 
	`udev_√w
();

3334 
	`igt_as£π
(
udev
 !
NULL
);

3336 
m⁄
 = 
	`udev_m⁄ô‹_√w_‰om_√éök
(
udev
, "udev");

3337 
	`igt_as£π
(
m⁄
 !
NULL
);

3339 
ªt
 = 
	`udev_m⁄ô‹_fûãr_add_m©ch_subsy°em_devty≥
(
m⁄
,

3342 
	`igt_as£π_eq
(
ªt
, 0);

3343 
ªt
 = 
	`udev_m⁄ô‹_fûãr_upd©e
(
m⁄
);

3344 
	`igt_as£π_eq
(
ªt
, 0);

3345 
ªt
 = 
	`udev_m⁄ô‹_íabÀ_ª˚ivög
(
m⁄
);

3346 
	`igt_as£π_eq
(
ªt
, 0);

3349 
fd
 = 
	`udev_m⁄ô‹_gë_fd
(
m⁄
);

3350 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

3351 
	`igt_as£π
(
Êags
);

3353 
Êags
 |
O_NONBLOCK
;

3354 
	`igt_as£π_√q
(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
), -1);

3356  
m⁄
;

3357 
	}
}

3368 
boﬁ
 
	$igt_hŸ∂ug_dëe˘ed
(
udev_m⁄ô‹
 *
m⁄
, 
timeout_£cs
)

3370 
udev_devi˚
 *
dev
;

3371 c⁄° *
hŸ∂ug_vÆ
;

3372 
pﬁlfd
 
fd
 = {

3373 .
fd
 = 
	`udev_m⁄ô‹_gë_fd
(
m⁄
),

3374 .
evíts
 = 
POLLIN


3376 
boﬁ
 
hŸ∂ug_ª˚ived
 = 
Ál£
;

3383 !
hŸ∂ug_ª˚ived
 && 
	`pﬁl
(&
fd
, 1, 
timeout_£cs
 * 1000)) {

3384 
dev
 = 
	`udev_m⁄ô‹_ª˚ive_devi˚
(
m⁄
);

3386 
hŸ∂ug_vÆ
 = 
	`udev_devi˚_gë_¥›îty_vÆue
(
dev
, "HOTPLUG");

3387 i‡(
hŸ∂ug_vÆ
 && 
	`©oi
(hotplug_val) == 1)

3388 
hŸ∂ug_ª˚ived
 = 
åue
;

3390 
	`udev_devi˚_uƒef
(
dev
);

3393  
hŸ∂ug_ª˚ived
;

3394 
	}
}

3402 
	$igt_Êush_hŸ∂ugs
(
udev_m⁄ô‹
 *
m⁄
)

3404 
udev_devi˚
 *
dev
;

3406 (
dev
 = 
	`udev_m⁄ô‹_ª˚ive_devi˚
(
m⁄
)))

3407 
	`udev_devi˚_uƒef
(
dev
);

3408 
	}
}

3415 
	$igt_˛ónup_hŸ∂ug
(
udev_m⁄ô‹
 *
m⁄
)

3417 
udev
 *udev = 
	`udev_m⁄ô‹_gë_udev
(
m⁄
);

3419 
	`udev_m⁄ô‹_uƒef
(
m⁄
);

3420 
m⁄
 = 
NULL
;

3421 
	`udev_uƒef
(
udev
);

3422 
	}
}

3432 
uöt32_t
 
	$km°e°_gë_vbl_Êag
(
uöt32_t
 
pùe_id
)

3434 i‡(
pùe_id
 == 0)

3436 i‡(
pùe_id
 == 1)

3437  
_DRM_VBLANK_SECONDARY
;

3439 
uöt32_t
 
pùe_Êag
 = 
pùe_id
 << 1;

3440 
	`igt_as£π
(!(
pùe_Êag
 & ~
DRM_VBLANK_HIGH_CRTC_MASK
));

3441  
pùe_Êag
;

3443 
	}
}

	@igt_kms.h

28 #i‚de‡
__IGT_KMS_H__


29 
	#__IGT_KMS_H__


	)

31 
	~<°dboﬁ.h
>

32 
	~<°döt.h
>

33 
	~<°ddef.h
>

34 
	~<as£π.h
>

36 
	~<xf86drmMode.h
>

38 
	~"igt_fb.h
"

39 
	~"io˘l_wøµîs.h
"

53 
	epùe
 {

54 
	mPIPE_NONE
 = -1,

55 
	mPIPE_ANY
 = 
PIPE_NONE
,

56 
	mPIPE_A
 = 0,

57 
	mPIPE_B
,

58 
	mPIPE_C
,

59 
	mPIPE_D
,

60 
	mPIPE_E
,

61 
	mPIPE_F
,

62 
	mIGT_MAX_PIPES


64 c⁄° *
km°e°_pùe_«me
(
pùe
Öipe);

65 
km°e°_pùe_to_ödex
(
pùe
);

66 c⁄° *
km°e°_∂™e_ty≥_«me
(
∂™e_ty≥
);

68 
	ep‹t
 {

69 
	mPORT_A
 = 0,

70 
	mPORT_B
,

71 
	mPORT_C
,

72 
	mPORT_D
,

73 
	mPORT_E
,

74 
	mI915_MAX_PORTS


83 
	#km°e°_p‹t_«me
(
p‹t
Ë(’‹tË+ 'A')

	)

85 c⁄° *
km°e°_ícodî_ty≥_°r
(
ty≥
);

86 c⁄° *
km°e°_c⁄√˘‹_°©us_°r
(
°©us
);

87 c⁄° *
km°e°_c⁄√˘‹_ty≥_°r
(
ty≥
);

89 
km°e°_dump_mode
(
drmModeModeInfo
 *
mode
);

91 
km°e°_gë_pùe_‰om_¸tc_id
(
fd
, 
¸tc_id
);

92 
km°e°_£t_vt_gøphics_mode
();

93 
km°e°_ª°‹e_vt_mode
();

95 
	eigt_©omic_¸tc_¥›îtõs
 {

96 
	mIGT_CRTC_BACKGROUND
 = 0,

97 
	mIGT_CRTC_CTM
,

98 
	mIGT_CRTC_GAMMA_LUT
,

99 
	mIGT_CRTC_GAMMA_LUT_SIZE
,

100 
	mIGT_CRTC_DEGAMMA_LUT
,

101 
	mIGT_CRTC_DEGAMMA_LUT_SIZE
,

102 
	mIGT_CRTC_MODE_ID
,

103 
	mIGT_CRTC_ACTIVE
,

104 
	mIGT_CRTC_OUT_FENCE_PTR
,

105 
	mIGT_NUM_CRTC_PROPS


114 c⁄° *
igt_¸tc_¥›_«mes
[];

116 
	eigt_©omic_c⁄√˘‹_¥›îtõs
 {

117 
	mIGT_CONNECTOR_SCALING_MODE
 = 0,

118 
	mIGT_CONNECTOR_CRTC_ID
,

119 
	mIGT_CONNECTOR_DPMS
,

120 
	mIGT_CONNECTOR_BROADCAST_RGB
,

121 
	mIGT_NUM_CONNECTOR_PROPS


130 c⁄° *
igt_c⁄√˘‹_¥›_«mes
[];

132 
	skm°e°_c⁄√˘‹_c⁄fig
 {

133 
drmModeCπc
 *
	m¸tc
;

134 
drmModeC⁄√˘‹
 *
	mc⁄√˘‹
;

135 
drmModeEncodî
 *
	mícodî
;

136 
drmModeModeInfo
 
	mdeÁu…_mode
;

138 
	mpùe
;

139 
	mvÆid_¸tc_idx_mask
;

142 
	skm°e°_∂™e
 {

143 
	mid
;

144 
	mödex
;

145 
	mty≥
;

146 
	mpos_x
;

147 
	mpos_y
;

148 
	mwidth
;

149 
	mheight
;

152 
	skm°e°_¸tc
 {

153 
	mid
;

154 
	mpùe
;

155 
boﬁ
 
	ma˘ive
;

156 
	mwidth
;

157 
	mheight
;

158 
	mn_∂™es
;

159 
km°e°_∂™e
 *
	m∂™es
;

169 
	ekm°e°_f‹˚_c⁄√˘‹_°©e
 {

170 
	mFORCE_CONNECTOR_UNSPECIFIED
,

171 
	mFORCE_CONNECTOR_ON
,

172 
	mFORCE_CONNECTOR_DIGITAL
,

173 
	mFORCE_CONNECTOR_OFF


183 
	eöãl_brﬂdˇ°_rgb_mode
 {

184 
	mBROADCAST_RGB_AUTO
 = 0,

185 
	mBROADCAST_RGB_FULL
,

186 
	mBROADCAST_RGB_16_235


190 
boﬁ
 
km°e°_f‹˚_c⁄√˘‹
(
fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

191 
km°e°_f‹˚_c⁄√˘‹_°©e
 
°©e
);

192 
km°e°_edid_add_3d
(c⁄° *
edid
, 
size_t
 
Àngth
, *
√w_edid_±r
[], size_à*
√w_Àngth
);

193 
km°e°_edid_add_4k
(c⁄° *
edid
, 
size_t
 
Àngth
, *
√w_edid_±r
[], size_à*
√w_Àngth
);

194 
km°e°_edid_add_audio
(c⁄° *
edid
, 
size_t
 
Àngth
, *
√w_edid_±r
[], size_à*
√w_Àngth
);

195 
km°e°_f‹˚_edid
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

196 c⁄° *
edid
, 
size_t
 
Àngth
);

198 
boﬁ
 
km°e°_gë_c⁄√˘‹_deÁu…_mode
(
drm_fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

199 
drmModeModeInfo
 *
mode
);

200 
boﬁ
 
km°e°_gë_c⁄√˘‹_c⁄fig
(
drm_fd
, 
uöt32_t
 
c⁄√˘‹_id
,

201 
¸tc_idx_mask
,

202 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
);

203 
boﬁ
 
km°e°_¥obe_c⁄√˘‹_c⁄fig
(
drm_fd
, 
uöt32_t
 
c⁄√˘‹_id
,

204 
¸tc_idx_mask
,

205 
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
);

206 
km°e°_‰ì_c⁄√˘‹_c⁄fig
(
km°e°_c⁄√˘‹_c⁄fig
 *
c⁄fig
);

208 
km°e°_£t_c⁄√˘‹_dpms
(
fd
, 
drmModeC⁄√˘‹
 *
c⁄√˘‹
, 
mode
);

209 
boﬁ
 
km°e°_gë_¥›îty
(
drm_fd
, 
uöt32_t
 
obje˘_id
, uöt32_à
obje˘_ty≥
,

210 c⁄° *
«me
, 
uöt32_t
 *
¥›_id
, 
uöt64_t
 *
vÆue
,

211 
drmModePr›îtyPå
 *
¥›
);

212 
km°e°_un£t_Æl_¸tcs
(
drm_fd
, 
drmModeResPå
 
ªsour˚s
);

213 
km°e°_gë_¸tc_idx
(
drmModeRes
 *
ªs
, 
uöt32_t
 
¸tc_id
);

214 
uöt32_t
 
km°e°_föd_¸tc_f‹_c⁄√˘‹
(
fd
, 
drmModeRes
 *
ªs
,

215 
drmModeC⁄√˘‹
 *
c⁄√˘‹
,

216 
uöt32_t
 
¸tc_bœckli°_idx_mask
);

218 
uöt32_t
 
km°e°_dumb_¸óã
(
fd
, 
width
, 
height
, 
bµ
,

219 *
°ride
, *
size
);

221 *
km°e°_dumb_m≠_buf„r
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
,

222 
¥Ÿ
);

223 
km°e°_gë_vbœnk
(
fd
, 
pùe
, 
Êags
);

224 
igt_as£π_∂™e_visibÀ
(
fd
, 
pùe
Öùe, 
boﬁ
 
visibûôy
);

238 
	eigt_commô_°yÀ
 {

239 
	mCOMMIT_LEGACY
 = 0,

240 
	mCOMMIT_UNIVERSAL
,

241 
	mCOMMIT_ATOMIC
,

244 
	eigt_©omic_∂™e_¥›îtõs
 {

245 
	mIGT_PLANE_SRC_X
 = 0,

246 
	mIGT_PLANE_SRC_Y
,

247 
	mIGT_PLANE_SRC_W
,

248 
	mIGT_PLANE_SRC_H
,

250 
	mIGT_PLANE_CRTC_X
,

251 
	mIGT_PLANE_CRTC_Y
,

252 
	mIGT_PLANE_CRTC_W
,

253 
	mIGT_PLANE_CRTC_H
,

256 
	#IGT_PLANE_COORD_CHANGED_MASK
 0xff

	)

258 
	mIGT_PLANE_FB_ID
,

259 
	mIGT_PLANE_CRTC_ID
,

260 
	mIGT_PLANE_IN_FENCE_FD
,

261 
	mIGT_PLANE_TYPE
,

262 
	mIGT_PLANE_ROTATION
,

263 
	mIGT_NUM_PLANE_PROPS


272 c⁄° *
igt_∂™e_¥›_«mes
[];

274 
igt_di•œy
 
	tigt_di•œy_t
;

275 
igt_pùe
 
	tigt_pùe_t
;

276 
uöt32_t
 
	tigt_fixed_t
;

280 
	mIGT_ROTATION_0
 = 1 << 0,

281 
	mIGT_ROTATION_90
 = 1 << 1,

282 
	mIGT_ROTATION_180
 = 1 << 2,

283 
	mIGT_ROTATION_270
 = 1 << 3,

284 } 
	tigt_rŸ©i⁄_t
;

288 
igt_pùe_t
 *
	mpùe
;

289 
	mödex
;

291 
	mty≥
;

297 
drmModePœ√
 *
	mdrm_∂™e
;

300 
uöt32_t
 
	mgem_h™dÀ
;

302 
uöt64_t
 
	mch™ged
;

303 
uöt32_t
 
	m¥›s
[
IGT_NUM_PLANE_PROPS
];

304 
uöt64_t
 
	mvÆues
[
IGT_NUM_PLANE_PROPS
];

305 } 
	tigt_∂™e_t
;

307 
	sigt_pùe
 {

308 
igt_di•œy_t
 *
	mdi•œy
;

309 
pùe
 
	mpùe
;

311 
	mn_∂™es
;

312 
	m∂™e_curs‹
;

313 
	m∂™e_¥im¨y
;

314 
igt_∂™e_t
 *
	m∂™es
;

316 
uöt64_t
 
	mch™ged
;

317 
uöt32_t
 
	m¥›s
[
IGT_NUM_CRTC_PROPS
];

318 
uöt64_t
 
	mvÆues
[
IGT_NUM_CRTC_PROPS
];

320 
uöt32_t
 
	m¸tc_id
;

322 
öt32_t
 
	mout_„n˚_fd
;

327 
igt_di•œy_t
 *
	mdi•œy
;

328 
uöt32_t
 
	mid
;

329 
km°e°_c⁄√˘‹_c⁄fig
 
	mc⁄fig
;

330 *
	m«me
;

331 
boﬁ
 
	mf‹˚_ª¥obe
;

332 
pùe
 
	m≥ndög_pùe
;

333 
boﬁ
 
	mu£_ovîride_mode
;

334 
drmModeModeInfo
 
	movîride_mode
;

337 
uöt64_t
 
	mch™ged
;

339 
uöt32_t
 
	m¥›s
[
IGT_NUM_CONNECTOR_PROPS
];

340 
uöt64_t
 
	mvÆues
[
IGT_NUM_CONNECTOR_PROPS
];

341 } 
	tigt_ouçut_t
;

343 
	sigt_di•œy
 {

344 
	mdrm_fd
;

345 
	mlog_shi·
;

346 
	mn_pùes
;

347 
	mn_ouçuts
;

348 
igt_ouçut_t
 *
	mouçuts
;

349 
igt_pùe_t
 *
	mpùes
;

350 
boﬁ
 
	mhas_curs‹_∂™e
;

351 
boﬁ
 
	mis_©omic
;

354 
igt_di•œy_öô
(
igt_di•œy_t
 *
di•œy
, 
drm_fd
);

355 
igt_di•œy_föi
(
igt_di•œy_t
 *
di•œy
);

356 
igt_di•œy_commô2
(
igt_di•œy_t
 *
di•œy
, 
igt_commô_°yÀ
 
s
);

357 
igt_di•œy_commô
(
igt_di•œy_t
 *
di•œy
);

358 
igt_di•œy_åy_commô_©omic
(
igt_di•œy_t
 *
di•œy
, 
uöt32_t
 
Êags
, *
u£r_d©a
);

359 
igt_di•œy_commô_©omic
(
igt_di•œy_t
 *
di•œy
, 
uöt32_t
 
Êags
, *
u£r_d©a
);

360 
igt_di•œy_åy_commô2
(
igt_di•œy_t
 *
di•œy
, 
igt_commô_°yÀ
 
s
);

361 
igt_di•œy_gë_n_pùes
(
igt_di•œy_t
 *
di•œy
);

362 
igt_di•œy_ªquúe_ouçut
(
igt_di•œy_t
 *
di•œy
);

363 
igt_di•œy_ªquúe_ouçut_⁄_pùe
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öipe);

365 c⁄° *
igt_ouçut_«me
(
igt_ouçut_t
 *
ouçut
);

366 
drmModeModeInfo
 *
igt_ouçut_gë_mode
(
igt_ouçut_t
 *
ouçut
);

367 
igt_ouçut_ovîride_mode
(
igt_ouçut_t
 *
ouçut
, 
drmModeModeInfo
 *
mode
);

368 
igt_ouçut_£t_pùe
(
igt_ouçut_t
 *
ouçut
, 
pùe
Öipe);

369 
igt_∂™e_t
 *
igt_ouçut_gë_∂™e
(
igt_ouçut_t
 *
ouçut
, 
∂™e_idx
);

370 
igt_∂™e_t
 *
igt_ouçut_gë_∂™e_ty≥
(
igt_ouçut_t
 *
ouçut
, 
∂™e_ty≥
);

371 
igt_ouçut_t
 *
igt_ouçut_‰om_c⁄√˘‹
(
igt_di•œy_t
 *
di•œy
,

372 
drmModeC⁄√˘‹
 *
c⁄√˘‹
);

373 
igt_∂™e_t
 *
igt_pùe_gë_∂™e_ty≥
(
igt_pùe_t
 *
pùe
, 
∂™e_ty≥
);

375 
igt_pùe_ªque°_out_„n˚
(
igt_pùe_t
 *
pùe
);

377 
igt_∂™e_£t_fb
(
igt_∂™e_t
 *
∂™e
, 
igt_fb
 *
fb
);

378 
igt_∂™e_£t_„n˚_fd
(
igt_∂™e_t
 *
∂™e
, 
„n˚_fd
);

379 
igt_∂™e_£t_posôi⁄
(
igt_∂™e_t
 *
∂™e
, 
x
, 
y
);

380 
igt_∂™e_£t_size
(
igt_∂™e_t
 *
∂™e
, 
w
, 
h
);

381 
igt_∂™e_£t_rŸ©i⁄
(
igt_∂™e_t
 *
∂™e
, 
igt_rŸ©i⁄_t
 
rŸ©i⁄
);

382 
igt_fb_£t_posôi⁄
(
igt_fb
 *
fb
, 
igt_∂™e_t
 *
∂™e
,

383 
uöt32_t
 
x
, uöt32_à
y
);

384 
igt_fb_£t_size
(
igt_fb
 *
fb
, 
igt_∂™e_t
 *
∂™e
,

385 
uöt32_t
 
w
, uöt32_à
h
);

387 
igt_waô_f‹_vbœnk
(
drm_fd
, 
pùe
Öipe);

388 
igt_waô_f‹_vbœnk_cou¡
(
drm_fd
, 
pùe
Öùe, 
cou¡
);

390 
ölöe
 
boﬁ
 
	$igt_ouçut_is_c⁄√˘ed
(
igt_ouçut_t
 *
ouçut
)

393 i‡(!
ouçut
->
c⁄fig
.
c⁄√˘‹
)

394  
Ál£
;

396 i‡(
ouçut
->
c⁄fig
.
c⁄√˘‹
->
c⁄√˘i⁄
 =
DRM_MODE_CONNECTED
)

397  
åue
;

399  
Ál£
;

400 
	}
}

409 
	#igt_pùe_c⁄√˘‹_vÆid
(
pùe
, 
ouçut
) \

410 (
	`igt_ouçut_is_c⁄√˘ed
((
ouçut
)) && \

411 (
ouçut
->
c⁄fig
.
vÆid_¸tc_idx_mask
 & (1 << (
pùe
))))

	)

413 
	#f‹_óch_if
(
c⁄dôi⁄
Ëi‡(!(c⁄dôi⁄)Ë{} 

	)

422 
	#f‹_óch_c⁄√˘ed_ouçut
(
di•œy
, 
ouçut
) \

423 
i__
 = 0; 
	`as£π
(
	`igt_ˇn_Áû
()), i__ < (
di•œy
)->
n_ouçuts
; i__++) \

424 
	`f‹_óch_if
 (((
ouçut
 = &(
di•œy
)->
ouçuts
[
i__
]), \

425 
	`igt_ouçut_is_c⁄√˘ed
(
ouçut
)))

	)

436 
	#f‹_óch_pùe_°©ic
(
pùe
) \

437 
pùe
 = 0;Öùê< 
IGT_MAX_PIPES
;Öùe++)

	)

450 
	#f‹_óch_pùe
(
di•œy
, 
pùe
) \

451 
pùe
 = 0; 
	`as£π
(
	`igt_ˇn_Áû
()),Öùê< 
	`igt_di•œy_gë_n_pùes
(
di•œy
);Öùe++)

	)

462 
	#f‹_óch_pùe_wôh_vÆid_ouçut
(
di•œy
, 
pùe
, 
ouçut
) \

463 
c⁄__
 = 
pùe
 = 0; \

464 
	`as£π
(
	`igt_ˇn_Áû
()), 
pùe
 < 
	`igt_di•œy_gë_n_pùes
((
di•œy
)Ë&& 
c⁄__
 < (di•œy)->
n_ouçuts
; \

465 
c⁄__
 = (c⁄__ + 1 < (
di•œy
)->
n_ouçuts
Ë? c⁄__ + 1 : (
pùe
 =Öipe + 1, 0)) \

466 
	`f‹_óch_if
 (((
ouçut
 = &(
di•œy
)->
ouçuts
[
c⁄__
]), \

467 
	`igt_pùe_c⁄√˘‹_vÆid
(
pùe
, 
ouçut
)))

	)

479 
	#f‹_óch_vÆid_ouçut_⁄_pùe
(
di•œy
, 
pùe
, 
ouçut
) \

480 
	`f‹_óch_c⁄√˘ed_ouçut
(
di•œy
, 
ouçut
) \

481 
	`f‹_óch_if
 (
	`igt_pùe_c⁄√˘‹_vÆid
(
pùe
, 
ouçut
))

	)

483 
	#f‹_óch_∂™e_⁄_pùe
(
di•œy
, 
pùe
, 
∂™e
) \

484 
j__
 = 0; 
	`as£π
(
	`igt_ˇn_Áû
()), (
∂™e
Ë&(
di•œy
)->
pùes
[(
pùe
)].
∂™es
[j__], \

485 
j__
 < (
di•œy
)->
pùes
[(
pùe
)].
n_∂™es
; j__++)

	)

487 
	#IGT_FIXED
(
i
,
f
Ë((iË<< 16 | (f))

	)

497 
ölöe
 
boﬁ


498 
	$igt_∂™e_has_¥›
(
igt_∂™e_t
 *
∂™e
, 
igt_©omic_∂™e_¥›îtõs
 
¥›
)

500  
∂™e
->
¥›s
[
¥›
];

501 
	}
}

503 
uöt64_t
 
igt_∂™e_gë_¥›
(
igt_∂™e_t
 *
∂™e
, 
igt_©omic_∂™e_¥›îtõs
 
¥›
);

505 
	#igt_∂™e_is_¥›_ch™ged
(
∂™e
, 
¥›
) \

506 (!!((
∂™e
)->
ch™ged
 & (1 << (
¥›
))))

	)

508 
	#igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
¥›
) \

509 (
∂™e
)->
ch™ged
 |1 << (
¥›
)

	)

511 
	#igt_∂™e_˛ór_¥›_ch™ged
(
∂™e
, 
¥›
) \

512 (
∂™e
)->
ch™ged
 &~(1 << (
¥›
))

	)

514 
	#igt_∂™e_£t_¥›_vÆue
(
∂™e
, 
¥›
, 
vÆue
) \

516 
∂™e
->
vÆues
[
¥›
] = 
vÆue
; \

517 
	`igt_∂™e_£t_¥›_ch™ged
(
∂™e
, 
¥›
); \

518 } 0)

	)

520 
igt_∂™e_ª∂a˚_¥›_blob
(
igt_∂™e_t
 *
∂™e
,

521 
igt_©omic_∂™e_¥›îtõs
 
¥›
,

522 c⁄° *
±r
, 
size_t
 
Àngth
);

532 
ölöe
 
boﬁ


533 
	$igt_ouçut_has_¥›
(
igt_ouçut_t
 *
ouçut
, 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
)

535  
ouçut
->
¥›s
[
¥›
];

536 
	}
}

538 
uöt64_t
 
igt_ouçut_gë_¥›
(
igt_ouçut_t
 *
ouçut
, 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
);

540 
	#igt_ouçut_is_¥›_ch™ged
(
ouçut
, 
¥›
) \

541 (!!((
ouçut
)->
ch™ged
 & (1 << (
¥›
))))

	)

542 
	#igt_ouçut_£t_¥›_ch™ged
(
ouçut
, 
¥›
) \

543 (
ouçut
)->
ch™ged
 |1 << (
¥›
)

	)

545 
	#igt_ouçut_˛ór_¥›_ch™ged
(
ouçut
, 
¥›
) \

546 (
ouçut
)->
ch™ged
 &~(1 << (
¥›
))

	)

548 
	#igt_ouçut_£t_¥›_vÆue
(
ouçut
, 
¥›
, 
vÆue
) \

550 (
ouçut
)->
vÆues
[
¥›
] = (
vÆue
); \

551 
	`igt_ouçut_£t_¥›_ch™ged
(
ouçut
, 
¥›
); \

552 } 0)

	)

554 
igt_ouçut_ª∂a˚_¥›_blob
(
igt_ouçut_t
 *
ouçut
,

555 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
,

556 c⁄° *
±r
, 
size_t
 
Àngth
);

566 
ölöe
 
boﬁ


567 
	$igt_pùe_obj_has_¥›
(
igt_pùe_t
 *
pùe
, 
igt_©omic_¸tc_¥›îtõs
 
¥›
)

569  
pùe
->
¥›s
[
¥›
];

570 
	}
}

572 
uöt64_t
 
igt_pùe_obj_gë_¥›
(
igt_pùe_t
 *
pùe
, 
igt_©omic_¸tc_¥›îtõs
 
¥›
);

585 
ölöe
 
uöt64_t


586 
	$igt_pùe_gë_¥›
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öipe,

587 
igt_©omic_¸tc_¥›îtõs
 
¥›
)

589  
	`igt_pùe_obj_gë_¥›
(&
di•œy
->
pùes
[
pùe
], 
¥›
);

590 
	}
}

601 
ölöe
 
boﬁ


602 
	$igt_pùe_has_¥›
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öipe,

603 
igt_©omic_c⁄√˘‹_¥›îtõs
 
¥›
)

605  
di•œy
->
pùes
[
pùe
].
¥›s
[
¥›
];

606 
	}
}

608 
	#igt_pùe_obj_is_¥›_ch™ged
(
pùe_obj
, 
¥›
) \

609 (!!((
pùe_obj
)->
ch™ged
 & (1 << (
¥›
))))

	)

611 
	#igt_pùe_is_¥›_ch™ged
(
di•œy
, 
pùe
, 
¥›
) \

612 
	`igt_pùe_obj_is_¥›_ch™ged
(&(
di•œy
)->
pùes
[(
pùe
)], 
¥›
)

	)

614 
	#igt_pùe_obj_£t_¥›_ch™ged
(
pùe_obj
, 
¥›
) \

615 (
pùe_obj
)->
ch™ged
 |1 << (
¥›
)

	)

617 
	#igt_pùe_£t_¥›_ch™ged
(
di•œy
, 
pùe
, 
¥›
) \

618 
	`igt_pùe_obj_£t_¥›_ch™ged
(&(
di•œy
)->
pùes
[(
pùe
)], 
¥›
)

	)

620 
	#igt_pùe_obj_˛ór_¥›_ch™ged
(
pùe_obj
, 
¥›
) \

621 (
pùe_obj
)->
ch™ged
 &~(1 << (
¥›
))

	)

623 
	#igt_pùe_˛ór_¥›_ch™ged
(
di•œy
, 
pùe
, 
¥›
) \

624 
	`igt_pùe_obj_˛ór_¥›_ch™ged
(&(
di•œy
)->
pùes
[(
pùe
)], 
¥›
)

	)

626 
	#igt_pùe_obj_£t_¥›_vÆue
(
pùe_obj
, 
¥›
, 
vÆue
) \

628 (
pùe_obj
)->
vÆues
[
¥›
] = (
vÆue
); \

629 
	`igt_pùe_obj_£t_¥›_ch™ged
(
pùe_obj
, 
¥›
); \

630 } 0)

	)

632 
	#igt_pùe_£t_¥›_vÆue
(
di•œy
, 
pùe
, 
¥›
, 
vÆue
) \

633 
	`igt_pùe_obj_£t_¥›_vÆue
(&(
di•œy
)->
pùes
[(
pùe
)], 
¥›
, 
vÆue
)

	)

635 
igt_pùe_obj_ª∂a˚_¥›_blob
(
igt_pùe_t
 *
pùe_obj
,

636 
igt_©omic_¸tc_¥›îtõs
 
¥›
,

637 c⁄° *
±r
, 
size_t
 
Àngth
);

639 
	#igt_pùe_ª∂a˚_¥›_blob
(
di•œy
, 
pùe
, 
¥›
, 
±r
, 
Àngth
) \

640 
	`igt_pùe_obj_ª∂a˚_¥›_blob
(&(
di•œy
)->
pùes
[(
pùe
)], 
¥›
, 
±r
, 
Àngth
)

	)

642 
igt_pùe_ª‰esh
(
igt_di•œy_t
 *
di•œy
, 
pùe
Öùe, 
boﬁ
 
f‹˚
);

644 
igt_íabÀ_c⁄√˘‹s
();

645 
igt_ª£t_c⁄√˘‹s
();

647 
uöt32_t
 
km°e°_gë_vbl_Êag
(uöt32_à
pùe_id
);

649 
	#EDID_LENGTH
 128

	)

650 c⁄° * 
igt_kms_gë_ba£_edid
();

651 c⁄° * 
igt_kms_gë_Æt_edid
();

653 #ifde‡
HAVE_UDEV


654 
udev_m⁄ô‹
 *
igt_w©ch_hŸ∂ug
();

655 
boﬁ
 
igt_hŸ∂ug_dëe˘ed
(
udev_m⁄ô‹
 *
m⁄
,

656 
timeout_£cs
);

657 
igt_Êush_hŸ∂ugs
(
udev_m⁄ô‹
 *
m⁄
);

658 
igt_˛ónup_hŸ∂ug
(
udev_m⁄ô‹
 *
m⁄
);

	@igt_pm.c

28 
	~<f˙é.h
>

29 
	~<°dio.h
>

30 
	~<limôs.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/ty≥s.h
>

37 
	~"drmã°.h
"

38 
	~"igt_pm.h
"

39 
	~"igt_aux.h
"

54 
	mPOLICY_UNKNOWN
 = -1,

55 
	mPOLICY_MAX_PERFORMANCE
 = 0,

56 
	mPOLICY_MEDIUM_POWER
 = 1,

57 
	mPOLICY_MIN_POWER
 = 2

60 
	#MAX_PERFORMANCE_STR
 "max_≥rf‹m™˚\n"

	)

61 
	#MEDIUM_POWER_STR
 "medium_powî\n"

	)

62 
	#MIN_POWER_STR
 "mö_powî\n"

	)

64 
	#MAX_POLICY_STRLEN
 
	`°æí
(
MAX_PERFORMANCE_STR
)

	)

77 
	$igt_pm_íabÀ_audio_ru¡ime_pm
()

79 
fd
;

81 
fd
 = 
	`›í
("/sys/moduÀ/¢d_hda_öãl/∑ømëîs/powî_ßve", 
O_WRONLY
);

82 i‡(
fd
 >= 0) {

83 
	`igt_as£π_eq
(
	`wrôe
(
fd
, "1\n", 2), 2);

84 
	`˛o£
(
fd
);

86 
fd
 = 
	`›í
("/sys/bus/pci/devi˚s/0000:00:03.0/powî/c⁄åﬁ", 
O_WRONLY
);

87 i‡(
fd
 >= 0) {

88 
	`igt_as£π_eq
(
	`wrôe
(
fd
, "auto\n", 5), 5);

89 
	`˛o£
(
fd
);

92 
	`¶ìp
(1);

93 
	}
}

110 
öt8_t
 *
	$igt_pm_íabÀ_ßè_lök_powî_m™agemít
()

112 
fd
, 
i
;

113 
ssize_t
 
Àn
;

114 *
buf
;

115 *
fûe_«me
;

116 
öt8_t
 *
lök_pm_pﬁicõs
 = 
NULL
;

118 
fûe_«me
 = 
	`mÆloc
(
PATH_MAX
);

119 
buf
 = 
	`mÆloc
(
MAX_POLICY_STRLEN
 + 1);

121 
i
 = 0; ; i++) {

122 
öt8_t
 
pﬁicy
;

124 
	`¢¥ötf
(
fûe_«me
, 
PATH_MAX
,

126 
i
);

128 
fd
 = 
	`›í
(
fûe_«me
, 
O_RDWR
);

129 i‡(
fd
 < 0)

132 
Àn
 = 
	`ªad
(
fd
, 
buf
, 
MAX_POLICY_STRLEN
);

133 
buf
[
Àn
] = '\0';

135 i‡(!
	`°∫cmp
(
MAX_PERFORMANCE_STR
, 
buf
,

136 
	`°æí
(
MAX_PERFORMANCE_STR
)))

137 
pﬁicy
 = 
POLICY_MAX_PERFORMANCE
;

138 i‡(!
	`°∫cmp
(
MEDIUM_POWER_STR
, 
buf
,

139 
	`°æí
(
MEDIUM_POWER_STR
)))

140 
pﬁicy
 = 
POLICY_MEDIUM_POWER
;

141 i‡(!
	`°∫cmp
(
MIN_POWER_STR
, 
buf
,

142 
	`°æí
(
MIN_POWER_STR
)))

143 
pﬁicy
 = 
POLICY_MIN_POWER
;

145 
pﬁicy
 = 
POLICY_UNKNOWN
;

147 i‡(!(
i
 % 256))

148 
lök_pm_pﬁicõs
 = 
	`ªÆloc
(link_pm_policies,

149 (
i
 / 256 + 1) * 256 + 1);

151 
lök_pm_pﬁicõs
[
i
] = 
pﬁicy
;

152 
lök_pm_pﬁicõs
[
i
 + 1] = 0;

159 i‡(
pﬁicy
 !
POLICY_UNKNOWN
 &&

160 
pﬁicy
 !
POLICY_MIN_POWER
) {

161 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

162 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
MIN_POWER_STR
,

163 
	`°æí
(
MIN_POWER_STR
)),

164 
	`°æí
(
MIN_POWER_STR
));

166 
	`˛o£
(
fd
);

168 
	`‰ì
(
buf
);

169 
	`‰ì
(
fûe_«me
);

171  
lök_pm_pﬁicõs
;

172 
	}
}

186 
	$igt_pm_ª°‹e_ßè_lök_powî_m™agemít
(
öt8_t
 *
pm_d©a
)

189 
fd
, 
i
;

190 *
fûe_«me
;

193 
fûe_«me
 = 
	`mÆloc
(
PATH_MAX
);

194 
i
 = 0; ; i++) {

195 
öt8_t
 
pﬁicy
;

197 i‡(!
pm_d©a
)

198 
pﬁicy
 = 
POLICY_MAX_PERFORMANCE
;

199 i‡(
pm_d©a
[
i
] =
POLICY_UNKNOWN
)

202 
pﬁicy
 = 
pm_d©a
[
i
];

204 
	`¢¥ötf
(
fûe_«me
, 
PATH_MAX
,

206 
i
);

208 
fd
 = 
	`›í
(
fûe_«me
, 
O_WRONLY
);

209 i‡(
fd
 < 0)

212 
pﬁicy
) {

214 
POLICY_MAX_PERFORMANCE
:

215 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
MAX_PERFORMANCE_STR
,

216 
	`°æí
(
MAX_PERFORMANCE_STR
)),

217 
	`°æí
(
MAX_PERFORMANCE_STR
));

220 
POLICY_MEDIUM_POWER
:

221 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
MEDIUM_POWER_STR
,

222 
	`°æí
(
MEDIUM_POWER_STR
)),

223 
	`°æí
(
MEDIUM_POWER_STR
));

226 
POLICY_MIN_POWER
:

227 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
MIN_POWER_STR
,

228 
	`°æí
(
MIN_POWER_STR
)),

229 
	`°æí
(
MIN_POWER_STR
));

233 
	`˛o£
(
fd
);

235 
	`‰ì
(
fûe_«me
);

236 
	}
}

237 
	#POWER_DIR
 "/sys/devi˚s/pci0000:00/0000:00:02.0/powî"

	)

239 
	gpm_°©us_fd
 = -1;

250 
boﬁ
 
	$igt_£tup_ru¡ime_pm
()

252 
fd
;

253 
ssize_t
 
size
;

254 
buf
[6];

256 i‡(
pm_°©us_fd
 >= 0)

257  
åue
;

259 
	`igt_pm_íabÀ_audio_ru¡ime_pm
();

264 
fd
 = 
	`›í
(
POWER_DIR
 "/autosu•íd_dñay_ms", 
O_WRONLY
);

265 
	`igt_as£π_f
(
fd
 >= 0,

266 "C™'à›í " 
POWER_DIR
 "/autosuspend_delay_ms\n");

270 
size
 = 
	`wrôe
(
fd
, "0\n", 2);

272 
	`˛o£
(
fd
);

274 i‡(
size
 != 2)

275  
Ál£
;

278 
fd
 = 
	`›í
(
POWER_DIR
 "/c⁄åﬁ", 
O_RDWR
);

279 
	`igt_as£π_f
(
fd
 >0, "C™'à›í " 
POWER_DIR
 "/control\n");

281 
size
 = 
	`wrôe
(
fd
, "auto\n", 5);

282 
	`igt_as£π
(
size
 == 5);

284 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

285 
size
 = 
	`ªad
(
fd
, 
buf
, 
	`ARRAY_SIZE
(buf));

286 
	`igt_as£π
(
size
 == 5);

287 
	`igt_as£π
(
	`°∫cmp
(
buf
, "auto\n", 5) == 0);

289 
	`˛o£
(
fd
);

291 
pm_°©us_fd
 = 
	`›í
(
POWER_DIR
 "/ru¡ime_°©us", 
O_RDONLY
);

292 
	`igt_as£π_f
(
pm_°©us_fd
 >= 0,

293 "C™'à›í " 
POWER_DIR
 "/runtime_status\n");

295  
åue
;

296 
	}
}

303 
igt_ru¡ime_pm_°©us
 
	$igt_gë_ru¡ime_pm_°©us
()

305 
ssize_t
 
n_ªad
;

306 
buf
[32];

308 
	`l£ek
(
pm_°©us_fd
, 0, 
SEEK_SET
);

309 
n_ªad
 = 
	`ªad
(
pm_°©us_fd
, 
buf
, 
	`ARRAY_SIZE
(buf));

310 
	`igt_as£π
(
n_ªad
 >= 0);

311 
buf
[
n_ªad
] = '\0';

313 i‡(
	`°∫cmp
(
buf
, "su•íded\n", 
n_ªad
) == 0)

314  
IGT_RUNTIME_PM_STATUS_SUSPENDED
;

315 i‡(
	`°∫cmp
(
buf
, "a˘ive\n", 
n_ªad
) == 0)

316  
IGT_RUNTIME_PM_STATUS_ACTIVE
;

317 i‡(
	`°∫cmp
(
buf
, "su•ídög\n", 
n_ªad
) == 0)

318  
IGT_RUNTIME_PM_STATUS_SUSPENDING
;

319 i‡(
	`°∫cmp
(
buf
, "ªsumög\n", 
n_ªad
) == 0)

320  
IGT_RUNTIME_PM_STATUS_RESUMING
;

322 
	`igt_as£π_f
(
Ál£
, "Unknow¿°©u†%s\n", 
buf
);

323  
IGT_RUNTIME_PM_STATUS_UNKNOWN
;

324 
	}
}

337 
boﬁ
 
	$igt_waô_f‹_pm_°©us
(
igt_ru¡ime_pm_°©us
 
°©us
)

339  
	`igt_waô
(
	`igt_gë_ru¡ime_pm_°©us
(Ë=
°©us
, 10000, 100);

340 
	}
}

	@igt_pm.h

24 #i‚de‡
IGT_PM_H


25 
	#IGT_PM_H


	)

27 
igt_pm_íabÀ_audio_ru¡ime_pm
();

28 
öt8_t
 *
igt_pm_íabÀ_ßè_lök_powî_m™agemít
();

29 
igt_pm_ª°‹e_ßè_lök_powî_m™agemít
(
öt8_t
 *
pm_d©a
);

41 
	eigt_ru¡ime_pm_°©us
 {

42 
	mIGT_RUNTIME_PM_STATUS_ACTIVE
,

43 
	mIGT_RUNTIME_PM_STATUS_SUSPENDED
,

44 
	mIGT_RUNTIME_PM_STATUS_SUSPENDING
,

45 
	mIGT_RUNTIME_PM_STATUS_RESUMING
,

46 
	mIGT_RUNTIME_PM_STATUS_UNKNOWN
,

49 
boﬁ
 
igt_£tup_ru¡ime_pm
();

50 
igt_ru¡ime_pm_°©us
 
igt_gë_ru¡ime_pm_°©us
();

51 
boﬁ
 
igt_waô_f‹_pm_°©us
(
igt_ru¡ime_pm_°©us
 
°©us
);

	@igt_primes.c

24 
	~"igt_¥imes.h
"

26 
	~<°dlib.h
>

27 
	~<°dboﬁ.h
>

28 
	~<°rög.h
>

29 
	~<m©h.h
>

38 
	#BITS_PER_CHAR
 8

	)

39 
	#BITS_PER_LONG
 (()*
BITS_PER_CHAR
)

	)

41 
	#BITMAP_FIRST_WORD_MASK
(
°¨t
Ë(~0UL << ((°¨tË& (
BITS_PER_LONG
 - 1)))

	)

42 
	#BITMAP_LAST_WORD_MASK
(
nbôs
Ë(~0UL >> (-“bôsË& (
BITS_PER_LONG
 - 1)))

	)

44 
	#__round_mask
(
x
, 
y
Ë((
	`__ty≥of__
(x))((y)-1))

	)

45 
	#round_up
(
x
, 
y
Ë((((x)-1Ë| 
	`__round_mask
(x, y))+1)

	)

46 
	#round_down
(
x
, 
y
Ë((xË& ~
	`__round_mask
(x, y))

	)

48 
	#mö
(
x
, 
y
) ({ \

49 
	`ty≥of
(
x
Ë
_mö1
 = (x); \

50 
	`ty≥of
(
y
Ë
_mö2
 = (y); \

51 (Ë(&
_mö1
 =&
_mö2
); \

52 
_mö1
 < 
_mö2
 ? _min1 : _min2; \

53 })

	)

55 
	#max
(
x
, 
y
) ({ \

56 
	`ty≥of
(
x
Ë
_max1
 = (x); \

57 
	`ty≥of
(
y
Ë
_max2
 = (y); \

58 (Ë(&
_max1
 =&
_max2
); \

59 
_max1
 > 
_max2
 ? _max1 : _max2; \

60 })

	)

62 
ölöe
 
	$__bô__
(
ƒ
)

64  1UL << (
ƒ
 % 
BITS_PER_LONG
);

65 
	}
}

67 
ölöe
 
	$£t_bô
(
ƒ
, *
addr
)

69 
addr
[
ƒ
 / 
BITS_PER_LONG
] |
	`__bô__
(nr);

70 
	}
}

72 
ölöe
 
	$˛ór_bô
(
ƒ
, *
addr
)

74 
addr
[
ƒ
 / 
BITS_PER_LONG
] &~
	`__bô__
(nr);

75 
	}
}

77 
ölöe
 
boﬁ
 
	$ã°_bô
(
ƒ
, c⁄° *
addr
)

79  
addr
[
ƒ
 / 
BITS_PER_LONG
] & 
	`__bô__
(nr);

80 
	}
}

83 
	$__föd_√xt_bô
(c⁄° *
addr
,

84 
nbôs
, 
°¨t
,

85 
övît
)

87 
tmp
;

89 i‡(!
nbôs
 || 
°¨t
 >=Çbits)

90  
nbôs
;

92 
tmp
 = 
addr
[
°¨t
 / 
BITS_PER_LONG
] ^ 
övît
;

95 
tmp
 &
	`BITMAP_FIRST_WORD_MASK
(
°¨t
);

96 
°¨t
 = 
	`round_down
(°¨t, 
BITS_PER_LONG
);

98 !
tmp
) {

99 
°¨t
 +
BITS_PER_LONG
;

100 i‡(
°¨t
 >
nbôs
)

101  
nbôs
;

103 
tmp
 = 
addr
[
°¨t
 / 
BITS_PER_LONG
] ^ 
övît
;

106  
	`mö
(
°¨t
 + 
	`__buûtö_ff¶
(
tmp
Ë- 1, 
nbôs
);

107 
	}
}

109 
	$föd_√xt_bô
(c⁄° *
addr
,

110 
size
,

111 
off£t
)

113  
	`__föd_√xt_bô
(
addr
, 
size
, 
off£t
, 0UL);

114 
	}
}

116 
	$¶ow_√xt_¥ime_numbî
(
x
)

119 
y
 = 
	`sqπ
(++
x
) + 1;

120 
y
 > 1) {

121 i‡((
x
 % 
y
) == 0)

123 
y
--;

125 i‡(
y
 == 1)

126  
x
;

128 
	}
}

130 
	$m¨k_mu…ùÀs
(
x
,

131 *
¥imes
,

132 
°¨t
,

133 
íd
)

135 
m
;

137 
m
 = 2*
x
;

138 i‡(
m
 < 
°¨t
)

139 
m
 = (
°¨t
 / 
x
 + 1) * x;

141 
m
 < 
íd
) {

142 
	`˛ór_bô
(
m
, 
¥imes
);

143 
m
 +
x
;

146  
x
;

147 
	}
}

149 
	$igt_√xt_¥ime_numbî
(
x
)

151 *
¥imes
;

152 
œ°
, 
œ°_sz
;

154 i‡(
x
 == 0)

156 i‡(
x
 == 1)

159 i‡(
x
 >
œ°
) {

160 
sz
, 
y
;

161 *
≈rimes
;

163 
sz
 = 
x
*x;

164 i‡(
sz
 < 
x
)

165  
	`¶ow_√xt_¥ime_numbî
(
x
);

167 
sz
 = 
	`round_up
(sz, 
BITS_PER_LONG
);

168 
≈rimes
 = 
	`ªÆloc
(
¥imes
, 
sz
 / ());

169 i‡(!
≈rimes
)

170  
	`¶ow_√xt_¥ime_numbî
(
x
);

175 
	`mem£t
(
≈rimes
 + 
œ°_sz
 / 
BITS_PER_LONG
,

176 0xff, (
sz
 - 
œ°_sz
) / ());

177 
y
 = 2UL; y < 
sz
; y = 
	`föd_√xt_bô
(
≈rimes
, sz, y + 1))

178 
œ°
 = 
	`m¨k_mu…ùÀs
(
y
, 
≈rimes
, 
œ°_sz
, 
sz
);

180 
¥imes
 = 
≈rimes
;

181 
œ°_sz
 = 
sz
;

184  
	`föd_√xt_bô
(
¥imes
, 
œ°
, 
x
 + 1);

185 
	}
}

	@igt_primes.h

24 #i‚de‡
IGT_PRIMES_H


25 
	#IGT_PRIMES_H


	)

27 
igt_√xt_¥ime_numbî
(
x
);

29 
	#f‹_óch_¥ime_numbî
(
¥ime
, 
cou¡
) \

30 
¥ime
 = 0, 
cou¡__
 = (
cou¡
); \

31 
cou¡__
-- && (
¥ime
 = 
	`igt_√xt_¥ime_numbî
’rime)); )

	)

	@igt_rand.c

1 
	~"igt_ønd.h
"

10 
uöt32_t
 
	gglobÆ
 = 0x12345678;

12 
uöt32_t
 
	$h¨s_≥åuska_f54_1_øndom_£ed
(
uöt32_t
 
√w_°©e
)

14 
uöt32_t
 
ﬁd_°©e
 = 
globÆ
;

15 
globÆ
 = 
√w_°©e
;

16  
ﬁd_°©e
;

17 
	}
}

19 
uöt32_t
 
	$h¨s_≥åuska_f54_1_øndom
(
uöt32_t
 *
s
)

21 
	#rﬁ
(
x
,
k
Ë((x << kË| (x >> (32-k)))

	)

22  *
s
 = (*†^ 
	`rﬁ
(*s, 5) ^Ñol(*s, 24)) + 0x37798849;

23 #unde‡
rﬁ


24 
	}
}

26 
uöt32_t
 
	$h¨s_≥åuska_f54_1_øndom_unß„
()

28  
	`h¨s_≥åuska_f54_1_øndom
(&
globÆ
);

29 
	}
}

	@igt_rand.h

24 #i‚de‡
IGT_RAND_H


25 
	#IGT_RAND_H


	)

27 
	~<°döt.h
>

29 
uöt32_t
 
h¨s_≥åuska_f54_1_øndom
(uöt32_à*
°©e
);

31 
uöt32_t
 
h¨s_≥åuska_f54_1_øndom_£ed
(uöt32_à
£ed
);

32 
uöt32_t
 
h¨s_≥åuska_f54_1_øndom_unß„
();

34 
ölöe
 
	$h¨s_≥åuska_f54_1_øndom_≥πurb
(
uöt32_t
 
x‹
)

36 
uöt32_t
 
£ed
 = 
	`h¨s_≥åuska_f54_1_øndom_£ed
(0Ë^ 
x‹
;

37 
	`h¨s_≥åuska_f54_1_øndom_£ed
(
£ed
);

38 
	`h¨s_≥åuska_f54_1_øndom_£ed
(
	`h¨s_≥åuska_f54_1_øndom_unß„
());

39 
	}
}

42 
ölöe
 
uöt32_t
 
	$h¨s_≥åuska_f54_1_øndom_unß„_max
(
uöt32_t
 
ï_ro
)

44  ((
uöt64_t
)
	`h¨s_≥åuska_f54_1_øndom_unß„
(Ë* 
ï_ro
) >> 32;

45 
	}
}

	@igt_rc.h

25 #i‚de‡
IGT_RC_H


26 
	#IGT_RC_H


	)

28 #ifde‡
HAVE_GLIB


29 
	~<glib.h
>

31 
GKeyFûe
 *
igt_key_fûe
;

	@igt_stats.c

25 
	~<m©h.h
>

26 
	~<°dlib.h
>

27 
	~<°rög.h
>

29 
	~"igt_c‹e.h
"

30 
	~"igt_°©s.h
"

32 
	#U64_MAX
 ((
uöt64_t
)~0ULL)

	)

34 
	#s‹ãd_vÆue
(
°©s
, 
i
Ë(°©s->
is_Êﬂt
 ? sèts->
s‹ãd_f
[i] : sèts->
s‹ãd_u64
[i])

	)

35 
	#uns‹ãd_vÆue
(
°©s
, 
i
Ë(°©s->
is_Êﬂt
 ? sèts->
vÆues_f
[i] : sèts->
vÆues_u64
[i])

	)

69 
	$gë_√w_ˇ∑côy
(
√ed
)

71 
√w_ˇ∑côy
;

74 
√w_ˇ∑côy
 = (
√ed
 >> 6) + (need < 9 ? 3 : 6);

75 
√w_ˇ∑côy
 +
√ed
;

77  
√w_ˇ∑côy
;

78 
	}
}

80 
	$igt_°©s_ísuª_ˇ∑côy
(
igt_°©s_t
 *
°©s
,

81 
n_addôi⁄Æ_vÆues
)

83 
√w_n_vÆues
 = 
°©s
->
n_vÆues
 + 
n_addôi⁄Æ_vÆues
;

84 
√w_ˇ∑côy
;

86 i‡(
√w_n_vÆues
 <
°©s
->
ˇ∑côy
)

89 
√w_ˇ∑côy
 = 
	`gë_√w_ˇ∑côy
(
√w_n_vÆues
);

90 
°©s
->
vÆues_u64
 = 
	`ªÆloc
(stats->values_u64,

91 (*
°©s
->
vÆues_u64
Ë* 
√w_ˇ∑côy
);

92 
	`igt_as£π
(
°©s
->
vÆues_u64
);

94 
°©s
->
ˇ∑côy
 = 
√w_ˇ∑côy
;

96 
	`‰ì
(
°©s
->
s‹ãd_u64
);

97 
°©s
->
s‹ãd_u64
 = 
NULL
;

98 
	}
}

107 
	$igt_°©s_öô
(
igt_°©s_t
 *
°©s
)

109 
	`mem£t
(
°©s
, 0, (*stats));

111 
	`igt_°©s_ísuª_ˇ∑côy
(
°©s
, 128);

113 
°©s
->
mö
 = 
U64_MAX
;

114 
°©s
->
max
 = 0;

115 
	}
}

128 
	$igt_°©s_öô_wôh_size
(
igt_°©s_t
 *
°©s
, 
ˇ∑côy
)

130 
	`mem£t
(
°©s
, 0, (*stats));

132 
	`igt_°©s_ísuª_ˇ∑côy
(
°©s
, 
ˇ∑côy
);

134 
°©s
->
mö
 = 
U64_MAX
;

135 
°©s
->
max
 = 0;

136 
°©s
->
ønge
[0] = 
HUGE_VAL
;

137 
°©s
->
ønge
[1] = -
HUGE_VAL
;

138 
	}
}

146 
	$igt_°©s_föi
(
igt_°©s_t
 *
°©s
)

148 
	`‰ì
(
°©s
->
vÆues_u64
);

149 
	`‰ì
(
°©s
->
s‹ãd_u64
);

150 
	}
}

161 
boﬁ
 
	$igt_°©s_is_p›uœti⁄
(
igt_°©s_t
 *
°©s
)

163  
°©s
->
is_p›uœti⁄
;

164 
	}
}

192 
	$igt_°©s_£t_p›uœti⁄
(
igt_°©s_t
 *
°©s
, 
boﬁ
 
fuŒ_p›uœti⁄
)

194 i‡(
fuŒ_p›uœti⁄
 =
°©s
->
is_p›uœti⁄
)

197 
°©s
->
is_p›uœti⁄
 = 
fuŒ_p›uœti⁄
;

198 
°©s
->
món_v¨ün˚_vÆid
 = 
Ál£
;

199 
	}
}

208 
	$igt_°©s_push
(
igt_°©s_t
 *
°©s
, 
uöt64_t
 
vÆue
)

210 i‡(
°©s
->
is_Êﬂt
) {

211 
	`igt_°©s_push_Êﬂt
(
°©s
, 
vÆue
);

215 
	`igt_°©s_ísuª_ˇ∑côy
(
°©s
, 1);

217 
°©s
->
vÆues_u64
[°©s->
n_vÆues
++] = 
vÆue
;

219 
°©s
->
món_v¨ün˚_vÆid
 = 
Ál£
;

220 
°©s
->
s‹ãd_¨øy_vÆid
 = 
Ál£
;

222 i‡(
vÆue
 < 
°©s
->
mö
)

223 
°©s
->
mö
 = 
vÆue
;

224 i‡(
vÆue
 > 
°©s
->
max
)

225 
°©s
->
max
 = 
vÆue
;

226 
	}
}

236 
	$igt_°©s_push_Êﬂt
(
igt_°©s_t
 *
°©s
, 
vÆue
)

238 
	`igt_°©s_ísuª_ˇ∑côy
(
°©s
, 1);

240 i‡(!
°©s
->
is_Êﬂt
) {

241 
n
;

243 
n
 = 0;Ç < 
°©s
->
n_vÆues
;Ç++)

244 
°©s
->
vÆues_f
[
n
] = sèts->
vÆues_u64
[n];

246 
°©s
->
is_Êﬂt
 = 
åue
;

249 
°©s
->
vÆues_f
[°©s->
n_vÆues
++] = 
vÆue
;

251 
°©s
->
món_v¨ün˚_vÆid
 = 
Ál£
;

252 
°©s
->
s‹ãd_¨øy_vÆid
 = 
Ál£
;

254 i‡(
vÆue
 < 
°©s
->
ønge
[0])

255 
°©s
->
ønge
[0] = 
vÆue
;

256 i‡(
vÆue
 > 
°©s
->
ønge
[1])

257 
°©s
->
ønge
[1] = 
vÆue
;

258 
	}
}

268 
	$igt_°©s_push_¨øy
(
igt_°©s_t
 *
°©s
,

269 c⁄° 
uöt64_t
 *
vÆues
, 
n_vÆues
)

271 
i
;

273 
	`igt_°©s_ísuª_ˇ∑côy
(
°©s
, 
n_vÆues
);

275 
i
 = 0; i < 
n_vÆues
; i++)

276 
	`igt_°©s_push
(
°©s
, 
vÆues
[
i
]);

277 
	}
}

285 
uöt64_t
 
	$igt_°©s_gë_mö
(
igt_°©s_t
 *
°©s
)

287 
	`igt_as£π
(!
°©s
->
is_Êﬂt
);

288  
°©s
->
mö
;

289 
	}
}

297 
uöt64_t
 
	$igt_°©s_gë_max
(
igt_°©s_t
 *
°©s
)

299 
	`igt_as£π
(!
°©s
->
is_Êﬂt
);

300  
°©s
->
max
;

301 
	}
}

314 
uöt64_t
 
	$igt_°©s_gë_ønge
(
igt_°©s_t
 *
°©s
)

316  
	`igt_°©s_gë_max
(
°©s
Ë- 
	`igt_°©s_gë_mö
(stats);

317 
	}
}

319 
	$cmp_u64
(c⁄° *
∑
, c⁄° *
pb
)

321 c⁄° 
uöt64_t
 *
a
 = 
∑
, *
b
 = 
pb
;

323 i‡(*
a
 < *
b
)

325 i‡(*
a
 > *
b
)

328 
	}
}

330 
	$cmp_f
(c⁄° *
∑
, c⁄° *
pb
)

332 c⁄° *
a
 = 
∑
, *
b
 = 
pb
;

334 i‡(*
a
 < *
b
)

336 i‡(*
a
 > *
b
)

339 
	}
}

341 
	$igt_°©s_ísuª_s‹ãd_vÆues
(
igt_°©s_t
 *
°©s
)

343 i‡(
°©s
->
s‹ãd_¨øy_vÆid
)

346 i‡(!
°©s
->
s‹ãd_u64
) {

353 
°©s
->
s‹ãd_u64
 = 
	`ˇŒoc
(°©s->
ˇ∑côy
,

354 (*
°©s
->
vÆues_u64
));

355 
	`igt_as£π
(
°©s
->
s‹ãd_u64
);

358 
	`mem˝y
(
°©s
->
s‹ãd_u64
, sèts->
vÆues_u64
,

359 (*
°©s
->
vÆues_u64
Ë* sèts->
n_vÆues
);

361 
	`qs‹t
(
°©s
->
s‹ãd_u64
, sèts->
n_vÆues
, (*°©s->
vÆues_u64
),

362 
°©s
->
is_Êﬂt
 ? 
cmp_f
 : 
cmp_u64
);

364 
°©s
->
s‹ãd_¨øy_vÆid
 = 
åue
;

365 
	}
}

372 
	$igt_°©s_gë_medün_öã∫Æ
(
igt_°©s_t
 *
°©s
,

373 
°¨t
, 
íd
,

374 *
lowî_íd
 ,

375 *
uµî_°¨t
 )

377 
mid
, 
n_vÆues
 = 
íd
 - 
°¨t
;

378 
medün
;

380 
	`igt_°©s_ísuª_s‹ãd_vÆues
(
°©s
);

383 i‡(
n_vÆues
 % 2 == 1) {

385 
mid
 = 
°¨t
 + 
n_vÆues
 / 2;

386 
medün
 = 
	`s‹ãd_vÆue
(
°©s
, 
mid
);

389 i‡(
lowî_íd
)

390 *
lowî_íd
 = 
mid
 + 1;

391 i‡(
uµî_°¨t
)

392 *
uµî_°¨t
 = 
mid
;

401 
mid
 = 
°¨t
 + 
n_vÆues
 / 2 - 1;

402 
medün
 = (
	`s‹ãd_vÆue
(
°©s
, 
mid
) + sorted_value(stats, mid+1))/2.;

404 i‡(
lowî_íd
)

405 *
lowî_íd
 = 
mid
 + 1;

406 i‡(
uµî_°¨t
)

407 *
uµî_°¨t
 = 
mid
 + 1;

410  
medün
;

411 
	}
}

423 
	$igt_°©s_gë_qu¨tûes
(
igt_°©s_t
 *
°©s
,

424 *
q1
, *
q2
, *
q3
)

426 
lowî_íd
, 
uµî_°¨t
;

427 
ªt
;

429 i‡(
°©s
->
n_vÆues
 < 3) {

430 i‡(
q1
)

431 *
q1
 = 0.;

432 i‡(
q2
)

433 *
q2
 = 0.;

434 i‡(
q3
)

435 *
q3
 = 0.;

439 
ªt
 = 
	`igt_°©s_gë_medün_öã∫Æ
(
°©s
, 0, sèts->
n_vÆues
,

440 &
lowî_íd
, &
uµî_°¨t
);

441 i‡(
q2
)

442 *
q2
 = 
ªt
;

444 
ªt
 = 
	`igt_°©s_gë_medün_öã∫Æ
(
°©s
, 0, 
lowî_íd
, 
NULL
, NULL);

445 i‡(
q1
)

446 *
q1
 = 
ªt
;

448 
ªt
 = 
	`igt_°©s_gë_medün_öã∫Æ
(
°©s
, 
uµî_°¨t
, sèts->
n_vÆues
,

449 
NULL
, NULL);

450 i‡(
q3
)

451 *
q3
 = 
ªt
;

452 
	}
}

462 
	$igt_°©s_gë_iqr
(
igt_°©s_t
 *
°©s
)

464 
q1
, 
q3
;

466 
	`igt_°©s_gë_qu¨tûes
(
°©s
, &
q1
, 
NULL
, &
q3
);

467  (
q3
 - 
q1
);

468 
	}
}

476 
	$igt_°©s_gë_medün
(
igt_°©s_t
 *
°©s
)

478  
	`igt_°©s_gë_medün_öã∫Æ
(
°©s
, 0, sèts->
n_vÆues
,

479 
NULL
, NULL);

480 
	}
}

490 
	$igt_°©s_knuth_món_v¨ün˚
(
igt_°©s_t
 *
°©s
)

492 
món
 = 0., 
m2
 = 0.;

493 
i
;

495 i‡(
°©s
->
món_v¨ün˚_vÆid
)

498 
i
 = 0; i < 
°©s
->
n_vÆues
; i++) {

499 
dñè
 = 
	`uns‹ãd_vÆue
(
°©s
, 
i
Ë- 
món
;

501 
món
 +
dñè
 / (
i
 + 1);

502 
m2
 +
dñè
 * (
	`uns‹ãd_vÆue
(
°©s
, 
i
Ë- 
món
);

505 
°©s
->
món
 = mean;

506 i‡(
°©s
->
n_vÆues
 > 1 && !°©s->
is_p›uœti⁄
)

507 
°©s
->
v¨ün˚
 = 
m2
 / (°©s->
n_vÆues
 - 1);

509 
°©s
->
v¨ün˚
 = 
m2
 / sèts->
n_vÆues
;

510 
°©s
->
món_v¨ün˚_vÆid
 = 
åue
;

511 
	}
}

519 
	$igt_°©s_gë_món
(
igt_°©s_t
 *
°©s
)

521 
	`igt_°©s_knuth_món_v¨ün˚
(
°©s
);

523  
°©s
->
món
;

524 
	}
}

532 
	$igt_°©s_gë_v¨ün˚
(
igt_°©s_t
 *
°©s
)

534 
	`igt_°©s_knuth_món_v¨ün˚
(
°©s
);

536  
°©s
->
v¨ün˚
;

537 
	}
}

545 
	$igt_°©s_gë_°d_devüti⁄
(
igt_°©s_t
 *
°©s
)

547 
	`igt_°©s_knuth_món_v¨ün˚
(
°©s
);

549  
	`sqπ
(
°©s
->
v¨ün˚
);

550 
	}
}

566 
	$igt_°©s_gë_iqm
(
igt_°©s_t
 *
°©s
)

568 
q1
, 
q3
, 
i
;

569 
món
;

571 
	`igt_°©s_ísuª_s‹ãd_vÆues
(
°©s
);

573 
q1
 = (
°©s
->
n_vÆues
 + 3) / 4;

574 
q3
 = 3 * 
°©s
->
n_vÆues
 / 4;

576 
món
 = 0;

577 
i
 = 0; i <
q3
 - 
q1
; i++)

578 
món
 +(
	`s‹ãd_vÆue
(
°©s
, 
q1
 + 
i
) - mean) / (i + 1);

580 i‡(
°©s
->
n_vÆues
 % 4) {

581 
ªm
 = .5 * (
°©s
->
n_vÆues
 % 4) / 4;

583 
q1
 = (
°©s
->
n_vÆues
) / 4;

584 
q3
 = (3 * 
°©s
->
n_vÆues
 + 3) / 4;

586 
món
 +
ªm
 * (
	`s‹ãd_vÆue
(
°©s
, 
q1
Ë- mónË/ 
i
++;

587 
món
 +
ªm
 * (
	`s‹ãd_vÆue
(
°©s
, 
q3
Ë- mónË/ 
i
++;

590  
món
;

591 
	}
}

603 
	$igt_°©s_gë_åimón
(
igt_°©s_t
 *
°©s
)

605 
q1
, 
q2
, 
q3
;

606 
	`igt_°©s_gë_qu¨tûes
(
°©s
, &
q1
, &
q2
, &
q3
);

607  (
q1
 + 2*
q2
 + 
q3
) / 4;

608 
	}
}

616 
	$igt_món_öô
(
igt_món
 *
m
)

618 
	`mem£t
(
m
, 0, (*m));

619 
m
->
max
 = -
HUGE_VAL
;

620 
m
->
mö
 = 
HUGE_VAL
;

621 
	}
}

630 
	$igt_món_add
(
igt_món
 *
m
, 
v
)

632 
dñè
 = 
v
 - 
m
->
món
;

633 
m
->
món
 +
dñè
 / ++m->
cou¡
;

634 
m
->
sq
 +
dñè
 * (
v
 - m->
món
);

635 i‡(
v
 < 
m
->
mö
)

636 
m
->
mö
 = 
v
;

637 i‡(
v
 > 
m
->
max
)

638 
m
->
max
 = 
v
;

639 
	}
}

647 
	$igt_món_gë
(
igt_món
 *
m
)

649  
m
->
món
;

650 
	}
}

658 
	$igt_món_gë_v¨ün˚
(
igt_món
 *
m
)

660  
m
->
sq
 / m->
cou¡
;

661 
	}
}

	@igt_stats.h

25 #i‚de‡
__IGT_STATS_H__


26 
	#__IGT_STATS_H__


	)

28 
	~<°döt.h
>

29 
	~<°dboﬁ.h
>

30 
	~<m©h.h
>

40 
	mn_vÆues
;

41 
	mis_Êﬂt
 : 1;

43 
uöt64_t
 *
	mvÆues_u64
;

44 *
	mvÆues_f
;

48 
	mˇ∑côy
;

49 
	mis_p›uœti⁄
 : 1;

50 
	mmón_v¨ün˚_vÆid
 : 1;

51 
	ms‹ãd_¨øy_vÆid
 : 1;

53 
uöt64_t
 
	mmö
, 
	mmax
;

54 
	mønge
[2];

55 
	mmón
, 
	mv¨ün˚
;

58 
uöt64_t
 *
	ms‹ãd_u64
;

59 *
	ms‹ãd_f
;

61 } 
	tigt_°©s_t
;

63 
igt_°©s_öô
(
igt_°©s_t
 *
°©s
);

64 
igt_°©s_öô_wôh_size
(
igt_°©s_t
 *
°©s
, 
ˇ∑côy
);

65 
igt_°©s_föi
(
igt_°©s_t
 *
°©s
);

66 
boﬁ
 
igt_°©s_is_p›uœti⁄
(
igt_°©s_t
 *
°©s
);

67 
igt_°©s_£t_p›uœti⁄
(
igt_°©s_t
 *
°©s
, 
boﬁ
 
fuŒ_p›uœti⁄
);

68 
igt_°©s_push
(
igt_°©s_t
 *
°©s
, 
uöt64_t
 
vÆue
);

69 
igt_°©s_push_Êﬂt
(
igt_°©s_t
 *
°©s
, 
vÆue
);

70 
igt_°©s_push_¨øy
(
igt_°©s_t
 *
°©s
,

71 c⁄° 
uöt64_t
 *
vÆues
, 
n_vÆues
);

72 
uöt64_t
 
igt_°©s_gë_mö
(
igt_°©s_t
 *
°©s
);

73 
uöt64_t
 
igt_°©s_gë_max
(
igt_°©s_t
 *
°©s
);

74 
uöt64_t
 
igt_°©s_gë_ønge
(
igt_°©s_t
 *
°©s
);

75 
igt_°©s_gë_qu¨tûes
(
igt_°©s_t
 *
°©s
,

76 *
q1
, *
q2
, *
q3
);

77 
igt_°©s_gë_iqr
(
igt_°©s_t
 *
°©s
);

78 
igt_°©s_gë_iqm
(
igt_°©s_t
 *
°©s
);

79 
igt_°©s_gë_món
(
igt_°©s_t
 *
°©s
);

80 
igt_°©s_gë_åimón
(
igt_°©s_t
 *
°©s
);

81 
igt_°©s_gë_medün
(
igt_°©s_t
 *
°©s
);

82 
igt_°©s_gë_v¨ün˚
(
igt_°©s_t
 *
°©s
);

83 
igt_°©s_gë_°d_devüti⁄
(
igt_°©s_t
 *
°©s
);

92 
	sigt_món
 {

94 
	mmón
, 
	msq
, 
	mmö
, 
	mmax
;

95 
	mcou¡
;

98 
igt_món_öô
(
igt_món
 *
m
);

99 
igt_món_add
(
igt_món
 *
m
, 
v
);

100 
igt_món_gë
(
igt_món
 *
m
);

101 
igt_món_gë_v¨ün˚
(
igt_món
 *
m
);

	@igt_syncobj.c

24 
	~<î∫o.h
>

25 
	~<xf86drm.h
>

27 
	~"igt.h
"

28 
	~"igt_syncobj.h
"

40 
	$__syncobj_¸óã
(
fd
, 
uöt32_t
 *
h™dÀ
, uöt32_à
Êags
)

42 
drm_syncobj_¸óã
 
¸óã
 = { 0 };

43 
îr
 = 0;

45 
¸óã
.
Êags
 = flags;

46 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_SYNCOBJ_CREATE
, &
¸óã
))

47 
îr
 = -
î∫o
;

48 *
h™dÀ
 = 
¸óã
.handle;

49  
îr
;

50 
	}
}

61 
uöt32_t


62 
	$syncobj_¸óã
(
fd
, 
uöt32_t
 
Êags
)

64 
uöt32_t
 
h™dÀ
;

65 
	`igt_as£π_eq
(
	`__syncobj_¸óã
(
fd
, &
h™dÀ
, 
Êags
), 0);

66 
	`igt_as£π
(
h™dÀ
);

67  
h™dÀ
;

68 
	}
}

71 
	$__syncobj_de°roy
(
fd
, 
uöt32_t
 
h™dÀ
)

73 
drm_syncobj_de°roy
 
de°roy
 = { 0 };

74 
îr
 = 0;

76 
de°roy
.
h™dÀ
 = handle;

77 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_SYNCOBJ_DESTROY
, &
de°roy
))

78 
îr
 = -
î∫o
;

79  
îr
;

80 
	}
}

89 
	$syncobj_de°roy
(
fd
, 
uöt32_t
 
h™dÀ
)

91 
	`igt_as£π_eq
(
	`__syncobj_de°roy
(
fd
, 
h™dÀ
), 0);

92 
	}
}

95 
	$__syncobj_h™dÀ_to_fd
(
fd
, 
drm_syncobj_h™dÀ
 *
¨gs
)

97 
îr
 = 0;

98 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_SYNCOBJ_HANDLE_TO_FD
, 
¨gs
))

99 
îr
 = -
î∫o
;

100  
îr
;

101 
	}
}

114 
	$syncobj_h™dÀ_to_fd
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
Êags
)

116 
drm_syncobj_h™dÀ
 
¨gs
 = { 0 };

117 
¨gs
.
h™dÀ
 = handle;

118 
¨gs
.
Êags
 = flags;

119 
	`igt_as£π_eq
(
	`__syncobj_h™dÀ_to_fd
(
fd
, &
¨gs
), 0);

120 
	`igt_as£π
(
¨gs
.
fd
 >= 0);

121  
¨gs
.
fd
;

122 
	}
}

125 
	$__syncobj_fd_to_h™dÀ
(
fd
, 
drm_syncobj_h™dÀ
 *
¨gs
)

127 
îr
 = 0;

128 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_SYNCOBJ_FD_TO_HANDLE
, 
¨gs
))

129 
îr
 = -
î∫o
;

130  
îr
;

131 
	}
}

143 
uöt32_t


144 
	$syncobj_fd_to_h™dÀ
(
fd
, 
syncobj_fd
, 
uöt32_t
 
Êags
)

146 
drm_syncobj_h™dÀ
 
¨gs
 = { 0 };

147 
¨gs
.
fd
 = 
syncobj_fd
;

148 
¨gs
.
Êags
 = flags;

149 
	`igt_as£π_eq
(
	`__syncobj_fd_to_h™dÀ
(
fd
, &
¨gs
), 0);

150 
	`igt_as£π
(
¨gs
.
h™dÀ
 > 0);

151  
¨gs
.
h™dÀ
;

152 
	}
}

163 
	$syncobj_imp‹t_sync_fûe
(
fd
, 
uöt32_t
 
h™dÀ
, 
sync_fûe
)

165 
drm_syncobj_h™dÀ
 
¨gs
 = { 0 };

166 
¨gs
.
h™dÀ
 = handle;

167 
¨gs
.
fd
 = 
sync_fûe
;

168 
¨gs
.
Êags
 = 
DRM_SYNCOBJ_FD_TO_HANDLE_FLAGS_IMPORT_SYNC_FILE
;

169 
	`igt_as£π_eq
(
	`__syncobj_fd_to_h™dÀ
(
fd
, &
¨gs
), 0);

170 
	}
}

173 
	$__syncobj_waô
(
fd
, 
loˇl_syncobj_waô
 *
¨gs
)

175 
îr
 = 0;

176 i‡(
	`drmIo˘l
(
fd
, 
LOCAL_IOCTL_SYNCOBJ_WAIT
, 
¨gs
))

177 
îr
 = -
î∫o
;

178  
îr
;

179 
	}
}

182 
	$syncobj_waô_îr
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
,

183 
uöt64_t
 
abs_timeout_n£c
, 
uöt32_t
 
Êags
)

185 
loˇl_syncobj_waô
 
waô
;

187 
waô
.
h™dÀs
 = 
	`to_u£r_poöãr
(handles);

188 
waô
.
timeout_n£c
 = 
abs_timeout_n£c
;

189 
waô
.
cou¡_h™dÀs
 = 
cou¡
;

190 
waô
.
Êags
 = flags;

191 
waô
.
fú°_sig«Àd
 = 0;

192 
waô
.
∑d
 = 0;

194  
	`__syncobj_waô
(
fd
, &
waô
);

195 
	}
}

210 
boﬁ


211 
	$syncobj_waô
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
,

212 
uöt64_t
 
abs_timeout_n£c
, 
uöt32_t
 
Êags
,

213 
uöt32_t
 *
fú°_sig«Àd
)

215 
loˇl_syncobj_waô
 
waô
;

216 
ªt
;

218 
waô
.
h™dÀs
 = 
	`to_u£r_poöãr
(handles);

219 
waô
.
timeout_n£c
 = 
abs_timeout_n£c
;

220 
waô
.
cou¡_h™dÀs
 = 
cou¡
;

221 
waô
.
Êags
 = flags;

222 
waô
.
fú°_sig«Àd
 = 0;

223 
waô
.
∑d
 = 0;

225 
ªt
 = 
	`__syncobj_waô
(
fd
, &
waô
);

226 i‡(
ªt
 =
ETIME
)

227  
Ál£
;

229 
	`igt_as£π_eq
(
ªt
, 0);

230 i‡(
fú°_sig«Àd
)

231 *
fú°_sig«Àd
 = 
waô
.first_signaled;

233  
åue
;

234 
	}
}

237 
	$__syncobj_ª£t
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
)

239 
loˇl_syncobj_¨øy
 
¨øy
 = { 0 };

240 
îr
 = 0;

242 
¨øy
.
h™dÀs
 = 
	`to_u£r_poöãr
(handles);

243 
¨øy
.
cou¡_h™dÀs
 = 
cou¡
;

244 i‡(
	`drmIo˘l
(
fd
, 
LOCAL_IOCTL_SYNCOBJ_RESET
, &
¨øy
))

245 
îr
 = -
î∫o
;

246  
îr
;

247 
	}
}

258 
	$syncobj_ª£t
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
)

260 
	`igt_as£π_eq
(
	`__syncobj_ª£t
(
fd
, 
h™dÀs
, 
cou¡
), 0);

261 
	}
}

264 
	$__syncobj_sig«l
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
)

266 
loˇl_syncobj_¨øy
 
¨øy
 = { 0 };

267 
îr
 = 0;

269 
¨øy
.
h™dÀs
 = 
	`to_u£r_poöãr
(handles);

270 
¨øy
.
cou¡_h™dÀs
 = 
cou¡
;

271 i‡(
	`drmIo˘l
(
fd
, 
LOCAL_IOCTL_SYNCOBJ_SIGNAL
, &
¨øy
))

272 
îr
 = -
î∫o
;

273  
îr
;

274 
	}
}

285 
	$syncobj_sig«l
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
)

287 
	`igt_as£π_eq
(
	`__syncobj_sig«l
(
fd
, 
h™dÀs
, 
cou¡
), 0);

288 
	}
}

	@igt_syncobj.h

24 #i‚de‡
IGT_SYNCOBJ_H


25 
	#IGT_SYNCOBJ_H


	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

29 
	~<drm.h
>

31 
	#LOCAL_SYNCOBJ_CREATE_SIGNALED
 (1 << 0)

	)

33 
	#LOCAL_SYNCOBJ_WAIT_FLAGS_WAIT_ALL
 (1 << 0)

	)

34 
	#LOCAL_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT
 (1 << 1)

	)

35 
	sloˇl_syncobj_waô
 {

36 
__u64
 
	mh™dÀs
;

38 
__s64
 
	mtimeout_n£c
;

39 
__u32
 
	mcou¡_h™dÀs
;

40 
__u32
 
	mÊags
;

41 
__u32
 
	mfú°_sig«Àd
;

42 
__u32
 
	m∑d
;

45 
	sloˇl_syncobj_¨øy
 {

46 
__u64
 
	mh™dÀs
;

47 
__u32
 
	mcou¡_h™dÀs
;

48 
__u32
 
	m∑d
;

51 
	#LOCAL_IOCTL_SYNCOBJ_WAIT
 
	`DRM_IOWR
(0xC3, 
loˇl_syncobj_waô
)

	)

52 
	#LOCAL_IOCTL_SYNCOBJ_RESET
 
	`DRM_IOWR
(0xC4, 
loˇl_syncobj_¨øy
)

	)

53 
	#LOCAL_IOCTL_SYNCOBJ_SIGNAL
 
	`DRM_IOWR
(0xC5, 
loˇl_syncobj_¨øy
)

	)

55 
uöt32_t
 
syncobj_¸óã
(
fd
, uöt32_à
Êags
);

56 
syncobj_de°roy
(
fd
, 
uöt32_t
 
h™dÀ
);

57 
__syncobj_h™dÀ_to_fd
(
fd
, 
drm_syncobj_h™dÀ
 *
¨gs
);

58 
__syncobj_fd_to_h™dÀ
(
fd
, 
drm_syncobj_h™dÀ
 *
¨gs
);

59 
syncobj_h™dÀ_to_fd
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
Êags
);

60 
uöt32_t
 
syncobj_fd_to_h™dÀ
(
fd
, 
syncobj_fd
, uöt32_à
Êags
);

61 
syncobj_imp‹t_sync_fûe
(
fd
, 
uöt32_t
 
h™dÀ
, 
sync_fûe
);

62 
__syncobj_waô
(
fd
, 
loˇl_syncobj_waô
 *
¨gs
);

63 
syncobj_waô_îr
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
,

64 
uöt64_t
 
abs_timeout_n£c
, 
uöt32_t
 
Êags
);

65 
boﬁ
 
syncobj_waô
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
,

66 
uöt64_t
 
abs_timeout_n£c
, 
uöt32_t
 
Êags
,

67 
uöt32_t
 *
fú°_sig«Àd
);

68 
syncobj_ª£t
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
);

69 
syncobj_sig«l
(
fd
, 
uöt32_t
 *
h™dÀs
, uöt32_à
cou¡
);

	@igt_sysfs.c

25 
	~<öây≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/sysma¸os.h
>

28 
	~<sys/mou¡.h
>

29 
	~<î∫o.h
>

30 
	~<°d¨g.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<limôs.h
>

34 
	~<°rög.h
>

35 
	~<f˙é.h
>

36 
	~<uni°d.h
>

37 
	~<i915_drm.h
>

38 
	~<dúít.h
>

39 
	~<uni°d.h
>

40 
	~<f˙é.h
>

42 
	~"igt_c‹e.h
"

43 
	~"igt_sysfs.h
"

55 
	$ªadN
(
fd
, *
buf
, 
Àn
)

57 
tŸÆ
 = 0;

59 
ªt
 = 
	`ªad
(
fd
, 
buf
 + 
tŸÆ
, 
Àn
 -Åotal);

60 i‡(
ªt
 < 0 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
))

63 i‡(
ªt
 <= 0)

64  
tŸÆ
 ?: 
ªt
;

66 
tŸÆ
 +
ªt
;

67 i‡(
tŸÆ
 =
Àn
)

68  
tŸÆ
;

70 
	}
}

72 
	$wrôeN
(
fd
, c⁄° *
buf
, 
Àn
)

74 
tŸÆ
 = 0;

76 
ªt
 = 
	`wrôe
(
fd
, 
buf
 + 
tŸÆ
, 
Àn
 -Åotal);

77 i‡(
ªt
 < 0 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
))

80 i‡(
ªt
 <= 0)

81  
tŸÆ
 ?: 
ªt
;

83 
tŸÆ
 +
ªt
;

84 i‡(
tŸÆ
 =
Àn
)

85  
tŸÆ
;

87 
	}
}

101 *
	$igt_sysfs_∑th
(
devi˚
, *
∑th
, 
∑thÀn
, *
idx
)

103 
°©
 
°
;

105 i‡(
devi˚
 !-1 && (
	`f°©
(devi˚, &
°
Ë|| !
	`S_ISCHR
(°.
°_mode
)))

106  
NULL
;

108 
n
 = 0;Ç < 16;Ç++) {

109 
Àn
 = 
	`¢¥ötf
(
∑th
, 
∑thÀn
, "/sys/˛ass/drm/ˇrd%d", 
n
);

110 i‡(
devi˚
 != -1) {

111 
FILE
 *
fûe
;

112 
ªt
, 
maj
, 
mö
;

114 
	`•rötf
(
∑th
 + 
Àn
, "/dev");

115 
fûe
 = 
	`f›í
(
∑th
, "r");

116 i‡(!
fûe
)

119 
ªt
 = 
	`fsˇnf
(
fûe
, "%d:%d", &
maj
, &
mö
);

120 
	`f˛o£
(
fûe
);

122 i‡(
ªt
 != 2 ||

123 
	`maj‹
(
°
.
°_rdev
Ë!
maj
 ||

124 
	`mö‹
(
°
.
°_rdev
Ë!
mö
)

128 
	`•rötf
(
∑th
 + 
Àn
, "/error");

129 i‡(
	`°©
(
∑th
, &
°
))

133 
∑th
[
Àn
] = '\0';

134 i‡(
idx
)

135 *
idx
 = 
n
;

136  
∑th
;

139  
NULL
;

140 
	}
}

153 
	$igt_sysfs_›í
(
devi˚
, *
idx
)

155 
∑th
[80];

157 i‡(!
	`igt_sysfs_∑th
(
devi˚
, 
∑th
, ’©h), 
idx
))

160  
	`›í
(
∑th
, 
O_RDONLY
);

161 
	}
}

171 
boﬁ
 
	$igt_sysfs_£t_∑ømëî
(
devi˚
,

172 c⁄° *
∑ømëî
,

173 c⁄° *
fmt
, ...)

175 
va_li°
 
≠
;

176 
dú
;

177 
ªt
;

179 
dú
 = 
	`igt_sysfs_›í_∑ømëîs
(
devi˚
);

180 i‡(
dú
 < 0)

181  
Ál£
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
ªt
 = 
	`igt_sysfs_v¥ötf
(
dú
, 
∑ømëî
, 
fmt
, 
≠
);

185 
	`va_íd
(
≠
);

187 
	`˛o£
(
dú
);

189  
ªt
 > 0;

190 
	}
}

202 
	$igt_sysfs_›í_∑ømëîs
(
devi˚
)

204 
dú
, 
∑øms
;

206 
dú
 = 
	`igt_sysfs_›í
(
devi˚
, &
∑øms
);

207 i‡(
dú
 < 0)

210 
∑øms
 = -1;

212 
	`˛o£
(
dú
);

214 i‡(
∑øms
 < 0) {

215 
drm_vîsi⁄_t
 
vîsi⁄
;

216 
«me
[32] = "";

217 
∑th
[
PATH_MAX
];

219 
	`mem£t
(&
vîsi⁄
, 0, (version));

220 
vîsi⁄
.
«me_Àn
 = (
«me
);

221 
vîsi⁄
.
«me
 =Çame;

222 
	`io˘l
(
devi˚
, 
DRM_IOCTL_VERSION
, &
vîsi⁄
);

224 
	`•rötf
(
∑th
, "/sys/moduÀ/%s/∑ømëîs", 
«me
);

225 
∑øms
 = 
	`›í
(
∑th
, 
O_RDONLY
);

228  
∑øms
;

229 
	}
}

243 
	$igt_sysfs_wrôe
(
dú
, c⁄° *
©å
, c⁄° *
d©a
, 
Àn
)

245 
fd
;

247 
fd
 = 
	`›í©
(
dú
, 
©å
, 
O_WRONLY
);

248 i‡(
fd
 < 0)

249  
Ál£
;

251 
Àn
 = 
	`wrôeN
(
fd
, 
d©a
,Üen);

252 
	`˛o£
(
fd
);

254  
Àn
;

255 
	}
}

269 
	$igt_sysfs_ªad
(
dú
, c⁄° *
©å
, *
d©a
, 
Àn
)

271 
fd
;

273 
fd
 = 
	`›í©
(
dú
, 
©å
, 
O_RDONLY
);

274 i‡(
fd
 < 0)

275  
Ál£
;

277 
Àn
 = 
	`ªadN
(
fd
, 
d©a
,Üen);

278 
	`˛o£
(
fd
);

280  
Àn
;

281 
	}
}

294 
boﬁ
 
	$igt_sysfs_£t
(
dú
, c⁄° *
©å
, c⁄° *
vÆue
)

296 
Àn
 = 
	`°æí
(
vÆue
);

297  
	`igt_sysfs_wrôe
(
dú
, 
©å
, 
vÆue
, 
Àn
) ==Üen;

298 
	}
}

311 *
	$igt_sysfs_gë
(
dú
, c⁄° *
©å
)

313 *
buf
;

314 
Àn
, 
off£t
, 
ªm
;

315 
ªt
, 
fd
;

317 
fd
 = 
	`›í©
(
dú
, 
©å
, 
O_RDONLY
);

318 i‡(
fd
 < 0)

319  
NULL
;

321 
off£t
 = 0;

322 
Àn
 = 64;

323 
ªm
 = 
Àn
 - 
off£t
 - 1;

324 
buf
 = 
	`mÆloc
(
Àn
);

325 i‡(!
buf
)

326 
out
;

328 (
ªt
 = 
	`ªadN
(
fd
, 
buf
 + 
off£t
, 
ªm
)) ==Ñem) {

329 *
√wbuf
;

331 
√wbuf
 = 
	`ªÆloc
(
buf
, 2*
Àn
);

332 i‡(!
√wbuf
)

335 
buf
 = 
√wbuf
;

336 
Àn
 *= 2;

337 
off£t
 +
ªt
;

338 
ªm
 = 
Àn
 - 
off£t
 - 1;

341 i‡(
ªt
 != -1)

342 
off£t
 +
ªt
;

343 
buf
[
off£t
] = '\0';

344 
off£t
 > 0 && 
buf
[offset-1] == '\n')

345 
buf
[--
off£t
] = '\0';

347 
out
:

348 
	`˛o£
(
fd
);

349  
buf
;

350 
	}
}

365 
	$igt_sysfs_sˇnf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, ...)

367 
FILE
 *
fûe
;

368 
fd
;

369 
ªt
 = -1;

371 
fd
 = 
	`›í©
(
dú
, 
©å
, 
O_RDONLY
);

372 i‡(
fd
 < 0)

375 
fûe
 = 
	`fd›í
(
fd
, "r");

376 i‡(
fûe
) {

377 
va_li°
 
≠
;

379 
	`va_°¨t
(
≠
, 
fmt
);

380 
ªt
 = 
	`vfsˇnf
(
fûe
, 
fmt
, 
≠
);

381 
	`va_íd
(
≠
);

383 
	`f˛o£
(
fûe
);

385 
	`˛o£
(
fd
);

387  
ªt
;

388 
	}
}

390 
	$igt_sysfs_v¥ötf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, 
va_li°
 
≠
)

392 
FILE
 *
fûe
;

393 
fd
;

394 
ªt
 = -1;

396 
fd
 = 
	`›í©
(
dú
, 
©å
, 
O_WRONLY
);

397 i‡(
fd
 < 0)

400 
fûe
 = 
	`fd›í
(
fd
, "w");

401 i‡(
fûe
) {

402 
ªt
 = 
	`vÂrötf
(
fûe
, 
fmt
, 
≠
);

403 
	`f˛o£
(
fûe
);

405 
	`˛o£
(
fd
);

407  
ªt
;

408 
	}
}

422 
	$igt_sysfs_¥ötf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, ...)

424 
va_li°
 
≠
;

425 
ªt
;

427 
	`va_°¨t
(
≠
, 
fmt
);

428 
ªt
 = 
	`igt_sysfs_v¥ötf
(
dú
, 
©å
, 
fmt
, 
≠
);

429 
	`va_íd
(
≠
);

431  
ªt
;

432 
	}
}

444 
uöt32_t
 
	$igt_sysfs_gë_u32
(
dú
, c⁄° *
©å
)

446 
uöt32_t
 
ªsu…
;

448 i‡(
	`igt_sysfs_sˇnf
(
dú
, 
©å
, "%u", &
ªsu…
) != 1)

451  
ªsu…
;

452 
	}
}

465 
boﬁ
 
	$igt_sysfs_£t_u32
(
dú
, c⁄° *
©å
, 
uöt32_t
 
vÆue
)

467  
	`igt_sysfs_¥ötf
(
dú
, 
©å
, "%u", 
vÆue
) > 0;

468 
	}
}

480 
boﬁ
 
	$igt_sysfs_gë_boﬁón
(
dú
, c⁄° *
©å
)

482 
ªsu…
;

484 i‡(
	`igt_sysfs_sˇnf
(
dú
, 
©å
, "%d", &
ªsu…
) != 1)

485  
Ál£
;

487  
ªsu…
;

488 
	}
}

501 
boﬁ
 
	$igt_sysfs_£t_boﬁón
(
dú
, c⁄° *
©å
, 
boﬁ
 
vÆue
)

503  
	`igt_sysfs_¥ötf
(
dú
, 
©å
, "%d", 
vÆue
) == 1;

504 
	}
}

513 
	$kick_fbc⁄
(
boﬁ
 
íabÀ
)

515 c⁄° *
∑th
 = "/sys/class/vtconsole";

516 
DIR
 *
dú
;

517 
dúít
 *
de
;

519 
dú
 = 
	`›ídú
(
∑th
);

520 i‡(!
dú
)

523 (
de
 = 
	`ªaddú
(
dú
))) {

524 
buf
[
PATH_MAX
];

525 
fd
, 
Àn
;

527 i‡(
	`°∫cmp
(
de
->
d_«me
, "vtcon", 5))

530 
	`•rötf
(
buf
, "%s/%s/«me", 
∑th
, 
de
->
d_«me
);

531 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

532 i‡(
fd
 < 0)

535 
buf
[(buf) - 1] = '\0';

536 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

537 
	`˛o£
(
fd
);

538 i‡(
Àn
 >= 0)

539 
buf
[
Àn
] = '\0';

541 i‡(!
	`°r°r
(
buf
, 
íabÀ
 ? "dummy device" :

545 
	`•rötf
(
buf
, "%s/%s/böd", 
∑th
, 
de
->
d_«me
);

546 
fd
 = 
	`›í
(
buf
, 
O_WRONLY
);

547 i‡(
fd
 != -1) {

548 
	`igt_ign‹e_w¨n
(
	`wrôe
(
fd
, "0\n", 2));

549 
	`˛o£
(
fd
);

552 
	`˛o£dú
(
dú
);

553 
	}
}

562 
	$kick_¢d_hda_öãl
()

564 
DIR
 *
dú
;

565 
dúít
 *
¢d_hda
;

566 
fd
; 
size_t
 
Àn
;

568 c⁄° *
d∑th
 = "/sys/bus/pci/drivers/snd_hda_intel";

569 c⁄° *
∑th
 = "/sys/bus/pci/drivers/snd_hda_intel/unbind";

570 c⁄° *
devid
 = "0000:";

572 
fd
 = 
	`›í
(
∑th
, 
O_WRONLY
);

573 i‡(
fd
 < 0) {

577 
dú
 = 
	`›ídú
(
d∑th
);

578 i‡(!
dú
)

579 
out
;

581 
Àn
 = 
	`°æí
(
devid
);

582 (
¢d_hda
 = 
	`ªaddú
(
dú
))) {

583 
°©
 
°
;

584 
Â©h
[
PATH_MAX
];

586 i‡(*
¢d_hda
->
d_«me
 == '.')

589 
	`¢¥ötf
(
Â©h
, (Â©h), "%s/%s", 
d∑th
, 
¢d_hda
->
d_«me
);

590 i‡(
	`l°©
(
Â©h
, &
°
))

593 i‡(!
	`S_ISLNK
(
°
.
°_mode
))

596 i‡(!
	`°∫cmp
(
devid
, 
¢d_hda
->
d_«me
, 
Àn
)) {

597 
	`igt_ign‹e_w¨n
(
	`wrôe
(
fd
, 
¢d_hda
->
d_«me
,

598 
	`°æí
(
¢d_hda
->
d_«me
)));

602 
	`˛o£dú
(
dú
);

603 
out
:

604 
	`˛o£
(
fd
);

605 
	}
}

	@igt_sysfs.h

25 #i‚de‡
__IGT_SYSFS_H__


26 
	#__IGT_SYSFS_H__


	)

28 
	~<°dboﬁ.h
>

29 
	~<°d¨g.h
>

31 *
igt_sysfs_∑th
(
devi˚
, *
∑th
, 
∑thÀn
, *
idx
);

32 
igt_sysfs_›í
(
devi˚
, *
idx
);

33 
igt_sysfs_›í_∑ømëîs
(
devi˚
);

34 
boﬁ
 
	$igt_sysfs_£t_∑ømëî
(
devi˚
,

35 c⁄° *
∑ømëî
,

36 c⁄° *
fmt
, ...)

37 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,3,4)));

39 
	`igt_sysfs_ªad
(
dú
, c⁄° *
©å
, *
d©a
, 
Àn
);

40 
	`igt_sysfs_wrôe
(
dú
, c⁄° *
©å
, c⁄° *
d©a
, 
Àn
);

42 
boﬁ
 
	`igt_sysfs_£t
(
dú
, c⁄° *
©å
, c⁄° *
vÆue
);

43 *
	`igt_sysfs_gë
(
dú
, c⁄° *
©å
);

45 
	$igt_sysfs_sˇnf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, ...)

46 
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,3,4)));

47 
	$igt_sysfs_v¥ötf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, 
va_li°
 
≠
)

48 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,3,0)));

49 
	$igt_sysfs_¥ötf
(
dú
, c⁄° *
©å
, c⁄° *
fmt
, ...)

50 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,3,4)));

52 
uöt32_t
 
	`igt_sysfs_gë_u32
(
dú
, c⁄° *
©å
);

53 
boﬁ
 
	`igt_sysfs_£t_u32
(
dú
, c⁄° *
©å
, 
uöt32_t
 
vÆue
);

55 
boﬁ
 
	`igt_sysfs_gë_boﬁón
(
dú
, c⁄° *
©å
);

56 
boﬁ
 
	`igt_sysfs_£t_boﬁón
(
dú
, c⁄° *
©å
, boﬁ 
vÆue
);

58 
	`kick_fbc⁄
(
boﬁ
 
íabÀ
);

59 
	`kick_¢d_hda_öãl
();

	@igt_vc4.c

24 
	~<as£π.h
>

25 
	~<°rög.h
>

26 
	~<sig«l.h
>

27 
	~<î∫o.h
>

28 
	~<sys/mm™.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/io˘l.h
>

32 
	~<f˙é.h
>

34 
	~"drmã°.h
"

35 
	~"igt_aux.h
"

36 
	~"igt_c‹e.h
"

37 
	~"igt_vc4.h
"

38 
	~"io˘l_wøµîs.h
"

39 
	~"öãl_ªg.h
"

40 
	~"öãl_chù£t.h
"

41 
	~"vc4_drm.h
"

42 
	~"vc4_∑ckë.h
"

44 #i‡
NEW_CONTEXT_PARAM_NO_ERROR_CAPTURE_API


45 
	#LOCAL_CONTEXT_PARAM_NO_ERROR_CAPTURE
 0x4

	)

67 
uöt32_t
 
	$igt_vc4_gë_˛óªd_bo
(
fd
, 
size_t
 
size
, 
uöt32_t
 
˛órvÆ
)

70 
uöt32_t
 
width
 = 1024;

71 
uöt32_t
 
height
 = 
size
 / (
width
 * 4);

72 
uöt32_t
 
h™dÀ
 = 
	`igt_vc4_¸óã_bo
(
fd
, 
size
);

73 
drm_vc4_submô_˛
 
submô
 = {

74 .
cﬁ‹_wrôe
 = {

75 .
hödex
 = 0,

76 .
bôs
 = 
	`VC4_SET_FIELD
(
VC4_RENDER_CONFIG_FORMAT_RGBA8888
,

77 
VC4_RENDER_CONFIG_FORMAT
),

80 .
cﬁ‹_ªad
 = { .
hödex
 = ~0 },

81 .
zs_ªad
 = { .
hödex
 = ~0 },

82 .
zs_wrôe
 = { .
hödex
 = ~0 },

83 .
mßa_cﬁ‹_wrôe
 = { .
hödex
 = ~0 },

84 .
mßa_zs_wrôe
 = { .
hödex
 = ~0 },

86 .
bo_h™dÀs
 = 
	`to_u£r_poöãr
(&
h™dÀ
),

87 .
bo_h™dÀ_cou¡
 = 1,

88 .
width
 = width,

89 .
height
 = height,

90 .
max_x_tûe
 = 
	`ALIGN
(
width
, 64) / 64 - 1,

91 .
max_y_tûe
 = 
	`ALIGN
(
height
, 64) / 64 - 1,

92 .
˛ór_cﬁ‹
 = { 
˛órvÆ
, clearval },

93 .
Êags
 = 
VC4_SUBMIT_CL_USE_CLEAR_COLOR
,

96 
	`igt_as£π_eq_u32
(
width
 * 
height
 * 4, 
size
);

98 
	`do_io˘l
(
fd
, 
DRM_IOCTL_VC4_SUBMIT_CL
, &
submô
);

100  
h™dÀ
;

101 
	}
}

104 
	$igt_vc4_¸óã_bo
(
fd
, 
size_t
 
size
)

106 
drm_vc4_¸óã_bo
 
¸óã
 = {

107 .
size
 = size,

110 
	`do_io˘l
(
fd
, 
DRM_IOCTL_VC4_CREATE_BO
, &
¸óã
);

112  
¸óã
.
h™dÀ
;

113 
	}
}

116 
	$igt_vc4_mm≠_bo
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
size
, 
¥Ÿ
)

118 
drm_vc4_mm≠_bo
 
mm≠_bo
 = {

119 .
h™dÀ
 = handle,

121 *
±r
;

123 
	`do_io˘l
(
fd
, 
DRM_IOCTL_VC4_MMAP_BO
, &
mm≠_bo
);

125 
±r
 = 
	`mm≠
(0, 
size
, 
¥Ÿ
, 
MAP_SHARED
, 
fd
, 
mm≠_bo
.
off£t
);

126 i‡(
±r
 =
MAP_FAILED
)

127  
NULL
;

129  
±r
;

130 
	}
}

	@igt_vc4.h

24 #i‚de‡
IGT_VC4_H


25 
	#IGT_VC4_H


	)

27 
uöt32_t
 
igt_vc4_gë_˛óªd_bo
(
fd
, 
size_t
 
size
, uöt32_à
˛órvÆ
);

28 
igt_vc4_¸óã_bo
(
fd
, 
size_t
 
size
);

29 *
igt_vc4_mm≠_bo
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
size
, 
¥Ÿ
);

	@igt_vgem.c

24 
	~<sys/mm™.h
>

25 
	~<xf86drm.h
>

26 
	~<xf86drmMode.h
>

27 
	~<î∫o.h
>

29 
	~"igt_vgem.h
"

30 
	~"igt_c‹e.h
"

31 
	~"io˘l_wøµîs.h
"

45 
	$__vgem_¸óã
(
fd
, 
vgem_bo
 *
bo
)

47 
drm_mode_¸óã_dumb
 
¨g
;

49 
	`mem£t
(&
¨g
, 0, (arg));

50 
¨g
.
width
 = 
bo
->width;

51 
¨g
.
height
 = 
bo
->height;

52 
¨g
.
bµ
 = 
bo
->bpp;

54 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_MODE_CREATE_DUMB
, &
¨g
))

55  -
î∫o
;

57 
bo
->
h™dÀ
 = 
¨g
.handle;

58 
bo
->
pôch
 = 
¨g
.pitch;

59 
bo
->
size
 = 
¨g
.size;

62 
	}
}

64 
	$vgem_¸óã
(
fd
, 
vgem_bo
 *
bo
)

66 
	`igt_as£π_eq
(
	`__vgem_¸óã
(
fd
, 
bo
), 0);

67 
	}
}

69 *
	$__vgem_mm≠
(
fd
, 
vgem_bo
 *
bo
, 
¥Ÿ
)

71 
drm_mode_m≠_dumb
 
¨g
;

72 *
±r
;

74 
	`mem£t
(&
¨g
, 0, (arg));

75 
¨g
.
h™dÀ
 = 
bo
->handle;

76 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_MODE_MAP_DUMB
, &
¨g
))

77  
NULL
;

79 
±r
 = 
	`mm≠64
(0, 
bo
->
size
, 
¥Ÿ
, 
MAP_SHARED
, 
fd
, 
¨g
.
off£t
);

80 i‡(
±r
 =
MAP_FAILED
)

81  
NULL
;

83  
±r
;

84 
	}
}

86 *
	$vgem_mm≠
(
fd
, 
vgem_bo
 *
bo
, 
¥Ÿ
)

88 *
±r
;

90 
	`igt_as£π_f
((
±r
 = 
	`__vgem_mm≠
(
fd
, 
bo
, 
¥Ÿ
)),

92 
fd
, 
bo
->
h™dÀ
, 
¥Ÿ
);

94  
±r
;

95 
	}
}

97 
	#LOCAL_VGEM_FENCE_ATTACH
 0x1

	)

98 
	#LOCAL_VGEM_FENCE_SIGNAL
 0x2

	)

100 
	#LOCAL_IOCTL_VGEM_FENCE_ATTACH
 
	`DRM_IOWR
–
DRM_COMMAND_BASE
 + 
LOCAL_VGEM_FENCE_ATTACH
, 
loˇl_vgem_„n˚_©èch
)

	)

101 
	#LOCAL_IOCTL_VGEM_FENCE_SIGNAL
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
LOCAL_VGEM_FENCE_SIGNAL
, 
loˇl_vgem_„n˚_sig«l
)

	)

103 
	sloˇl_vgem_„n˚_©èch
 {

104 
uöt32_t
 
	mh™dÀ
;

105 
uöt32_t
 
	mÊags
;

106 
uöt32_t
 
	mout_„n˚
;

107 
uöt32_t
 
	m∑d
;

110 
	sloˇl_vgem_„n˚_sig«l
 {

111 
uöt32_t
 
	m„n˚
;

112 
uöt32_t
 
	mÊags
;

115 
boﬁ
 
	$vgem_has_„n˚s
(
fd
)

117 
loˇl_vgem_„n˚_sig«l
 
¨g
;

118 
îr
;

120 
îr
 = 0;

121 
	`mem£t
(&
¨g
, 0, (arg));

122 i‡(
	`drmIo˘l
(
fd
, 
LOCAL_IOCTL_VGEM_FENCE_SIGNAL
, &
¨g
))

123 
îr
 = -
î∫o
;

124 
î∫o
 = 0;

125  
îr
 =-
ENOENT
;

126 
	}
}

128 
	$__vgem_„n˚_©èch
(
fd
, 
loˇl_vgem_„n˚_©èch
 *
¨g
)

130 
îr
 = 0;

131 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_VGEM_FENCE_ATTACH
, 
¨g
))

132 
îr
 = -
î∫o
;

133 
î∫o
 = 0;

134  
îr
;

135 
	}
}

137 
boﬁ
 
	$vgem_„n˚_has_Êag
(
fd
, 
Êags
)

139 
loˇl_vgem_„n˚_©èch
 
¨g
;

140 
vgem_bo
 
bo
;

141 
boﬁ
 
ªt
 = 
Ál£
;

143 
	`mem£t
(&
bo
, 0, (bo));

144 
bo
.
width
 = 1;

145 
bo
.
height
 = 1;

146 
bo
.
bµ
 = 32;

147 
	`vgem_¸óã
(
fd
, &
bo
);

149 
	`mem£t
(&
¨g
, 0, (arg));

150 
¨g
.
h™dÀ
 = 
bo
.handle;

151 
¨g
.
Êags
 = flags;

152 i‡(
	`__vgem_„n˚_©èch
(
fd
, &
¨g
) == 0) {

153 
	`vgem_„n˚_sig«l
(
fd
, 
¨g
.
out_„n˚
);

154 
ªt
 = 
åue
;

156 
	`gem_˛o£
(
fd
, 
bo
.
h™dÀ
);

158  
ªt
;

159 
	}
}

161 
uöt32_t
 
	$vgem_„n˚_©èch
(
fd
, 
vgem_bo
 *
bo
, 
Êags
)

163 
loˇl_vgem_„n˚_©èch
 
¨g
;

165 
	`mem£t
(&
¨g
, 0, (arg));

166 
¨g
.
h™dÀ
 = 
bo
->handle;

167 
¨g
.
Êags
 = flags;

168 
	`igt_as£π_eq
(
	`__vgem_„n˚_©èch
(
fd
, &
¨g
), 0);

169  
¨g
.
out_„n˚
;

170 
	}
}

172 
	$io˘l_vgem_„n˚_sig«l
(
fd
, 
loˇl_vgem_„n˚_sig«l
 *
¨g
)

174 
îr
 = 0;

175 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_VGEM_FENCE_SIGNAL
, 
¨g
))

176 
îr
 = -
î∫o
;

177 
î∫o
 = 0;

178  
îr
;

179 
	}
}

181 
	$__vgem_„n˚_sig«l
(
fd
, 
uöt32_t
 
„n˚
)

183 
loˇl_vgem_„n˚_sig«l
 
¨g
;

185 
	`mem£t
(&
¨g
, 0, (arg));

186 
¨g
.
„n˚
 = fence;

188  
	`io˘l_vgem_„n˚_sig«l
(
fd
, &
¨g
);

189 
	}
}

191 
	$vgem_„n˚_sig«l
(
fd
, 
uöt32_t
 
„n˚
)

193 
	`igt_as£π_eq
(
	`__vgem_„n˚_sig«l
(
fd
, 
„n˚
), 0);

194 
	}
}

	@igt_vgem.h

24 #i‚de‡
IGT_VGEM_H


25 
	#IGT_VGEM_H


	)

27 
	~<°döt.h
>

28 
	~<°dboﬁ.h
>

30 
	svgem_bo
 {

31 
uöt32_t
 
	mh™dÀ
;

32 
uöt32_t
 
	mwidth
, 
	mheight
;

33 
uöt32_t
 
	mbµ
, 
	mpôch
;

34 
uöt64_t
 
	msize
;

37 
__vgem_¸óã
(
fd
, 
vgem_bo
 *
bo
);

38 
vgem_¸óã
(
fd
, 
vgem_bo
 *
bo
);

40 *
__vgem_mm≠
(
fd
, 
vgem_bo
 *
bo
, 
¥Ÿ
);

41 *
vgem_mm≠
(
fd
, 
vgem_bo
 *
bo
, 
¥Ÿ
);

43 
boﬁ
 
vgem_has_„n˚s
(
fd
);

44 
boﬁ
 
vgem_„n˚_has_Êag
(
fd
, 
Êags
);

45 
uöt32_t
 
vgem_„n˚_©èch
(
fd
, 
vgem_bo
 *
bo
, 
Êags
);

46 
	#VGEM_FENCE_WRITE
 0x1

	)

47 
	#WIP_VGEM_FENCE_NOTIMEOUT
 0x2

	)

48 
__vgem_„n˚_sig«l
(
fd
, 
uöt32_t
 
„n˚
);

49 
vgem_„n˚_sig«l
(
fd
, 
uöt32_t
 
„n˚
);

	@igt_x86.c

28 
	~"c⁄fig.h
"

30 #ifde‡
HAVE_CPUID_H


31 
	~<˝uid.h
>

33 
	#__gë_˝uid_max
(
x
, 
y
Ë0

	)

34 
	#__˝uid
(
Àvñ
, 
a
, 
b
, 
c
, 
d
Ë®b = c = d = 0

	)

35 
	#__˝uid_cou¡
(
Àvñ
, 
cou¡
, 
a
, 
b
, 
c
, 
d
Ë®b = c = d = 0

	)

38 
	~"igt_x86.h
"

39 
	~<°dio.h
>

48 
	#BASIC_CPUID
 0x0

	)

49 
	#EXTENDED_CPUID
 0x80000000

	)

51 #i‚de‡
bô_MMX


52 
	#bô_MMX
 (1 << 23)

	)

55 #i‚de‡
bô_SSE


56 
	#bô_SSE
 (1 << 25)

	)

59 #i‚de‡
bô_SSE2


60 
	#bô_SSE2
 (1 << 26)

	)

63 #i‚de‡
bô_SSE3


64 
	#bô_SSE3
 (1 << 0)

	)

67 #i‚de‡
bô_SSSE3


68 
	#bô_SSSE3
 (1 << 9)

	)

71 #i‚de‡
bô_SSE4_1


72 
	#bô_SSE4_1
 (1 << 19)

	)

75 #i‚de‡
bô_SSE4_2


76 
	#bô_SSE4_2
 (1 << 20)

	)

79 #i‚de‡
bô_OSXSAVE


80 
	#bô_OSXSAVE
 (1 << 27)

	)

83 #i‚de‡
bô_AVX


84 
	#bô_AVX
 (1 << 28)

	)

87 #i‚de‡
bô_AVX2


88 
	#bô_AVX2
 (1<<5)

	)

91 
	#xgëbv
(
ödex
,
óx
,
edx
) \

92 
	`__asm__
 ("xgëbv" : "˜"(
óx
), "=d"(
edx
Ë: "c" (
ödex
))

	)

94 
	#has_YMM
 0x1

	)

96 
	$igt_x86_„©uªs
()

98 
max
 = 
	`__gë_˝uid_max
(
BASIC_CPUID
, 0);

99 
óx
, 
ebx
, 
ecx
, 
edx
;

100 
„©uªs
 = 0;

101 
exåa
 = 0;

103 i‡(
max
 >= 1) {

104 
	`__˝uid
(1, 
óx
, 
ebx
, 
ecx
, 
edx
);

106 i‡(
ecx
 & 
bô_SSE3
)

107 
„©uªs
 |
SSE3
;

109 i‡(
ecx
 & 
bô_SSSE3
)

110 
„©uªs
 |
SSSE3
;

112 i‡(
ecx
 & 
bô_SSE4_1
)

113 
„©uªs
 |
SSE4_1
;

115 i‡(
ecx
 & 
bô_SSE4_2
)

116 
„©uªs
 |
SSE4_2
;

118 i‡(
ecx
 & 
bô_OSXSAVE
) {

119 
bv_óx
, 
bv_ecx
;

120 
	`xgëbv
(0, 
bv_óx
, 
bv_ecx
);

121 i‡((
bv_óx
 & 6) == 6)

122 
exåa
 |
has_YMM
;

125 i‡((
exåa
 & 
has_YMM
Ë&& (
ecx
 & 
bô_AVX
))

126 
„©uªs
 |
AVX
;

128 i‡(
edx
 & 
bô_MMX
)

129 
„©uªs
 |
MMX
;

131 i‡(
edx
 & 
bô_SSE
)

132 
„©uªs
 |
SSE
;

134 i‡(
edx
 & 
bô_SSE2
)

135 
„©uªs
 |
SSE2
;

138 i‡(
max
 >= 7) {

139 
	`__˝uid_cou¡
(7, 0, 
óx
, 
ebx
, 
ecx
, 
edx
);

141 i‡((
exåa
 & 
has_YMM
Ë&& (
ebx
 & 
bô_AVX2
))

142 
„©uªs
 |
AVX2
;

145  
„©uªs
;

146 
	}
}

148 *
	$igt_x86_„©uªs_to_°rög
(
„©uªs
, *
löe
)

150 *
ªt
 = 
löe
;

152 #ifde‡
__x86_64__


153 
löe
 +
	`•rötf
(line, "x86-64");

155 
löe
 +
	`•rötf
(line, "x86");

158 i‡(
„©uªs
 & 
SSE2
)

159 
löe
 +
	`•rötf
(line, ", sse2");

160 i‡(
„©uªs
 & 
SSE3
)

161 
löe
 +
	`•rötf
(line, ", sse3");

162 i‡(
„©uªs
 & 
SSSE3
)

163 
löe
 +
	`•rötf
(line, ", ssse3");

164 i‡(
„©uªs
 & 
SSE4_1
)

165 
löe
 +
	`•rötf
(line, ", sse4.1");

166 i‡(
„©uªs
 & 
SSE4_2
)

167 
löe
 +
	`•rötf
(line, ", sse4.2");

168 i‡(
„©uªs
 & 
AVX
)

169 
löe
 +
	`•rötf
(line, ",ávx");

170 i‡(
„©uªs
 & 
AVX2
)

171 
löe
 +
	`•rötf
(line, ",ávx2");

173  
ªt
;

174 
	}
}

	@igt_x86.h

30 #i‚de‡
IGT_X86_H


31 
	#IGT_X86_H


	)

33 
	#MMX
 0x1

	)

34 
	#SSE
 0x2

	)

35 
	#SSE2
 0x4

	)

36 
	#SSE3
 0x8

	)

37 
	#SSSE3
 0x10

	)

38 
	#SSE4_1
 0x20

	)

39 
	#SSE4_2
 0x40

	)

40 
	#AVX
 0x80

	)

41 
	#AVX2
 0x100

	)

43 #i‡
deföed
(
__x86_64__
)

44 
igt_x86_„©uªs
();

45 *
igt_x86_„©uªs_to_°rög
(
„©uªs
, *
löe
);

47 
ölöe
 
	$igt_x86_„©uªs
()

50 
	}
}

51 
ölöe
 *
	$igt_x86_„©uªs_to_°rög
(
„©uªs
, *
löe
)

53 
löe
[0] = 0;

54  
löe
;

55 
	}
}

	@instdone.c

28 
	~<as£π.h
>

29 
	~"ö°d⁄e.h
"

31 
	~"öãl_chù£t.h
"

32 
	~"öãl_ªg.h
"

33 
	~"igt_c‹e.h
"

36 
	#IDCT_DONE
 (1 << 30)

	)

37 
	#IQ_DONE
 (1 << 29)

	)

38 
	#PR_DONE
 (1 << 28)

	)

39 
	#VLD_DONE
 (1 << 27)

	)

40 
	#IP_DONE
 (1 << 26)

	)

41 
	#FBC_DONE
 (1 << 25)

	)

42 
	#BINNER_DONE
 (1 << 24)

	)

43 
	#SF_DONE
 (1 << 23)

	)

44 
	#SE_DONE
 (1 << 22)

	)

45 
	#WM_DONE
 (1 << 21)

	)

46 
	#IZ_DONE
 (1 << 20)

	)

47 
	#PERSPECTIVE_INTERP_DONE
 (1 << 19)

	)

48 
	#DISPATCHER_DONE
 (1 << 18)

	)

49 
	#PROJECTION_DONE
 (1 << 17)

	)

50 
	#DEPENDENT_ADDRESS_DONE
 (1 << 16)

	)

51 
	#QUAD_CACHE_DONE
 (1 << 15)

	)

52 
	#TEXTURE_FETCH_DONE
 (1 << 14)

	)

53 
	#TEXTURE_DECOMPRESS_DONE
 (1 << 13)

	)

54 
	#SAMPLER_CACHE_DONE
 (1 << 12)

	)

55 
	#FILTER_DONE
 (1 << 11)

	)

56 
	#BYPASS_FIFO_DONE
 (1 << 10)

	)

57 
	#PS_DONE
 (1 << 9)

	)

58 
	#CC_DONE
 (1 << 8)

	)

59 
	#MAP_FILTER_DONE
 (1 << 7)

	)

60 
	#MAP_L2_IDLE
 (1 << 6)

	)

61 
	#RING_2_ENABLE
 (1 << 2)

	)

62 
	#RING_1_ENABLE
 (1 << 1)

	)

63 
	#RING_0_ENABLE
 (1 << 0)

	)

65 
	#I830_GMBUS_DONE
 (1 << 26)

	)

66 
	#I830_FBC_DONE
 (1 << 25)

	)

67 
	#I830_BINNER_DONE
 (1 << 24)

	)

68 
	#I830_MPEG_DONE
 (1 << 23)

	)

69 
	#I830_MECO_DONE
 (1 << 22)

	)

70 
	#I830_MCD_DONE
 (1 << 21)

	)

71 
	#I830_MCSTP_DONE
 (1 << 20)

	)

72 
	#I830_CC_DONE
 (1 << 19)

	)

73 
	#I830_DG_DONE
 (1 << 18)

	)

74 
	#I830_DCMP_DONE
 (1 << 17)

	)

75 
	#I830_FTCH_DONE
 (1 << 16)

	)

76 
	#I830_IT_DONE
 (1 << 15)

	)

77 
	#I830_MG_DONE
 (1 << 14)

	)

78 
	#I830_MEC_DONE
 (1 << 13)

	)

79 
	#I830_PC_DONE
 (1 << 12)

	)

80 
	#I830_QCC_DONE
 (1 << 11)

	)

81 
	#I830_TB_DONE
 (1 << 10)

	)

82 
	#I830_WM_DONE
 (1 << 9)

	)

83 
	#I830_EF_DONE
 (1 << 8)

	)

84 
	#I830_BLITTER_DONE
 (1 << 7)

	)

85 
	#I830_MAP_L2_DONE
 (1 << 6)

	)

86 
	#I830_SECONDARY_RING_3_DONE
 (1 << 5)

	)

87 
	#I830_SECONDARY_RING_2_DONE
 (1 << 4)

	)

88 
	#I830_SECONDARY_RING_1_DONE
 (1 << 3)

	)

89 
	#I830_SECONDARY_RING_0_DONE
 (1 << 2)

	)

90 
	#I830_PRIMARY_RING_1_DONE
 (1 << 1)

	)

91 
	#I830_PRIMARY_RING_0_DONE
 (1 << 0)

	)

94 
	#I965_ROW_0_EU_0_DONE
 (1 << 31)

	)

95 
	#I965_ROW_0_EU_1_DONE
 (1 << 30)

	)

96 
	#I965_ROW_0_EU_2_DONE
 (1 << 29)

	)

97 
	#I965_ROW_0_EU_3_DONE
 (1 << 28)

	)

98 
	#I965_ROW_1_EU_0_DONE
 (1 << 27)

	)

99 
	#I965_ROW_1_EU_1_DONE
 (1 << 26)

	)

100 
	#I965_ROW_1_EU_2_DONE
 (1 << 25)

	)

101 
	#I965_ROW_1_EU_3_DONE
 (1 << 24)

	)

102 
	#I965_SF_DONE
 (1 << 23)

	)

103 
	#I965_SE_DONE
 (1 << 22)

	)

104 
	#I965_WM_DONE
 (1 << 21)

	)

105 
	#I965_DISPATCHER_DONE
 (1 << 18)

	)

106 
	#I965_PROJECTION_DONE
 (1 << 17)

	)

107 
	#I965_DG_DONE
 (1 << 16)

	)

108 
	#I965_QUAD_CACHE_DONE
 (1 << 15)

	)

109 
	#I965_TEXTURE_FETCH_DONE
 (1 << 14)

	)

110 
	#I965_TEXTURE_DECOMPRESS_DONE
 (1 << 13)

	)

111 
	#I965_SAMPLER_CACHE_DONE
 (1 << 12)

	)

112 
	#I965_FILTER_DONE
 (1 << 11)

	)

113 
	#I965_BYPASS_DONE
 (1 << 10)

	)

114 
	#I965_PS_DONE
 (1 << 9)

	)

115 
	#I965_CC_DONE
 (1 << 8)

	)

116 
	#I965_MAP_FILTER_DONE
 (1 << 7)

	)

117 
	#I965_MAP_L2_IDLE
 (1 << 6)

	)

118 
	#I965_MA_ROW_0_DONE
 (1 << 5)

	)

119 
	#I965_MA_ROW_1_DONE
 (1 << 4)

	)

120 
	#I965_IC_ROW_0_DONE
 (1 << 3)

	)

121 
	#I965_IC_ROW_1_DONE
 (1 << 2)

	)

122 
	#I965_CP_DONE
 (1 << 1)

	)

123 
	#I965_RING_0_ENABLE
 (1 << 0)

	)

125 
	#ILK_ROW_0_EU_0_DONE
 (1 << 31)

	)

126 
	#ILK_ROW_0_EU_1_DONE
 (1 << 30)

	)

127 
	#ILK_ROW_0_EU_2_DONE
 (1 << 29)

	)

128 
	#ILK_ROW_0_EU_3_DONE
 (1 << 28)

	)

129 
	#ILK_ROW_1_EU_0_DONE
 (1 << 27)

	)

130 
	#ILK_ROW_1_EU_1_DONE
 (1 << 26)

	)

131 
	#ILK_ROW_1_EU_2_DONE
 (1 << 25)

	)

132 
	#ILK_ROW_1_EU_3_DONE
 (1 << 24)

	)

133 
	#ILK_ROW_2_EU_0_DONE
 (1 << 23)

	)

134 
	#ILK_ROW_2_EU_1_DONE
 (1 << 22)

	)

135 
	#ILK_ROW_2_EU_2_DONE
 (1 << 21)

	)

136 
	#ILK_ROW_2_EU_3_DONE
 (1 << 20)

	)

137 
	#ILK_VCP_DONE
 (1 << 19)

	)

138 
	#ILK_ROW_0_MATH_DONE
 (1 << 18)

	)

139 
	#ILK_ROW_1_MATH_DONE
 (1 << 17)

	)

140 
	#ILK_ROW_2_MATH_DONE
 (1 << 16)

	)

141 
	#ILK_VC1_DONE
 (1 << 15)

	)

142 
	#ILK_ROW_0_MA_DONE
 (1 << 14)

	)

143 
	#ILK_ROW_1_MA_DONE
 (1 << 13)

	)

144 
	#ILK_ROW_2_MA_DONE
 (1 << 12)

	)

145 
	#ILK_ROW_0_ISC_DONE
 (1 << 11)

	)

146 
	#ILK_ROW_1_ISC_DONE
 (1 << 10)

	)

147 
	#ILK_ROW_2_ISC_DONE
 (1 << 9)

	)

148 
	#ILK_VFE_DONE
 (1 << 8)

	)

149 
	#ILK_TD_DONE
 (1 << 7)

	)

150 
	#ILK_SVTS_DONE
 (1 << 6)

	)

151 
	#ILK_TS_DONE
 (1 << 5)

	)

152 
	#ILK_GW_DONE
 (1 << 4)

	)

153 
	#ILK_AI_DONE
 (1 << 3)

	)

154 
	#ILK_AC_DONE
 (1 << 2)

	)

155 
	#ILK_AM_DONE
 (1 << 1)

	)

157 
	#GEN6_MA_3_DONE
 (1 << 31)

	)

158 
	#GEN6_EU_32_DONE
 (1 << 30)

	)

159 
	#GEN6_EU_31_DONE
 (1 << 29)

	)

160 
	#GEN6_EU_30_DONE
 (1 << 28)

	)

161 
	#GEN6_MA_2_DONE
 (1 << 27)

	)

162 
	#GEN6_EU_22_DONE
 (1 << 26)

	)

163 
	#GEN6_EU_21_DONE
 (1 << 25)

	)

164 
	#GEN6_EU_20_DONE
 (1 << 24)

	)

165 
	#GEN6_MA_1_DONE
 (1 << 23)

	)

166 
	#GEN6_EU_12_DONE
 (1 << 22)

	)

167 
	#GEN6_EU_11_DONE
 (1 << 21)

	)

168 
	#GEN6_EU_10_DONE
 (1 << 20)

	)

169 
	#GEN6_MA_0_DONE
 (1 << 19)

	)

170 
	#GEN6_EU_02_DONE
 (1 << 18)

	)

171 
	#GEN6_EU_01_DONE
 (1 << 17)

	)

172 
	#GEN6_EU_00_DONE
 (1 << 16)

	)

173 
	#GEN6_IC_3_DONE
 (1 << 15)

	)

174 
	#GEN6_IC_2_DONE
 (1 << 14)

	)

175 
	#GEN6_IC_1_DONE
 (1 << 13)

	)

176 
	#GEN6_IC_0_DONE
 (1 << 12)

	)

177 
	#GEN6_ISC_10_DONE
 (1 << 11)

	)

178 
	#GEN6_ISC_32_DONE
 (1 << 10)

	)

179 
	#GEN6_VSC_DONE
 (1 << 9)

	)

180 
	#GEN6_IEF_DONE
 (1 << 8)

	)

181 
	#GEN6_VFE_DONE
 (1 << 7)

	)

182 
	#GEN6_TD_DONE
 (1 << 6)

	)

183 
	#GEN6_TS_DONE
 (1 << 4)

	)

184 
	#GEN6_GW_DONE
 (1 << 3)

	)

185 
	#GEN6_HIZ_DONE
 (1 << 2)

	)

186 
	#GEN6_AVS_DONE
 (1 << 1)

	)

189 
	#I965_GW_CS_DONE_CR
 (1 << 19)

	)

190 
	#I965_SVSM_CS_DONE_CR
 (1 << 18)

	)

191 
	#I965_SVDW_CS_DONE_CR
 (1 << 17)

	)

192 
	#I965_SVDR_CS_DONE_CR
 (1 << 16)

	)

193 
	#I965_SVRW_CS_DONE_CR
 (1 << 15)

	)

194 
	#I965_SVRR_CS_DONE_CR
 (1 << 14)

	)

195 
	#I965_SVTW_CS_DONE_CR
 (1 << 13)

	)

196 
	#I965_MASM_CS_DONE_CR
 (1 << 12)

	)

197 
	#I965_MASF_CS_DONE_CR
 (1 << 11)

	)

198 
	#I965_MAW_CS_DONE_CR
 (1 << 10)

	)

199 
	#I965_EM1_CS_DONE_CR
 (1 << 9)

	)

200 
	#I965_EM0_CS_DONE_CR
 (1 << 8)

	)

201 
	#I965_UC1_CS_DONE
 (1 << 7)

	)

202 
	#I965_UC0_CS_DONE
 (1 << 6)

	)

203 
	#I965_URB_CS_DONE
 (1 << 5)

	)

204 
	#I965_ISC_CS_DONE
 (1 << 4)

	)

205 
	#I965_CL_CS_DONE
 (1 << 3)

	)

206 
	#I965_GS_CS_DONE
 (1 << 2)

	)

207 
	#I965_VS0_CS_DONE
 (1 << 1)

	)

208 
	#I965_VF_CS_DONE
 (1 << 0)

	)

210 
	#G4X_BCS_DONE
 (1 << 31)

	)

211 
	#G4X_CS_DONE
 (1 << 30)

	)

212 
	#G4X_MASF_DONE
 (1 << 29)

	)

213 
	#G4X_SVDW_DONE
 (1 << 28)

	)

214 
	#G4X_SVDR_DONE
 (1 << 27)

	)

215 
	#G4X_SVRW_DONE
 (1 << 26)

	)

216 
	#G4X_SVRR_DONE
 (1 << 25)

	)

217 
	#G4X_ISC_DONE
 (1 << 24)

	)

218 
	#G4X_MT_DONE
 (1 << 23)

	)

219 
	#G4X_RC_DONE
 (1 << 22)

	)

220 
	#G4X_DAP_DONE
 (1 << 21)

	)

221 
	#G4X_MAWB_DONE
 (1 << 20)

	)

222 
	#G4X_MT_IDLE
 (1 << 19)

	)

223 
	#G4X_GBLT_BUSY
 (1 << 18)

	)

224 
	#G4X_SVSM_DONE
 (1 << 17)

	)

225 
	#G4X_MASM_DONE
 (1 << 16)

	)

226 
	#G4X_QC_DONE
 (1 << 15)

	)

227 
	#G4X_FL_DONE
 (1 << 14)

	)

228 
	#G4X_SC_DONE
 (1 << 13)

	)

229 
	#G4X_DM_DONE
 (1 << 12)

	)

230 
	#G4X_FT_DONE
 (1 << 11)

	)

231 
	#G4X_DG_DONE
 (1 << 10)

	)

232 
	#G4X_SI_DONE
 (1 << 9)

	)

233 
	#G4X_SO_DONE
 (1 << 8)

	)

234 
	#G4X_PL_DONE
 (1 << 7)

	)

235 
	#G4X_WIZ_DONE
 (1 << 6)

	)

236 
	#G4X_URB_DONE
 (1 << 5)

	)

237 
	#G4X_SF_DONE
 (1 << 4)

	)

238 
	#G4X_CL_DONE
 (1 << 3)

	)

239 
	#G4X_GS_DONE
 (1 << 2)

	)

240 
	#G4X_VS0_DONE
 (1 << 1)

	)

241 
	#G4X_VF_DONE
 (1 << 0)

	)

244 
	#GEN6_GAM_DONE
 (1 << 31)

	)

245 
	#GEN6_CS_DONE
 (1 << 30)

	)

246 
	#GEN6_WMBE_DONE
 (1 << 29)

	)

247 
	#GEN6_SVRW_DONE
 (1 << 28)

	)

248 
	#GEN6_RCC_DONE
 (1 << 27)

	)

249 
	#GEN6_SVG_DONE
 (1 << 26)

	)

250 
	#GEN6_ISC_DONE
 (1 << 25)

	)

251 
	#GEN6_MT_DONE
 (1 << 24)

	)

252 
	#GEN6_RCPFE_DONE
 (1 << 23)

	)

253 
	#GEN6_RCPBE_DONE
 (1 << 22)

	)

254 
	#GEN6_VDI_DONE
 (1 << 21)

	)

255 
	#GEN6_RCZ_DONE
 (1 << 20)

	)

256 
	#GEN6_DAP_DONE
 (1 << 19)

	)

257 
	#GEN6_PSD_DONE
 (1 << 18)

	)

258 
	#GEN6_IZ_DONE
 (1 << 17)

	)

259 
	#GEN6_WMFE_DONE
 (1 << 16)

	)

260 
	#GEN6_SVSM_DONE
 (1 << 15)

	)

261 
	#GEN6_QC_DONE
 (1 << 14)

	)

262 
	#GEN6_FL_DONE
 (1 << 13)

	)

263 
	#GEN6_SC_DONE
 (1 << 12)

	)

264 
	#GEN6_DM_DONE
 (1 << 11)

	)

265 
	#GEN6_FT_DONE
 (1 << 10)

	)

266 
	#GEN6_DG_DONE
 (1 << 9)

	)

267 
	#GEN6_SI_DONE
 (1 << 8)

	)

268 
	#GEN6_SO_DONE
 (1 << 7)

	)

269 
	#GEN6_PL_DONE
 (1 << 6)

	)

270 
	#GEN6_VME_DONE
 (1 << 5)

	)

271 
	#GEN6_SF_DONE
 (1 << 4)

	)

272 
	#GEN6_CL_DONE
 (1 << 3)

	)

273 
	#GEN6_GS_DONE
 (1 << 2)

	)

274 
	#GEN6_VS0_DONE
 (1 << 1)

	)

275 
	#GEN6_VF_DONE
 (1 << 0)

	)

277 
ö°d⁄e_bô
 
	gö°d⁄e_bôs
[
MAX_INSTDONE_BITS
];

278 
	gnum_ö°d⁄e_bôs
 = 0;

281 
	$add_ö°d⁄e_bô
(
uöt32_t
 
ªg
, uöt32_à
bô
, c⁄° *
«me
)

283 
	`igt_as£π
(
num_ö°d⁄e_bôs
 < 
MAX_INSTDONE_BITS
);

284 
ö°d⁄e_bôs
[
num_ö°d⁄e_bôs
].
ªg
 =Ñeg;

285 
ö°d⁄e_bôs
[
num_ö°d⁄e_bôs
].
bô
 = bit;

286 
ö°d⁄e_bôs
[
num_ö°d⁄e_bôs
].
«me
 =Çame;

287 
num_ö°d⁄e_bôs
++;

288 
	}
}

291 
	$gí3_ö°d⁄e_bô
(
uöt32_t
 
bô
, c⁄° *
«me
)

293 
	`add_ö°d⁄e_bô
(
INSTDONE
, 
bô
, 
«me
);

294 
	}
}

297 
	$gí4_ö°d⁄e_bô
(
uöt32_t
 
bô
, c⁄° *
«me
)

299 
	`add_ö°d⁄e_bô
(
INSTDONE_I965
, 
bô
, 
«me
);

300 
	}
}

303 
	$gí4_ö°d⁄e1_bô
(
uöt32_t
 
bô
, c⁄° *
«me
)

305 
	`add_ö°d⁄e_bô
(
INSTDONE_1
, 
bô
, 
«me
);

306 
	}
}

309 
	$gí6_ö°d⁄e1_bô
(
uöt32_t
 
bô
, c⁄° *
«me
)

311 
	`add_ö°d⁄e_bô
(
INSTDONE_I965
, 
bô
, 
«me
);

312 
	}
}

315 
	$gí6_ö°d⁄e2_bô
(
uöt32_t
 
bô
, c⁄° *
«me
)

317 
	`add_ö°d⁄e_bô
(
INSTDONE_1
, 
bô
, 
«me
);

318 
	}
}

321 
	$öô_g965_ö°d⁄e1
()

323 
	`gí4_ö°d⁄e1_bô
(
I965_GW_CS_DONE_CR
, "GW CS CR");

324 
	`gí4_ö°d⁄e1_bô
(
I965_SVSM_CS_DONE_CR
, "SVSM CS CR");

325 
	`gí4_ö°d⁄e1_bô
(
I965_SVDW_CS_DONE_CR
, "SVDW CS CR");

326 
	`gí4_ö°d⁄e1_bô
(
I965_SVDR_CS_DONE_CR
, "SVDR CS CR");

327 
	`gí4_ö°d⁄e1_bô
(
I965_SVRW_CS_DONE_CR
, "SVRW CS CR");

328 
	`gí4_ö°d⁄e1_bô
(
I965_SVRR_CS_DONE_CR
, "SVRR CS CR");

329 
	`gí4_ö°d⁄e1_bô
(
I965_SVTW_CS_DONE_CR
, "SVTW CS CR");

330 
	`gí4_ö°d⁄e1_bô
(
I965_MASM_CS_DONE_CR
, "MASM CS CR");

331 
	`gí4_ö°d⁄e1_bô
(
I965_MASF_CS_DONE_CR
, "MASF CS CR");

332 
	`gí4_ö°d⁄e1_bô
(
I965_MAW_CS_DONE_CR
, "MAW CS CR");

333 
	`gí4_ö°d⁄e1_bô
(
I965_EM1_CS_DONE_CR
, "EM1 CS CR");

334 
	`gí4_ö°d⁄e1_bô
(
I965_EM0_CS_DONE_CR
, "EM0 CS CR");

335 
	`gí4_ö°d⁄e1_bô
(
I965_UC1_CS_DONE
, "UC1 CS");

336 
	`gí4_ö°d⁄e1_bô
(
I965_UC0_CS_DONE
, "UC0 CS");

337 
	`gí4_ö°d⁄e1_bô
(
I965_URB_CS_DONE
, "URB CS");

338 
	`gí4_ö°d⁄e1_bô
(
I965_ISC_CS_DONE
, "ISC CS");

339 
	`gí4_ö°d⁄e1_bô
(
I965_CL_CS_DONE
, "CL CS");

340 
	`gí4_ö°d⁄e1_bô
(
I965_GS_CS_DONE
, "GS CS");

341 
	`gí4_ö°d⁄e1_bô
(
I965_VS0_CS_DONE
, "VS0 CS");

342 
	`gí4_ö°d⁄e1_bô
(
I965_VF_CS_DONE
, "VF CS");

343 
	}
}

346 
	$öô_g4x_ö°d⁄e1
()

348 
	`gí4_ö°d⁄e1_bô
(
G4X_BCS_DONE
, "BCS");

349 
	`gí4_ö°d⁄e1_bô
(
G4X_CS_DONE
, "CS");

350 
	`gí4_ö°d⁄e1_bô
(
G4X_MASF_DONE
, "MASF");

351 
	`gí4_ö°d⁄e1_bô
(
G4X_SVDW_DONE
, "SVDW");

352 
	`gí4_ö°d⁄e1_bô
(
G4X_SVDR_DONE
, "SVDR");

353 
	`gí4_ö°d⁄e1_bô
(
G4X_SVRW_DONE
, "SVRW");

354 
	`gí4_ö°d⁄e1_bô
(
G4X_SVRR_DONE
, "SVRR");

355 
	`gí4_ö°d⁄e1_bô
(
G4X_ISC_DONE
, "ISC");

356 
	`gí4_ö°d⁄e1_bô
(
G4X_MT_DONE
, "MT");

357 
	`gí4_ö°d⁄e1_bô
(
G4X_RC_DONE
, "RC");

358 
	`gí4_ö°d⁄e1_bô
(
G4X_DAP_DONE
, "DAP");

359 
	`gí4_ö°d⁄e1_bô
(
G4X_MAWB_DONE
, "MAWB");

360 
	`gí4_ö°d⁄e1_bô
(
G4X_MT_IDLE
, "MT idle");

362 
	`gí4_ö°d⁄e1_bô
(
G4X_SVSM_DONE
, "SVSM");

363 
	`gí4_ö°d⁄e1_bô
(
G4X_MASM_DONE
, "MASM");

364 
	`gí4_ö°d⁄e1_bô
(
G4X_QC_DONE
, "QC");

365 
	`gí4_ö°d⁄e1_bô
(
G4X_FL_DONE
, "FL");

366 
	`gí4_ö°d⁄e1_bô
(
G4X_SC_DONE
, "SC");

367 
	`gí4_ö°d⁄e1_bô
(
G4X_DM_DONE
, "DM");

368 
	`gí4_ö°d⁄e1_bô
(
G4X_FT_DONE
, "FT");

369 
	`gí4_ö°d⁄e1_bô
(
G4X_DG_DONE
, "DG");

370 
	`gí4_ö°d⁄e1_bô
(
G4X_SI_DONE
, "SI");

371 
	`gí4_ö°d⁄e1_bô
(
G4X_SO_DONE
, "SO");

372 
	`gí4_ö°d⁄e1_bô
(
G4X_PL_DONE
, "PL");

373 
	`gí4_ö°d⁄e1_bô
(
G4X_WIZ_DONE
, "WIZ");

374 
	`gí4_ö°d⁄e1_bô
(
G4X_URB_DONE
, "URB");

375 
	`gí4_ö°d⁄e1_bô
(
G4X_SF_DONE
, "SF");

376 
	`gí4_ö°d⁄e1_bô
(
G4X_CL_DONE
, "CL");

377 
	`gí4_ö°d⁄e1_bô
(
G4X_GS_DONE
, "GS");

378 
	`gí4_ö°d⁄e1_bô
(
G4X_VS0_DONE
, "VS0");

379 
	`gí4_ö°d⁄e1_bô
(
G4X_VF_DONE
, "VF");

380 
	}
}

383 
	$öô_gí7_ö°d⁄e
()

385 
	`gí6_ö°d⁄e1_bô
(1 << 19, "GAM");

386 
	`gí6_ö°d⁄e1_bô
(1 << 18, "GAFM");

387 
	`gí6_ö°d⁄e1_bô
(1 << 17, "TSG");

388 
	`gí6_ö°d⁄e1_bô
(1 << 16, "VFE");

389 
	`gí6_ö°d⁄e1_bô
(1 << 15, "GAFS");

390 
	`gí6_ö°d⁄e1_bô
(1 << 14, "SVG");

391 
	`gí6_ö°d⁄e1_bô
(1 << 13, "URBM");

392 
	`gí6_ö°d⁄e1_bô
(1 << 12, "TDG");

393 
	`gí6_ö°d⁄e1_bô
(1 << 9, "SF");

394 
	`gí6_ö°d⁄e1_bô
(1 << 8, "CL");

395 
	`gí6_ö°d⁄e1_bô
(1 << 7, "SOL");

396 
	`gí6_ö°d⁄e1_bô
(1 << 6, "GS");

397 
	`gí6_ö°d⁄e1_bô
(1 << 5, "DS");

398 
	`gí6_ö°d⁄e1_bô
(1 << 4, "TE");

399 
	`gí6_ö°d⁄e1_bô
(1 << 3, "HS");

400 
	`gí6_ö°d⁄e1_bô
(1 << 2, "VS");

401 
	`gí6_ö°d⁄e1_bô
(1 << 1, "VF");

402 
	}
}

405 
	$öô_gí75_ö°d⁄e
()

407 
	`gí6_ö°d⁄e1_bô
(1 << 21, "CS");

408 
	`gí6_ö°d⁄e1_bô
(1 << 20, "RS");

409 
	`öô_gí7_ö°d⁄e
();

410 
	}
}

413 
	$öô_gí8_ö°d⁄e
()

415 
	`gí6_ö°d⁄e1_bô
(1 << 23, "FBC");

416 
	`gí6_ö°d⁄e1_bô
(1 << 22, "SDE");

417 
	`öô_gí75_ö°d⁄e
();

418 
	}
}

420 
boﬁ


421 
	$öô_ö°d⁄e_deföôi⁄s
(
uöt32_t
 
devid
)

423 i‡(
	`IS_GEN8
(
devid
Ë|| 
	`IS_GEN9
(devidË|| 
	`IS_GEN10
(devid)) {

424 
	`öô_gí8_ö°d⁄e
();

425 } i‡(
	`IS_GEN7
(
devid
)) {

426 
	`öô_gí7_ö°d⁄e
();

427 } i‡(
	`IS_GEN6
(
devid
)) {

429 
	`gí6_ö°d⁄e1_bô
(
GEN6_MA_3_DONE
, "Message Arbiter 3");

430 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_32_DONE
, "EU 32");

431 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_31_DONE
, "EU 31");

432 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_30_DONE
, "EU 30");

433 
	`gí6_ö°d⁄e1_bô
(
GEN6_MA_3_DONE
, "Message Arbiter 2");

434 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_22_DONE
, "EU 22");

435 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_21_DONE
, "EU 21");

436 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_20_DONE
, "EU 20");

437 
	`gí6_ö°d⁄e1_bô
(
GEN6_MA_3_DONE
, "Message Arbiter 1");

438 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_12_DONE
, "EU 12");

439 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_11_DONE
, "EU 11");

440 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_10_DONE
, "EU 10");

441 
	`gí6_ö°d⁄e1_bô
(
GEN6_MA_3_DONE
, "Message Arbiter 0");

442 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_02_DONE
, "EU 02");

443 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_01_DONE
, "EU 01");

444 
	`gí6_ö°d⁄e1_bô
(
GEN6_EU_00_DONE
, "EU 00");

446 
	`gí6_ö°d⁄e1_bô
(
GEN6_IC_3_DONE
, "IC 3");

447 
	`gí6_ö°d⁄e1_bô
(
GEN6_IC_2_DONE
, "IC 2");

448 
	`gí6_ö°d⁄e1_bô
(
GEN6_IC_1_DONE
, "IC 1");

449 
	`gí6_ö°d⁄e1_bô
(
GEN6_IC_0_DONE
, "IC 0");

450 
	`gí6_ö°d⁄e1_bô
(
GEN6_ISC_10_DONE
, "ISC 1/0");

451 
	`gí6_ö°d⁄e1_bô
(
GEN6_ISC_32_DONE
, "ISC 3/2");

453 
	`gí6_ö°d⁄e1_bô
(
GEN6_VSC_DONE
, "VSC");

454 
	`gí6_ö°d⁄e1_bô
(
GEN6_IEF_DONE
, "IEF");

455 
	`gí6_ö°d⁄e1_bô
(
GEN6_VFE_DONE
, "VFE");

456 
	`gí6_ö°d⁄e1_bô
(
GEN6_TD_DONE
, "TD");

457 
	`gí6_ö°d⁄e1_bô
(
GEN6_TS_DONE
, "TS");

458 
	`gí6_ö°d⁄e1_bô
(
GEN6_GW_DONE
, "GW");

459 
	`gí6_ö°d⁄e1_bô
(
GEN6_HIZ_DONE
, "HIZ");

460 
	`gí6_ö°d⁄e1_bô
(
GEN6_AVS_DONE
, "AVS");

463 
	`gí6_ö°d⁄e2_bô
(
GEN6_GAM_DONE
, "GAM");

464 
	`gí6_ö°d⁄e2_bô
(
GEN6_CS_DONE
, "CS");

465 
	`gí6_ö°d⁄e2_bô
(
GEN6_WMBE_DONE
, "WMBE");

466 
	`gí6_ö°d⁄e2_bô
(
GEN6_SVRW_DONE
, "SVRW");

467 
	`gí6_ö°d⁄e2_bô
(
GEN6_RCC_DONE
, "RCC");

468 
	`gí6_ö°d⁄e2_bô
(
GEN6_SVG_DONE
, "SVG");

469 
	`gí6_ö°d⁄e2_bô
(
GEN6_ISC_DONE
, "ISC");

470 
	`gí6_ö°d⁄e2_bô
(
GEN6_MT_DONE
, "MT");

471 
	`gí6_ö°d⁄e2_bô
(
GEN6_RCPFE_DONE
, "RCPFE");

472 
	`gí6_ö°d⁄e2_bô
(
GEN6_RCPBE_DONE
, "RCPBE");

473 
	`gí6_ö°d⁄e2_bô
(
GEN6_VDI_DONE
, "VDI");

474 
	`gí6_ö°d⁄e2_bô
(
GEN6_RCZ_DONE
, "RCZ");

475 
	`gí6_ö°d⁄e2_bô
(
GEN6_DAP_DONE
, "DAP");

476 
	`gí6_ö°d⁄e2_bô
(
GEN6_PSD_DONE
, "PSD");

477 
	`gí6_ö°d⁄e2_bô
(
GEN6_IZ_DONE
, "IZ");

478 
	`gí6_ö°d⁄e2_bô
(
GEN6_WMFE_DONE
, "WMFE");

479 
	`gí6_ö°d⁄e2_bô
(
GEN6_SVSM_DONE
, "SVSM");

480 
	`gí6_ö°d⁄e2_bô
(
GEN6_QC_DONE
, "QC");

481 
	`gí6_ö°d⁄e2_bô
(
GEN6_FL_DONE
, "FL");

482 
	`gí6_ö°d⁄e2_bô
(
GEN6_SC_DONE
, "SC");

483 
	`gí6_ö°d⁄e2_bô
(
GEN6_DM_DONE
, "DM");

484 
	`gí6_ö°d⁄e2_bô
(
GEN6_FT_DONE
, "FT");

485 
	`gí6_ö°d⁄e2_bô
(
GEN6_DG_DONE
, "DG");

486 
	`gí6_ö°d⁄e2_bô
(
GEN6_SI_DONE
, "SI");

487 
	`gí6_ö°d⁄e2_bô
(
GEN6_SO_DONE
, "SO");

488 
	`gí6_ö°d⁄e2_bô
(
GEN6_PL_DONE
, "PL");

489 
	`gí6_ö°d⁄e2_bô
(
GEN6_VME_DONE
, "VME");

490 
	`gí6_ö°d⁄e2_bô
(
GEN6_SF_DONE
, "SF");

491 
	`gí6_ö°d⁄e2_bô
(
GEN6_CL_DONE
, "CL");

492 
	`gí6_ö°d⁄e2_bô
(
GEN6_GS_DONE
, "GS");

493 
	`gí6_ö°d⁄e2_bô
(
GEN6_VS0_DONE
, "VS0");

494 
	`gí6_ö°d⁄e2_bô
(
GEN6_VF_DONE
, "VF");

495 } i‡(
	`IS_GEN5
(
devid
)) {

496 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_EU_0_DONE
, "Row 0, EU 0");

497 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_EU_1_DONE
, "Row 0, EU 1");

498 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_EU_2_DONE
, "Row 0, EU 2");

499 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_EU_3_DONE
, "Row 0, EU 3");

500 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_EU_0_DONE
, "Row 1, EU 0");

501 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_EU_1_DONE
, "Row 1, EU 1");

502 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_EU_2_DONE
, "Row 1, EU 2");

503 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_EU_3_DONE
, "Row 1, EU 3");

504 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_EU_0_DONE
, "Row 2, EU 0");

505 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_EU_1_DONE
, "Row 2, EU 1");

506 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_EU_2_DONE
, "Row 2, EU 2");

507 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_EU_3_DONE
, "Row 2, EU 3");

508 
	`gí4_ö°d⁄e_bô
(
ILK_VCP_DONE
, "VCP");

509 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_MATH_DONE
, "Row 0 math");

510 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_MATH_DONE
, "Row 1 math");

511 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_MATH_DONE
, "Row 2 math");

512 
	`gí4_ö°d⁄e_bô
(
ILK_VC1_DONE
, "VC1");

513 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_MA_DONE
, "Row 0 MA");

514 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_MA_DONE
, "Row 1 MA");

515 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_MA_DONE
, "Row 2 MA");

516 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_0_ISC_DONE
, "Row 0 ISC");

517 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_1_ISC_DONE
, "Row 1 ISC");

518 
	`gí4_ö°d⁄e_bô
(
ILK_ROW_2_ISC_DONE
, "Row 2 ISC");

519 
	`gí4_ö°d⁄e_bô
(
ILK_VFE_DONE
, "VFE");

520 
	`gí4_ö°d⁄e_bô
(
ILK_TD_DONE
, "TD");

521 
	`gí4_ö°d⁄e_bô
(
ILK_SVTS_DONE
, "SVTS");

522 
	`gí4_ö°d⁄e_bô
(
ILK_TS_DONE
, "TS");

523 
	`gí4_ö°d⁄e_bô
(
ILK_GW_DONE
, "GW");

524 
	`gí4_ö°d⁄e_bô
(
ILK_AI_DONE
, "AI");

525 
	`gí4_ö°d⁄e_bô
(
ILK_AC_DONE
, "AC");

526 
	`gí4_ö°d⁄e_bô
(
ILK_AM_DONE
, "AM");

528 
	`öô_g4x_ö°d⁄e1
();

529 } i‡(
	`IS_GEN4
(
devid
)) {

530 
	`gí4_ö°d⁄e_bô
(
I965_ROW_0_EU_0_DONE
, "Row 0, EU 0");

531 
	`gí4_ö°d⁄e_bô
(
I965_ROW_0_EU_1_DONE
, "Row 0, EU 1");

532 
	`gí4_ö°d⁄e_bô
(
I965_ROW_0_EU_2_DONE
, "Row 0, EU 2");

533 
	`gí4_ö°d⁄e_bô
(
I965_ROW_0_EU_3_DONE
, "Row 0, EU 3");

534 
	`gí4_ö°d⁄e_bô
(
I965_ROW_1_EU_0_DONE
, "Row 1, EU 0");

535 
	`gí4_ö°d⁄e_bô
(
I965_ROW_1_EU_1_DONE
, "Row 1, EU 1");

536 
	`gí4_ö°d⁄e_bô
(
I965_ROW_1_EU_2_DONE
, "Row 1, EU 2");

537 
	`gí4_ö°d⁄e_bô
(
I965_ROW_1_EU_3_DONE
, "Row 1, EU 3");

538 
	`gí4_ö°d⁄e_bô
(
I965_SF_DONE
, "Stripsánd Fans");

539 
	`gí4_ö°d⁄e_bô
(
I965_SE_DONE
, "Setup Engine");

540 
	`gí4_ö°d⁄e_bô
(
I965_WM_DONE
, "Windowizer");

541 
	`gí4_ö°d⁄e_bô
(
I965_DISPATCHER_DONE
, "Dispatcher");

542 
	`gí4_ö°d⁄e_bô
(
I965_PROJECTION_DONE
, "Projectionánd LOD");

543 
	`gí4_ö°d⁄e_bô
(
I965_DG_DONE
, "Dependentáddress generator");

544 
	`gí4_ö°d⁄e_bô
(
I965_QUAD_CACHE_DONE
, "Texture fetch");

545 
	`gí4_ö°d⁄e_bô
(
I965_TEXTURE_FETCH_DONE
, "Texture fetch");

546 
	`gí4_ö°d⁄e_bô
(
I965_TEXTURE_DECOMPRESS_DONE
, "Texture decompress");

547 
	`gí4_ö°d⁄e_bô
(
I965_SAMPLER_CACHE_DONE
, "Sampler cache");

548 
	`gí4_ö°d⁄e_bô
(
I965_FILTER_DONE
, "Filtering");

549 
	`gí4_ö°d⁄e_bô
(
I965_BYPASS_DONE
, "Bypass FIFO");

550 
	`gí4_ö°d⁄e_bô
(
I965_PS_DONE
, "Pixel shader");

551 
	`gí4_ö°d⁄e_bô
(
I965_CC_DONE
, "Color calculator");

552 
	`gí4_ö°d⁄e_bô
(
I965_MAP_FILTER_DONE
, "Map filter");

553 
	`gí4_ö°d⁄e_bô
(
I965_MAP_L2_IDLE
, "Map L2");

554 
	`gí4_ö°d⁄e_bô
(
I965_MA_ROW_0_DONE
, "Message ArbiterÑow 0");

555 
	`gí4_ö°d⁄e_bô
(
I965_MA_ROW_1_DONE
, "Message ArbiterÑow 1");

556 
	`gí4_ö°d⁄e_bô
(
I965_IC_ROW_0_DONE
, "Instruction cacheÑow 0");

557 
	`gí4_ö°d⁄e_bô
(
I965_IC_ROW_1_DONE
, "Instruction cacheÑow 1");

558 
	`gí4_ö°d⁄e_bô
(
I965_CP_DONE
, "Command Processor");

560 i‡(
	`IS_G4X
(
devid
)) {

561 
	`öô_g4x_ö°d⁄e1
();

563 
	`öô_g965_ö°d⁄e1
();

565 } i‡(
	`IS_GEN3
(
devid
)) {

566 
	`gí3_ö°d⁄e_bô
(
IDCT_DONE
, "IDCT");

567 
	`gí3_ö°d⁄e_bô
(
IQ_DONE
, "IQ");

568 
	`gí3_ö°d⁄e_bô
(
PR_DONE
, "PR");

569 
	`gí3_ö°d⁄e_bô
(
VLD_DONE
, "VLD");

570 
	`gí3_ö°d⁄e_bô
(
IP_DONE
, "InstructionÖarser");

571 
	`gí3_ö°d⁄e_bô
(
FBC_DONE
, "Framebuffer Compression");

572 
	`gí3_ö°d⁄e_bô
(
BINNER_DONE
, "Binner");

573 
	`gí3_ö°d⁄e_bô
(
SF_DONE
, "Stripsánd fans");

574 
	`gí3_ö°d⁄e_bô
(
SE_DONE
, "SetupÉngine");

575 
	`gí3_ö°d⁄e_bô
(
WM_DONE
, "Windowizer");

576 
	`gí3_ö°d⁄e_bô
(
IZ_DONE
, "Intermediate Z");

577 
	`gí3_ö°d⁄e_bô
(
PERSPECTIVE_INTERP_DONE
, "Perspective interpolation");

578 
	`gí3_ö°d⁄e_bô
(
DISPATCHER_DONE
, "Dispatcher");

579 
	`gí3_ö°d⁄e_bô
(
PROJECTION_DONE
, "Projectionánd LOD");

580 
	`gí3_ö°d⁄e_bô
(
DEPENDENT_ADDRESS_DONE
, "Dependentáddress calculation");

581 
	`gí3_ö°d⁄e_bô
(
TEXTURE_FETCH_DONE
, "Texture fetch");

582 
	`gí3_ö°d⁄e_bô
(
TEXTURE_DECOMPRESS_DONE
, "Texture decompression");

583 
	`gí3_ö°d⁄e_bô
(
SAMPLER_CACHE_DONE
, "Sampler Cache");

584 
	`gí3_ö°d⁄e_bô
(
FILTER_DONE
, "Filtering");

585 
	`gí3_ö°d⁄e_bô
(
BYPASS_FIFO_DONE
, "Bypass FIFO");

586 
	`gí3_ö°d⁄e_bô
(
PS_DONE
, "Pixel shader");

587 
	`gí3_ö°d⁄e_bô
(
CC_DONE
, "Color calculator");

588 
	`gí3_ö°d⁄e_bô
(
MAP_FILTER_DONE
, "Map filter");

589 
	`gí3_ö°d⁄e_bô
(
MAP_L2_IDLE
, "Map L2");

590 } i‡(
	`IS_GEN2
(
devid
)) {

591 
	`gí3_ö°d⁄e_bô
(
I830_GMBUS_DONE
, "GMBUS");

592 
	`gí3_ö°d⁄e_bô
(
I830_FBC_DONE
, "FBC");

593 
	`gí3_ö°d⁄e_bô
(
I830_BINNER_DONE
, "BINNER");

594 
	`gí3_ö°d⁄e_bô
(
I830_MPEG_DONE
, "MPEG");

595 
	`gí3_ö°d⁄e_bô
(
I830_MECO_DONE
, "MECO");

596 
	`gí3_ö°d⁄e_bô
(
I830_MCD_DONE
, "MCD");

597 
	`gí3_ö°d⁄e_bô
(
I830_MCSTP_DONE
, "MCSTP");

598 
	`gí3_ö°d⁄e_bô
(
I830_CC_DONE
, "CC");

599 
	`gí3_ö°d⁄e_bô
(
I830_DG_DONE
, "DG");

600 
	`gí3_ö°d⁄e_bô
(
I830_DCMP_DONE
, "DCMP");

601 
	`gí3_ö°d⁄e_bô
(
I830_FTCH_DONE
, "FTCH");

602 
	`gí3_ö°d⁄e_bô
(
I830_IT_DONE
, "IT");

603 
	`gí3_ö°d⁄e_bô
(
I830_MG_DONE
, "MG");

604 
	`gí3_ö°d⁄e_bô
(
I830_MEC_DONE
, "MEC");

605 
	`gí3_ö°d⁄e_bô
(
I830_PC_DONE
, "PC");

606 
	`gí3_ö°d⁄e_bô
(
I830_QCC_DONE
, "QCC");

607 
	`gí3_ö°d⁄e_bô
(
I830_TB_DONE
, "TB");

608 
	`gí3_ö°d⁄e_bô
(
I830_WM_DONE
, "WM");

609 
	`gí3_ö°d⁄e_bô
(
I830_EF_DONE
, "EF");

610 
	`gí3_ö°d⁄e_bô
(
I830_BLITTER_DONE
, "Blitter");

611 
	`gí3_ö°d⁄e_bô
(
I830_MAP_L2_DONE
, "Map L2 cache");

612 
	`gí3_ö°d⁄e_bô
(
I830_SECONDARY_RING_3_DONE
, "SecondaryÑing 3");

613 
	`gí3_ö°d⁄e_bô
(
I830_SECONDARY_RING_2_DONE
, "SecondaryÑing 2");

614 
	`gí3_ö°d⁄e_bô
(
I830_SECONDARY_RING_1_DONE
, "SecondaryÑing 1");

615 
	`gí3_ö°d⁄e_bô
(
I830_SECONDARY_RING_0_DONE
, "SecondaryÑing 0");

616 
	`gí3_ö°d⁄e_bô
(
I830_PRIMARY_RING_1_DONE
, "PrimaryÑing 1");

617 
	`gí3_ö°d⁄e_bô
(
I830_PRIMARY_RING_0_DONE
, "PrimaryÑing 0");

619  
Ál£
;

621  
åue
;

622 
	}
}

	@instdone.h

28 
	~<°döt.h
>

29 
	~<°dboﬁ.h
>

31 
	#MAX_INSTDONE_BITS
 100

	)

33 
	sö°d⁄e_bô
 {

34 
uöt32_t
 
	mªg
;

35 
uöt32_t
 
	mbô
;

36 c⁄° *
	m«me
;

39 
ö°d⁄e_bô
 
ö°d⁄e_bôs
[
MAX_INSTDONE_BITS
];

40 
num_ö°d⁄e_bôs
;

42 
boﬁ
 
öô_ö°d⁄e_deföôi⁄s
(
uöt32_t
 
devid
);

	@intel_batchbuffer.c

28 
	~<öây≥s.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<as£π.h
>

34 
	~"drm.h
"

35 
	~"drmã°.h
"

36 
	~"öãl_b©chbuf„r.h
"

37 
	~"öãl_bufmgr.h
"

38 
	~"öãl_chù£t.h
"

39 
	~"öãl_ªg.h
"

40 
	~"ªndîc›y.h
"

41 
	~"medü_fûl.h
"

42 
	~"io˘l_wøµîs.h
"

43 
	~"medü_•ö.h
"

44 
	~"gpgpu_fûl.h
"

46 
	~<i915_drm.h
>

75 
	$öãl_b©chbuf„r_ª£t
(
öãl_b©chbuf„r
 *
b©ch
)

77 i‡(
b©ch
->
bo
 !
NULL
) {

78 
	`drm_öãl_bo_uƒe„ªn˚
(
b©ch
->
bo
);

79 
b©ch
->
bo
 = 
NULL
;

82 
b©ch
->
bo
 = 
	`drm_öãl_bo_Æloc
(b©ch->
bufmgr
, "batchbuffer",

83 
BATCH_SZ
, 4096);

85 
	`mem£t
(
b©ch
->
buf„r
, 0, (batch->buffer));

86 
b©ch
->
˘x
 = 
NULL
;

88 
b©ch
->
±r
 = b©ch->
buf„r
;

89 
b©ch
->
íd
 = 
NULL
;

90 
	}
}

102 
öãl_b©chbuf„r
 *

103 
	$öãl_b©chbuf„r_Æloc
(
drm_öãl_bufmgr
 *
bufmgr
, 
uöt32_t
 
devid
)

105 
öãl_b©chbuf„r
 *
b©ch
 = 
	`ˇŒoc
((*batch), 1);

107 
b©ch
->
bufmgr
 = bufmgr;

108 
b©ch
->
devid
 = devid;

109 
b©ch
->
gí
 = 
	`öãl_gí
(
devid
);

110 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

112  
b©ch
;

113 
	}
}

122 
	$öãl_b©chbuf„r_‰ì
(
öãl_b©chbuf„r
 *
b©ch
)

124 
	`drm_öãl_bo_uƒe„ªn˚
(
b©ch
->
bo
);

125 
b©ch
->
bo
 = 
NULL
;

126 
	`‰ì
(
b©ch
);

127 
	}
}

129 
	#CMD_POLY_STIPPLE_OFFSET
 0x7906

	)

132 
	$Êush_⁄_rög_comm⁄
(
öãl_b©chbuf„r
 *
b©ch
, 
rög
)

134 
u£d
 = 
b©ch
->
±r
 - b©ch->
buf„r
;

136 i‡(
u£d
 == 0)

139 i‡(
	`IS_GEN5
(
b©ch
->
devid
)) {

142 *(
uöt32_t
 *Ë(
b©ch
->
±r
Ë
CMD_POLY_STIPPLE_OFFSET
 << 16;

143 
b©ch
->
±r
 += 4;

144 *(
uöt32_t
 *Ë(
b©ch
->
±r
) = 0;

145 
b©ch
->
±r
 += 4;

149 i‡((
u£d
 & 4) == 0) {

150 *(
uöt32_t
 *Ë(
b©ch
->
±r
) = 0;

151 
b©ch
->
±r
 += 4;

155 *(
uöt32_t
 *)(
b©ch
->
±r
Ë
MI_BATCH_BUFFER_END
;

156 
b©ch
->
±r
 += 4;

157  
b©ch
->
±r
 - b©ch->
buf„r
;

158 
	}
}

168 
	$öãl_b©chbuf„r_Êush_⁄_rög
(
öãl_b©chbuf„r
 *
b©ch
, 
rög
)

170 
u£d
 = 
	`Êush_⁄_rög_comm⁄
(
b©ch
, 
rög
);

171 
drm_öãl_c⁄ãxt
 *
˘x
;

173 i‡(
u£d
 == 0)

176 
	`do_‹_dõ
(
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 
u£d
, b©ch->
buf„r
));

178 
b©ch
->
±r
 = 
NULL
;

181 
˘x
 = 
b©ch
->ctx;

182 i‡(
rög
 !
I915_EXEC_RENDER
)

183 
˘x
 = 
NULL
;

184 
	`do_‹_dõ
(
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
˘x
, 
u£d
, 
rög
));

186 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

187 
	}
}

190 
	$öãl_b©chbuf„r_£t_c⁄ãxt
(
öãl_b©chbuf„r
 *
b©ch
,

191 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
)

193 
b©ch
->
˘x
 = 
c⁄ãxt
;

194 
	}
}

205 
	$öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
öãl_b©chbuf„r
 *
b©ch
,

206 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
)

208 
ªt
;

209 
u£d
 = 
	`Êush_⁄_rög_comm⁄
(
b©ch
, 
I915_EXEC_RENDER
);

211 i‡(
u£d
 == 0)

214 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 
u£d
, b©ch->
buf„r
);

215 
	`igt_as£π
(
ªt
 == 0);

217 
b©ch
->
±r
 = 
NULL
;

219 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
c⁄ãxt
, 
u£d
,

220 
I915_EXEC_RENDER
);

221 
	`igt_as£π
(
ªt
 == 0);

223 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

224 
	}
}

234 
	$öãl_b©chbuf„r_Êush
(
öãl_b©chbuf„r
 *
b©ch
)

236 
rög
 = 0;

237 i‡(
	`HAS_BLT_RING
(
b©ch
->
devid
))

238 
rög
 = 
I915_EXEC_BLT
;

239 
	`öãl_b©chbuf„r_Êush_⁄_rög
(
b©ch
, 
rög
);

240 
	}
}

260 
	$öãl_b©chbuf„r_emô_ªloc
(
öãl_b©chbuf„r
 *
b©ch
,

261 
drm_öãl_bo
 *
buf„r
, 
uöt64_t
 
dñè
,

262 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaö
,

263 
„n˚d
)

265 
uöt64_t
 
off£t
;

266 
ªt
;

268 i‡(
b©ch
->
±r
 - b©ch->
buf„r
 > 
BATCH_SZ
)

269 
	`igt_öfo
("badÑelocationÖtr %p map %p offset %d size %d\n",

270 
b©ch
->
±r
, b©ch->
buf„r
,

271 ()(
b©ch
->
±r
 - b©ch->
buf„r
), 
BATCH_SZ
);

273 i‡(
„n˚d
)

274 
ªt
 = 
	`drm_öãl_bo_emô_ªloc_„n˚
(
b©ch
->
bo
, b©ch->
±r
 - b©ch->
buf„r
,

275 
buf„r
, 
dñè
,

276 
ªad_domaös
, 
wrôe_domaö
);

278 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
, b©ch->
±r
 - b©ch->
buf„r
,

279 
buf„r
, 
dñè
,

280 
ªad_domaös
, 
wrôe_domaö
);

282 
off£t
 = 
buf„r
->
off£t64
;

283 
off£t
 +
dñè
;

284 
	`öãl_b©chbuf„r_emô_dw‹d
(
b©ch
, 
off£t
);

285 i‡(
b©ch
->
gí
 >= 8)

286 
	`öãl_b©chbuf„r_emô_dw‹d
(
b©ch
, 
off£t
 >> 32);

287 
	`igt_as£π
(
ªt
 == 0);

288 
	}
}

300 
	$öãl_b©chbuf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

301 c⁄° *
d©a
, 
byãs
)

303 
	`igt_as£π
((
byãs
 & 3) == 0);

304 
	`öãl_b©chbuf„r_ªquúe_•a˚
(
b©ch
, 
byãs
);

305 
	`mem˝y
(
b©ch
->
±r
, 
d©a
, 
byãs
);

306 
b©ch
->
±r
 +
byãs
;

307 
	}
}

328 
	$öãl_b…_c›y
(
öãl_b©chbuf„r
 *
b©ch
,

329 
drm_öãl_bo
 *
§c_bo
, 
§c_x1
, 
§c_y1
, 
§c_pôch
,

330 
drm_öãl_bo
 *
d°_bo
, 
d°_x1
, 
d°_y1
, 
d°_pôch
,

331 
width
, 
height
, 
bµ
)

333 c⁄° 
gí
 = 
b©ch
->gen;

334 
uöt32_t
 
§c_tûög
, 
d°_tûög
, 
swizzÀ
;

335 
uöt32_t
 
cmd_bôs
 = 0;

336 
uöt32_t
 
br13_bôs
;

338 
	`igt_as£π
(
bµ
*(
§c_x1
 + 
width
Ë<8*
§c_pôch
);

339 
	`igt_as£π
(
bµ
*(
d°_x1
 + 
width
Ë<8*
d°_pôch
);

340 
	`igt_as£π
(
§c_pôch
 * (
§c_y1
 + 
height
Ë<
§c_bo
->
size
);

341 
	`igt_as£π
(
d°_pôch
 * (
d°_y1
 + 
height
Ë<
d°_bo
->
size
);

343 
	`drm_öãl_bo_gë_tûög
(
§c_bo
, &
§c_tûög
, &
swizzÀ
);

344 
	`drm_öãl_bo_gë_tûög
(
d°_bo
, &
d°_tûög
, &
swizzÀ
);

346 i‡(
gí
 >4 && 
§c_tûög
 !
I915_TILING_NONE
) {

347 
§c_pôch
 /= 4;

348 
cmd_bôs
 |
XY_SRC_COPY_BLT_SRC_TILED
;

351 i‡(
gí
 >4 && 
d°_tûög
 !
I915_TILING_NONE
) {

352 
d°_pôch
 /= 4;

353 
cmd_bôs
 |
XY_SRC_COPY_BLT_DST_TILED
;

356 
	#CHECK_RANGE
(
x
Ë((xË>0 && (xË< (1 << 15))

	)

357 
	`igt_as£π
(
	`CHECK_RANGE
(
§c_x1
Ë&& CHECK_RANGE(
§c_y1
) &&

358 
	`CHECK_RANGE
(
d°_x1
Ë&& CHECK_RANGE(
d°_y1
) &&

359 
	`CHECK_RANGE
(
width
Ë&& CHECK_RANGE(
height
) &&

360 
	`CHECK_RANGE
(
§c_x1
 + 
width
) &&

361 
	`CHECK_RANGE
(
§c_y1
 + 
height
) &&

362 
	`CHECK_RANGE
(
d°_x1
 + 
width
) &&

363 
	`CHECK_RANGE
(
d°_y1
 + 
height
) &&

364 
	`CHECK_RANGE
(
§c_pôch
) &&

365 
	`CHECK_RANGE
(
d°_pôch
));

366 #unde‡
CHECK_RANGE


368 
br13_bôs
 = 0;

369 
bµ
) {

373 
br13_bôs
 |= 1 << 24;

376 
br13_bôs
 |= 3 << 24;

377 
cmd_bôs
 |
XY_SRC_COPY_BLT_WRITE_ALPHA
 |

378 
XY_SRC_COPY_BLT_WRITE_RGB
;

381 
	`igt_Áû
(
IGT_EXIT_FAILURE
);

384 
	`BLIT_COPY_BATCH_START
(
cmd_bôs
);

385 
	`OUT_BATCH
((
br13_bôs
) |

387 
d°_pôch
);

388 
	`OUT_BATCH
((
d°_y1
 << 16Ë| 
d°_x1
);

389 
	`OUT_BATCH
(((
d°_y1
 + 
height
Ë<< 16Ë| (
d°_x1
 + 
width
));

390 
	`OUT_RELOC_FENCED
(
d°_bo
, 
I915_GEM_DOMAIN_RENDER
, I915_GEM_DOMAIN_RENDER, 0);

391 
	`OUT_BATCH
((
§c_y1
 << 16Ë| 
§c_x1
);

392 
	`OUT_BATCH
(
§c_pôch
);

393 
	`OUT_RELOC_FENCED
(
§c_bo
, 
I915_GEM_DOMAIN_RENDER
, 0, 0);

394 
	`ADVANCE_BATCH
();

396 
	#CMD_POLY_STIPPLE_OFFSET
 0x7906

	)

397 i‡(
gí
 == 5) {

398 
	`BEGIN_BATCH
(2, 0);

399 
	`OUT_BATCH
(
CMD_POLY_STIPPLE_OFFSET
 << 16);

400 
	`OUT_BATCH
(0);

401 
	`ADVANCE_BATCH
();

404 i‡(
gí
 >6 && 
§c_bo
 =
d°_bo
) {

405 
	`BEGIN_BATCH
(3, 0);

406 
	`OUT_BATCH
(
XY_SETUP_CLIP_BLT_CMD
);

407 
	`OUT_BATCH
(0);

408 
	`OUT_BATCH
(0);

409 
	`ADVANCE_BATCH
();

412 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

413 
	}
}

427 
	$öãl_c›y_bo
(
öãl_b©chbuf„r
 *
b©ch
,

428 
drm_öãl_bo
 *
d°_bo
, drm_öãl_bÿ*
§c_bo
,

429 
size
)

431 
	`igt_as£π
(
size
 % 4096 == 0);

433 
	`öãl_b…_c›y
(
b©ch
,

434 
§c_bo
, 0, 0, 4096,

435 
d°_bo
, 0, 0, 4096,

436 4096/4, 
size
/4096, 32);

437 
	}
}

448 
	$igt_buf_width
(
igt_buf
 *
buf
)

450  
buf
->
°ride
/(
uöt32_t
);

451 
	}
}

462 
	$igt_buf_height
(
igt_buf
 *
buf
)

464  
buf
->
size
/buf->
°ride
;

465 
	}
}

471 
uöt32_t
 
	$Á°_c›y_pôch
(
°ride
, 
tûög
)

473 i‡(
tûög
 !
I915_TILING_NONE
)

474  
°ride
 / 4;

476  
°ride
;

477 
	}
}

479 
uöt32_t
 
	$Á°_c›y_dw‹d0
(
§c_tûög
,

480 
d°_tûög
)

482 
uöt32_t
 
dw‹d0
 = 0;

484 
dw‹d0
 |
XY_FAST_COPY_BLT
;

486 
§c_tûög
) {

487 
I915_TILING_X
:

488 
dw‹d0
 |
XY_FAST_COPY_SRC_TILING_X
;

490 
I915_TILING_Y
:

491 
I915_TILING_Yf
:

492 
dw‹d0
 |
XY_FAST_COPY_SRC_TILING_Yb_Yf
;

494 
I915_TILING_Ys
:

495 
dw‹d0
 |
XY_FAST_COPY_SRC_TILING_Ys
;

497 
I915_TILING_NONE
:

502 
d°_tûög
) {

503 
I915_TILING_X
:

504 
dw‹d0
 |
XY_FAST_COPY_DST_TILING_X
;

506 
I915_TILING_Y
:

507 
I915_TILING_Yf
:

508 
dw‹d0
 |
XY_FAST_COPY_DST_TILING_Yb_Yf
;

510 
I915_TILING_Ys
:

511 
dw‹d0
 |
XY_FAST_COPY_DST_TILING_Ys
;

513 
I915_TILING_NONE
:

518  
dw‹d0
;

519 
	}
}

521 
uöt32_t
 
	$Á°_c›y_dw‹d1
(
§c_tûög
,

522 
d°_tûög
)

524 
uöt32_t
 
dw‹d1
 = 0;

526 i‡(
§c_tûög
 =
I915_TILING_Yf
)

527 
dw‹d1
 |
XY_FAST_COPY_SRC_TILING_Yf
;

528 i‡(
d°_tûög
 =
I915_TILING_Yf
)

529 
dw‹d1
 |
XY_FAST_COPY_DST_TILING_Yf
;

531 
dw‹d1
 |
XY_FAST_COPY_COLOR_DEPTH_32
;

533  
dw‹d1
;

534 
	}
}

537 
	$fûl_ªloˇti⁄
(
drm_i915_gem_ªloˇti⁄_íåy
 *
ªloc
,

538 
uöt32_t
 
gem_h™dÀ
, uöt32_à
off£t
,

539 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaös
)

541 
ªloc
->
èrgë_h™dÀ
 = 
gem_h™dÀ
;

542 
ªloc
->
dñè
 = 0;

543 
ªloc
->
off£t
 = off£à* (
uöt32_t
);

544 
ªloc
->
¥esumed_off£t
 = 0;

545 
ªloc
->
ªad_domaös
 =Ñead_domains;

546 
ªloc
->
wrôe_domaö
 = 
wrôe_domaös
;

547 
	}
}

550 
	$fûl_obje˘
(
drm_i915_gem_exec_obje˘2
 *
obj
, 
uöt32_t
 
gem_h™dÀ
,

551 
drm_i915_gem_ªloˇti⁄_íåy
 *
ªlocs
, 
uöt32_t
 
cou¡
)

553 
	`mem£t
(
obj
, 0, (*obj));

554 
obj
->
h™dÀ
 = 
gem_h™dÀ
;

555 
obj
->
ªloˇti⁄_cou¡
 = 
cou¡
;

556 
obj
->
ªlocs_±r
 = 
	`to_u£r_poöãr
(
ªlocs
);

557 
	}
}

559 
	$exec_blô
(
fd
,

560 
drm_i915_gem_exec_obje˘2
 *
objs
, 
uöt32_t
 
cou¡
,

561 
uöt32_t
 
b©ch_Àn
 )

563 
drm_i915_gem_execbuf„r2
 
exec
;

565 
exec
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(
objs
);

566 
exec
.
buf„r_cou¡
 = 
cou¡
;

567 
exec
.
b©ch_°¨t_off£t
 = 0;

568 
exec
.
b©ch_Àn
 = batch_len * 4;

569 
exec
.
DR1
 =Éxec.
DR4
 = 0;

570 
exec
.
num_˛ùª˘s
 = 0;

571 
exec
.
˛ùª˘s_±r
 = 0;

572 
exec
.
Êags
 = 
I915_EXEC_BLT
;

573 
	`i915_execbuf„r2_£t_c⁄ãxt_id
(
exec
, 0);

574 
exec
.
rsvd2
 = 0;

576 
	`gem_execbuf
(
fd
, &
exec
);

577 
	}
}

597 
	$igt_blôãr_Á°_c›y__øw
(
fd
,

599 
uöt32_t
 
§c_h™dÀ
,

600 
§c_°ride
,

601 
§c_tûög
,

602 
§c_x
, 
§c_y
,

605 
width
, 
height
,

608 
uöt32_t
 
d°_h™dÀ
,

609 
d°_°ride
,

610 
d°_tûög
,

611 
d°_x
, 
d°_y
)

613 
uöt32_t
 
b©ch
[12];

614 
drm_i915_gem_exec_obje˘2
 
objs
[3];

615 
drm_i915_gem_ªloˇti⁄_íåy
 
ªlocs
[2];

616 
uöt32_t
 
b©ch_h™dÀ
;

617 
uöt32_t
 
dw‹d0
, 
dw‹d1
;

618 
uöt32_t
 
§c_pôch
, 
d°_pôch
;

619 
i
 = 0;

621 
§c_pôch
 = 
	`Á°_c›y_pôch
(
§c_°ride
, 
§c_tûög
);

622 
d°_pôch
 = 
	`Á°_c›y_pôch
(
d°_°ride
, 
d°_tûög
);

623 
dw‹d0
 = 
	`Á°_c›y_dw‹d0
(
§c_tûög
, 
d°_tûög
);

624 
dw‹d1
 = 
	`Á°_c›y_dw‹d1
(
§c_tûög
, 
d°_tûög
);

626 
	#CHECK_RANGE
(
x
Ë((xË>0 && (xË< (1 << 15))

	)

627 
	`as£π
(
	`CHECK_RANGE
(
§c_x
Ë&& CHECK_RANGE(
§c_y
) &&

628 
	`CHECK_RANGE
(
d°_x
Ë&& CHECK_RANGE(
d°_y
) &&

629 
	`CHECK_RANGE
(
width
Ë&& CHECK_RANGE(
height
) &&

630 
	`CHECK_RANGE
(
§c_x
 + 
width
Ë&& CHECK_RANGE(
§c_y
 + 
height
) &&

631 
	`CHECK_RANGE
(
d°_x
 + 
width
Ë&& CHECK_RANGE(
d°_y
 + 
height
) &&

632 
	`CHECK_RANGE
(
§c_pôch
Ë&& CHECK_RANGE(
d°_pôch
));

633 #unde‡
CHECK_RANGE


635 
b©ch
[
i
++] = 
dw‹d0
;

636 
b©ch
[
i
++] = 
dw‹d1
 | 
d°_pôch
;

637 
b©ch
[
i
++] = (
d°_y
 << 16Ë| 
d°_x
;

638 
b©ch
[
i
++] = ((
d°_y
 + 
height
Ë<< 16Ë| (
d°_x
 + 
width
);

639 
b©ch
[
i
++] = 0;

640 
b©ch
[
i
++] = 0;

641 
b©ch
[
i
++] = (
§c_y
 << 16Ë| 
§c_x
;

642 
b©ch
[
i
++] = 
§c_pôch
;

643 
b©ch
[
i
++] = 0;

644 
b©ch
[
i
++] = 0;

645 
b©ch
[
i
++] = 
MI_BATCH_BUFFER_END
;

646 
b©ch
[
i
++] = 
MI_NOOP
;

648 
	`igt_as£π
(
i
 =
	`ARRAY_SIZE
(
b©ch
));

650 
b©ch_h™dÀ
 = 
	`gem_¸óã
(
fd
, 4096);

651 
	`gem_wrôe
(
fd
, 
b©ch_h™dÀ
, 0, 
b©ch
, (batch));

653 
	`fûl_ªloˇti⁄
(&
ªlocs
[0], 
d°_h™dÀ
, 4,

654 
I915_GEM_DOMAIN_RENDER
, I915_GEM_DOMAIN_RENDER);

655 
	`fûl_ªloˇti⁄
(&
ªlocs
[1], 
§c_h™dÀ
, 8, 
I915_GEM_DOMAIN_RENDER
, 0);

657 
	`fûl_obje˘
(&
objs
[0], 
d°_h™dÀ
, 
NULL
, 0);

658 
	`fûl_obje˘
(&
objs
[1], 
§c_h™dÀ
, 
NULL
, 0);

659 
	`fûl_obje˘
(&
objs
[2], 
b©ch_h™dÀ
, 
ªlocs
, 2);

661 
	`exec_blô
(
fd
, 
objs
, 3, 
	`ARRAY_SIZE
(
b©ch
));

663 
	`gem_˛o£
(
fd
, 
b©ch_h™dÀ
);

664 
	}
}

682 
	$igt_blôãr_Á°_c›y
(
öãl_b©chbuf„r
 *
b©ch
,

683 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

684 
width
, 
height
,

685 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

687 
uöt32_t
 
§c_pôch
, 
d°_pôch
;

688 
uöt32_t
 
dw‹d0
, 
dw‹d1
;

690 
§c_pôch
 = 
	`Á°_c›y_pôch
(
§c
->
°ride
, src->
tûög
);

691 
d°_pôch
 = 
	`Á°_c›y_pôch
(
d°
->
°ride
, 
§c
->
tûög
);

692 
dw‹d0
 = 
	`Á°_c›y_dw‹d0
(
§c
->
tûög
, 
d°
->tiling);

693 
dw‹d1
 = 
	`Á°_c›y_dw‹d1
(
§c
->
tûög
, 
d°
->tiling);

695 
	#CHECK_RANGE
(
x
Ë((xË>0 && (xË< (1 << 15))

	)

696 
	`as£π
(
	`CHECK_RANGE
(
§c_x
Ë&& CHECK_RANGE(
§c_y
) &&

697 
	`CHECK_RANGE
(
d°_x
Ë&& CHECK_RANGE(
d°_y
) &&

698 
	`CHECK_RANGE
(
width
Ë&& CHECK_RANGE(
height
) &&

699 
	`CHECK_RANGE
(
§c_x
 + 
width
Ë&& CHECK_RANGE(
§c_y
 + 
height
) &&

700 
	`CHECK_RANGE
(
d°_x
 + 
width
Ë&& CHECK_RANGE(
d°_y
 + 
height
) &&

701 
	`CHECK_RANGE
(
§c_pôch
Ë&& CHECK_RANGE(
d°_pôch
));

702 #unde‡
CHECK_RANGE


704 
	`BEGIN_BATCH
(10, 2);

705 
	`OUT_BATCH
(
dw‹d0
);

706 
	`OUT_BATCH
(
dw‹d1
 | 
d°_pôch
);

707 
	`OUT_BATCH
((
d°_y
 << 16Ë| 
d°_x
);

708 
	`OUT_BATCH
(((
d°_y
 + 
height
Ë<< 16Ë| (
d°_x
 + 
width
));

709 
	`OUT_RELOC
(
d°
->
bo
, 
I915_GEM_DOMAIN_RENDER
, I915_GEM_DOMAIN_RENDER, 0);

710 
	`OUT_BATCH
(0);

711 
	`OUT_BATCH
((
§c_y
 << 16Ë| 
§c_x
);

712 
	`OUT_BATCH
(
§c_pôch
);

713 
	`OUT_RELOC
(
§c
->
bo
, 
I915_GEM_DOMAIN_RENDER
, 0, 0);

714 
	`OUT_BATCH
(0);

715 
	`ADVANCE_BATCH
();

717 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

718 
	}
}

730 
igt_ªndî_c›yfunc_t
 
	$igt_gë_ªndî_c›yfunc
(
devid
)

732 
igt_ªndî_c›yfunc_t
 
c›y
 = 
NULL
;

734 i‡(
	`IS_GEN2
(
devid
))

735 
c›y
 = 
gí2_ªndî_c›yfunc
;

736 i‡(
	`IS_GEN3
(
devid
))

737 
c›y
 = 
gí3_ªndî_c›yfunc
;

738 i‡(
	`IS_GEN6
(
devid
))

739 
c›y
 = 
gí6_ªndî_c›yfunc
;

740 i‡(
	`IS_GEN7
(
devid
))

741 
c›y
 = 
gí7_ªndî_c›yfunc
;

742 i‡(
	`IS_GEN8
(
devid
))

743 
c›y
 = 
gí8_ªndî_c›yfunc
;

744 i‡(
	`IS_GEN9
(
devid
Ë|| 
	`IS_GEN10
(devid))

745 
c›y
 = 
gí9_ªndî_c›yfunc
;

747  
c›y
;

748 
	}
}

759 
igt_fûlfunc_t
 
	$igt_gë_medü_fûlfunc
(
devid
)

761 
igt_fûlfunc_t
 
fûl
 = 
NULL
;

763 i‡(
	`IS_GEN9
(
devid
))

764 
fûl
 = 
gí9_medü_fûlfunc
;

765 i‡(
	`IS_BROADWELL
(
devid
))

766 
fûl
 = 
gí8_medü_fûlfunc
;

767 i‡(
	`IS_GEN7
(
devid
))

768 
fûl
 = 
gí7_medü_fûlfunc
;

769 i‡(
	`IS_CHERRYVIEW
(
devid
))

770 
fûl
 = 
gí8Õ_medü_fûlfunc
;

772  
fûl
;

773 
	}
}

784 
igt_fûlfunc_t
 
	$igt_gë_gpgpu_fûlfunc
(
devid
)

786 
igt_fûlfunc_t
 
fûl
 = 
NULL
;

788 i‡(
	`IS_GEN7
(
devid
))

789 
fûl
 = 
gí7_gpgpu_fûlfunc
;

790 i‡(
	`IS_BROADWELL
(
devid
))

791 
fûl
 = 
gí8_gpgpu_fûlfunc
;

792 i‡(
	`IS_GEN9
(
devid
Ë|| 
	`IS_GEN10
(devid))

793 
fûl
 = 
gí9_gpgpu_fûlfunc
;

795  
fûl
;

796 
	}
}

807 
igt_medü_•öfunc_t
 
	$igt_gë_medü_•öfunc
(
devid
)

809 
igt_medü_•öfunc_t
 
•ö
 = 
NULL
;

811 i‡(
	`IS_GEN9
(
devid
))

812 
•ö
 = 
gí9_medü_•öfunc
;

813 i‡(
	`IS_BROADWELL
(
devid
))

814 
•ö
 = 
gí8_medü_•öfunc
;

815 i‡(
	`IS_CHERRYVIEW
(
devid
))

816 
•ö
 = 
gí8Õ_medü_•öfunc
;

818  
•ö
;

819 
	}
}

	@intel_batchbuffer.h

1 #i‚de‡
INTEL_BATCHBUFFER_H


2 
	#INTEL_BATCHBUFFER_H


	)

4 
	~<°döt.h
>

5 
	~<öãl_bufmgr.h
>

6 
	~<i915_drm.h
>

8 
	~"igt_c‹e.h
"

9 
	~"öãl_ªg.h
"

11 
	#BATCH_SZ
 4096

	)

12 
	#BATCH_RESERVED
 16

	)

14 
	söãl_b©chbuf„r
 {

15 
drm_öãl_bufmgr
 *
	mbufmgr
;

16 
uöt32_t
 
	mdevid
;

17 
	mgí
;

19 
drm_öãl_c⁄ãxt
 *
	m˘x
;

20 
drm_öãl_bo
 *
	mbo
;

22 
uöt8_t
 
	mbuf„r
[
BATCH_SZ
];

23 
uöt8_t
 *
	m±r
, *
	míd
;

24 
uöt8_t
 *
	m°©e
;

27 
öãl_b©chbuf„r
 *
öãl_b©chbuf„r_Æloc
(
drm_öãl_bufmgr
 *
bufmgr
,

28 
uöt32_t
 
devid
);

30 
öãl_b©chbuf„r_£t_c⁄ãxt
(
öãl_b©chbuf„r
 *
b©ch
,

31 
drm_öãl_c⁄ãxt
 *
˘x
);

34 
öãl_b©chbuf„r_‰ì
(
öãl_b©chbuf„r
 *
b©ch
);

37 
öãl_b©chbuf„r_Êush
(
öãl_b©chbuf„r
 *
b©ch
);

38 
öãl_b©chbuf„r_Êush_⁄_rög
(
öãl_b©chbuf„r
 *
b©ch
, 
rög
);

39 
öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
öãl_b©chbuf„r
 *
b©ch
,

40 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
);

42 
öãl_b©chbuf„r_ª£t
(
öãl_b©chbuf„r
 *
b©ch
);

44 
öãl_b©chbuf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

45 c⁄° *
d©a
, 
byãs
);

47 
öãl_b©chbuf„r_emô_ªloc
(
öãl_b©chbuf„r
 *
b©ch
,

48 
drm_öãl_bo
 *
buf„r
,

49 
uöt64_t
 
dñè
,

50 
uöt32_t
 
ªad_domaös
,

51 
uöt32_t
 
wrôe_domaö
,

52 
„n˚d
);

59 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Winline"

60 
ölöe
 

61 
	$öãl_b©chbuf„r_•a˚
(
öãl_b©chbuf„r
 *
b©ch
)

63  (
BATCH_SZ
 - 
BATCH_RESERVED
Ë- (
b©ch
->
±r
 - b©ch->
buf„r
);

64 
	}
}

67 
ölöe
 

68 
	$öãl_b©chbuf„r_emô_dw‹d
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
dw‹d
)

70 
	`igt_as£π
(
	`öãl_b©chbuf„r_•a˚
(
b©ch
) >= 4);

71 *(
uöt32_t
 *Ë(
b©ch
->
±r
Ë
dw‹d
;

72 
b©ch
->
±r
 += 4;

73 
	}
}

75 
ölöe
 

76 
	$öãl_b©chbuf„r_ªquúe_•a˚
(
öãl_b©chbuf„r
 *
b©ch
,

77 
sz
)

79 
	`igt_as£π
(
sz
 < 
BATCH_SZ
 - 
BATCH_RESERVED
);

80 i‡(
	`öãl_b©chbuf„r_•a˚
(
b©ch
Ë< 
sz
)

81 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

82 
	}
}

95 
	#BEGIN_BATCH
(
n
, 
r
) do { \

96 
__n
 = (
n
); \

97 
	`igt_as£π
(
b©ch
->
íd
 =
NULL
); \

98 i‡(
b©ch
->
gí
 >8Ë
__n
 +
r
; \

99 
__n
 *= 4; \

100 
	`öãl_b©chbuf„r_ªquúe_•a˚
(
b©ch
, 
__n
); \

101 
b©ch
->
íd
 = b©ch->
±r
 + 
__n
; \

102 } 0)

	)

113 
	#OUT_BATCH
(
d
Ë
	`öãl_b©chbuf„r_emô_dw‹d
(
b©ch
, d)

	)

127 
	#OUT_RELOC_FENCED
(
buf
, 
ªad_domaös
, 
wrôe_domaö
, 
dñè
) do { \

128 
	`igt_as£π
((
dñè
) >= 0); \

129 
	`öãl_b©chbuf„r_emô_ªloc
(
b©ch
, 
buf
, 
dñè
, \

130 
ªad_domaös
, 
wrôe_domaö
, 1); \

131 } 0)

	)

145 
	#OUT_RELOC
(
buf
, 
ªad_domaös
, 
wrôe_domaö
, 
dñè
) do { \

146 
	`igt_as£π
((
dñè
) >= 0); \

147 
	`öãl_b©chbuf„r_emô_ªloc
(
b©ch
, 
buf
, 
dñè
, \

148 
ªad_domaös
, 
wrôe_domaö
, 0); \

149 } 0)

	)

159 
	#ADVANCE_BATCH
() do { \

160 
	`igt_as£π
(
b©ch
->
±r
 =b©ch->
íd
); \

161 
b©ch
->
íd
 = 
NULL
; \

162 } 0)

	)

164 
	#BLIT_COPY_BATCH_START
(
Êags
) do { \

165 
	`BEGIN_BATCH
(8, 2); \

166 
	`OUT_BATCH
(
XY_SRC_COPY_BLT_CMD
 | \

167 
XY_SRC_COPY_BLT_WRITE_ALPHA
 | \

168 
XY_SRC_COPY_BLT_WRITE_RGB
 | \

169 (
Êags
) | \

170 (6 + 2*(
b©ch
->
gí
 >= 8))); \

171 } 0)

	)

173 
	#COLOR_BLIT_COPY_BATCH_START
(
Êags
) do { \

174 
	`BEGIN_BATCH
(6, 1); \

175 
	`OUT_BATCH
(
XY_COLOR_BLT_CMD_NOLEN
 | \

176 
COLOR_BLT_WRITE_ALPHA
 | \

177 
XY_COLOR_BLT_WRITE_RGB
 | \

178 (
Êags
) | \

179 (4 + (
b©ch
->
gí
 >= 8))); \

180 } 0)

	)

183 
öãl_b…_c›y
(
öãl_b©chbuf„r
 *
b©ch
,

184 
drm_öãl_bo
 *
§c_bo
, 
§c_x1
, 
§c_y1
, 
§c_pôch
,

185 
drm_öãl_bo
 *
d°_bo
, 
d°_x1
, 
d°_y1
, 
d°_pôch
,

186 
width
, 
height
, 
bµ
);

187 
öãl_c›y_bo
(
öãl_b©chbuf„r
 *
b©ch
,

188 
drm_öãl_bo
 *
d°_bo
, drm_öãl_bÿ*
§c_bo
,

189 
size
);

200 
	#I915_TILING_Yf
 3

	)

201 
	#I915_TILING_Ys
 4

	)

215 
	sigt_buf
 {

216 
drm_öãl_bo
 *
	mbo
;

217 
uöt32_t
 
	m°ride
;

218 
uöt32_t
 
	mtûög
;

219 
uöt32_t
 *
	md©a
;

220 
uöt32_t
 
	msize
;

222 
	mnum_tûes
;

225 
igt_buf_width
(
igt_buf
 *
buf
);

226 
igt_buf_height
(
igt_buf
 *
buf
);

228 
igt_blôãr_Á°_c›y
(
öãl_b©chbuf„r
 *
b©ch
,

229 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

230 
width
, 
height
,

231 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

233 
igt_blôãr_Á°_c›y__øw
(
fd
,

235 
uöt32_t
 
§c_h™dÀ
,

236 
§c_°ride
,

237 
§c_tûög
,

238 
§c_x
, 
§c_y
,

241 
width
, 
height
,

244 
uöt32_t
 
d°_h™dÀ
,

245 
d°_°ride
,

246 
d°_tûög
,

247 
d°_x
, 
d°_y
);

270 (*
	tigt_ªndî_c›yfunc_t
)(
	töãl_b©chbuf„r
 *
	tb©ch
,

271 
	tdrm_öãl_c⁄ãxt
 *
	tc⁄ãxt
,

272 
	tigt_buf
 *
	t§c
, 
	t§c_x
, 
	t§c_y
,

273 
	twidth
, 
	theight
,

274 
	tigt_buf
 *
	td°
, 
	td°_x
, 
	td°_y
);

276 
igt_ªndî_c›yfunc_t
 
	`igt_gë_ªndî_c›yfunc
(
devid
);

295 (*
	tigt_fûlfunc_t
)(
	töãl_b©chbuf„r
 *
	tb©ch
,

296 
	tigt_buf
 *
	td°
,

297 
	tx
, 
	ty
,

298 
	twidth
, 
	theight
,

299 
	tuöt8_t
 
	tcﬁ‹
);

301 
igt_fûlfunc_t
 
	`igt_gë_medü_fûlfunc
(
devid
);

302 
igt_fûlfunc_t
 
	`igt_gë_gpgpu_fûlfunc
(
devid
);

321 (*
	tigt_medü_•öfunc_t
)(
	töãl_b©chbuf„r
 *
	tb©ch
,

322 
	tigt_buf
 *
	td°
, 
	tuöt32_t
 
	t•ös
);

324 
igt_medü_•öfunc_t
 
	`igt_gë_medü_•öfunc
(
devid
);

	@intel_chipset.c

28 
	~<uni°d.h
>

29 
	~<°dlib.h
>

30 
	~<°dio.h
>

31 
	~<°rög.h
>

32 
	~<î∫o.h
>

33 
	~<îr.h
>

34 
	~<as£π.h
>

35 
	~<sys/io˘l.h
>

36 
	~<f˙é.h
>

37 
	~<sys/°©.h
>

38 
	~<sys/mm™.h
>

39 
	~"i915_drm.h
"

41 
	~"drmã°.h
"

42 
	~"öãl_chù£t.h
"

43 
	~"igt_c‹e.h
"

62 
pch_ty≥
 
	göãl_pch
;

72 
pci_devi˚
 *

73 
	$öãl_gë_pci_devi˚
()

75 
pci_devi˚
 *
pci_dev
;

76 
îr‹
;

78 
îr‹
 = 
	`pci_sy°em_öô
();

79 
	`igt_Áû_⁄_f
(
îr‹
 != 0,

84 
pci_dev
 = 
	`pci_devi˚_föd_by_¶Ÿ
(0, 0, 2, 0);

85 i‡(
pci_dev
 =
NULL
 ||Öci_dev->
víd‹_id
 != 0x8086) {

86 
pci_devi˚_ôî©‹
 *
ôî
;

87 
pci_id_m©ch
 
m©ch
;

89 
m©ch
.
víd‹_id
 = 0x8086;

90 
m©ch
.
devi˚_id
 = 
PCI_MATCH_ANY
;

91 
m©ch
.
subvíd‹_id
 = 
PCI_MATCH_ANY
;

92 
m©ch
.
subdevi˚_id
 = 
PCI_MATCH_ANY
;

94 
m©ch
.
devi˚_˛ass
 = 0x3 << 16;

95 
m©ch
.
devi˚_˛ass_mask
 = 0xff << 16;

97 
m©ch
.
m©ch_d©a
 = 0;

99 
ôî
 = 
	`pci_id_m©ch_ôî©‹_¸óã
(&
m©ch
);

100 
pci_dev
 = 
	`pci_devi˚_√xt
(
ôî
);

101 
	`pci_ôî©‹_de°roy
(
ôî
);

103 
	`igt_ªquúe_f
(
pci_dev
, "Couldn't find Intel graphics card\n");

105 
îr‹
 = 
	`pci_devi˚_¥obe
(
pci_dev
);

106 
	`igt_Áû_⁄_f
(
îr‹
 != 0,

109 i‡(
pci_dev
->
víd‹_id
 != 0x8086)

110 
	`îrx
(1, "Graphics card isÇon-intel");

112  
pci_dev
;

113 
	}
}

115 
uöt16_t
 
__drm_devi˚_id
;

127 
uöt32_t


128 
	$öãl_gë_drm_devid
(
fd
)

130 c⁄° *
ovîride
;

132 
	`igt_as£π
(
	`is_i915_devi˚
(
fd
));

133 
	`igt_as£π
(
__drm_devi˚_id
);

135 
ovîride
 = 
	`gëív
("INTEL_DEVID_OVERRIDE");

136 i‡(
ovîride
)

137  
	`°πﬁ
(
ovîride
, 
NULL
, 0);

139  
__drm_devi˚_id
;

140 
	}
}

149 
	$öãl_check_pch
()

151 
pci_devi˚
 *
pch_dev
;

153 
pch_dev
 = 
	`pci_devi˚_föd_by_¶Ÿ
(0, 0, 31, 0);

154 i‡(
pch_dev
 =
NULL
)

157 i‡(
pch_dev
->
víd‹_id
 != 0x8086)

160 
pch_dev
->
devi˚_id
 & 0xff00) {

162 
öãl_pch
 = 
PCH_IBX
;

166 
öãl_pch
 = 
PCH_CPT
;

170 
öãl_pch
 = 
PCH_LPT
;

173 
öãl_pch
 = 
PCH_NONE
;

176 
	}
}

	@intel_chipset.h

28 #i‚de‡
_INTEL_CHIPSET_H


29 
	#_INTEL_CHIPSET_H


	)

31 
	~<pcüc˚ss.h
>

32 
	~<°dboﬁ.h
>

34 
pci_devi˚
 *
öãl_gë_pci_devi˚
();

35 
uöt32_t
 
öãl_gë_drm_devid
(
fd
);

37 
	söãl_devi˚_öfo
 {

38 
	mgí
;

39 
boﬁ
 
	mis_mobûe
 : 1;

40 
boﬁ
 
	mis_whô√y
 : 1;

41 
boﬁ
 
	mis_Æmad‹
 : 1;

42 
boﬁ
 
	mis_brookdÆe
 : 1;

43 
boﬁ
 
	mis_m⁄èø
 : 1;

44 
boﬁ
 
	mis_•rögdÆe
 : 1;

45 
boﬁ
 
	mis_gø¡sdÆe
 : 1;

46 
boﬁ
 
	mis_Æviso
 : 1;

47 
boﬁ
 
	mis_œkï‹t
 : 1;

48 
boﬁ
 
	mis_ˇli°oga
 : 1;

49 
boﬁ
 
	mis_bóæake
 : 1;

50 
boﬁ
 
	mis_pöevõw
 : 1;

51 
boﬁ
 
	mis_brﬂdw©î
 : 1;

52 
boﬁ
 
	mis_¸e°löe
 : 1;

53 
boﬁ
 
	mis_ógÀœke
 : 1;

54 
boﬁ
 
	mis_ˇ¡iga
 : 1;

55 
boﬁ
 
	mis_ú⁄œke
 : 1;

56 
boﬁ
 
	mis_¨øndÆe
 : 1;

57 
boﬁ
 
	mis_ßndybridge
 : 1;

58 
boﬁ
 
	mis_ivybridge
 : 1;

59 
boﬁ
 
	mis_vÆÀyvõw
 : 1;

60 
boﬁ
 
	mis_haswñl
 : 1;

61 
boﬁ
 
	mis_brﬂdwñl
 : 1;

62 
boﬁ
 
	mis_chîryvõw
 : 1;

63 
boﬁ
 
	mis_skyœke
 : 1;

64 
boﬁ
 
	mis_broxt⁄
 : 1;

65 
boﬁ
 
	mis_kabyœke
 : 1;

66 
boﬁ
 
	mis_gemöûake
 : 1;

67 
boﬁ
 
	mis_cof„ñake
 : 1;

68 
boﬁ
 
	mis_ˇ¬⁄œke
 : 1;

69 c⁄° *
	mcodíame
;

72 c⁄° 
öãl_devi˚_öfo
 *
	$öãl_gë_devi˚_öfo
(
uöt16_t
 
devid
Ë
	`__©åibuã__
((
puª
));

74 
	$öãl_gí
(
uöt16_t
 
devid
Ë
	`__©åibuã__
((
puª
));

75 
	$öãl_gt
(
uöt16_t
 
devid
Ë
	`__©åibuã__
((
puª
));

77 
pch_ty≥
 
öãl_pch
;

79 
	epch_ty≥
 {

80 
PCH_NONE
,

81 
PCH_IBX
,

82 
PCH_CPT
,

83 
PCH_LPT
,

86 
	`öãl_check_pch
();

88 
	#HAS_IBX
 (
öãl_pch
 =
PCH_IBX
)

	)

89 
	#HAS_CPT
 (
öãl_pch
 =
PCH_CPT
)

	)

90 
	#HAS_LPT
 (
öãl_pch
 =
PCH_LPT
)

	)

93 #i‚de‡
__GTK_DOC_IGNORE__


95 
	#PCI_CHIP_I810
 0x7121

	)

96 
	#PCI_CHIP_I810_DC100
 0x7123

	)

97 
	#PCI_CHIP_I810_E
 0x7125

	)

98 
	#PCI_CHIP_I815
 0x1132

	)

100 
	#PCI_CHIP_I830_M
 0x3577

	)

101 
	#PCI_CHIP_845_G
 0x2562

	)

102 
	#PCI_CHIP_I854_G
 0x358e

	)

103 
	#PCI_CHIP_I855_GM
 0x3582

	)

104 
	#PCI_CHIP_I865_G
 0x2572

	)

106 
	#PCI_CHIP_I915_G
 0x2582

	)

107 
	#PCI_CHIP_E7221_G
 0x258A

	)

108 
	#PCI_CHIP_I915_GM
 0x2592

	)

109 
	#PCI_CHIP_I945_G
 0x2772

	)

110 
	#PCI_CHIP_I945_GM
 0x27A2

	)

111 
	#PCI_CHIP_I945_GME
 0x27AE

	)

113 
	#PCI_CHIP_I965_G
 0x29A2

	)

114 
	#PCI_CHIP_I965_Q
 0x2992

	)

115 
	#PCI_CHIP_I965_G_1
 0x2982

	)

116 
	#PCI_CHIP_I946_GZ
 0x2972

	)

117 
	#PCI_CHIP_I965_GM
 0x2A02

	)

118 
	#PCI_CHIP_I965_GME
 0x2A12

	)

120 
	#PCI_CHIP_GM45_GM
 0x2A42

	)

122 
	#PCI_CHIP_Q45_G
 0x2E12

	)

123 
	#PCI_CHIP_G45_G
 0x2E22

	)

124 
	#PCI_CHIP_G41_G
 0x2E32

	)

128 
	#IS_915G
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_gø¡sdÆe
)

	)

129 
	#IS_915GM
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_Æviso
)

	)

131 
	#IS_915
(
devid
Ë(
	`IS_915G
(devidË|| 
	`IS_915GM
(devid))

	)

133 
	#IS_945G
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_œkï‹t
)

	)

134 
	#IS_945GM
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ˇli°oga
)

	)

136 
	#IS_945
(
devid
Ë(
	`IS_945G
(devid) || \

137 
	`IS_945GM
(
devid
) || \

138 
	`IS_G33
(
devid
))

	)

140 
	#IS_PINEVIEW
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_pöevõw
)

	)

141 
	#IS_G33
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_bóæake
 || \

142 
	`öãl_gë_devi˚_öfo
(
devid
)->
is_pöevõw
)

	)

144 
	#IS_BROADWATER
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_brﬂdw©î
)

	)

145 
	#IS_CRESTLINE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_¸e°löe
)

	)

147 
	#IS_GM45
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ˇ¡iga
)

	)

148 
	#IS_G45
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ógÀœke
)

	)

149 
	#IS_G4X
(
devid
Ë(
	`IS_G45
(devidË|| 
	`IS_GM45
(devid))

	)

151 
	#IS_IRONLAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ú⁄œke
)

	)

152 
	#IS_ARRANDALE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_¨øndÆe
)

	)

153 
	#IS_SANDYBRIDGE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ßndybridge
)

	)

154 
	#IS_IVYBRIDGE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ivybridge
)

	)

155 
	#IS_VALLEYVIEW
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_vÆÀyvõw
)

	)

156 
	#IS_HASWELL
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_haswñl
)

	)

157 
	#IS_BROADWELL
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_brﬂdwñl
)

	)

158 
	#IS_CHERRYVIEW
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_chîryvõw
)

	)

159 
	#IS_KABYLAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_kabyœke
)

	)

160 
	#IS_SKYLAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_skyœke
)

	)

161 
	#IS_BROXTON
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_broxt⁄
)

	)

162 
	#IS_GEMINILAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_gemöûake
)

	)

163 
	#IS_COFFEELAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_cof„ñake
)

	)

164 
	#IS_CANNONLAKE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_ˇ¬⁄œke
)

	)

166 
	#IS_GEN
(
devid
, 
x
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
gí
 & (1u << ((x)-1)))

	)

167 
	#AT_LEAST_GEN
(
devid
, 
x
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
gí
 & -(1u << ((x)-1)))

	)

169 
	#IS_GEN2
(
devid
Ë
	`IS_GEN
(devid, 2)

	)

170 
	#IS_GEN3
(
devid
Ë
	`IS_GEN
(devid, 3)

	)

171 
	#IS_GEN4
(
devid
Ë
	`IS_GEN
(devid, 4)

	)

172 
	#IS_GEN5
(
devid
Ë
	`IS_GEN
(devid, 5)

	)

173 
	#IS_GEN6
(
devid
Ë
	`IS_GEN
(devid, 6)

	)

174 
	#IS_GEN7
(
devid
Ë
	`IS_GEN
(devid, 7)

	)

175 
	#IS_GEN8
(
devid
Ë
	`IS_GEN
(devid, 8)

	)

176 
	#IS_GEN9
(
devid
Ë
	`IS_GEN
(devid, 9)

	)

177 
	#IS_GEN10
(
devid
Ë
	`IS_GEN
(devid, 10)

	)

179 
	#IS_MOBILE
(
devid
Ë(
	`öãl_gë_devi˚_öfo
(devid)->
is_mobûe
)

	)

180 
	#IS_965
(
devid
Ë
	`AT_LEAST_GEN
(devid, 4)

	)

182 
	#HAS_BSD_RING
(
devid
Ë
	`AT_LEAST_GEN
(devid, 5)

	)

183 
	#HAS_BLT_RING
(
devid
Ë
	`AT_LEAST_GEN
(devid, 6)

	)

185 
	#HAS_PCH_SPLIT
(
devid
Ë(
	`AT_LEAST_GEN
(devid, 5) && \

186 !(
	`IS_VALLEYVIEW
(
devid
) || \

187 
	`IS_CHERRYVIEW
(
devid
) || \

188 
	`IS_BROXTON
(
devid
)))

	)

	@intel_device_info.c

1 
	~"öãl_chù£t.h
"

2 
	~"i915_pciids.h
"

4 
	~<°rögs.h
>

6 
	#BIT
(
x
Ë(1<<(x))

	)

8 c⁄° 
öãl_devi˚_öfo
 
	göãl_gíîic_öfo
 = {

9 .
gí
 = 0,

12 c⁄° 
öãl_devi˚_öfo
 
	göãl_i810_öfo
 = {

13 .
gí
 = 
BIT
(0),

14 .
	gis_whô√y
 = 
åue
,

15 .
	gcodíame
 = "solano"

18 c⁄° 
öãl_devi˚_öfo
 
	göãl_i815_öfo
 = {

19 .
gí
 = 
BIT
(0),

20 .
	gis_whô√y
 = 
åue
,

21 .
	gcodíame
 = "whitney"

24 c⁄° 
öãl_devi˚_öfo
 
	göãl_i830_öfo
 = {

25 .
gí
 = 
BIT
(1),

26 .
	gis_Æmad‹
 = 
åue
,

27 .
	gcodíame
 = "almador"

29 c⁄° 
öãl_devi˚_öfo
 
	göãl_i845_öfo
 = {

30 .
gí
 = 
BIT
(1),

31 .
	gis_brookdÆe
 = 
åue
,

32 .
	gcodíame
 = "brookdale"

34 c⁄° 
öãl_devi˚_öfo
 
	göãl_i855_öfo
 = {

35 .
gí
 = 
BIT
(1),

36 .
	gis_mobûe
 = 
åue
,

37 .
	gis_m⁄èø
 = 
åue
,

38 .
	gcodíame
 = "montara"

40 c⁄° 
öãl_devi˚_öfo
 
	göãl_i865_öfo
 = {

41 .
gí
 = 
BIT
(1),

42 .
	gis_•rögdÆe
 = 
åue
,

43 .
	gcodíame
 = "spingdale"

46 c⁄° 
öãl_devi˚_öfo
 
	göãl_i915_öfo
 = {

47 .
gí
 = 
BIT
(2),

48 .
	gis_gø¡sdÆe
 = 
åue
,

49 .
	gcodíame
 = "grantsdale"

51 c⁄° 
öãl_devi˚_öfo
 
	göãl_i915m_öfo
 = {

52 .
gí
 = 
BIT
(2),

53 .
	gis_mobûe
 = 
åue
,

54 .
	gis_Æviso
 = 
åue
,

55 .
	gcodíame
 = "alviso"

57 c⁄° 
öãl_devi˚_öfo
 
	göãl_i945_öfo
 = {

58 .
gí
 = 
BIT
(2),

59 .
	gis_œkï‹t
 = 
åue
,

60 .
	gcodíame
 = "lakeport"

62 c⁄° 
öãl_devi˚_öfo
 
	göãl_i945m_öfo
 = {

63 .
gí
 = 
BIT
(2),

64 .
	gis_mobûe
 = 
åue
,

65 .
	gis_ˇli°oga
 = 
åue
,

66 .
	gcodíame
 = "calistoga"

69 c⁄° 
öãl_devi˚_öfo
 
	göãl_g33_öfo
 = {

70 .
gí
 = 
BIT
(2),

71 .
	gis_bóæake
 = 
åue
,

72 .
	gcodíame
 = "bearlake"

74 c⁄° 
öãl_devi˚_öfo
 
	göãl_pöevõw_öfo
 = {

75 .
gí
 = 
BIT
(2),

76 .
	gis_mobûe
 = 
åue
,

77 .
	gis_pöevõw
 = 
åue
,

78 .
	gcodíame
 = "pineview"

81 c⁄° 
öãl_devi˚_öfo
 
	göãl_i965_öfo
 = {

82 .
gí
 = 
BIT
(3),

83 .
	gis_brﬂdw©î
 = 
åue
,

84 .
	gcodíame
 = "broadwater"

87 c⁄° 
öãl_devi˚_öfo
 
	göãl_i965m_öfo
 = {

88 .
gí
 = 
BIT
(3),

89 .
	gis_mobûe
 = 
åue
,

90 .
	gis_¸e°löe
 = 
åue
,

91 .
	gcodíame
 = "crestline"

94 c⁄° 
öãl_devi˚_öfo
 
	göãl_g45_öfo
 = {

95 .
gí
 = 
BIT
(3),

96 .
	gis_ógÀœke
 = 
åue
,

97 .
	gcodíame
 = "eaglelake"

99 c⁄° 
öãl_devi˚_öfo
 
	göãl_gm45_öfo
 = {

100 .
gí
 = 
BIT
(3),

101 .
	gis_mobûe
 = 
åue
,

102 .
	gis_ˇ¡iga
 = 
åue
,

103 .
	gcodíame
 = "cantiga"

106 c⁄° 
öãl_devi˚_öfo
 
	göãl_ú⁄œke_öfo
 = {

107 .
gí
 = 
BIT
(4),

108 .
	gis_ú⁄œke
 = 
åue
,

109 .
	gcodíame
 = "ironlake"

111 c⁄° 
öãl_devi˚_öfo
 
	göãl_ú⁄œke_m_öfo
 = {

112 .
gí
 = 
BIT
(4),

113 .
	gis_mobûe
 = 
åue
,

114 .
	gis_¨øndÆe
 = 
åue
,

115 .
	gcodíame
 = "arrandale"

118 c⁄° 
öãl_devi˚_öfo
 
	göãl_ßndybridge_öfo
 = {

119 .
gí
 = 
BIT
(5),

120 .
	gis_ßndybridge
 = 
åue
,

121 .
	gcodíame
 = "sandybridge"

123 c⁄° 
öãl_devi˚_öfo
 
	göãl_ßndybridge_m_öfo
 = {

124 .
gí
 = 
BIT
(5),

125 .
	gis_mobûe
 = 
åue
,

126 .
	gis_ßndybridge
 = 
åue
,

127 .
	gcodíame
 = "sandybridge"

130 c⁄° 
öãl_devi˚_öfo
 
	göãl_ivybridge_öfo
 = {

131 .
gí
 = 
BIT
(6),

132 .
	gis_ivybridge
 = 
åue
,

133 .
	gcodíame
 = "ivybridge"

135 c⁄° 
öãl_devi˚_öfo
 
	göãl_ivybridge_m_öfo
 = {

136 .
gí
 = 
BIT
(6),

137 .
	gis_mobûe
 = 
åue
,

138 .
	gis_ivybridge
 = 
åue
,

139 .
	gcodíame
 = "ivybridge"

142 c⁄° 
öãl_devi˚_öfo
 
	göãl_vÆÀyvõw_öfo
 = {

143 .
gí
 = 
BIT
(6),

144 .
	gis_vÆÀyvõw
 = 
åue
,

145 .
	gcodíame
 = "valleyview"

148 c⁄° 
öãl_devi˚_öfo
 
	göãl_haswñl_öfo
 = {

149 .
gí
 = 
BIT
(6),

150 .
	gis_haswñl
 = 
åue
,

151 .
	gcodíame
 = "haswell"

154 c⁄° 
öãl_devi˚_öfo
 
	göãl_brﬂdwñl_öfo
 = {

155 .
gí
 = 
BIT
(7),

156 .
	gis_brﬂdwñl
 = 
åue
,

157 .
	gcodíame
 = "broadwell"

160 c⁄° 
öãl_devi˚_öfo
 
	göãl_chîryvõw_öfo
 = {

161 .
gí
 = 
BIT
(7),

162 .
	gis_chîryvõw
 = 
åue
,

163 .
	gcodíame
 = "cherryview"

166 c⁄° 
öãl_devi˚_öfo
 
	göãl_skyœke_öfo
 = {

167 .
gí
 = 
BIT
(8),

168 .
	gis_skyœke
 = 
åue
,

169 .
	gcodíame
 = "skylake"

172 c⁄° 
öãl_devi˚_öfo
 
	göãl_broxt⁄_öfo
 = {

173 .
gí
 = 
BIT
(8),

174 .
	gis_broxt⁄
 = 
åue
,

175 .
	gcodíame
 = "broxton"

178 c⁄° 
öãl_devi˚_öfo
 
	göãl_kabyœke_öfo
 = {

179 .
gí
 = 
BIT
(8),

180 .
	gis_kabyœke
 = 
åue
,

181 .
	gcodíame
 = "kabylake"

184 c⁄° 
öãl_devi˚_öfo
 
	göãl_gemöûake_öfo
 = {

185 .
gí
 = 
BIT
(8),

186 .
	gis_gemöûake
 = 
åue
,

187 .
	gcodíame
 = "geminilake"

190 c⁄° 
öãl_devi˚_öfo
 
	göãl_cof„ñake_öfo
 = {

191 .
gí
 = 
BIT
(8),

192 .
	gis_cof„ñake
 = 
åue
,

193 .
	gcodíame
 = "coffeelake"

196 c⁄° 
öãl_devi˚_öfo
 
	göãl_ˇ¬⁄œke_öfo
 = {

197 .
gí
 = 
BIT
(9),

198 .
	gis_ˇ¬⁄œke
 = 
åue
,

199 .
	gcodíame
 = "cannonlake"

202 c⁄° 
pci_id_m©ch
 
	göãl_devi˚_m©ch
[] = {

203 
INTEL_I810_IDS
(&
öãl_i810_öfo
),

204 
INTEL_I815_IDS
(&
öãl_i815_öfo
),

206 
INTEL_I830_IDS
(&
öãl_i830_öfo
),

207 
INTEL_I845G_IDS
(&
öãl_i845_öfo
),

208 
INTEL_I85X_IDS
(&
öãl_i855_öfo
),

209 
INTEL_I865G_IDS
(&
öãl_i865_öfo
),

211 
INTEL_I915G_IDS
(&
öãl_i915_öfo
),

212 
INTEL_I915GM_IDS
(&
öãl_i915m_öfo
),

213 
INTEL_I945G_IDS
(&
öãl_i945_öfo
),

214 
INTEL_I945GM_IDS
(&
öãl_i945m_öfo
),

216 
INTEL_G33_IDS
(&
öãl_g33_öfo
),

217 
INTEL_PINEVIEW_IDS
(&
öãl_pöevõw_öfo
),

219 
INTEL_I965G_IDS
(&
öãl_i965_öfo
),

220 
INTEL_I965GM_IDS
(&
öãl_i965m_öfo
),

222 
INTEL_G45_IDS
(&
öãl_g45_öfo
),

223 
INTEL_GM45_IDS
(&
öãl_gm45_öfo
),

225 
INTEL_IRONLAKE_D_IDS
(&
öãl_ú⁄œke_öfo
),

226 
INTEL_IRONLAKE_M_IDS
(&
öãl_ú⁄œke_m_öfo
),

228 
INTEL_SNB_D_IDS
(&
öãl_ßndybridge_öfo
),

229 
INTEL_SNB_M_IDS
(&
öãl_ßndybridge_m_öfo
),

231 
INTEL_IVB_D_IDS
(&
öãl_ivybridge_öfo
),

232 
INTEL_IVB_M_IDS
(&
öãl_ivybridge_m_öfo
),

234 
INTEL_HSW_IDS
(&
öãl_haswñl_öfo
),

236 
INTEL_VLV_IDS
(&
öãl_vÆÀyvõw_öfo
),

238 
INTEL_BDW_IDS
(&
öãl_brﬂdwñl_öfo
),

240 
INTEL_CHV_IDS
(&
öãl_chîryvõw_öfo
),

242 
INTEL_SKL_IDS
(&
öãl_skyœke_öfo
),

244 
INTEL_BXT_IDS
(&
öãl_broxt⁄_öfo
),

246 
INTEL_KBL_IDS
(&
öãl_kabyœke_öfo
),

248 
INTEL_GLK_IDS
(&
öãl_gemöûake_öfo
),

250 
INTEL_CFL_IDS
(&
öãl_cof„ñake_öfo
),

252 
INTEL_CNL_IDS
(&
öãl_ˇ¬⁄œke_öfo
),

254 
INTEL_VGA_DEVICE
(
PCI_MATCH_ANY
, &
öãl_gíîic_öfo
),

266 c⁄° 
öãl_devi˚_öfo
 *
	$öãl_gë_devi˚_öfo
(
uöt16_t
 
devid
)

268 c⁄° 
öãl_devi˚_öfo
 *
ˇche
 = &
öãl_gíîic_öfo
;

269 
uöt16_t
 
ˇched_devid
;

270 
i
;

272 i‡(
ˇched_devid
 =
devid
)

273 
out
;

276 
i
 = 0; 
öãl_devi˚_m©ch
[i].
devi˚_id
 !
PCI_MATCH_ANY
; i++) {

277 i‡(
devid
 =
öãl_devi˚_m©ch
[
i
].
devi˚_id
)

281 
ˇched_devid
 = 
devid
;

282 
ˇche
 = (*)
öãl_devi˚_m©ch
[
i
].
m©ch_d©a
;

284 
out
:

285  
ˇche
;

286 
	}
}

297 
	$öãl_gí
(
uöt16_t
 
devid
)

299  
	`ffs
(
	`öãl_gë_devi˚_öfo
(
devid
)->
gí
);

300 
	}
}

311 
	$öãl_gt
(
uöt16_t
 
devid
)

313 
mask
 = 
	`öãl_gí
(
devid
);

315 i‡(
mask
 >= 8)

316 
mask
 = 0xf;

317 i‡(
mask
 >= 6)

318 
mask
 = 0x3;

320 
mask
 = 0;

322  (
devid
 >> 4Ë& 
mask
;

323 
	}
}

	@intel_io.h

28 #i‚de‡
INTEL_GPU_TOOLS_H


29 
	#INTEL_GPU_TOOLS_H


	)

31 
	~<°döt.h
>

32 
	~<pcüc˚ss.h
>

35 *
igt_globÆ_mmio
;

36 
öãl_mmio_u£_pci_b¨
(
pci_devi˚
 *
pci_dev
);

37 
öãl_mmio_u£_dump_fûe
(*
fûe
);

39 
öãl_ªgi°î_ac˚ss_öô
(
pci_devi˚
 *
pci_dev
, 
ß„
, 
fd
);

40 
öãl_ªgi°î_ac˚ss_föi
();

41 
uöt32_t
 
öãl_ªgi°î_ªad
(uöt32_à
ªg
);

42 
öãl_ªgi°î_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
);

43 
öãl_ªgi°î_ac˚ss_√eds_Ákewake
();

45 
uöt32_t
 
INREG
(uöt32_à
ªg
);

46 
uöt16_t
 
INREG16
(
uöt32_t
 
ªg
);

47 
uöt8_t
 
INREG8
(
uöt32_t
 
ªg
);

48 
OUTREG
(
uöt32_t
 
ªg
, uöt32_à
vÆ
);

49 
OUTREG16
(
uöt32_t
 
ªg
, 
uöt16_t
 
vÆ
);

50 
OUTREG8
(
uöt32_t
 
ªg
, 
uöt8_t
 
vÆ
);

53 
uöt32_t
 
öãl_dpio_ªg_ªad
(uöt32_à
ªg
, 
phy
);

54 
öãl_dpio_ªg_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
, 
phy
);

55 
uöt32_t
 
öãl_Êisdsi_ªg_ªad
(uöt32_à
ªg
);

56 
öãl_Êisdsi_ªg_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
);

57 
uöt32_t
 
öãl_iosf_sb_ªad
(uöt32_à
p‹t
, uöt32_à
ªg
);

58 
öãl_iosf_sb_wrôe
(
uöt32_t
 
p‹t
, uöt32_à
ªg
, uöt32_à
vÆ
);

60 
öãl_punô_ªad
(
uöt32_t
 
addr
, uöt32_à*
vÆ
);

61 
öãl_punô_wrôe
(
uöt32_t
 
addr
, uöt32_à
vÆ
);

62 
öãl_nc_ªad
(
uöt32_t
 
addr
, uöt32_à*
vÆ
);

63 
öãl_nc_wrôe
(
uöt32_t
 
addr
, uöt32_à
vÆ
);

66 #i‚de‡
__GTK_DOC_IGNORE__


68 
	#INTEL_RANGE_RSVD
 (0<<0Ë

	)

69 
	#INTEL_RANGE_READ
 (1<<0)

	)

70 
	#INTEL_RANGE_WRITE
 (1<<1)

	)

71 
	#INTEL_RANGE_RW
 (
INTEL_RANGE_READ
 | 
INTEL_RANGE_WRITE
)

	)

72 
	#INTEL_RANGE_END
 (1<<31)

	)

74 
	söãl_ªgi°î_ønge
 {

75 
uöt32_t
 
	mba£
;

76 
uöt32_t
 
	msize
;

77 
uöt32_t
 
	mÊags
;

80 
	söãl_ªgi°î_m≠
 {

81 
öãl_ªgi°î_ønge
 *
	mm≠
;

82 
uöt32_t
 
	mt›
;

83 
uöt32_t
 
	mÆignmít_mask
;

85 
öãl_ªgi°î_m≠
 
öãl_gë_ªgi°î_m≠
(
uöt32_t
 
devid
);

86 
öãl_ªgi°î_ønge
 *
öãl_gë_ªgi°î_ønge
(
öãl_ªgi°î_m≠
 
m≠
, 
uöt32_t
 
off£t
, uöt32_à
mode
);

	@intel_iosf.c

1 
	~<uni°d.h
>

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<îr.h
>

5 
	~<î∫o.h
>

7 
	~"öãl_io.h
"

8 
	~"öãl_ªg.h
"

9 
	~"igt_c‹e.h
"

11 
	#TIMEOUT_US
 500000

	)

14 
	#SB_MRD_NP
 0x00

	)

16 
	#SB_MWR_NP
 0x01

	)

18 
	#SB_CRRDDA_NP
 0x06

	)

20 
	#SB_CRWRDA_NP
 0x07

	)

22 
	$vlv_sideb™d_rw
(
uöt32_t
 
p‹t
, 
uöt8_t
 
›code
, uöt32_à
addr
,

23 
uöt32_t
 *
vÆ
)

25 
timeout
 = 0;

26 
uöt32_t
 
cmd
, 
dev‚
, 
be
, 
b¨
;

27 
is_ªad
 = (
›code
 =
SB_CRRDDA_NP
 || opcodê=
SB_MRD_NP
);

29 
b¨
 = 0;

30 
be
 = 0xf;

31 
dev‚
 = 0;

33 
cmd
 = (
dev‚
 << 
IOSF_DEVFN_SHIFT
Ë| (
›code
 << 
IOSF_OPCODE_SHIFT
) |

34 (
p‹t
 << 
IOSF_PORT_SHIFT
Ë| (
be
 << 
IOSF_BYTE_ENABLES_SHIFT
) |

35 (
b¨
 << 
IOSF_BAR_SHIFT
);

37 i‡(
	`öãl_ªgi°î_ªad
(
VLV_IOSF_DOORBELL_REQ
Ë& 
IOSF_SB_BUSY
) {

38 
	`igt_w¨n
("w¨nög:Öcodê(%sËmaûboxác˚s†Áûed\n", 
is_ªad
 ? "read" : "write");

39  -
EAGAIN
;

42 
	`öãl_ªgi°î_wrôe
(
VLV_IOSF_ADDR
, 
addr
);

43 i‡(!
is_ªad
)

44 
	`öãl_ªgi°î_wrôe
(
VLV_IOSF_DATA
, *
vÆ
);

46 
	`öãl_ªgi°î_wrôe
(
VLV_IOSF_DOORBELL_REQ
, 
cmd
);

49 
	`u¶ìp
(1);

50 
timeout
++;

51 } 
	`öãl_ªgi°î_ªad
(
VLV_IOSF_DOORBELL_REQ
Ë& 
IOSF_SB_BUSY
 &&

52 
timeout
 < 
TIMEOUT_US
);

54 i‡(
timeout
 >
TIMEOUT_US
) {

55 
	`igt_w¨n
("timeouàwaôög f‹Öcodê%†(%dËtÿföish\n", 
is_ªad
 ? "ªad" : "wrôe", 
addr
);

56  -
ETIMEDOUT
;

59 i‡(
is_ªad
)

60 *
vÆ
 = 
	`öãl_ªgi°î_ªad
(
VLV_IOSF_DATA
);

61 
	`öãl_ªgi°î_wrôe
(
VLV_IOSF_DATA
, 0);

64 
	}
}

76 
	$öãl_punô_ªad
(
uöt32_t
 
addr
, uöt32_à*
vÆ
)

78  
	`vlv_sideb™d_rw
(
IOSF_PORT_PUNIT
, 
SB_CRRDDA_NP
, 
addr
, 
vÆ
);

79 
	}
}

91 
	$öãl_punô_wrôe
(
uöt32_t
 
addr
, uöt32_à
vÆ
)

93  
	`vlv_sideb™d_rw
(
IOSF_PORT_PUNIT
, 
SB_CRWRDA_NP
, 
addr
, &
vÆ
);

94 
	}
}

106 
	$öãl_nc_ªad
(
uöt32_t
 
addr
, uöt32_à*
vÆ
)

108  
	`vlv_sideb™d_rw
(
IOSF_PORT_NC
, 
SB_CRRDDA_NP
, 
addr
, 
vÆ
);

109 
	}
}

121 
	$öãl_nc_wrôe
(
uöt32_t
 
addr
, uöt32_à
vÆ
)

123  
	`vlv_sideb™d_rw
(
IOSF_PORT_NC
, 
SB_CRWRDA_NP
, 
addr
, &
vÆ
);

124 
	}
}

136 
uöt32_t
 
	$öãl_dpio_ªg_ªad
(
uöt32_t
 
ªg
, 
phy
)

138 
uöt32_t
 
vÆ
;

140 i‡(
phy
 == 0)

141 
	`vlv_sideb™d_rw
(
IOSF_PORT_DPIO
, 
SB_MRD_NP
, 
ªg
, &
vÆ
);

143 
	`vlv_sideb™d_rw
(
IOSF_PORT_DPIO_2
, 
SB_MRD_NP
, 
ªg
, &
vÆ
);

144  
vÆ
;

145 
	}
}

155 
	$öãl_dpio_ªg_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
, 
phy
)

157 i‡(
phy
 == 0)

158 
	`vlv_sideb™d_rw
(
IOSF_PORT_DPIO
, 
SB_MWR_NP
, 
ªg
, &
vÆ
);

160 
	`vlv_sideb™d_rw
(
IOSF_PORT_DPIO_2
, 
SB_MWR_NP
, 
ªg
, &
vÆ
);

161 
	}
}

163 
uöt32_t
 
	$öãl_Êisdsi_ªg_ªad
(
uöt32_t
 
ªg
)

165 
uöt32_t
 
vÆ
 = 0;

167 
	`vlv_sideb™d_rw
(
IOSF_PORT_FLISDSI
, 
SB_CRRDDA_NP
, 
ªg
, &
vÆ
);

169  
vÆ
;

170 
	}
}

172 
	$öãl_Êisdsi_ªg_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
)

174 
	`vlv_sideb™d_rw
(
IOSF_PORT_FLISDSI
, 
SB_CRWRDA_NP
, 
ªg
, &
vÆ
);

175 
	}
}

177 
uöt32_t
 
	$öãl_iosf_sb_ªad
(
uöt32_t
 
p‹t
, uöt32_à
ªg
)

179 
uöt32_t
 
vÆ
;

181 
	`vlv_sideb™d_rw
(
p‹t
, 
SB_CRRDDA_NP
, 
ªg
, &
vÆ
);

183  
vÆ
;

184 
	}
}

186 
	$öãl_iosf_sb_wrôe
(
uöt32_t
 
p‹t
, uöt32_à
ªg
, uöt32_à
vÆ
)

188 
	`vlv_sideb™d_rw
(
p‹t
, 
SB_CRWRDA_NP
, 
ªg
, &
vÆ
);

189 
	}
}

	@intel_mmio.c

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

33 
	~<°dlib.h
>

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<°rög.h
>

37 
	~<î∫o.h
>

38 
	~<îr.h
>

39 
	~<as£π.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/°©.h
>

42 
	~<sys/mm™.h
>

44 
	~"öãl_io.h
"

45 
	~"igt_c‹e.h
"

46 
	~"igt_gt.h
"

47 
	~"öãl_chù£t.h
"

66 
	#FAKEKEY
 0x2468a˚0

	)

74 *
	gigt_globÆ_mmio
;

76 
	s_mmio_d©a
 {

77 
	möôed
;

78 
boﬁ
 
	mß„
;

79 
uöt32_t
 
	mi915_devid
;

80 
öãl_ªgi°î_m≠
 
	mm≠
;

81 
	mkey
;

82 } 
	gmmio_d©a
;

93 
	$öãl_mmio_u£_dump_fûe
(*
fûe
)

95 
fd
;

96 
°©
 
°
;

98 
fd
 = 
	`›í
(
fûe
, 
O_RDWR
);

99 
	`igt_Áû_⁄_f
(
fd
 == -1,

100 "Couldn'à›í %s\n", 
fûe
);

102 
	`f°©
(
fd
, &
°
);

103 
igt_globÆ_mmio
 = 
	`mm≠
(
NULL
, 
°
.
°_size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

104 
	`igt_Áû_⁄_f
(
igt_globÆ_mmio
 =
MAP_FAILED
,

105 "Couldn'àmm≠ %s\n", 
fûe
);

106 
	`˛o£
(
fd
);

107 
	}
}

118 
	$öãl_mmio_u£_pci_b¨
(
pci_devi˚
 *
pci_dev
)

120 
uöt32_t
 
devid
, 
gí
;

121 
mmio_b¨
, 
mmio_size
;

122 
îr‹
;

124 
devid
 = 
pci_dev
->
devi˚_id
;

125 i‡(
	`IS_GEN2
(
devid
))

126 
mmio_b¨
 = 1;

128 
mmio_b¨
 = 0;

130 
gí
 = 
	`öãl_gí
(
devid
);

131 i‡(
gí
 < 3)

132 
mmio_size
 = 512*1024;

133 i‡(
gí
 < 5)

134 
mmio_size
 = 512*1024;

136 
mmio_size
 = 2*1024*1024;

138 
îr‹
 = 
	`pci_devi˚_m≠_ønge
 (
pci_dev
,

139 
pci_dev
->
ªgi⁄s
[
mmio_b¨
].
ba£_addr
,

140 
mmio_size
,

141 
PCI_DEV_MAP_FLAG_WRITABLE
,

142 &
igt_globÆ_mmio
);

144 
	`igt_Áû_⁄_f
(
îr‹
 != 0,

146 
	}
}

149 
	$ªÀa£_f‹˚wake_lock
(
fd
)

151 
	`˛o£
(
fd
);

152 
	}
}

168 
	$öãl_ªgi°î_ac˚ss_öô
(
pci_devi˚
 *
pci_dev
, 
ß„
, 
fd
)

170 
ªt
;

173 i‡(
igt_globÆ_mmio
 =
NULL
)

174 
	`öãl_mmio_u£_pci_b¨
(
pci_dev
);

176 
	`igt_as£π
(
igt_globÆ_mmio
 !
NULL
);

178 i‡(
mmio_d©a
.
öôed
)

181 
mmio_d©a
.
ß„
 = (safe != 0 &&

182 
	`öãl_gí
(
pci_dev
->
devi˚_id
Ë>4Ë? 
åue
 : 
Ál£
;

183 
mmio_d©a
.
i915_devid
 = 
pci_dev
->
devi˚_id
;

184 i‡(
mmio_d©a
.
ß„
)

185 
mmio_d©a
.
m≠
 = 
	`öãl_gë_ªgi°î_m≠
(mmio_d©a.
i915_devid
);

190 
ªt
 = 
	`igt_›í_f‹˚wake_h™dÀ
(
fd
);

191 i‡(
ªt
 == -1)

192 
mmio_d©a
.
key
 = 
FAKEKEY
;

194 
mmio_d©a
.
key
 = 
ªt
;

196 
mmio_d©a
.
öôed
++;

198 
	}
}

201 
	$öãl_ªgi°î_ac˚ss_√eds_wake
()

203  
mmio_d©a
.
key
 !
FAKEKEY
;

204 
	}
}

212 
	$öãl_ªgi°î_ac˚ss_√eds_Ákewake
()

214  
mmio_d©a
.
key
 =
FAKEKEY
;

215 
	}
}

224 
	$öãl_ªgi°î_ac˚ss_föi
()

226 i‡(
mmio_d©a
.
key
 && 
	`öãl_ªgi°î_ac˚ss_√eds_wake
())

227 
	`ªÀa£_f‹˚wake_lock
(
mmio_d©a
.
key
);

228 
mmio_d©a
.
öôed
--;

229 
	}
}

244 
uöt32_t


245 
	$öãl_ªgi°î_ªad
(
uöt32_t
 
ªg
)

247 
öãl_ªgi°î_ønge
 *
ønge
;

248 
uöt32_t
 
ªt
;

250 
	`igt_as£π
(
mmio_d©a
.
öôed
);

252 i‡(
	`öãl_gí
(
mmio_d©a
.
i915_devid
) >= 6)

253 
	`igt_as£π
(
mmio_d©a
.
key
 != -1);

255 i‡(!
mmio_d©a
.
ß„
)

256 
ªad_out
;

258 
ønge
 = 
	`öãl_gë_ªgi°î_ønge
(
mmio_d©a
.
m≠
,

259 
ªg
,

260 
INTEL_RANGE_READ
);

262 if(!
ønge
) {

263 
	`igt_w¨n
("Regi°îÑód blocked f‹ sa„ty ""(*0x%08x)\n", 
ªg
);

264 
ªt
 = 0xffffffff;

265 
out
;

268 
ªad_out
:

269 
ªt
 = *(vﬁ©ûê
uöt32_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
);

270 
out
:

271  
ªt
;

272 
	}
}

286 
	$öãl_ªgi°î_wrôe
(
uöt32_t
 
ªg
, uöt32_à
vÆ
)

288 
öãl_ªgi°î_ønge
 *
ønge
;

290 
	`igt_as£π
(
mmio_d©a
.
öôed
);

292 i‡(
	`öãl_gí
(
mmio_d©a
.
i915_devid
) >= 6)

293 
	`igt_as£π
(
mmio_d©a
.
key
 != -1);

295 i‡(!
mmio_d©a
.
ß„
)

296 
wrôe_out
;

298 
ønge
 = 
	`öãl_gë_ªgi°î_ønge
(
mmio_d©a
.
m≠
,

299 
ªg
,

300 
INTEL_RANGE_WRITE
);

302 
	`igt_w¨n_⁄_f
(!
ønge
,

303 "Regi°î wrôêblocked f‹ sa„ty ""(*0x%08x = 0x%x)\n", 
ªg
, 
vÆ
);

305 
wrôe_out
:

306 *(vﬁ©ûê
uöt32_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
Ë
vÆ
;

307 
	}
}

322 
uöt32_t
 
	$INREG
(
uöt32_t
 
ªg
)

324  *(vﬁ©ûê
uöt32_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
);

325 
	}
}

339 
uöt16_t
 
	$INREG16
(
uöt32_t
 
ªg
)

341  *(vﬁ©ûê
uöt16_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
);

342 
	}
}

356 
uöt8_t
 
	$INREG8
(
uöt32_t
 
ªg
)

358  *((vﬁ©ûê
uöt8_t
 *)
igt_globÆ_mmio
 + 
ªg
);

359 
	}
}

372 
	$OUTREG
(
uöt32_t
 
ªg
, uöt32_à
vÆ
)

374 *(vﬁ©ûê
uöt32_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
Ë
vÆ
;

375 
	}
}

388 
	$OUTREG16
(
uöt32_t
 
ªg
, 
uöt16_t
 
vÆ
)

390 *(vﬁ©ûê
uöt16_t
 *)((vﬁ©ûê*)
igt_globÆ_mmio
 + 
ªg
Ë
vÆ
;

391 
	}
}

404 
	$OUTREG8
(
uöt32_t
 
ªg
, 
uöt8_t
 
vÆ
)

406 *((vﬁ©ûê
uöt8_t
 *)
igt_globÆ_mmio
 + 
ªg
Ë
vÆ
;

407 
	}
}

	@intel_os.c

29 
	~"c⁄fig.h
"

31 
	~<uni°d.h
>

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°rög.h
>

35 
	~<î∫o.h
>

36 
	~<îr.h
>

37 
	~<as£π.h
>

38 
	~<sys/io˘l.h
>

39 
	~<f˙é.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/mm™.h
>

42 #ifde‡
HAVE_STRUCT_SYSINFO_TOTALRAM


43 
	~<sys/sysöfo.h
>

44 #ñi‡
deföed
(
HAVE_SWAPCTL
)

45 
	~<sys/sw≠.h
>

47 
	~<sys/ªsour˚.h
>

49 
	~"öãl_io.h
"

50 
	~"drmã°.h
"

51 
	~"igt_aux.h
"

52 
	~"igt_debugfs.h
"

60 
uöt64_t


61 
	$öãl_gë_tŸÆ_øm_mb
()

63 
uöt64_t
 
ªtvÆ
;

65 #ifde‡
HAVE_STRUCT_SYSINFO_TOTALRAM


66 
sysöfo
 
sysöf
;

68 
	`igt_as£π
(
	`sysöfo
(&
sysöf
) == 0);

69 
ªtvÆ
 = 
sysöf
.
tŸÆøm
;

70 
ªtvÆ
 *
sysöf
.
mem_unô
;

71 #ñi‡
	`deföed
(
_SC_PAGESIZE
Ë&& deföed(
_SC_PHYS_PAGES
)

72 
∑gesize
, 
≈ages
;

74 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

75 
≈ages
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

77 
ªtvÆ
 = (
uöt64_t
Ë
∑gesize
 * 
≈ages
;

82  
ªtvÆ
 / (1024*1024);

83 
	}
}

91 
uöt64_t


92 
	$öãl_gë_avaû_øm_mb
()

94 
uöt64_t
 
ªtvÆ
;

96 #ifde‡
HAVE_STRUCT_SYSINFO_TOTALRAM


97 
sysöfo
 
sysöf
;

98 
fd
;

100 
fd
 = 
	`drm_›í_drivî
(
DRIVER_INTEL
);

101 
	`öãl_purge_vm_ˇches
(
fd
);

102 
	`˛o£
(
fd
);

104 
	`igt_as£π
(
	`sysöfo
(&
sysöf
) == 0);

105 
ªtvÆ
 = 
sysöf
.
‰ìøm
;

106 
ªtvÆ
 *
sysöf
.
mem_unô
;

107 #ñi‡
	`deföed
(
_SC_PAGESIZE
Ë&& deföed(
_SC_AVPHYS_PAGES
)

108 
∑gesize
, 
≈ages
;

110 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

111 
≈ages
 = 
	`sysc⁄f
(
_SC_AVPHYS_PAGES
);

113 
ªtvÆ
 = (
uöt64_t
Ë
∑gesize
 * 
≈ages
;

118  
ªtvÆ
 / (1024*1024);

119 
	}
}

127 
uöt64_t


128 
	$öãl_gë_tŸÆ_sw≠_mb
()

130 
uöt64_t
 
ªtvÆ
;

132 #ifde‡
HAVE_STRUCT_SYSINFO_TOTALRAM


133 
sysöfo
 
sysöf
;

135 
	`igt_as£π
(
	`sysöfo
(&
sysöf
) == 0);

136 
ªtvÆ
 = 
sysöf
.
‰ìsw≠
;

137 
ªtvÆ
 *
sysöf
.
mem_unô
;

138 #ñi‡
	`deföed
(
HAVE_SWAPCTL
)

139 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

140 
uöt64_t
 
tŸÆ∑ges
 = 0;

141 
sw≠tbl_t
 *
swt
;

142 *
buf
;

143 
n
, 
i
;

145 i‡((
n
 = 
	`sw≠˘l
(
SC_GETNSWP
, 
NULL
)) == -1) {

146 
	`igt_w¨n
("swapctl: GETNSWP");

149 i‡(
n
 == 0) {

154 
swt
 = 
	`mÆloc
((
sw≠èbÀ
Ë+ (
n
 * (
sw≠ít_t
)));

155 
buf
 = 
	`mÆloc
(
n
 * 
MAXPATHLEN
);

156 i‡(!
swt
 || !
buf
) {

157 
	`igt_w¨n
("malloc");

159 
swt
->
swt_n
 = 
n
;

160 
i
 = 0 ; i < 
n
; i++) {

161 
swt
->
swt_ít
[
i
].
°e_∑th
 = 
buf
 + (ò* 
MAXPATHLEN
);

164 i‡((
n
 = 
	`sw≠˘l
(
SC_LIST
, 
swt
)) == -1) {

165 
	`igt_w¨n
("swapctl: LIST");

167 
i
 = 0; i < 
swt
->
swt_n
; i++) {

168 
tŸÆ∑ges
 +
swt
->
swt_ít
[
i
].
°e_∑ges
;

172 
	`‰ì
(
swt
);

173 
	`‰ì
(
buf
);

175 
ªtvÆ
 = (
uöt64_t
Ë
∑gesize
 * 
tŸÆ∑ges
;

181  
ªtvÆ
 / (1024*1024);

182 
	}
}

184 
uöt64_t
 
	$vfs_fûe_max
()

186 
max
;

187 i‡(
max
 == 0) {

188 
FILE
 *
fûe
 = 
	`f›í
("/proc/sys/fs/file-max", "r");

189 
max
 = 80000;

190 i‡(
fûe
) {

191 
	`igt_as£π
(
	`fsˇnf
(
fûe
, "%Œu", &
max
) == 1);

192 
	`f˛o£
(
fûe
);

195  
max
;

196 
	}
}

198 
	$max_›í_fûes
()

200 
æimô
 
æim
;

202 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æim
))

203 
æim
.
æim_cur
 = 64 << 10;

205  
æim
.
æim_cur
;

206 
	}
}

214 
	$öãl_ªquúe_fûes
(
uöt64_t
 
cou¡
)

216 
	`igt_ªquúe_f
(
cou¡
 < 
	`max_›í_fûes
(),

218 ()
cou¡
, ()
	`max_›í_fûes
());

219 
	}
}

221 
	$__öãl_check_mem‹y
(
uöt64_t
 
cou¡
, uöt64_à
size
, 
mode
,

222 
uöt64_t
 *
out_ªquúed
, uöt64_à*
out_tŸÆ
)

225 
	#KERNEL_BO_OVERHEAD
 512

	)

226 
uöt64_t
 
ªquúed
, 
tŸÆ
;

228 
ªquúed
 = 
cou¡
;

229 
ªquúed
 *
size
 + 
KERNEL_BO_OVERHEAD
;

230 
ªquúed
 = 
	`ALIGN
(required, 4096);

232 
	`igt_debug
("Checking %'llu surfaces of size %'llu bytes (total %'llu)ágainst %s%s\n",

233 ()
cou¡
, ()
size
, ()
ªquúed
,

234 
mode
 & (
CHECK_RAM
 | 
CHECK_SWAP
) ? "RAM" : "",

235 
mode
 & 
CHECK_SWAP
 ? " + swap": "");

237 
tŸÆ
 = 0;

238 i‡(
mode
 & (
CHECK_RAM
 | 
CHECK_SWAP
))

239 
tŸÆ
 +
	`öãl_gë_avaû_øm_mb
();

240 i‡(
mode
 & 
CHECK_SWAP
)

241 
tŸÆ
 +
	`öãl_gë_tŸÆ_sw≠_mb
();

242 
tŸÆ
 *= 1024 * 1024;

244 i‡(
out_ªquúed
)

245 *
out_ªquúed
 = 
ªquúed
;

247 i‡(
out_tŸÆ
)

248 *
out_tŸÆ
 = 
tŸÆ
;

250 i‡(
cou¡
 > 
	`vfs_fûe_max
())

251  
Ál£
;

253  
ªquúed
 < 
tŸÆ
;

254 
	}
}

279 
	$öãl_ªquúe_mem‹y
(
uöt64_t
 
cou¡
, uöt64_à
size
, 
mode
)

281 
uöt64_t
 
ªquúed
, 
tŸÆ
;

283 
	`igt_ªquúe_f
(
	`__öãl_check_mem‹y
(
cou¡
, 
size
, 
mode
,

284 &
ªquúed
, &
tŸÆ
),

286 ()
cou¡
,

287 ()((
ªquúed
 + ((1<<20) - 1)) >> 20),

288 ()(
tŸÆ
 >> 20),

289 
mode
 & (
CHECK_RAM
 | 
CHECK_SWAP
) ? "RAM" : "",

290 
mode
 & 
CHECK_SWAP
 ? " + swap": "",

291 ()
	`vfs_fûe_max
());

293 
	`igt_skù_⁄_simuœti⁄
();

294 
	}
}

296 
	$öãl_purge_vm_ˇches
(
drm_fd
)

298 
fd
;

300 
	`igt_dr›_ˇches_£t
(
drm_fd
, 
DROP_SHRINK_ALL
 | 
DROP_IDLE
 | 
DROP_FREED
);

302 
fd
 = 
	`›í
("/¥oc/sys/vm/dr›_ˇches", 
O_WRONLY
);

303 i‡(
fd
 >= 0) {

307 
	`igt_ign‹e_w¨n
(
	`wrôe
(
fd
, "4\n", 2));

308 
	`˛o£
(
fd
);

315 
fd
 = 
	`›í
("/¥oc/sys/vm/dr›_ˇches", 
O_WRONLY
);

316 i‡(
fd
 < 0)

322 
	`igt_ign‹e_w¨n
(
	`wrôe
(
fd
, "3\n", 2));

323 
	`˛o£
(
fd
);

324 
	}
}

333 #ifde‡
STANDALONE_TEST


334 *
	gmmio
;

336 
	$maö
(
¨gc
, **
¨gv
)

338 
	`igt_öfo
("TŸÆ RAM: %"
PRIu64
" Mb\n", 
	`öãl_gë_tŸÆ_øm_mb
());

339 
	`igt_öfo
("TŸÆ Sw≠: %"
PRIu64
" Mb\n", 
	`öãl_gë_tŸÆ_sw≠_mb
());

342 
	}
}

	@intel_reg.h

44 #i‚de‡
_I810_REG_H


45 
	#_I810_REG_H


	)

49 
	#SRX
 0x3C4

	)

50 
	#GRX
 0x3CE

	)

51 
	#ARX
 0x3C0

	)

54 
	#DACMASK
 0x3C6

	)

55 
	#DACSTATE
 0x3C7

	)

56 
	#DACRX
 0x3C7

	)

57 
	#DACWX
 0x3C8

	)

58 
	#DACDATA
 0x3C9

	)

61 
	#START_ADDR_HI
 0x0C

	)

62 
	#START_ADDR_LO
 0x0D

	)

63 
	#VERT_SYNC_END
 0x11

	)

64 
	#EXT_VERT_TOTAL
 0x30

	)

65 
	#EXT_VERT_DISPLAY
 0x31

	)

66 
	#EXT_VERT_SYNC_START
 0x32

	)

67 
	#EXT_VERT_BLANK_START
 0x33

	)

68 
	#EXT_HORIZ_TOTAL
 0x35

	)

69 
	#EXT_HORIZ_BLANK
 0x39

	)

70 
	#EXT_START_ADDR
 0x40

	)

71 
	#EXT_START_ADDR_ENABLE
 0x80

	)

72 
	#EXT_OFFSET
 0x41

	)

73 
	#EXT_START_ADDR_HI
 0x42

	)

74 
	#INTERLACE_CNTL
 0x70

	)

75 
	#INTERLACE_ENABLE
 0x80

	)

76 
	#INTERLACE_DISABLE
 0x00

	)

80 
	#MSR_R
 0x3CC

	)

81 
	#MSR_W
 0x3C2

	)

82 
	#IO_ADDR_SELECT
 0x01

	)

84 
	#MDA_BASE
 0x3B0

	)

85 
	#CGA_BASE
 0x3D0

	)

89 
	#IO_CTNL
 0x80

	)

90 
	#EXTENDED_ATTR_CNTL
 0x02

	)

91 
	#EXTENDED_CRTC_CNTL
 0x01

	)

95 
	#ADDRESS_MAPPING
 0x10

	)

96 
	#PAGE_TO_LOCAL_MEM_ENABLE
 0x10

	)

97 
	#GTT_MEM_MAP_ENABLE
 0x08

	)

98 
	#PACKED_MODE_ENABLE
 0x04

	)

99 
	#LINEAR_MODE_ENABLE
 0x02

	)

100 
	#PAGE_MAPPING_ENABLE
 0x01

	)

102 
	#HOTKEY_VBIOS_SWITCH_BLOCK
 0x80

	)

103 
	#HOTKEY_SWITCH
 0x20

	)

104 
	#HOTKEY_TOGGLE
 0x10

	)

108 
	#BITBLT_CNTL
 0x7000c

	)

109 
	#COLEXP_MODE
 0x30

	)

110 
	#COLEXP_8BPP
 0x00

	)

111 
	#COLEXP_16BPP
 0x10

	)

112 
	#COLEXP_24BPP
 0x20

	)

113 
	#COLEXP_RESERVED
 0x30

	)

114 
	#BITBLT_STATUS
 0x01

	)

116 
	#CHDECMISC
 0x10111

	)

117 
	#DCC
 0x10200

	)

118 
	#C0DRB0
 0x10200

	)

119 
	#C0DRB1
 0x10202

	)

120 
	#C0DRB2
 0x10204

	)

121 
	#C0DRB3
 0x10206

	)

122 
	#C0DRA01
 0x10208

	)

123 
	#C0DRA23
 0x1020a

	)

124 
	#C1DRB0
 0x10600

	)

125 
	#C1DRB1
 0x10602

	)

126 
	#C1DRB2
 0x10604

	)

127 
	#C1DRB3
 0x10606

	)

128 
	#C1DRA01
 0x10608

	)

129 
	#C1DRA23
 0x1060a

	)

133 
	#DISPLAY_CNTL
 0x70008

	)

134 
	#VGA_WRAP_MODE
 0x02

	)

135 
	#VGA_WRAP_AT_256KB
 0x00

	)

136 
	#VGA_NO_WRAP
 0x02

	)

137 
	#GUI_MODE
 0x01

	)

138 
	#STANDARD_VGA_MODE
 0x00

	)

139 
	#HIRES_MODE
 0x01

	)

143 
	#PIXPIPE_CONFIG_0
 0x70009

	)

144 
	#DAC_8_BIT
 0x80

	)

145 
	#DAC_6_BIT
 0x00

	)

146 
	#HW_CURSOR_ENABLE
 0x10

	)

147 
	#EXTENDED_PALETTE
 0x01

	)

151 
	#PIXPIPE_CONFIG_1
 0x7000a

	)

152 
	#DISPLAY_COLOR_MODE
 0x0F

	)

153 
	#DISPLAY_VGA_MODE
 0x00

	)

154 
	#DISPLAY_8BPP_MODE
 0x02

	)

155 
	#DISPLAY_15BPP_MODE
 0x04

	)

156 
	#DISPLAY_16BPP_MODE
 0x05

	)

157 
	#DISPLAY_24BPP_MODE
 0x06

	)

158 
	#DISPLAY_32BPP_MODE
 0x07

	)

162 
	#PIXPIPE_CONFIG_2
 0x7000b

	)

163 
	#DISPLAY_GAMMA_ENABLE
 0x08

	)

164 
	#DISPLAY_GAMMA_DISABLE
 0x00

	)

165 
	#OVERLAY_GAMMA_ENABLE
 0x04

	)

166 
	#OVERLAY_GAMMA_DISABLE
 0x00

	)

171 
	#DISPLAY_BASE
 0x70020

	)

172 
	#DISPLAY_BASE_MASK
 0x03fffffc

	)

178 
	#CURSOR_CONTROL
 0x70080

	)

179 
	#CURSOR_ENABLE
 0x80000000

	)

180 
	#CURSOR_GAMMA_ENABLE
 0x40000000

	)

181 
	#CURSOR_STRIDE_MASK
 0x30000000

	)

182 
	#CURSOR_FORMAT_SHIFT
 24

	)

183 
	#CURSOR_FORMAT_MASK
 (0x07 << 
CURSOR_FORMAT_SHIFT
)

	)

184 
	#CURSOR_FORMAT_2C
 (0x00 << 
CURSOR_FORMAT_SHIFT
)

	)

185 
	#CURSOR_FORMAT_3C
 (0x01 << 
CURSOR_FORMAT_SHIFT
)

	)

186 
	#CURSOR_FORMAT_4C
 (0x02 << 
CURSOR_FORMAT_SHIFT
)

	)

187 
	#CURSOR_FORMAT_ARGB
 (0x04 << 
CURSOR_FORMAT_SHIFT
)

	)

188 
	#CURSOR_FORMAT_XRGB
 (0x05 << 
CURSOR_FORMAT_SHIFT
)

	)

191 
	#CURSOR_A_CONTROL
 
CURSOR_CONTROL


	)

192 
	#CURSOR_ORIGIN_SCREEN
 0x00

	)

193 
	#CURSOR_ORIGIN_DISPLAY
 0x1

	)

194 
	#CURSOR_MODE
 0x27

	)

195 
	#CURSOR_MODE_DISABLE
 0x00

	)

196 
	#CURSOR_MODE_32_4C_AX
 0x01

	)

197 
	#CURSOR_MODE_64_3C
 0x04

	)

198 
	#CURSOR_MODE_64_4C_AX
 0x05

	)

199 
	#CURSOR_MODE_64_4C
 0x06

	)

200 
	#CURSOR_MODE_64_32B_AX
 0x07

	)

201 
	#CURSOR_MODE_64_ARGB_AX
 (0x20 | 
CURSOR_MODE_64_32B_AX
)

	)

202 
	#MCURSOR_PIPE_SELECT
 (1 << 28)

	)

203 
	#MCURSOR_PIPE_A
 0x00

	)

204 
	#MCURSOR_PIPE_B
 (1 << 28)

	)

205 
	#MCURSOR_GAMMA_ENABLE
 (1 << 26)

	)

206 
	#MCURSOR_MEM_TYPE_LOCAL
 (1 << 25)

	)

209 
	#CURSOR_BASEADDR
 0x70084

	)

210 
	#CURSOR_A_BASE
 
CURSOR_BASEADDR


	)

211 
	#CURSOR_BASEADDR_MASK
 0x1FFFFF00

	)

212 
	#CURSOR_A_POSITION
 0x70088

	)

213 
	#CURSOR_POS_SIGN
 0x8000

	)

214 
	#CURSOR_POS_MASK
 0x007FF

	)

215 
	#CURSOR_X_SHIFT
 0

	)

216 
	#CURSOR_Y_SHIFT
 16

	)

217 
	#CURSOR_X_LO
 0x70088

	)

218 
	#CURSOR_X_HI
 0x70089

	)

219 
	#CURSOR_X_POS
 0x00

	)

220 
	#CURSOR_X_NEG
 0x80

	)

221 
	#CURSOR_Y_LO
 0x7008A

	)

222 
	#CURSOR_Y_HI
 0x7008B

	)

223 
	#CURSOR_Y_POS
 0x00

	)

224 
	#CURSOR_Y_NEG
 0x80

	)

226 
	#CURSOR_A_PALETTE0
 0x70090

	)

227 
	#CURSOR_A_PALETTE1
 0x70094

	)

228 
	#CURSOR_A_PALETTE2
 0x70098

	)

229 
	#CURSOR_A_PALETTE3
 0x7009C

	)

231 
	#CURSOR_SIZE
 0x700A0

	)

232 
	#CURSOR_SIZE_MASK
 0x3FF

	)

233 
	#CURSOR_SIZE_HSHIFT
 0

	)

234 
	#CURSOR_SIZE_VSHIFT
 12

	)

236 
	#CURSOR_B_CONTROL
 0x700C0

	)

237 
	#CURSOR_B_BASE
 0x700C4

	)

238 
	#CURSOR_B_POSITION
 0x700C8

	)

239 
	#CURSOR_B_PALETTE0
 0x700D0

	)

240 
	#CURSOR_B_PALETTE1
 0x700D4

	)

241 
	#CURSOR_B_PALETTE2
 0x700D8

	)

242 
	#CURSOR_B_PALETTE3
 0x700DC

	)

252 
	#DRAM_ROW_TYPE
 0x3000

	)

253 
	#DRAM_ROW_0
 0x01

	)

254 
	#DRAM_ROW_0_SDRAM
 0x01

	)

255 
	#DRAM_ROW_0_EMPTY
 0x00

	)

256 
	#DRAM_ROW_CNTL_LO
 0x3001

	)

257 
	#DRAM_PAGE_MODE_CTRL
 0x10

	)

258 
	#DRAM_RAS_TO_CAS_OVRIDE
 0x08

	)

259 
	#DRAM_CAS_LATENCY
 0x04

	)

260 
	#DRAM_RAS_TIMING
 0x02

	)

261 
	#DRAM_RAS_PRECHARGE
 0x01

	)

262 
	#DRAM_ROW_CNTL_HI
 0x3002

	)

263 
	#DRAM_REFRESH_RATE
 0x18

	)

264 
	#DRAM_REFRESH_DISABLE
 0x00

	)

265 
	#DRAM_REFRESH_60HZ
 0x08

	)

266 
	#DRAM_REFRESH_FAST_TEST
 0x10

	)

267 
	#DRAM_REFRESH_RESERVED
 0x18

	)

268 
	#DRAM_SMS
 0x07

	)

269 
	#DRAM_SMS_NORMAL
 0x00

	)

270 
	#DRAM_SMS_NOP_ENABLE
 0x01

	)

271 
	#DRAM_SMS_ABPCE
 0x02

	)

272 
	#DRAM_SMS_MRCE
 0x03

	)

273 
	#DRAM_SMS_CBRCE
 0x04

	)

277 
	#DPMS_SYNC_SELECT
 0x5002

	)

278 
	#VSYNC_CNTL
 0x08

	)

279 
	#VSYNC_ON
 0x00

	)

280 
	#VSYNC_OFF
 0x08

	)

281 
	#HSYNC_CNTL
 0x02

	)

282 
	#HSYNC_ON
 0x00

	)

283 
	#HSYNC_OFF
 0x02

	)

285 
	#GPIOA
 0x5010

	)

286 
	#GPIOB
 0x5014

	)

287 
	#GPIOC
 0x5018

	)

288 
	#GPIOD
 0x501c

	)

289 
	#GPIOE
 0x5020

	)

290 
	#GPIOF
 0x5024

	)

291 
	#GPIOG
 0x5028

	)

292 
	#GPIOH
 0x502c

	)

293 
	#GPIO_CLOCK_DIR_MASK
 (1 << 0)

	)

294 
	#GPIO_CLOCK_DIR_IN
 (0 << 1)

	)

295 
	#GPIO_CLOCK_DIR_OUT
 (1 << 1)

	)

296 
	#GPIO_CLOCK_VAL_MASK
 (1 << 2)

	)

297 
	#GPIO_CLOCK_VAL_OUT
 (1 << 3)

	)

298 
	#GPIO_CLOCK_VAL_IN
 (1 << 4)

	)

299 
	#GPIO_CLOCK_PULLUP_DISABLE
 (1 << 5)

	)

300 
	#GPIO_DATA_DIR_MASK
 (1 << 8)

	)

301 
	#GPIO_DATA_DIR_IN
 (0 << 9)

	)

302 
	#GPIO_DATA_DIR_OUT
 (1 << 9)

	)

303 
	#GPIO_DATA_VAL_MASK
 (1 << 10)

	)

304 
	#GPIO_DATA_VAL_OUT
 (1 << 11)

	)

305 
	#GPIO_DATA_VAL_IN
 (1 << 12)

	)

306 
	#GPIO_DATA_PULLUP_DISABLE
 (1 << 13)

	)

309 
	#GMBUS0
 0x5100

	)

310 
	#GMBUS1
 0x5104

	)

311 
	#GMBUS2
 0x5108

	)

312 
	#GMBUS3
 0x510c

	)

313 
	#GMBUS4
 0x5110

	)

314 
	#GMBUS5
 0x5120

	)

318 
	#VCLK2_VCO_M
 0x6008

	)

319 
	#VCLK2_VCO_N
 0x600a

	)

320 
	#VCLK2_VCO_DIV_SEL
 0x6012

	)

322 
	#VCLK_DIVISOR_VGA0
 0x6000

	)

323 
	#VCLK_DIVISOR_VGA1
 0x6004

	)

324 
	#VCLK_POST_DIV
 0x6010

	)

326 
	#VGA1_PD_P2_DIV_4
 (1 << 15)

	)

328 
	#VGA1_PD_P1_DIV_2
 (1 << 13)

	)

329 
	#VGA1_PD_P1_SHIFT
 8

	)

331 
	#VGA1_PD_P1_MASK
 (0x1‡<< 8)

	)

333 
	#VGA0_PD_P2_DIV_4
 (1 << 7)

	)

335 
	#VGA0_PD_P1_DIV_2
 (1 << 5)

	)

336 
	#VGA0_PD_P1_SHIFT
 0

	)

338 
	#VGA0_PD_P1_MASK
 (0x1‡<< 0)

	)

340 
	#POST_DIV_SELECT
 0x70

	)

341 
	#POST_DIV_1
 0x00

	)

342 
	#POST_DIV_2
 0x10

	)

343 
	#POST_DIV_4
 0x20

	)

344 
	#POST_DIV_8
 0x30

	)

345 
	#POST_DIV_16
 0x40

	)

346 
	#POST_DIV_32
 0x50

	)

347 
	#VCO_LOOP_DIV_BY_4M
 0x00

	)

348 
	#VCO_LOOP_DIV_BY_16M
 0x04

	)

355 
	#INST_PM
 0x20c0

	)

356 
	#AGP_SYNC_PACKET_FLUSH_ENABLE
 0x20

	)

357 
	#SYNC_PACKET_FLUSH_ENABLE
 0x10

	)

358 
	#TWO_D_INST_DISABLE
 0x08

	)

359 
	#THREE_D_INST_DISABLE
 0x04

	)

360 
	#STATE_VAR_UPDATE_DISABLE
 0x02

	)

361 
	#PAL_STIP_DISABLE
 0x01

	)

362 
	#GEN6_GLOBAL_DEBUG_ENABLE
 0x10

	)

365 
	#MEMMODE
 0x20dc

	)

370 
	#IPEIR
 0x2088

	)

371 
	#IPEHR
 0x208C

	)

373 
	#INSTDONE
 0x2090

	)

374 
	#NOP_ID
 0x2094

	)

376 
	#SCPD0
 0x209¯

	)

377 
	#INST_PS
 0x20c4

	)

378 
	#IPEIR_I965
 0x2064

	)

379 
	#IPEHR_I965
 0x2068

	)

380 
	#INSTDONE_I965
 0x206c

	)

381 
	#GEN6_INSTDONE_1
 0x206c

	)

382 
	#INST_PS_I965
 0x2070

	)

386 
	#ACTHD_I965
 0x2074

	)

387 
	#ACTHD
 0x20C8

	)

391 
	#DMA_FADD_P
 0x2078

	)

392 
	#DMA_FADD_S
 0x20d4

	)

393 
	#INSTDONE_1
 0x207c

	)

394 
	#GEN6_INSTDONE_2
 0x207c

	)

396 
	#CACHE_MODE_0
 0x2120

	)

397 
	#CACHE_MODE_1
 0x2124

	)

398 
	#MI_MODE
 0x209c

	)

399 
	#MI_DISPLAY_POWER_DOWN
 0x20e0

	)

400 
	#MI_ARB_STATE
 0x20e4

	)

401 
	#MI_RDRET_STATE
 0x20fc

	)

405 
	#PR0_STR
 0x20f0

	)

406 
	#PR1_STR
 0x20f4

	)

407 
	#PR2_STR
 0x20f8

	)

409 
	#WIZ_CTL
 0x7c00

	)

410 
	#WIZ_CTL_SINGLE_SUBSPAN
 (1<<6)

	)

411 
	#WIZ_CTL_IGNORE_STALLS
 (1<<5)

	)

413 
	#SVG_WORK_CTL
 0x7408

	)

415 
	#TS_CTL
 0x7e00

	)

416 
	#TS_MUX_ERR_CODE
 (0<<8)

	)

417 
	#TS_MUX_URB_0
 (1<<8)

	)

418 
	#TS_MUX_DISPATCH_ID_0
 (10<<8)

	)

419 
	#TS_MUX_ERR_CODE_VALID
 (15<<8)

	)

420 
	#TS_MUX_TID_0
 (16<<8)

	)

421 
	#TS_MUX_EUID_0
 (18<<8)

	)

422 
	#TS_MUX_FFID_0
 (22<<8)

	)

423 
	#TS_MUX_EOT
 (26<<8)

	)

424 
	#TS_MUX_SIDEBAND_0
 (27<<8)

	)

425 
	#TS_SNAP_ALL_CHILD
 (1<<2)

	)

426 
	#TS_SNAP_ALL_ROOT
 (1<<1)

	)

427 
	#TS_SNAP_ENABLE
 (1<<0)

	)

429 
	#TS_DEBUG_DATA
 0x7e0c

	)

431 
	#TD_CTL
 0x8000

	)

432 
	#TD_CTL2
 0x8004

	)

435 
	#ECOSKPD
 0x21d0

	)

436 
	#EXCC
 0x2028

	)

440 
	#IA_VERTICES_COUNT_QW
 0x2310

	)

441 
	#IA_PRIMITIVES_COUNT_QW
 0x2318

	)

442 
	#VS_INVOCATION_COUNT_QW
 0x2320

	)

443 
	#GS_INVOCATION_COUNT_QW
 0x2328

	)

444 
	#GS_PRIMITIVES_COUNT_QW
 0x2330

	)

445 
	#CL_INVOCATION_COUNT_QW
 0x2338

	)

446 
	#CL_PRIMITIVES_COUNT_QW
 0x2340

	)

447 
	#PS_INVOCATION_COUNT_QW
 0x2348

	)

448 
	#PS_DEPTH_COUNT_QW
 0x2350

	)

449 
	#TIMESTAMP_QW
 0x2358

	)

450 
	#CLKCMP_QW
 0x2360

	)

459 
	#EIR
 0x20B0

	)

460 
	#EMR
 0x20B4

	)

461 
	#ESR
 0x20B8

	)

462 
	#ERR_VERTEX_MAX
 (1 << 5Ë

	)

463 
	#ERR_PGTBL_ERROR
 (1 << 4)

	)

464 
	#ERR_DISPLAY_OVERLAY_UNDERRUN
 (1 << 3)

	)

465 
	#ERR_MAIN_MEMORY_REFRESH
 (1 << 1)

	)

466 
	#ERR_INSTRUCTION_ERROR
 (1 << 0)

	)

473 
	#HWS_PGA
 0x2080

	)

474 
	#PWRCTXA
 0x2088

	)

475 
	#PWRCTX_EN
 (1<<0)

	)

476 
	#HWSTAM
 0x2098

	)

477 
	#IER
 0x20a0

	)

478 
	#IIR
 0x20a4

	)

479 
	#IMR
 0x20a8

	)

480 
	#ISR
 0x20a¯

	)

481 
	#HW_ERROR
 0x8000

	)

482 
	#SYNC_STATUS_TOGGLE
 0x1000

	)

483 
	#DPY_0_FLIP_PENDING
 0x0800

	)

484 
	#DPY_1_FLIP_PENDING
 0x0400

	)

485 
	#OVL_0_FLIP_PENDING
 0x0200

	)

486 
	#OVL_1_FLIP_PENDING
 0x0100

	)

487 
	#DPY_0_VBLANK
 0x0080

	)

488 
	#DPY_0_EVENT
 0x0040

	)

489 
	#DPY_1_VBLANK
 0x0020

	)

490 
	#DPY_1_EVENT
 0x0010

	)

491 
	#HOST_PORT_EVENT
 0x0008

	)

492 
	#CAPTURE_EVENT
 0x0004

	)

493 
	#USER_DEFINED
 0x0002

	)

494 
	#BREAKPOINT
 0x0001

	)

497 
	#INTR_RESERVED
 (0x6000 | \

498 
DPY_1_FLIP_PENDING
 | \

499 
OVL_1_FLIP_PENDING
 | \

500 
DPY_1_VBLANK
 | \

501 
DPY_1_EVENT
 | \

502 
HOST_PORT_EVENT
 | \

503 
CAPTURE_EVENT
 )

	)

511 
	#FWATER_BLC
 0x20d8

	)

512 
	#FWATER_BLC2
 0x20dc

	)

513 
	#MM_BURST_LENGTH
 0x00700000

	)

514 
	#MM_FIFO_WATERMARK
 0x0001F000

	)

515 
	#LM_BURST_LENGTH
 0x00000700

	)

516 
	#LM_FIFO_WATERMARK
 0x0000001F

	)

521 
	#FENCE
 0x2000

	)

522 
	#FENCE_NR
 8

	)

524 
	#FENCE_NEW
 0x3000

	)

525 
	#FENCE_NEW_NR
 16

	)

527 
	#FENCE_LINEAR
 0

	)

528 
	#FENCE_XMAJOR
 1

	)

529 
	#FENCE_YMAJOR
 2

	)

531 
	#I915G_FENCE_START_MASK
 0x0ff00000

	)

533 
	#I830_FENCE_START_MASK
 0x07f80000

	)

535 
	#FENCE_START_MASK
 0x03F80000

	)

536 
	#FENCE_X_MAJOR
 0x00000000

	)

537 
	#FENCE_Y_MAJOR
 0x00001000

	)

538 
	#FENCE_SIZE_MASK
 0x00000700

	)

539 
	#FENCE_SIZE_512K
 0x00000000

	)

540 
	#FENCE_SIZE_1M
 0x00000100

	)

541 
	#FENCE_SIZE_2M
 0x00000200

	)

542 
	#FENCE_SIZE_4M
 0x00000300

	)

543 
	#FENCE_SIZE_8M
 0x00000400

	)

544 
	#FENCE_SIZE_16M
 0x00000500

	)

545 
	#FENCE_SIZE_32M
 0x00000600

	)

546 
	#FENCE_SIZE_64M
 0x00000700

	)

547 
	#I915G_FENCE_SIZE_1M
 0x00000000

	)

548 
	#I915G_FENCE_SIZE_2M
 0x00000100

	)

549 
	#I915G_FENCE_SIZE_4M
 0x00000200

	)

550 
	#I915G_FENCE_SIZE_8M
 0x00000300

	)

551 
	#I915G_FENCE_SIZE_16M
 0x00000400

	)

552 
	#I915G_FENCE_SIZE_32M
 0x00000500

	)

553 
	#I915G_FENCE_SIZE_64M
 0x00000600

	)

554 
	#I915G_FENCE_SIZE_128M
 0x00000700

	)

555 
	#I965_FENCE_X_MAJOR
 0x00000000

	)

556 
	#I965_FENCE_Y_MAJOR
 0x00000002

	)

557 
	#FENCE_PITCH_1
 0x00000000

	)

558 
	#FENCE_PITCH_2
 0x00000010

	)

559 
	#FENCE_PITCH_4
 0x00000020

	)

560 
	#FENCE_PITCH_8
 0x00000030

	)

561 
	#FENCE_PITCH_16
 0x00000040

	)

562 
	#FENCE_PITCH_32
 0x00000050

	)

563 
	#FENCE_PITCH_64
 0x00000060

	)

564 
	#FENCE_VALID
 0x00000001

	)

566 
	#FENCE_REG_SANDYBRIDGE_0
 0x100000

	)

570 
	#PGETBL_CTL
 0x2020

	)

571 
	#PGETBL_ADDR_MASK
 0xFFFFF000

	)

572 
	#PGETBL_ENABLE_MASK
 0x00000001

	)

573 
	#PGETBL_ENABLED
 0x00000001

	)

575 
	#PGETBL_SIZE_MASK
 0x0000000e

	)

576 
	#PGETBL_SIZE_512KB
 (0 << 1)

	)

577 
	#PGETBL_SIZE_256KB
 (1 << 1)

	)

578 
	#PGETBL_SIZE_128KB
 (2 << 1)

	)

579 
	#PGETBL_SIZE_1MB
 (3 << 1)

	)

580 
	#PGETBL_SIZE_2MB
 (4 << 1)

	)

581 
	#PGETBL_SIZE_1_5MB
 (5 << 1)

	)

582 
	#G33_PGETBL_SIZE_MASK
 (3 << 8)

	)

583 
	#G33_PGETBL_SIZE_1M
 (1 << 8)

	)

584 
	#G33_PGETBL_SIZE_2M
 (2 << 8)

	)

586 
	#I830_PTE_BASE
 0x10000

	)

587 
	#PTE_ADDRESS_MASK
 0xfffff000

	)

588 
	#PTE_ADDRESS_MASK_HIGH
 0x000000f0

	)

589 
	#PTE_MAPPING_TYPE_UNCACHED
 (0 << 1)

	)

590 
	#PTE_MAPPING_TYPE_DCACHE
 (1 << 1Ë

	)

591 
	#PTE_MAPPING_TYPE_CACHED
 (3 << 1)

	)

592 
	#PTE_MAPPING_TYPE_MASK
 (3 << 1)

	)

593 
	#PTE_VALID
 (1 << 0)

	)

599 
	#PGE_ERR
 0x2024

	)

600 
	#PGE_ERR_ADDR_MASK
 0xFFFFF000

	)

601 
	#PGE_ERR_ID_MASK
 0x00000038

	)

602 
	#PGE_ERR_CAPTURE
 0x00000000

	)

603 
	#PGE_ERR_OVERLAY
 0x00000008

	)

604 
	#PGE_ERR_DISPLAY
 0x00000010

	)

605 
	#PGE_ERR_HOST
 0x00000018

	)

606 
	#PGE_ERR_RENDER
 0x00000020

	)

607 
	#PGE_ERR_BLITTER
 0x00000028

	)

608 
	#PGE_ERR_MAPPING
 0x00000030

	)

609 
	#PGE_ERR_CMD_PARSER
 0x00000038

	)

610 
	#PGE_ERR_TYPE_MASK
 0x00000007

	)

611 
	#PGE_ERR_INV_TABLE
 0x00000000

	)

612 
	#PGE_ERR_INV_PTE
 0x00000001

	)

613 
	#PGE_ERR_MIXED_TYPES
 0x00000002

	)

614 
	#PGE_ERR_PAGE_MISS
 0x00000003

	)

615 
	#PGE_ERR_ILLEGAL_TRX
 0x00000004

	)

616 
	#PGE_ERR_LOCAL_MEM
 0x00000005

	)

617 
	#PGE_ERR_TILED
 0x00000006

	)

624 
	#PGTBL_ER
 0x2024

	)

625 
	#PGTBL_ERR_MT_TILING
 (1 << 27)

	)

626 
	#PGTBL_ERR_MT_GTT_PTE
 (1 << 26)

	)

627 
	#PGTBL_ERR_LC_TILING
 (1 << 25)

	)

628 
	#PGTBL_ERR_LC_GTT_PTE
 (1 << 24)

	)

629 
	#PGTBL_ERR_BIN_VERTEXDATA_GTT_PTE
 (1 << 23)

	)

630 
	#PGTBL_ERR_BIN_INSTRUCTION_GTT_PTE
 (1 << 22)

	)

631 
	#PGTBL_ERR_CS_VERTEXDATA_GTT_PTE
 (1 << 21)

	)

632 
	#PGTBL_ERR_CS_INSTRUCTION_GTT_PTE
 (1 << 20)

	)

633 
	#PGTBL_ERR_CS_GTT
 (1 << 19)

	)

634 
	#PGTBL_ERR_OVERLAY_TILING
 (1 << 18)

	)

635 
	#PGTBL_ERR_OVERLAY_GTT_PTE
 (1 << 16)

	)

636 
	#PGTBL_ERR_DISPC_TILING
 (1 << 14)

	)

637 
	#PGTBL_ERR_DISPC_GTT_PTE
 (1 << 12)

	)

638 
	#PGTBL_ERR_DISPB_TILING
 (1 << 10)

	)

639 
	#PGTBL_ERR_DISPB_GTT_PTE
 (1 << 8)

	)

640 
	#PGTBL_ERR_DISPA_TILING
 (1 << 6)

	)

641 
	#PGTBL_ERR_DISPA_GTT_PTE
 (1 << 4)

	)

642 
	#PGTBL_ERR_HOST_PTE_DATA
 (1 << 1)

	)

643 
	#PGTBL_ERR_HOST_GTT_PTE
 (1 << 0)

	)

648 
	#LP_RING
 0x2030

	)

649 
	#HP_RING
 0x2040

	)

651 
	#RING_TAIL
 0x00

	)

652 
	#TAIL_ADDR
 0x000FFFF8

	)

653 
	#I830_TAIL_MASK
 0x001FFFF8

	)

655 
	#RING_HEAD
 0x04

	)

656 
	#HEAD_WRAP_COUNT
 0xFFE00000

	)

657 
	#HEAD_WRAP_ONE
 0x00200000

	)

658 
	#HEAD_ADDR
 0x001FFFFC

	)

659 
	#I830_HEAD_MASK
 0x001FFFFC

	)

661 
	#RING_START
 0x08

	)

662 
	#START_ADDR
 0x03FFFFF8

	)

663 
	#I830_RING_START_MASK
 0xFFFFF000

	)

665 
	#RING_LEN
 0x0C

	)

666 
	#RING_NR_PAGES
 0x001FF000

	)

667 
	#I830_RING_NR_PAGES
 0x001FF000

	)

668 
	#RING_REPORT_MASK
 0x00000006

	)

669 
	#RING_REPORT_64K
 0x00000002

	)

670 
	#RING_REPORT_128K
 0x00000004

	)

671 
	#RING_NO_REPORT
 0x00000000

	)

672 
	#RING_VALID_MASK
 0x00000001

	)

673 
	#RING_VALID
 0x00000001

	)

674 
	#RING_INVALID
 0x00000000

	)

682 
	#BR00_BITBLT_CLIENT
 0x40000000

	)

683 
	#BR00_OP_COLOR_BLT
 0x10000000

	)

684 
	#BR00_OP_SRC_COPY_BLT
 0x10C00000

	)

685 
	#BR00_OP_FULL_BLT
 0x11400000

	)

686 
	#BR00_OP_MONO_SRC_BLT
 0x11800000

	)

687 
	#BR00_OP_MONO_SRC_COPY_BLT
 0x11000000

	)

688 
	#BR00_OP_MONO_PAT_BLT
 0x11C00000

	)

689 
	#BR00_OP_MONO_SRC_COPY_IMMEDIATE_BLT
 (0x61 << 22)

	)

690 
	#BR00_OP_TEXT_IMMEDIATE_BLT
 0xc000000

	)

693 
	#BR00_TPCY_DISABLE
 0x00000000

	)

694 
	#BR00_TPCY_ENABLE
 0x00000010

	)

696 
	#BR00_TPCY_ROP
 0x00000000

	)

697 
	#BR00_TPCY_NO_ROP
 0x00000020

	)

698 
	#BR00_TPCY_EQ
 0x00000000

	)

699 
	#BR00_TPCY_NOT_EQ
 0x00000040

	)

701 
	#BR00_PAT_MSB_FIRST
 0x00000000

	)

703 
	#BR00_PAT_VERT_ALIGN
 0x000000e0

	)

705 
	#BR00_LENGTH
 0x0000000F

	)

707 
	#BR09_DEST_ADDR
 0x03FFFFFF

	)

709 
	#BR11_SOURCE_PITCH
 0x00003FFF

	)

711 
	#BR12_SOURCE_ADDR
 0x03FFFFFF

	)

713 
	#BR13_SOLID_PATTERN
 0x80000000

	)

714 
	#BR13_RIGHT_TO_LEFT
 0x40000000

	)

715 
	#BR13_LEFT_TO_RIGHT
 0x00000000

	)

716 
	#BR13_MONO_TRANSPCY
 0x20000000

	)

717 
	#BR13_MONO_PATN_TRANS
 0x10000000

	)

718 
	#BR13_USE_DYN_DEPTH
 0x04000000

	)

719 
	#BR13_DYN_8BPP
 0x00000000

	)

720 
	#BR13_DYN_16BPP
 0x01000000

	)

721 
	#BR13_DYN_24BPP
 0x02000000

	)

722 
	#BR13_ROP_MASK
 0x00FF0000

	)

723 
	#BR13_DEST_PITCH
 0x0000FFFF

	)

724 
	#BR13_PITCH_SIGN_BIT
 0x00008000

	)

726 
	#BR14_DEST_HEIGHT
 0xFFFF0000

	)

727 
	#BR14_DEST_WIDTH
 0x0000FFFF

	)

729 
	#BR15_PATTERN_ADDR
 0x03FFFFFF

	)

731 
	#BR16_SOLID_PAT_COLOR
 0x00FFFFFF

	)

732 
	#BR16_BACKGND_PAT_CLR
 0x00FFFFFF

	)

734 
	#BR17_FGND_PAT_CLR
 0x00FFFFFF

	)

736 
	#BR18_SRC_BGND_CLR
 0x00FFFFFF

	)

737 
	#BR19_SRC_FGND_CLR
 0x00FFFFFF

	)

743 
	#INST_PARSER_CLIENT
 0x00000000

	)

744 
	#INST_OP_FLUSH
 0x02000000

	)

745 
	#INST_FLUSH_MAP_CACHE
 0x00000001

	)

748 
	#GFX_OP_USER_INTERRUPT
 ((0<<29)|(2<<23))

	)

754 
	#SMRAM_MISCC
 0x70

	)

755 
	#GMS
 0x000000c0

	)

756 
	#GMS_DISABLE
 0x00000000

	)

757 
	#GMS_ENABLE_BARE
 0x00000040

	)

758 
	#GMS_ENABLE_512K
 0x00000080

	)

759 
	#GMS_ENABLE_1M
 0x000000c0

	)

760 
	#USMM
 0x00000030

	)

761 
	#USMM_DISABLE
 0x00000000

	)

762 
	#USMM_TSEG_ZERO
 0x00000010

	)

763 
	#USMM_TSEG_512K
 0x00000020

	)

764 
	#USMM_TSEG_1M
 0x00000030

	)

765 
	#GFX_MEM_WIN_SIZE
 0x00010000

	)

766 
	#GFX_MEM_WIN_32M
 0x00010000

	)

767 
	#GFX_MEM_WIN_64M
 0x00000000

	)

777 
	#WHTCFG_PAMR_DRP
 0x50

	)

778 
	#SYS_DRAM_ROW_0_SHIFT
 16

	)

779 
	#SYS_DRAM_ROW_1_SHIFT
 20

	)

780 
	#DRAM_MASK
 0x0f

	)

781 
	#DRAM_VALUE_0
 0

	)

782 
	#DRAM_VALUE_1
 8

	)

784 
	#DRAM_VALUE_3
 16

	)

785 
	#DRAM_VALUE_4
 16

	)

786 
	#DRAM_VALUE_5
 24

	)

787 
	#DRAM_VALUE_6
 32

	)

788 
	#DRAM_VALUE_7
 32

	)

789 
	#DRAM_VALUE_8
 48

	)

790 
	#DRAM_VALUE_9
 64

	)

791 
	#DRAM_VALUE_A
 64

	)

792 
	#DRAM_VALUE_B
 96

	)

793 
	#DRAM_VALUE_C
 128

	)

794 
	#DRAM_VALUE_D
 128

	)

795 
	#DRAM_VALUE_E
 192

	)

796 
	#DRAM_VALUE_F
 256

	)

797 
	#LM_FREQ_MASK
 0x10

	)

798 
	#LM_FREQ_133
 0x10

	)

799 
	#LM_FREQ_100
 0x00

	)

812 
	#GFX_OP_COLOR_CHROMA_KEY
 ((0x3<<29)|(0x1d<<24)|(0x2<<16)|0x1)

	)

813 
	#CC1_UPDATE_KILL_WRITE
 (1<<28)

	)

814 
	#CC1_ENABLE_KILL_WRITE
 (1<<27)

	)

815 
	#CC1_DISABLE_KILL_WRITE
 0

	)

816 
	#CC1_UPDATE_COLOR_IDX
 (1<<26)

	)

817 
	#CC1_UPDATE_CHROMA_LOW
 (1<<25)

	)

818 
	#CC1_UPDATE_CHROMA_HI
 (1<<24)

	)

819 
	#CC1_CHROMA_LOW_MASK
 ((1<<24)-1)

	)

820 
	#CC2_COLOR_IDX_SHIFT
 24

	)

821 
	#CC2_COLOR_IDX_MASK
 (0xff<<24)

	)

822 
	#CC2_CHROMA_HI_MASK
 ((1<<24)-1)

	)

825 
	#GFX_CMD_CONTEXT_SEL
 ((0<<29)|(0x5<<23))

	)

826 
	#CS_UPDATE_LOAD
 (1<<17)

	)

827 
	#CS_UPDATE_USE
 (1<<16)

	)

828 
	#CS_UPDATE_LOAD
 (1<<17)

	)

829 
	#CS_LOAD_CTX0
 0

	)

830 
	#CS_LOAD_CTX1
 (1<<8)

	)

831 
	#CS_USE_CTX0
 0

	)

832 
	#CS_USE_CTX1
 (1<<0)

	)

835 
	#LCD_TV_HTOTAL
 0x60000

	)

836 
	#LCD_TV_C
 0x60018

	)

837 
	#LCD_TV_OVRACT
 0x6001C

	)

839 
	#LCD_TV_ENABLE
 (1 << 31)

	)

840 
	#LCD_TV_VGAMOD
 (1 << 28)

	)

843 
	#HTOTAL_A
 0x60000

	)

844 
	#HBLANK_A
 0x60004

	)

845 
	#HSYNC_A
 0x60008

	)

846 
	#VTOTAL_A
 0x6000c

	)

847 
	#VBLANK_A
 0x60010

	)

848 
	#VSYNC_A
 0x60014

	)

849 
	#PIPEASRC
 0x6001c

	)

850 
	#BCLRPAT_A
 0x60020

	)

851 
	#VSYNCSHIFT_A
 0x60028

	)

853 
	#HTOTAL_B
 0x61000

	)

854 
	#HBLANK_B
 0x61004

	)

855 
	#HSYNC_B
 0x61008

	)

856 
	#VTOTAL_B
 0x6100c

	)

857 
	#VBLANK_B
 0x61010

	)

858 
	#VSYNC_B
 0x61014

	)

859 
	#PIPEBSRC
 0x6101c

	)

860 
	#BCLRPAT_B
 0x61020

	)

861 
	#VSYNCSHIFT_B
 0x61028

	)

863 
	#HTOTAL_C
 0x62000

	)

864 
	#HBLANK_C
 0x62004

	)

865 
	#HSYNC_C
 0x62008

	)

866 
	#VTOTAL_C
 0x6200c

	)

867 
	#VBLANK_C
 0x62010

	)

868 
	#VSYNC_C
 0x62014

	)

869 
	#PIPECSRC
 0x6201c

	)

870 
	#BCLRPAT_C
 0x62020

	)

871 
	#VSYNCSHIFT_C
 0x62028

	)

873 
	#HTOTAL_EDP
 0x6F000

	)

874 
	#HBLANK_EDP
 0x6F004

	)

875 
	#HSYNC_EDP
 0x6F008

	)

876 
	#VTOTAL_EDP
 0x6F00c

	)

877 
	#VBLANK_EDP
 0x6F010

	)

878 
	#VSYNC_EDP
 0x6F014

	)

879 
	#VSYNCSHIFT_EDP
 0x6F028

	)

881 
	#PP_STATUS
 0x61200

	)

882 
	#PP_ON
 (1 << 31)

	)

890 
	#PP_READY
 (1 << 30)

	)

891 
	#PP_SEQUENCE_NONE
 (0 << 28)

	)

892 
	#PP_SEQUENCE_ON
 (1 << 28)

	)

893 
	#PP_SEQUENCE_OFF
 (2 << 28)

	)

894 
	#PP_SEQUENCE_MASK
 0x30000000

	)

896 
	#PP_CONTROL
 0x61204

	)

897 
	#POWER_DOWN_ON_RESET
 (1 << 1)

	)

898 
	#POWER_TARGET_ON
 (1 << 0)

	)

900 
	#PP_ON_DELAYS
 0x61208

	)

901 
	#PP_OFF_DELAYS
 0x6120c

	)

902 
	#PP_DIVISOR
 0x61210

	)

904 
	#PFIT_CONTROL
 0x61230

	)

905 
	#PFIT_ENABLE
 (1 << 31)

	)

907 
	#VERT_INTERP_DISABLE
 (0 << 10)

	)

908 
	#VERT_INTERP_BILINEAR
 (1 << 10)

	)

909 
	#VERT_INTERP_MASK
 (3 << 10)

	)

910 
	#VERT_AUTO_SCALE
 (1 << 9)

	)

911 
	#HORIZ_INTERP_DISABLE
 (0 << 6)

	)

912 
	#HORIZ_INTERP_BILINEAR
 (1 << 6)

	)

913 
	#HORIZ_INTERP_MASK
 (3 << 6)

	)

914 
	#HORIZ_AUTO_SCALE
 (1 << 5)

	)

915 
	#PANEL_8TO6_DITHER_ENABLE
 (1 << 3)

	)

917 
	#PFIT_PIPE_MASK
 (3 << 29)

	)

918 
	#PFIT_PIPE_SHIFT
 29

	)

919 
	#PFIT_SCALING_MODE_MASK
 (7 << 26)

	)

920 
	#PFIT_SCALING_AUTO
 (0 << 26)

	)

921 
	#PFIT_SCALING_PROGRAMMED
 (1 << 26)

	)

922 
	#PFIT_SCALING_PILLAR
 (2 << 26)

	)

923 
	#PFIT_SCALING_LETTER
 (3 << 26)

	)

924 
	#PFIT_FILTER_SELECT_MASK
 (3 << 24)

	)

925 
	#PFIT_FILTER_FUZZY
 (0 << 24)

	)

926 
	#PFIT_FILTER_CRISP
 (1 << 24)

	)

927 
	#PFIT_FILTER_MEDIAN
 (2 << 24)

	)

929 
	#PFIT_PGM_RATIOS
 0x61234

	)

931 
	#PFIT_VERT_SCALE_SHIFT
 20

	)

932 
	#PFIT_VERT_SCALE_MASK
 0xfff00000

	)

933 
	#PFIT_HORIZ_SCALE_SHIFT
 4

	)

934 
	#PFIT_HORIZ_SCALE_MASK
 0x0000fff0

	)

936 
	#PFIT_VERT_SCALE_SHIFT_965
 16

	)

937 
	#PFIT_VERT_SCALE_MASK_965
 0x1fff0000

	)

938 
	#PFIT_HORIZ_SCALE_SHIFT_965
 0

	)

939 
	#PFIT_HORIZ_SCALE_MASK_965
 0x00001fff

	)

941 
	#DPLL_A
 0x06014

	)

942 
	#DPLL_B
 0x06018

	)

943 
	#DPLL_VCO_ENABLE
 (1 << 31)

	)

944 
	#DPLL_DVO_HIGH_SPEED
 (1 << 30)

	)

945 
	#DPLL_SYNCLOCK_ENABLE
 (1 << 29)

	)

946 
	#DPLL_VGA_MODE_DIS
 (1 << 28)

	)

947 
	#DPLLB_MODE_DAC_SERIAL
 (1 << 26Ë

	)

948 
	#DPLLB_MODE_LVDS
 (2 << 26Ë

	)

949 
	#DPLL_MODE_MASK
 (3 << 26)

	)

950 
	#DPLL_DAC_SERIAL_P2_CLOCK_DIV_10
 (0 << 24Ë

	)

951 
	#DPLL_DAC_SERIAL_P2_CLOCK_DIV_5
 (1 << 24Ë

	)

952 
	#DPLLB_LVDS_P2_CLOCK_DIV_14
 (0 << 24Ë

	)

953 
	#DPLLB_LVDS_P2_CLOCK_DIV_7
 (1 << 24Ë

	)

954 
	#DPLL_P2_CLOCK_DIV_MASK
 0x03000000

	)

955 
	#DPLL_FPA01_P1_POST_DIV_MASK
 0x00ff0000

	)

956 
	#DPLL_FPA01_P1_POST_DIV_MASK_IGD
 0x00ff8000

	)

961 
	#DPLL_FPA01_P1_POST_DIV_MASK_I830
 0x001f0000

	)

966 
	#DPLL_FPA01_P1_POST_DIV_MASK_I830_LVDS
 0x003f0000

	)

967 
	#DPLL_FPA01_P1_POST_DIV_SHIFT
 16

	)

968 
	#DPLL_FPA01_P1_POST_DIV_SHIFT_IGD
 15

	)

969 
	#PLL_P2_DIVIDE_BY_4
 (1 << 23Ë

	)

970 
	#PLL_P1_DIVIDE_BY_TWO
 (1 << 21Ë

	)

971 
	#PLL_REF_INPUT_DREFCLK
 (0 << 13)

	)

972 
	#PLL_REF_INPUT_TVCLKINA
 (1 << 13Ë

	)

973 
	#PLL_REF_INPUT_SUPER_SSC
 (1 << 13Ë

	)

974 
	#PLL_REF_INPUT_TVCLKINBC
 (2 << 13Ë

	)

975 
	#PLLB_REF_INPUT_SPREADSPECTRUMIN
 (3 << 13)

	)

976 
	#PLL_REF_INPUT_MASK
 (3 << 13)

	)

977 
	#PLL_REF_INPUT_DMICLK
 (5 << 13Ë

	)

978 
	#PLL_LOAD_PULSE_PHASE_SHIFT
 9

	)

985 
	#PLL_LOAD_PULSE_PHASE_MASK
 (0x‡<< 
PLL_LOAD_PULSE_PHASE_SHIFT
)

	)

986 
	#DISPLAY_RATE_SELECT_FPA1
 (1 << 8)

	)

988 
	#PLL_REF_SDVO_HDMI_MULTIPLIER_SHIFT
 9

	)

989 
	#PLL_REF_SDVO_HDMI_MULTIPLIER_MASK
 (7 << 9)

	)

990 
	#PLL_REF_SDVO_HDMI_MULTIPLIER
(
x
Ë(((x)-1)<< 
PLL_REF_SDVO_HDMI_MULTIPLIER_SHIFT
)

	)

991 
	#DPLL_FPA1_P1_POST_DIV_SHIFT
 0

	)

992 
	#DPLL_FPA1_P1_POST_DIV_MASK
 0xff

	)

999 
	#SDVO_MULTIPLIER_MASK
 0x000000ff

	)

1000 
	#SDVO_MULTIPLIER_SHIFT_HIRES
 4

	)

1001 
	#SDVO_MULTIPLIER_SHIFT_VGA
 0

	)

1007 
	#DPLL_A_MD
 0x0601c

	)

1009 
	#DPLL_B_MD
 0x06020

	)

1015 
	#DPLL_MD_UDI_DIVIDER_MASK
 0x3f000000

	)

1016 
	#DPLL_MD_UDI_DIVIDER_SHIFT
 24

	)

1018 
	#DPLL_MD_VGA_UDI_DIVIDER_MASK
 0x003f0000

	)

1019 
	#DPLL_MD_VGA_UDI_DIVIDER_SHIFT
 16

	)

1037 
	#DPLL_MD_UDI_MULTIPLIER_MASK
 0x00003f00

	)

1038 
	#DPLL_MD_UDI_MULTIPLIER_SHIFT
 8

	)

1043 
	#DPLL_MD_VGA_UDI_MULTIPLIER_MASK
 0x0000003f

	)

1044 
	#DPLL_MD_VGA_UDI_MULTIPLIER_SHIFT
 0

	)

1047 
	#DPLL_TEST
 0x606c

	)

1048 
	#DPLLB_TEST_SDVO_DIV_1
 (0 << 22)

	)

1049 
	#DPLLB_TEST_SDVO_DIV_2
 (1 << 22)

	)

1050 
	#DPLLB_TEST_SDVO_DIV_4
 (2 << 22)

	)

1051 
	#DPLLB_TEST_SDVO_DIV_MASK
 (3 << 22)

	)

1052 
	#DPLLB_TEST_N_BYPASS
 (1 << 19)

	)

1053 
	#DPLLB_TEST_M_BYPASS
 (1 << 18)

	)

1054 
	#DPLLB_INPUT_BUFFER_ENABLE
 (1 << 16)

	)

1055 
	#DPLLA_TEST_N_BYPASS
 (1 << 3)

	)

1056 
	#DPLLA_TEST_M_BYPASS
 (1 << 2)

	)

1057 
	#DPLLA_INPUT_BUFFER_ENABLE
 (1 << 0)

	)

1059 
	#D_STATE
 0x6104

	)

1060 
	#DSPCLK_GATE_D
 0x6200

	)

1061 
	#DPUNIT_B_CLOCK_GATE_DISABLE
 (1 << 30Ë

	)

1062 
	#VSUNIT_CLOCK_GATE_DISABLE
 (1 << 29Ë

	)

1063 
	#VRHUNIT_CLOCK_GATE_DISABLE
 (1 << 28Ë

	)

1064 
	#VRDUNIT_CLOCK_GATE_DISABLE
 (1 << 27Ë

	)

1065 
	#AUDUNIT_CLOCK_GATE_DISABLE
 (1 << 26Ë

	)

1066 
	#DPUNIT_A_CLOCK_GATE_DISABLE
 (1 << 25Ë

	)

1067 
	#DPCUNIT_CLOCK_GATE_DISABLE
 (1 << 24Ë

	)

1068 
	#TVRUNIT_CLOCK_GATE_DISABLE
 (1 << 23Ë

	)

1069 
	#TVCUNIT_CLOCK_GATE_DISABLE
 (1 << 22Ë

	)

1070 
	#TVFUNIT_CLOCK_GATE_DISABLE
 (1 << 21Ë

	)

1071 
	#TVEUNIT_CLOCK_GATE_DISABLE
 (1 << 20Ë

	)

1072 
	#DVSUNIT_CLOCK_GATE_DISABLE
 (1 << 19Ë

	)

1073 
	#DSSUNIT_CLOCK_GATE_DISABLE
 (1 << 18Ë

	)

1074 
	#DDBUNIT_CLOCK_GATE_DISABLE
 (1 << 17Ë

	)

1075 
	#DPRUNIT_CLOCK_GATE_DISABLE
 (1 << 16Ë

	)

1076 
	#DPFUNIT_CLOCK_GATE_DISABLE
 (1 << 15Ë

	)

1077 
	#DPBMUNIT_CLOCK_GATE_DISABLE
 (1 << 14Ë

	)

1078 
	#DPLSUNIT_CLOCK_GATE_DISABLE
 (1 << 13Ë

	)

1079 
	#DPLUNIT_CLOCK_GATE_DISABLE
 (1 << 12Ë

	)

1080 
	#DPOUNIT_CLOCK_GATE_DISABLE
 (1 << 11)

	)

1081 
	#DPBUNIT_CLOCK_GATE_DISABLE
 (1 << 10)

	)

1082 
	#DCUNIT_CLOCK_GATE_DISABLE
 (1 << 9)

	)

1083 
	#DPUNIT_CLOCK_GATE_DISABLE
 (1 << 8)

	)

1084 
	#VRUNIT_CLOCK_GATE_DISABLE
 (1 << 7Ë

	)

1085 
	#OVHUNIT_CLOCK_GATE_DISABLE
 (1 << 6Ë

	)

1086 
	#DPIOUNIT_CLOCK_GATE_DISABLE
 (1 << 6Ë

	)

1087 
	#OVFUNIT_CLOCK_GATE_DISABLE
 (1 << 5)

	)

1088 
	#OVBUNIT_CLOCK_GATE_DISABLE
 (1 << 4)

	)

1093 
	#OVRUNIT_CLOCK_GATE_DISABLE
 (1 << 3)

	)

1094 
	#OVCUNIT_CLOCK_GATE_DISABLE
 (1 << 2)

	)

1095 
	#OVUUNIT_CLOCK_GATE_DISABLE
 (1 << 1)

	)

1096 
	#ZVUNIT_CLOCK_GATE_DISABLE
 (1 << 0Ë

	)

1097 
	#OVLUNIT_CLOCK_GATE_DISABLE
 (1 << 0Ë

	)

1099 
	#RENCLK_GATE_D1
 0x6204

	)

1100 
	#BLITTER_CLOCK_GATE_DISABLE
 (1 << 13Ë

	)

1101 
	#MPEG_CLOCK_GATE_DISABLE
 (1 << 12Ë

	)

1102 
	#PC_FE_CLOCK_GATE_DISABLE
 (1 << 11)

	)

1103 
	#PC_BE_CLOCK_GATE_DISABLE
 (1 << 10)

	)

1104 
	#WINDOWER_CLOCK_GATE_DISABLE
 (1 << 9)

	)

1105 
	#INTERPOLATOR_CLOCK_GATE_DISABLE
 (1 << 8)

	)

1106 
	#COLOR_CALCULATOR_CLOCK_GATE_DISABLE
 (1 << 7)

	)

1107 
	#MOTION_COMP_CLOCK_GATE_DISABLE
 (1 << 6)

	)

1108 
	#MAG_CLOCK_GATE_DISABLE
 (1 << 5)

	)

1110 
	#MECI_CLOCK_GATE_DISABLE
 (1 << 4)

	)

1111 
	#DCMP_CLOCK_GATE_DISABLE
 (1 << 3)

	)

1112 
	#MEC_CLOCK_GATE_DISABLE
 (1 << 2)

	)

1113 
	#MECO_CLOCK_GATE_DISABLE
 (1 << 1)

	)

1115 
	#SV_CLOCK_GATE_DISABLE
 (1 << 0)

	)

1116 
	#I915_MPEG_CLOCK_GATE_DISABLE
 (1 << 16)

	)

1117 
	#I915_VLD_IP_PR_CLOCK_GATE_DISABLE
 (1 << 15)

	)

1118 
	#I915_MOTION_COMP_CLOCK_GATE_DISABLE
 (1 << 14)

	)

1119 
	#I915_BD_BF_CLOCK_GATE_DISABLE
 (1 << 13)

	)

1120 
	#I915_SF_SE_CLOCK_GATE_DISABLE
 (1 << 12)

	)

1121 
	#I915_WM_CLOCK_GATE_DISABLE
 (1 << 11)

	)

1122 
	#I915_IZ_CLOCK_GATE_DISABLE
 (1 << 10)

	)

1123 
	#I915_PI_CLOCK_GATE_DISABLE
 (1 << 9)

	)

1124 
	#I915_DI_CLOCK_GATE_DISABLE
 (1 << 8)

	)

1125 
	#I915_SH_SV_CLOCK_GATE_DISABLE
 (1 << 7)

	)

1126 
	#I915_PL_DG_QC_FT_CLOCK_GATE_DISABLE
 (1 << 6)

	)

1127 
	#I915_SC_CLOCK_GATE_DISABLE
 (1 << 5)

	)

1128 
	#I915_FL_CLOCK_GATE_DISABLE
 (1 << 4)

	)

1129 
	#I915_DM_CLOCK_GATE_DISABLE
 (1 << 3)

	)

1130 
	#I915_PS_CLOCK_GATE_DISABLE
 (1 << 2)

	)

1131 
	#I915_CC_CLOCK_GATE_DISABLE
 (1 << 1)

	)

1132 
	#I915_BY_CLOCK_GATE_DISABLE
 (1 << 0)

	)

1134 
	#I965_RCZ_CLOCK_GATE_DISABLE
 (1 << 30)

	)

1136 
	#I965_RCC_CLOCK_GATE_DISABLE
 (1 << 29)

	)

1137 
	#I965_RCPB_CLOCK_GATE_DISABLE
 (1 << 28)

	)

1138 
	#I965_DAP_CLOCK_GATE_DISABLE
 (1 << 27)

	)

1139 
	#I965_ROC_CLOCK_GATE_DISABLE
 (1 << 26)

	)

1140 
	#I965_GW_CLOCK_GATE_DISABLE
 (1 << 25)

	)

1141 
	#I965_TD_CLOCK_GATE_DISABLE
 (1 << 24)

	)

1143 
	#I965_ISC_CLOCK_GATE_DISABLE
 (1 << 23)

	)

1144 
	#I965_IC_CLOCK_GATE_DISABLE
 (1 << 22)

	)

1145 
	#I965_EU_CLOCK_GATE_DISABLE
 (1 << 21)

	)

1146 
	#I965_IF_CLOCK_GATE_DISABLE
 (1 << 20)

	)

1147 
	#I965_TC_CLOCK_GATE_DISABLE
 (1 << 19)

	)

1148 
	#I965_SO_CLOCK_GATE_DISABLE
 (1 << 17)

	)

1149 
	#I965_FBC_CLOCK_GATE_DISABLE
 (1 << 16)

	)

1150 
	#I965_MARI_CLOCK_GATE_DISABLE
 (1 << 15)

	)

1151 
	#I965_MASF_CLOCK_GATE_DISABLE
 (1 << 14)

	)

1152 
	#I965_MAWB_CLOCK_GATE_DISABLE
 (1 << 13)

	)

1153 
	#I965_EM_CLOCK_GATE_DISABLE
 (1 << 12)

	)

1154 
	#I965_UC_CLOCK_GATE_DISABLE
 (1 << 11)

	)

1155 
	#I965_SI_CLOCK_GATE_DISABLE
 (1 << 6)

	)

1156 
	#I965_MT_CLOCK_GATE_DISABLE
 (1 << 5)

	)

1157 
	#I965_PL_CLOCK_GATE_DISABLE
 (1 << 4)

	)

1158 
	#I965_DG_CLOCK_GATE_DISABLE
 (1 << 3)

	)

1159 
	#I965_QC_CLOCK_GATE_DISABLE
 (1 << 2)

	)

1160 
	#I965_FT_CLOCK_GATE_DISABLE
 (1 << 1)

	)

1161 
	#I965_DM_CLOCK_GATE_DISABLE
 (1 << 0)

	)

1163 
	#RENCLK_GATE_D2
 0x6208

	)

1164 
	#VF_UNIT_CLOCK_GATE_DISABLE
 (1 << 9)

	)

1165 
	#GS_UNIT_CLOCK_GATE_DISABLE
 (1 << 7)

	)

1166 
	#CL_UNIT_CLOCK_GATE_DISABLE
 (1 << 6)

	)

1167 
	#RAMCLK_GATE_D
 0x6210

	)

1168 
	#DEUC
 0x6214

	)

1176 
	#LEGACY_BACKLIGHT_BRIGHTNESS
 0xf4

	)

1178 
	#BLC_PWM_CTL
 0x61254

	)

1179 
	#BACKLIGHT_MODULATION_FREQ_SHIFT
 (17)

	)

1180 
	#BACKLIGHT_MODULATION_FREQ_SHIFT2
 (16)

	)

1187 
	#BACKLIGHT_MODULATION_FREQ_MASK
 (0x7ff‡<< 17)

	)

1188 
	#BACKLIGHT_MODULATION_FREQ_MASK2
 (0xfff‡<< 16)

	)

1189 
	#BLM_LEGACY_MODE
 (1 << 16)

	)

1198 
	#BACKLIGHT_DUTY_CYCLE_SHIFT
 (0)

	)

1199 
	#BACKLIGHT_DUTY_CYCLE_MASK
 (0xffff)

	)

1202 
	#BLC_PWM_CTL2
 0x61250

	)

1203 
	#BLM_LEGACY_MODE2
 (1 << 30)

	)

1205 
	#BLM_CTL
 0x61260

	)

1206 
	#BLM_THRESHOLD_0
 0x61270

	)

1207 
	#BLM_THRESHOLD_1
 0x61274

	)

1208 
	#BLM_THRESHOLD_2
 0x61278

	)

1209 
	#BLM_THRESHOLD_3
 0x6127c

	)

1210 
	#BLM_THRESHOLD_4
 0x61280

	)

1211 
	#BLM_THRESHOLD_5
 0x61284

	)

1213 
	#BLM_ACCUMULATOR_0
 0x61290

	)

1214 
	#BLM_ACCUMULATOR_1
 0x61294

	)

1215 
	#BLM_ACCUMULATOR_2
 0x61298

	)

1216 
	#BLM_ACCUMULATOR_3
 0x6129c

	)

1217 
	#BLM_ACCUMULATOR_4
 0x612a0

	)

1218 
	#BLM_ACCUMULATOR_5
 0x612a4

	)

1220 
	#FPA0
 0x06040

	)

1221 
	#FPA1
 0x06044

	)

1222 
	#FPB0
 0x06048

	)

1223 
	#FPB1
 0x0604c

	)

1224 
	#FP_N_DIV_MASK
 0x003f0000

	)

1225 
	#FP_N_IGD_DIV_MASK
 0x00ff0000

	)

1226 
	#FP_N_DIV_SHIFT
 16

	)

1227 
	#FP_M1_DIV_MASK
 0x00003f00

	)

1228 
	#FP_M1_DIV_SHIFT
 8

	)

1229 
	#FP_M2_DIV_MASK
 0x0000003f

	)

1230 
	#FP_M2_IGD_DIV_MASK
 0x000000ff

	)

1231 
	#FP_M2_DIV_SHIFT
 0

	)

1233 
	#PORT_HOTPLUG_EN
 0x61110

	)

1234 
	#HDMIB_HOTPLUG_INT_EN
 (1 << 29)

	)

1235 
	#HDMIC_HOTPLUG_INT_EN
 (1 << 28)

	)

1236 
	#HDMID_HOTPLUG_INT_EN
 (1 << 27)

	)

1237 
	#SDVOB_HOTPLUG_INT_EN
 (1 << 26)

	)

1238 
	#SDVOC_HOTPLUG_INT_EN
 (1 << 25)

	)

1239 
	#TV_HOTPLUG_INT_EN
 (1 << 18)

	)

1240 
	#CRT_HOTPLUG_INT_EN
 (1 << 9)

	)

1241 
	#CRT_HOTPLUG_ACTIVATION_PERIOD_32
 (0 << 8)

	)

1243 
	#CRT_HOTPLUG_ACTIVATION_PERIOD_64
 (1 << 8)

	)

1244 
	#CRT_HOTPLUG_DAC_ON_TIME_2M
 (0 << 7)

	)

1245 
	#CRT_HOTPLUG_DAC_ON_TIME_4M
 (1 << 7)

	)

1246 
	#CRT_HOTPLUG_VOLTAGE_COMPARE_40
 (0 << 5)

	)

1247 
	#CRT_HOTPLUG_VOLTAGE_COMPARE_50
 (1 << 5)

	)

1248 
	#CRT_HOTPLUG_VOLTAGE_COMPARE_60
 (2 << 5)

	)

1249 
	#CRT_HOTPLUG_VOLTAGE_COMPARE_70
 (3 << 5)

	)

1250 
	#CRT_HOTPLUG_VOLTAGE_COMPARE_MASK
 (3 << 5)

	)

1251 
	#CRT_HOTPLUG_DETECT_DELAY_1G
 (0 << 4)

	)

1252 
	#CRT_HOTPLUG_DETECT_DELAY_2G
 (1 << 4)

	)

1253 
	#CRT_HOTPLUG_FORCE_DETECT
 (1 << 3)

	)

1254 
	#CRT_HOTPLUG_DETECT_VOLTAGE_325MV
 (0 << 2)

	)

1255 
	#CRT_HOTPLUG_DETECT_VOLTAGE_475MV
 (1 << 2)

	)

1256 
	#CRT_HOTPLUG_MASK
 (0x3fcË

	)

1258 
	#PORT_HOTPLUG_STAT
 0x61114

	)

1259 
	#HDMIB_HOTPLUG_INT_STATUS
 (1 << 29)

	)

1260 
	#HDMIC_HOTPLUG_INT_STATUS
 (1 << 28)

	)

1261 
	#HDMID_HOTPLUG_INT_STATUS
 (1 << 27)

	)

1262 
	#CRT_HOTPLUG_INT_STATUS
 (1 << 11)

	)

1263 
	#TV_HOTPLUG_INT_STATUS
 (1 << 10)

	)

1264 
	#CRT_HOTPLUG_MONITOR_MASK
 (3 << 8)

	)

1265 
	#CRT_HOTPLUG_MONITOR_COLOR
 (3 << 8)

	)

1266 
	#CRT_HOTPLUG_MONITOR_MONO
 (2 << 8)

	)

1267 
	#CRT_HOTPLUG_MONITOR_NONE
 (0 << 8)

	)

1268 
	#SDVOC_HOTPLUG_INT_STATUS
 (1 << 7)

	)

1269 
	#SDVOB_HOTPLUG_INT_STATUS
 (1 << 6)

	)

1271 
	#SDVOB
 0x61140

	)

1272 
	#SDVOC
 0x61160

	)

1273 
	#SDVO_ENABLE
 (1 << 31)

	)

1274 
	#SDVO_PIPE_B_SELECT
 (1 << 30)

	)

1275 
	#SDVO_STALL_SELECT
 (1 << 29)

	)

1276 
	#SDVO_INTERRUPT_ENABLE
 (1 << 26)

	)

1278 
	#DISPLAY_HOTPLUG_CTL
 0x61164

	)

1286 
	#SDVO_PORT_MULTIPLY_MASK
 (7 << 23)

	)

1287 
	#SDVO_PORT_MULTIPLY_SHIFT
 23

	)

1288 
	#SDVO_PHASE_SELECT_MASK
 (15 << 19)

	)

1289 
	#SDVO_PHASE_SELECT_DEFAULT
 (6 << 19)

	)

1290 
	#SDVO_CLOCK_OUTPUT_INVERT
 (1 << 18)

	)

1291 
	#SDVOC_GANG_MODE
 (1 << 16)

	)

1292 
	#SDVO_ENCODING_SDVO
 (0x0 << 10)

	)

1293 
	#SDVO_ENCODING_HDMI
 (0x2 << 10)

	)

1295 
	#SDVO_NULL_PACKETS_DURING_VSYNC
 (1 << 9)

	)

1296 
	#SDVO_BORDER_ENABLE
 (1 << 7)

	)

1297 
	#SDVO_AUDIO_ENABLE
 (1 << 6)

	)

1299 
	#SDVO_VSYNC_ACTIVE_HIGH
 (1 << 4)

	)

1301 
	#SDVO_HSYNC_ACTIVE_HIGH
 (1 << 3)

	)

1303 
	#SDVOB_PCIE_CONCURRENCY
 (1 << 3)

	)

1304 
	#SDVO_DETECTED
 (1 << 2)

	)

1306 
	#SDVOB_PRESERVE_MASK
 ((1 << 17Ë| (1 << 16Ë| (1 << 14))

	)

1307 
	#SDVOC_PRESERVE_MASK
 (1 << 17)

	)

1309 
	#UDIB_SVB_SHB_CODES
 0x61144

	)

1310 
	#UDIB_SHA_BLANK_CODES
 0x61148

	)

1311 
	#UDIB_START_END_FILL_CODES
 0x6114c

	)

1314 
	#SDVOUDI
 0x61150

	)

1316 
	#I830_HTOTAL_MASK
 0xfff0000

	)

1317 
	#I830_HACTIVE_MASK
 0x7ff

	)

1319 
	#I830_HBLANKEND_MASK
 0xfff0000

	)

1320 
	#I830_HBLANKSTART_MASK
 0xfff

	)

1322 
	#I830_HSYNCEND_MASK
 0xfff0000

	)

1323 
	#I830_HSYNCSTART_MASK
 0xfff

	)

1325 
	#I830_VTOTAL_MASK
 0xfff0000

	)

1326 
	#I830_VACTIVE_MASK
 0x7ff

	)

1328 
	#I830_VBLANKEND_MASK
 0xfff0000

	)

1329 
	#I830_VBLANKSTART_MASK
 0xfff

	)

1331 
	#I830_VSYNCEND_MASK
 0xfff0000

	)

1332 
	#I830_VSYNCSTART_MASK
 0xfff

	)

1334 
	#I830_PIPEA_HORZ_MASK
 0x7ff0000

	)

1335 
	#I830_PIPEA_VERT_MASK
 0x7ff

	)

1337 
	#ADPA
 0x61100

	)

1338 
	#ADPA_DAC_ENABLE
 (1<<31)

	)

1339 
	#ADPA_DAC_DISABLE
 0

	)

1340 
	#ADPA_PIPE_SELECT_MASK
 (1<<30)

	)

1341 
	#ADPA_PIPE_A_SELECT
 0

	)

1342 
	#ADPA_PIPE_B_SELECT
 (1<<30)

	)

1343 
	#ADPA_USE_VGA_HVPOLARITY
 (1<<15)

	)

1344 
	#ADPA_SETS_HVPOLARITY
 0

	)

1345 
	#ADPA_VSYNC_CNTL_DISABLE
 (1<<11)

	)

1346 
	#ADPA_VSYNC_CNTL_ENABLE
 0

	)

1347 
	#ADPA_HSYNC_CNTL_DISABLE
 (1<<10)

	)

1348 
	#ADPA_HSYNC_CNTL_ENABLE
 0

	)

1349 
	#ADPA_VSYNC_ACTIVE_HIGH
 (1<<4)

	)

1350 
	#ADPA_VSYNC_ACTIVE_LOW
 0

	)

1351 
	#ADPA_HSYNC_ACTIVE_HIGH
 (1<<3)

	)

1352 
	#ADPA_HSYNC_ACTIVE_LOW
 0

	)

1354 
	#PCH_DSP_CHICKEN1
 0x42000

	)

1355 
	#PCH_DSP_CHICKEN2
 0x42004

	)

1356 
	#PCH_DSP_CHICKEN3
 0x4200c

	)

1357 
	#PCH_DSPCLK_GATE_D
 0x42020

	)

1358 
	#PCH_DSPRAMCLK_GATE_D
 0x42024

	)

1359 
	#PCH_3DCGDIS0
 0x46020

	)

1360 
	#PCH_3DCGDIS1
 0x46024

	)

1361 
	#PCH_3DRAMCGDIS0
 0x46028

	)

1362 
	#SOUTH_DSPCLK_GATE_D
 0xc2020

	)

1364 
	#CPU_eDP_A
 0x64000

	)

1365 
	#PCH_DP_B
 0xe4100

	)

1366 
	#PCH_DP_C
 0xe4200

	)

1367 
	#PCH_DP_D
 0xe4300

	)

1369 
	#DVOA
 0x61120

	)

1370 
	#DVOB
 0x61140

	)

1371 
	#DVOC
 0x61160

	)

1372 
	#DVO_ENABLE
 (1 << 31)

	)

1373 
	#DVO_PIPE_B_SELECT
 (1 << 30)

	)

1374 
	#DVO_PIPE_STALL_UNUSED
 (0 << 28)

	)

1375 
	#DVO_PIPE_STALL
 (1 << 28)

	)

1376 
	#DVO_PIPE_STALL_TV
 (2 << 28)

	)

1377 
	#DVO_PIPE_STALL_MASK
 (3 << 28)

	)

1378 
	#DVO_USE_VGA_SYNC
 (1 << 15)

	)

1379 
	#DVO_DATA_ORDER_I740
 (0 << 14)

	)

1380 
	#DVO_DATA_ORDER_FP
 (1 << 14)

	)

1381 
	#DVO_VSYNC_DISABLE
 (1 << 11)

	)

1382 
	#DVO_HSYNC_DISABLE
 (1 << 10)

	)

1383 
	#DVO_VSYNC_TRISTATE
 (1 << 9)

	)

1384 
	#DVO_HSYNC_TRISTATE
 (1 << 8)

	)

1385 
	#DVO_BORDER_ENABLE
 (1 << 7)

	)

1386 
	#DVO_DATA_ORDER_GBRG
 (1 << 6)

	)

1387 
	#DVO_DATA_ORDER_RGGB
 (0 << 6)

	)

1388 
	#DVO_DATA_ORDER_GBRG_ERRATA
 (0 << 6)

	)

1389 
	#DVO_DATA_ORDER_RGGB_ERRATA
 (1 << 6)

	)

1390 
	#DVO_VSYNC_ACTIVE_HIGH
 (1 << 4)

	)

1391 
	#DVO_HSYNC_ACTIVE_HIGH
 (1 << 3)

	)

1392 
	#DVO_BLANK_ACTIVE_HIGH
 (1 << 2)

	)

1393 
	#DVO_OUTPUT_CSTATE_PIXELS
 (1 << 1Ë

	)

1394 
	#DVO_OUTPUT_SOURCE_SIZE_PIXELS
 (1 << 0Ë

	)

1395 
	#DVO_PRESERVE_MASK
 (0x7<<24)

	)

1397 
	#DVOA_SRCDIM
 0x61124

	)

1398 
	#DVOB_SRCDIM
 0x61144

	)

1399 
	#DVOC_SRCDIM
 0x61164

	)

1400 
	#DVO_SRCDIM_HORIZONTAL_SHIFT
 12

	)

1401 
	#DVO_SRCDIM_VERTICAL_SHIFT
 0

	)

1412 
	#LVDS
 0x61180

	)

1417 
	#LVDS_PORT_EN
 (1 << 31)

	)

1419 
	#LVDS_PIPEB_SELECT
 (1 << 30)

	)

1422 
	#LVDS_DITHER_ENABLE
 (1 << 25)

	)

1430 
	#LVDS_DATA_FORMAT_DOT_ONE
 (1 << 24)

	)

1433 
	#LVDS_LE_CONTROL_ENABLE
 (1 << 23)

	)

1436 
	#LVDS_LF_CONTROL_ENABLE
 (1 << 22)

	)

1439 
	#LVDS_VSYNC_POLARITY_INVERT
 (1 << 21)

	)

1442 
	#LVDS_HSYNC_POLARITY_INVERT
 (1 << 20)

	)

1445 
	#LVDS_DE_POLARITY_INVERT
 (1 << 19)

	)

1452 
	#LVDS_SECOND_CHANNEL_DE_HS_VS
 (0 << 17)

	)

1454 
	#LVDS_SECOND_CHANNEL_RESERVED
 (1 << 17)

	)

1457 
	#LVDS_SECOND_CHANNEL_ZEROS
 (2 << 17)

	)

1460 
	#LVDS_SECOND_CHANNEL_HS_VS
 (3 << 17)

	)

1465 
	#LVDS_CHANNEL_DUP_RESERVED
 (1 << 16)

	)

1470 
	#LVDS_BORDER_ENABLE
 (1 << 15)

	)

1476 
	#LVDS_POWER_DOWN_TRI_STATE
 (1 << 10)

	)

1482 
	#LVDS_A0A2_CLKA_POWER_MASK
 (3 << 8)

	)

1483 
	#LVDS_A0A2_CLKA_POWER_DOWN
 (0 << 8)

	)

1484 
	#LVDS_A0A2_CLKA_POWER_UP
 (3 << 8)

	)

1490 
	#LVDS_A3_POWER_MASK
 (3 << 6)

	)

1491 
	#LVDS_A3_POWER_DOWN
 (0 << 6)

	)

1492 
	#LVDS_A3_POWER_UP
 (3 << 6)

	)

1497 
	#LVDS_CLKB_POWER_MASK
 (3 << 4)

	)

1498 
	#LVDS_CLKB_POWER_DOWN
 (0 << 4)

	)

1499 
	#LVDS_CLKB_POWER_UP
 (3 << 4)

	)

1506 
	#LVDS_B0B3_POWER_MASK
 (3 << 2)

	)

1507 
	#LVDS_B0B3_POWER_DOWN
 (0 << 2)

	)

1508 
	#LVDS_B0B3_POWER_UP
 (3 << 2)

	)

1512 
	#DP_B
 0x64100

	)

1513 
	#DPB_AUX_CH_CTL
 0x64110

	)

1514 
	#DPB_AUX_CH_DATA1
 0x64114

	)

1515 
	#DPB_AUX_CH_DATA2
 0x64118

	)

1516 
	#DPB_AUX_CH_DATA3
 0x6411c

	)

1517 
	#DPB_AUX_CH_DATA4
 0x64120

	)

1518 
	#DPB_AUX_CH_DATA5
 0x64124

	)

1520 
	#DP_C
 0x64200

	)

1521 
	#DPC_AUX_CH_CTL
 0x64210

	)

1522 
	#DPC_AUX_CH_DATA1
 0x64214

	)

1523 
	#DPC_AUX_CH_DATA2
 0x64218

	)

1524 
	#DPC_AUX_CH_DATA3
 0x6421c

	)

1525 
	#DPC_AUX_CH_DATA4
 0x64220

	)

1526 
	#DPC_AUX_CH_DATA5
 0x64224

	)

1528 
	#DP_D
 0x64300

	)

1529 
	#DPD_AUX_CH_CTL
 0x64310

	)

1530 
	#DPD_AUX_CH_DATA1
 0x64314

	)

1531 
	#DPD_AUX_CH_DATA2
 0x64318

	)

1532 
	#DPD_AUX_CH_DATA3
 0x6431c

	)

1533 
	#DPD_AUX_CH_DATA4
 0x64320

	)

1534 
	#DPD_AUX_CH_DATA5
 0x64324

	)

1542 
	#LVDS_CLKB_POWER_DOWN
 (0 << 4)

	)

1545 
	#LVDS_CLKB_POWER_PARTIAL
 (1 << 4)

	)

1548 
	#LVDS_CLKB_POWER_UP
 (3 << 4)

	)

1558 
	#LVDS_B_POWER_DOWN
 (0 << 2)

	)

1561 
	#LVDS_B_POWER_PARTIAL
 (1 << 2)

	)

1564 
	#LVDS_B_POWER_UP
 (3 << 2)

	)

1569 
	#TV_CTL
 0x68000

	)

1571 
	#TV_ENC_ENABLE
 (1 << 31)

	)

1573 
	#TV_ENC_PIPEB_SELECT
 (1 << 30)

	)

1575 
	#TV_ENC_OUTPUT_COMPOSITE
 (0 << 28)

	)

1577 
	#TV_ENC_OUTPUT_SVIDEO
 (1 << 28)

	)

1579 
	#TV_ENC_OUTPUT_COMPONENT
 (2 << 28)

	)

1581 
	#TV_ENC_OUTPUT_SVIDEO_COMPOSITE
 (3 << 28)

	)

1582 
	#TV_TRILEVEL_SYNC
 (1 << 21)

	)

1584 
	#TV_SLOW_SYNC
 (1 << 20)

	)

1586 
	#TV_OVERSAMPLE_4X
 (0 << 18)

	)

1588 
	#TV_OVERSAMPLE_2X
 (1 << 18)

	)

1590 
	#TV_OVERSAMPLE_NONE
 (2 << 18)

	)

1592 
	#TV_OVERSAMPLE_8X
 (3 << 18)

	)

1594 
	#TV_PROGRESSIVE
 (1 << 17)

	)

1596 
	#TV_PAL_BURST
 (1 << 16)

	)

1598 
	#TV_YC_SKEW_MASK
 (7 << 12)

	)

1600 
	#TV_ENC_SDP_FIX
 (1 << 11)

	)

1606 
	#TV_ENC_C0_FIX
 (1 << 10)

	)

1608 
	#TV_CTL_SAVE
 ((1 << 11Ë| (3 << 9Ë| (7 << 6Ë| 0xf)

	)

1609 
	#TV_FUSE_STATE_MASK
 (3 << 4)

	)

1611 
	#TV_FUSE_STATE_ENABLED
 (0 << 4)

	)

1613 
	#TV_FUSE_STATE_NO_MACROVISION
 (1 << 4)

	)

1615 
	#TV_FUSE_STATE_DISABLED
 (2 << 4)

	)

1617 
	#TV_TEST_MODE_NORMAL
 (0 << 0)

	)

1619 
	#TV_TEST_MODE_PATTERN_1
 (1 << 0)

	)

1621 
	#TV_TEST_MODE_PATTERN_2
 (2 << 0)

	)

1623 
	#TV_TEST_MODE_PATTERN_3
 (3 << 0)

	)

1625 
	#TV_TEST_MODE_PATTERN_4
 (4 << 0)

	)

1627 
	#TV_TEST_MODE_PATTERN_5
 (5 << 0)

	)

1633 
	#TV_TEST_MODE_MONITOR_DETECT
 (7 << 0)

	)

1634 
	#TV_TEST_MODE_MASK
 (7 << 0)

	)

1640 
	#TV_DAC
 0x68004

	)

1646 
	#TVDAC_STATE_CHG
 (1 << 31)

	)

1647 
	#TVDAC_SENSE_MASK
 (7 << 28)

	)

1649 
	#TVDAC_A_SENSE
 (1 << 30)

	)

1651 
	#TVDAC_B_SENSE
 (1 << 29)

	)

1653 
	#TVDAC_C_SENSE
 (1 << 28)

	)

1660 
	#TVDAC_STATE_CHG_EN
 (1 << 27)

	)

1662 
	#TVDAC_A_SENSE_CTL
 (1 << 26)

	)

1664 
	#TVDAC_B_SENSE_CTL
 (1 << 25)

	)

1666 
	#TVDAC_C_SENSE_CTL
 (1 << 24)

	)

1668 
	#DAC_CTL_OVERRIDE
 (1 << 7)

	)

1670 
	#ENC_TVDAC_SLEW_FAST
 (1 << 6)

	)

1671 
	#DAC_A_1_3_V
 (0 << 4)

	)

1672 
	#DAC_A_1_1_V
 (1 << 4)

	)

1673 
	#DAC_A_0_7_V
 (2 << 4)

	)

1674 
	#DAC_A_OFF
 (3 << 4)

	)

1675 
	#DAC_B_1_3_V
 (0 << 2)

	)

1676 
	#DAC_B_1_1_V
 (1 << 2)

	)

1677 
	#DAC_B_0_7_V
 (2 << 2)

	)

1678 
	#DAC_B_OFF
 (3 << 2)

	)

1679 
	#DAC_C_1_3_V
 (0 << 0)

	)

1680 
	#DAC_C_1_1_V
 (1 << 0)

	)

1681 
	#DAC_C_0_7_V
 (2 << 0)

	)

1682 
	#DAC_C_OFF
 (3 << 0)

	)

1691 
	#TV_CSC_Y
 0x68010

	)

1692 
	#TV_RY_MASK
 0x07ff0000

	)

1693 
	#TV_RY_SHIFT
 16

	)

1694 
	#TV_GY_MASK
 0x00000fff

	)

1695 
	#TV_GY_SHIFT
 0

	)

1697 
	#TV_CSC_Y2
 0x68014

	)

1698 
	#TV_BY_MASK
 0x07ff0000

	)

1699 
	#TV_BY_SHIFT
 16

	)

1705 
	#TV_AY_MASK
 0x000003ff

	)

1706 
	#TV_AY_SHIFT
 0

	)

1708 
	#TV_CSC_U
 0x68018

	)

1709 
	#TV_RU_MASK
 0x07ff0000

	)

1710 
	#TV_RU_SHIFT
 16

	)

1711 
	#TV_GU_MASK
 0x000007ff

	)

1712 
	#TV_GU_SHIFT
 0

	)

1714 
	#TV_CSC_U2
 0x6801c

	)

1715 
	#TV_BU_MASK
 0x07ff0000

	)

1716 
	#TV_BU_SHIFT
 16

	)

1722 
	#TV_AU_MASK
 0x000003ff

	)

1723 
	#TV_AU_SHIFT
 0

	)

1725 
	#TV_CSC_V
 0x68020

	)

1726 
	#TV_RV_MASK
 0x0fff0000

	)

1727 
	#TV_RV_SHIFT
 16

	)

1728 
	#TV_GV_MASK
 0x000007ff

	)

1729 
	#TV_GV_SHIFT
 0

	)

1731 
	#TV_CSC_V2
 0x68024

	)

1732 
	#TV_BV_MASK
 0x07ff0000

	)

1733 
	#TV_BV_SHIFT
 16

	)

1739 
	#TV_AV_MASK
 0x000007ff

	)

1740 
	#TV_AV_SHIFT
 0

	)

1745 
	#TV_CLR_KNOBS
 0x68028

	)

1747 
	#TV_BRIGHTNESS_MASK
 0xff000000

	)

1748 
	#TV_BRIGHTNESS_SHIFT
 24

	)

1750 
	#TV_CONTRAST_MASK
 0x00ff0000

	)

1751 
	#TV_CONTRAST_SHIFT
 16

	)

1753 
	#TV_SATURATION_MASK
 0x0000ff00

	)

1754 
	#TV_SATURATION_SHIFT
 8

	)

1756 
	#TV_HUE_MASK
 0x000000ff

	)

1757 
	#TV_HUE_SHIFT
 0

	)

1763 
	#TV_CLR_LEVEL
 0x6802c

	)

1765 
	#TV_BLACK_LEVEL_MASK
 0x01ff0000

	)

1766 
	#TV_BLACK_LEVEL_SHIFT
 16

	)

1768 
	#TV_BLANK_LEVEL_MASK
 0x000001ff

	)

1769 
	#TV_BLANK_LEVEL_SHIFT
 0

	)

1775 
	#TV_H_CTL_1
 0x68030

	)

1777 
	#TV_HSYNC_END_MASK
 0x1fff0000

	)

1778 
	#TV_HSYNC_END_SHIFT
 16

	)

1780 
	#TV_HTOTAL_MASK
 0x00001fff

	)

1781 
	#TV_HTOTAL_SHIFT
 0

	)

1787 
	#TV_H_CTL_2
 0x68034

	)

1789 
	#TV_BURST_ENA
 (1 << 31)

	)

1791 
	#TV_HBURST_START_SHIFT
 16

	)

1792 
	#TV_HBURST_START_MASK
 0x1fff0000

	)

1794 
	#TV_HBURST_LEN_SHIFT
 0

	)

1795 
	#TV_HBURST_LEN_MASK
 0x0001fff

	)

1801 
	#TV_H_CTL_3
 0x68038

	)

1803 
	#TV_HBLANK_END_SHIFT
 16

	)

1804 
	#TV_HBLANK_END_MASK
 0x1fff0000

	)

1806 
	#TV_HBLANK_START_SHIFT
 0

	)

1807 
	#TV_HBLANK_START_MASK
 0x0001fff

	)

1813 
	#TV_V_CTL_1
 0x6803c

	)

1815 
	#TV_NBR_END_SHIFT
 16

	)

1816 
	#TV_NBR_END_MASK
 0x07ff0000

	)

1818 
	#TV_VI_END_F1_SHIFT
 8

	)

1819 
	#TV_VI_END_F1_MASK
 0x00003f00

	)

1821 
	#TV_VI_END_F2_SHIFT
 0

	)

1822 
	#TV_VI_END_F2_MASK
 0x0000003f

	)

1828 
	#TV_V_CTL_2
 0x68040

	)

1830 
	#TV_VSYNC_LEN_MASK
 0x07ff0000

	)

1831 
	#TV_VSYNC_LEN_SHIFT
 16

	)

1835 
	#TV_VSYNC_START_F1_MASK
 0x00007f00

	)

1836 
	#TV_VSYNC_START_F1_SHIFT
 8

	)

1841 
	#TV_VSYNC_START_F2_MASK
 0x0000007f

	)

1842 
	#TV_VSYNC_START_F2_SHIFT
 0

	)

1848 
	#TV_V_CTL_3
 0x68044

	)

1850 
	#TV_EQUAL_ENA
 (1 << 31)

	)

1852 
	#TV_VEQ_LEN_MASK
 0x007f0000

	)

1853 
	#TV_VEQ_LEN_SHIFT
 16

	)

1857 
	#TV_VEQ_START_F1_MASK
 0x0007f00

	)

1858 
	#TV_VEQ_START_F1_SHIFT
 8

	)

1863 
	#TV_VEQ_START_F2_MASK
 0x000007f

	)

1864 
	#TV_VEQ_START_F2_SHIFT
 0

	)

1870 
	#TV_V_CTL_4
 0x68048

	)

1875 
	#TV_VBURST_START_F1_MASK
 0x003f0000

	)

1876 
	#TV_VBURST_START_F1_SHIFT
 16

	)

1881 
	#TV_VBURST_END_F1_MASK
 0x000000ff

	)

1882 
	#TV_VBURST_END_F1_SHIFT
 0

	)

1888 
	#TV_V_CTL_5
 0x6804c

	)

1893 
	#TV_VBURST_START_F2_MASK
 0x003f0000

	)

1894 
	#TV_VBURST_START_F2_SHIFT
 16

	)

1899 
	#TV_VBURST_END_F2_MASK
 0x000000ff

	)

1900 
	#TV_VBURST_END_F2_SHIFT
 0

	)

1906 
	#TV_V_CTL_6
 0x68050

	)

1911 
	#TV_VBURST_START_F3_MASK
 0x003f0000

	)

1912 
	#TV_VBURST_START_F3_SHIFT
 16

	)

1917 
	#TV_VBURST_END_F3_MASK
 0x000000ff

	)

1918 
	#TV_VBURST_END_F3_SHIFT
 0

	)

1924 
	#TV_V_CTL_7
 0x68054

	)

1929 
	#TV_VBURST_START_F4_MASK
 0x003f0000

	)

1930 
	#TV_VBURST_START_F4_SHIFT
 16

	)

1935 
	#TV_VBURST_END_F4_MASK
 0x000000ff

	)

1936 
	#TV_VBURST_END_F4_SHIFT
 0

	)

1942 
	#TV_SC_CTL_1
 0x68060

	)

1944 
	#TV_SC_DDA1_EN
 (1 << 31)

	)

1946 
	#TV_SC_DDA2_EN
 (1 << 30)

	)

1948 
	#TV_SC_DDA3_EN
 (1 << 29)

	)

1950 
	#TV_SC_RESET_EVERY_2
 (0 << 24)

	)

1952 
	#TV_SC_RESET_EVERY_4
 (1 << 24)

	)

1954 
	#TV_SC_RESET_EVERY_8
 (2 << 24)

	)

1956 
	#TV_SC_RESET_NEVER
 (3 << 24)

	)

1958 
	#TV_BURST_LEVEL_MASK
 0x00ff0000

	)

1959 
	#TV_BURST_LEVEL_SHIFT
 16

	)

1961 
	#TV_SCDDA1_INC_MASK
 0x00000fff

	)

1962 
	#TV_SCDDA1_INC_SHIFT
 0

	)

1968 
	#TV_SC_CTL_2
 0x68064

	)

1970 
	#TV_SCDDA2_SIZE_MASK
 0x7fff0000

	)

1971 
	#TV_SCDDA2_SIZE_SHIFT
 16

	)

1973 
	#TV_SCDDA2_INC_MASK
 0x00007fff

	)

1974 
	#TV_SCDDA2_INC_SHIFT
 0

	)

1980 
	#TV_SC_CTL_3
 0x68068

	)

1982 
	#TV_SCDDA3_SIZE_MASK
 0x7fff0000

	)

1983 
	#TV_SCDDA3_SIZE_SHIFT
 16

	)

1985 
	#TV_SCDDA3_INC_MASK
 0x00007fff

	)

1986 
	#TV_SCDDA3_INC_SHIFT
 0

	)

1992 
	#TV_WIN_POS
 0x68070

	)

1994 
	#TV_XPOS_MASK
 0x1fff0000

	)

1995 
	#TV_XPOS_SHIFT
 16

	)

1997 
	#TV_YPOS_MASK
 0x00000fff

	)

1998 
	#TV_YPOS_SHIFT
 0

	)

2004 
	#TV_WIN_SIZE
 0x68074

	)

2006 
	#TV_XSIZE_MASK
 0x1fff0000

	)

2007 
	#TV_XSIZE_SHIFT
 16

	)

2013 
	#TV_YSIZE_MASK
 0x00000fff

	)

2014 
	#TV_YSIZE_SHIFT
 0

	)

2020 
	#TV_FILTER_CTL_1
 0x68080

	)

2027 
	#TV_AUTO_SCALE
 (1 << 31)

	)

2032 
	#TV_V_FILTER_BYPASS
 (1 << 29)

	)

2034 
	#TV_VADAPT
 (1 << 28)

	)

2035 
	#TV_VADAPT_MODE_MASK
 (3 << 26)

	)

2037 
	#TV_VADAPT_MODE_LEAST
 (0 << 26)

	)

2039 
	#TV_VADAPT_MODE_MODERATE
 (1 << 26)

	)

2041 
	#TV_VADAPT_MODE_MOST
 (3 << 26)

	)

2050 
	#TV_HSCALE_FRAC_MASK
 0x00003fff

	)

2051 
	#TV_HSCALE_FRAC_SHIFT
 0

	)

2057 
	#TV_FILTER_CTL_2
 0x68084

	)

2063 
	#TV_VSCALE_INT_MASK
 0x00038000

	)

2064 
	#TV_VSCALE_INT_SHIFT
 15

	)

2070 
	#TV_VSCALE_FRAC_MASK
 0x00007fff

	)

2071 
	#TV_VSCALE_FRAC_SHIFT
 0

	)

2077 
	#TV_FILTER_CTL_3
 0x68088

	)

2085 
	#TV_VSCALE_IP_INT_MASK
 0x00038000

	)

2086 
	#TV_VSCALE_IP_INT_SHIFT
 15

	)

2094 
	#TV_VSCALE_IP_FRAC_MASK
 0x00007fff

	)

2095 
	#TV_VSCALE_IP_FRAC_SHIFT
 0

	)

2101 
	#TV_CC_CONTROL
 0x68090

	)

2102 
	#TV_CC_ENABLE
 (1 << 31)

	)

2108 
	#TV_CC_FID_MASK
 (1 << 27)

	)

2109 
	#TV_CC_FID_SHIFT
 27

	)

2111 
	#TV_CC_HOFF_MASK
 0x03ff0000

	)

2112 
	#TV_CC_HOFF_SHIFT
 16

	)

2114 
	#TV_CC_LINE_MASK
 0x0000003f

	)

2115 
	#TV_CC_LINE_SHIFT
 0

	)

2121 
	#TV_CC_DATA
 0x68094

	)

2122 
	#TV_CC_RDY
 (1 << 31)

	)

2124 
	#TV_CC_DATA_2_MASK
 0x007f0000

	)

2125 
	#TV_CC_DATA_2_SHIFT
 16

	)

2127 
	#TV_CC_DATA_1_MASK
 0x0000007f

	)

2128 
	#TV_CC_DATA_1_SHIFT
 0

	)

2133 
	#TV_H_LUMA_0
 0x68100

	)

2134 
	#TV_H_LUMA_59
 0x681ec

	)

2135 
	#TV_H_CHROMA_0
 0x68200

	)

2136 
	#TV_H_CHROMA_59
 0x682ec

	)

2137 
	#TV_V_LUMA_0
 0x68300

	)

2138 
	#TV_V_LUMA_42
 0x683a8

	)

2139 
	#TV_V_CHROMA_0
 0x68400

	)

2140 
	#TV_V_CHROMA_42
 0x684a8

	)

2143 
	#PIPEA_DSL
 0x70000

	)

2145 
	#PIPEACONF
 0x70008

	)

2146 
	#PIPEACONF_ENABLE
 (1<<31)

	)

2147 
	#PIPEACONF_DISABLE
 0

	)

2148 
	#PIPEACONF_DOUBLE_WIDE
 (1<<30)

	)

2149 
	#I965_PIPECONF_ACTIVE
 (1<<30)

	)

2150 
	#PIPEACONF_SINGLE_WIDE
 0

	)

2151 
	#PIPEACONF_PIPE_UNLOCKED
 0

	)

2152 
	#PIPEACONF_PIPE_LOCKED
 (1<<25)

	)

2153 
	#PIPEACONF_PALETTE
 0

	)

2154 
	#PIPEACONF_GAMMA
 (1<<24)

	)

2155 
	#PIPECONF_FORCE_BORDER
 (1<<25)

	)

2156 
	#PIPECONF_PROGRESSIVE
 (0 << 21)

	)

2157 
	#PIPECONF_INTERLACE_W_FIELD_INDICATION
 (6 << 21)

	)

2158 
	#PIPECONF_INTERLACE_FIELD_0_ONLY
 (7 << 21)

	)

2160 
	#PIPECONF_PALETTE_8BIT
 (0<<24)

	)

2161 
	#PIPECONF_PALETTE_10BIT
 (1<<24)

	)

2162 
	#PIPECONF_PALETTE_12BIT
 (2<<24)

	)

2163 
	#PIPECONF_FORCE_BORDER
 (1<<25)

	)

2164 
	#PIPECONF_PROGRESSIVE
 (0 << 21)

	)

2165 
	#PIPECONF_INTERLACE_W_FIELD_INDICATION
 (6 << 21)

	)

2166 
	#PIPECONF_INTERLACE_FIELD_0_ONLY
 (7 << 21)

	)

2168 
	#PIPECONF_MSA_TIMING_DELAY
 (0<<18Ë

	)

2169 
	#PIPECONF_NO_DYNAMIC_RATE_CHANGE
 (0 << 16)

	)

2170 
	#PIPECONF_NO_ROTATION
 (0<<14)

	)

2171 
	#PIPECONF_FULL_COLOR_RANGE
 (0<<13)

	)

2172 
	#PIPECONF_CE_COLOR_RANGE
 (1<<13)

	)

2173 
	#PIPECONF_COLOR_SPACE_RGB
 (0<<11)

	)

2174 
	#PIPECONF_COLOR_SPACE_YUV601
 (1<<11)

	)

2175 
	#PIPECONF_COLOR_SPACE_YUV709
 (2<<11)

	)

2176 
	#PIPECONF_CONNECT_DEFAULT
 (0<<9)

	)

2177 
	#PIPECONF_8BPP
 (0<<5)

	)

2178 
	#PIPECONF_10BPP
 (1<<5)

	)

2179 
	#PIPECONF_6BPP
 (2<<5)

	)

2180 
	#PIPECONF_12BPP
 (3<<5)

	)

2181 
	#PIPECONF_ENABLE_DITHER
 (1<<4)

	)

2182 
	#PIPECONF_DITHER_SPATIAL
 (0<<2)

	)

2183 
	#PIPECONF_DITHER_ST1
 (1<<2)

	)

2184 
	#PIPECONF_DITHER_ST2
 (2<<2)

	)

2185 
	#PIPECONF_DITHER_TEMPORAL
 (3<<2)

	)

2187 
	#PIPEAGCMAXRED
 0x70010

	)

2188 
	#PIPEAGCMAXGREEN
 0x70014

	)

2189 
	#PIPEAGCMAXBLUE
 0x70018

	)

2190 
	#PIPEASTAT
 0x70024

	)

2191 
	#FIFO_UNDERRUN
 (1 << 31)

	)

2192 
	#CRC_ERROR_ENABLE
 (1 << 29)

	)

2193 
	#CRC_DONE_ENABLE
 (1 << 28)

	)

2194 
	#GMBUS_EVENT_ENABLE
 (1 << 27)

	)

2195 
	#VSYNC_INT_ENABLE
 (1 << 25)

	)

2196 
	#DLINE_COMPARE_ENABLE
 (1 << 24)

	)

2197 
	#DPST_EVENT_ENABLE
 (1 << 23)

	)

2198 
	#LBLC_EVENT_ENABLE
 (1 << 22)

	)

2199 
	#OFIELD_INT_ENABLE
 (1 << 21)

	)

2200 
	#EFIELD_INT_ENABLE
 (1 << 20)

	)

2201 
	#SVBLANK_INT_ENABLE
 (1 << 18)

	)

2202 
	#VBLANK_INT_ENABLE
 (1 << 17)

	)

2203 
	#OREG_UPDATE_ENABLE
 (1 << 16)

	)

2204 
	#CRC_ERROR_INT_STATUS
 (1 << 13)

	)

2205 
	#CRC_DONE_INT_STATUS
 (1 << 12)

	)

2206 
	#GMBUS_INT_STATUS
 (1 << 11)

	)

2207 
	#VSYNC_INT_STATUS
 (1 << 9)

	)

2208 
	#DLINE_COMPARE_STATUS
 (1 << 8)

	)

2209 
	#DPST_EVENT_STATUS
 (1 << 7)

	)

2210 
	#LBLC_EVENT_STATUS
 (1 << 6)

	)

2211 
	#OFIELD_INT_STATUS
 (1 << 5)

	)

2212 
	#EFIELD_INT_STATUS
 (1 << 4)

	)

2213 
	#SVBLANK_INT_STATUS
 (1 << 2)

	)

2214 
	#VBLANK_INT_STATUS
 (1 << 1)

	)

2215 
	#OREG_UPDATE_STATUS
 (1 << 0)

	)

2217 
	#FW_BLC
 0x020d8

	)

2218 
	#FW_BLC2
 0x020dc

	)

2219 
	#FW_BLC_SELF
 0x020e0

	)

2221 
	#DSPARB
 0x70030

	)

2222 
	#DSPARB_CSTART_SHIFT
 7

	)

2223 
	#DSPARB_BSTART_SHIFT
 0

	)

2224 
	#DSPARB_BEND_SHIFT
 9

	)

2225 
	#DSPARB_AEND_SHIFT
 0

	)

2226 
	#DSPFW1
 0x70034

	)

2227 
	#DSPFW2
 0x70038

	)

2228 
	#DSPFW3
 0x7003c

	)

2241 
	#PIPEAFRAMEHIGH
 0x70040

	)

2242 
	#PIPE_FRAME_HIGH_MASK
 0x0000ffff

	)

2243 
	#PIPE_FRAME_HIGH_SHIFT
 0

	)

2244 
	#PIPEAFRAMEPIXEL
 0x70044

	)

2245 
	#PIPE_FRAME_LOW_MASK
 0xff000000

	)

2246 
	#PIPE_FRAME_LOW_SHIFT
 24

	)

2251 
	#PIPE_PIXEL_MASK
 0x00ffffff

	)

2252 
	#PIPE_PIXEL_SHIFT
 0

	)

2256 
	#PIPEAFRMCOUNT_G4X
 0x70040

	)

2257 
	#PIPEAFLIPCOUNT_G4X
 0x70044

	)

2267 
	#PIPEA_GMCH_DATA_M
 0x70050

	)

2270 
	#PIPE_GMCH_DATA_M_TU_SIZE_MASK
 (0x3‡<< 25)

	)

2271 
	#PIPE_GMCH_DATA_M_TU_SIZE_SHIFT
 25

	)

2273 
	#PIPE_GMCH_DATA_M_MASK
 (0xffffff)

	)

2275 
	#PIPEA_GMCH_DATA_N
 0x70054

	)

2276 
	#PIPE_GMCH_DATA_N_MASK
 (0xffffff)

	)

2289 
	#PIPEA_DP_LINK_M
 0x70060

	)

2290 
	#PIPEA_DP_LINK_M_MASK
 (0xffffff)

	)

2292 
	#PIPEA_DP_LINK_N
 0x70064

	)

2293 
	#PIPEA_DP_LINK_N_MASK
 (0xffffff)

	)

2295 
	#PIPEB_DSL
 0x71000

	)

2297 
	#PIPEBCONF
 0x71008

	)

2299 
	#PIPEBGCMAXRED
 0x71010

	)

2300 
	#PIPEBGCMAXGREEN
 0x71014

	)

2301 
	#PIPEBGCMAXBLUE
 0x71018

	)

2302 
	#PIPEBSTAT
 0x71024

	)

2303 
	#PIPEBFRAMEHIGH
 0x71040

	)

2304 
	#PIPEBFRAMEPIXEL
 0x71044

	)

2305 
	#PIPEBFRMCOUNT_G4X
 0x71040

	)

2306 
	#PIPEBFLIPCOUNT_G4X
 0x71044

	)

2308 
	#PIPEB_GMCH_DATA_M
 0x71050

	)

2309 
	#PIPEB_GMCH_DATA_N
 0x71054

	)

2310 
	#PIPEB_DP_LINK_M
 0x71060

	)

2311 
	#PIPEB_DP_LINK_N
 0x71064

	)

2313 
	#PIPEC_DSL
 0x72000

	)

2315 
	#PIPECCONF
 0x72008

	)

2317 
	#PIPECGCMAXRED
 0x72010

	)

2318 
	#PIPECGCMAXGREEN
 0x72014

	)

2319 
	#PIPECGCMAXBLUE
 0x72018

	)

2320 
	#PIPECSTAT
 0x72024

	)

2321 
	#PIPECFRMCOUNT_G4X
 0x72040

	)

2322 
	#PIPECFLIPCOUNT_G4X
 0x72044

	)

2324 
	#PIPEC_GMCH_DATA_M
 0x72050

	)

2325 
	#PIPEC_GMCH_DATA_N
 0x72054

	)

2326 
	#PIPEC_DP_LINK_M
 0x72060

	)

2327 
	#PIPEC_DP_LINK_N
 0x72064

	)

2329 
	#PIPEEDPCONF
 0x7F008

	)

2331 
	#DSPACNTR
 0x70180

	)

2332 
	#DSPBCNTR
 0x71180

	)

2333 
	#DSPCCNTR
 0x72180

	)

2334 
	#DISPLAY_PLANE_ENABLE
 (1<<31)

	)

2335 
	#DISPLAY_PLANE_DISABLE
 0

	)

2336 
	#DISPLAY_PLANE_TILED
 (1<<10)

	)

2337 
	#DISPPLANE_GAMMA_ENABLE
 (1<<30)

	)

2338 
	#DISPPLANE_GAMMA_DISABLE
 0

	)

2339 
	#DISPPLANE_PIXFORMAT_MASK
 (0xf<<26)

	)

2340 
	#DISPPLANE_8BPP
 (0x2<<26)

	)

2341 
	#DISPPLANE_15_16BPP
 (0x4<<26)

	)

2342 
	#DISPPLANE_16BPP
 (0x5<<26)

	)

2343 
	#DISPPLANE_32BPP_NO_ALPHA
 (0x6<<26)

	)

2344 
	#DISPPLANE_32BPP
 (0x7<<26)

	)

2345 
	#DISPPLANE_STEREO_ENABLE
 (1<<25)

	)

2346 
	#DISPPLANE_STEREO_DISABLE
 0

	)

2347 
	#DISPPLANE_SEL_PIPE_MASK
 (1<<24)

	)

2348 
	#DISPPLANE_SEL_PIPE_A
 0

	)

2349 
	#DISPPLANE_SEL_PIPE_B
 (1<<24)

	)

2350 
	#DISPPLANE_SRC_KEY_ENABLE
 (1<<22)

	)

2351 
	#DISPPLANE_SRC_KEY_DISABLE
 0

	)

2352 
	#DISPPLANE_LINE_DOUBLE
 (1<<20)

	)

2353 
	#DISPPLANE_NO_LINE_DOUBLE
 0

	)

2354 
	#DISPPLANE_STEREO_POLARITY_FIRST
 0

	)

2355 
	#DISPPLANE_STEREO_POLARITY_SECOND
 (1<<18)

	)

2357 
	#DISPPLANE_ALPHA_TRANS_ENABLE
 (1<<15)

	)

2358 
	#DISPPLANE_ALPHA_TRANS_DISABLE
 0

	)

2359 
	#DISPPLANE_SPRITE_ABOVE_DISPLAYA
 0

	)

2360 
	#DISPPLANE_SPRITE_ABOVE_OVERLAY
 (1)

	)

2362 
	#DSPABASE
 0x70184

	)

2363 
	#DSPASTRIDE
 0x70188

	)

2365 
	#DSPBBASE
 0x71184

	)

2366 
	#DSPBADDR
 
DSPBBASE


	)

2367 
	#DSPBSTRIDE
 0x71188

	)

2369 
	#DSPCBASE
 0x72184

	)

2370 
	#DSPCADDR
 
DSPCBASE


	)

2371 
	#DSPCSTRIDE
 0x72188

	)

2373 
	#DSPAKEYVAL
 0x70194

	)

2374 
	#DSPAKEYMASK
 0x70198

	)

2376 
	#DSPAPOS
 0x7018C

	)

2377 
	#DSPASIZE
 0x70190

	)

2378 
	#DSPBPOS
 0x7118C

	)

2379 
	#DSPBSIZE
 0x71190

	)

2381 
	#DSPASURF
 0x7019C

	)

2382 
	#DSPATILEOFF
 0x701A4

	)

2383 
	#DSPASURFLIVE
 0x701AC

	)

2385 
	#DSPBSURF
 0x7119C

	)

2386 
	#DSPBTILEOFF
 0x711A4

	)

2387 
	#DSPBSURFLIVE
 0x711AC

	)

2389 
	#DSPCSURF
 0x7219C

	)

2390 
	#DSPCTILEOFF
 0x721A4

	)

2391 
	#DSPCSURFLIVE
 0x721AC

	)

2393 
	#VGACNTRL
 0x71400

	)

2394 
	#VGA_DISP_DISABLE
 (1 << 31)

	)

2395 
	#VGA_2X_MODE
 (1 << 30)

	)

2396 
	#VGA_PIPE_B_SELECT
 (1 << 29)

	)

2399 
	#I830_FWATER1_MASK
 (~((1<<11)|(1<<10)|(1<<9)| \

2401 (1<<2)|(1<<1)|1|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16)))

	)

2402 
	#I830_FWATER2_MASK
 ~(0)

	)

2404 
	#DV0A_RESERVED
 ((1<<26)|(1<<25)|(1<<24)|(1<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<16)|(1<<5)|(1<<1)|1)

	)

2405 
	#DV0B_RESERVED
 ((1<<27)|(1<<26)|(1<<25)|(1<<24)|(1<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<16)|(1<<5)|(1<<1)|1)

	)

2406 
	#VGA0_N_DIVISOR_MASK
 ((1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16))

	)

2407 
	#VGA0_M1_DIVISOR_MASK
 ((1<<13)|(1<<12)|(1<<11)|(1<<10)|(1<<9)|(1<<8))

	)

2408 
	#VGA0_M2_DIVISOR_MASK
 ((1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|1)

	)

2409 
	#VGA0_M1M2N_RESERVED
 ~(
VGA0_N_DIVISOR_MASK
|
VGA0_M1_DIVISOR_MASK
|
VGA0_M2_DIVISOR_MASK
)

	)

2410 
	#VGA0_POSTDIV_MASK
 ((1<<7)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|1)

	)

2411 
	#VGA1_POSTDIV_MASK
 ((1<<15)|(1<<13)|(1<<12)|(1<<11)|(1<<10)|(1<<9)|(1<<8))

	)

2412 
	#VGA_POSTDIV_RESERVED
 ~(
VGA0_POSTDIV_MASK
|
VGA1_POSTDIV_MASK
|(1<<7)|(1<<15))

	)

2413 
	#DPLLA_POSTDIV_MASK
 ((1<<23)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16))

	)

2414 
	#DPLLA_RESERVED
 ((1<<27)|(1<<26)|(1<<25)|(1<<24)|(1<<22)|(1<<15)|(1<<12)|(1<<11)|(1<<10)|(1<<9)|(1<<8)|(1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|1)

	)

2415 
	#ADPA_RESERVED
 ((1<<2)|(1<<1)|1|(1<<9)|(1<<8)|(1<<7)|(1<<6)|(1<<5)|(1<<30)|(1<<29)|(1<<28)|(1<<27)|(1<<26)|(1<<25)|(1<<24)|(1<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16))

	)

2416 
	#SUPER_WORD
 32

	)

2417 
	#BURST_A_MASK
 ((1<<11)|(1<<10)|(1<<9)|(1<<8))

	)

2418 
	#BURST_B_MASK
 ((1<<26)|(1<<25)|(1<<24))

	)

2419 
	#WATER_A_MASK
 ((1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1)|1)

	)

2420 
	#WATER_B_MASK
 ((1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16))

	)

2421 
	#WATER_RESERVED
 ((1<<31)|(1<<30)|(1<<29)|(1<<28)|(1<<27)|(1<<23)|(1<<22)|(1<<21)|(1<<15)|(1<<14)|(1<<13)|(1<<12)|(1<<7)|(1<<6))

	)

2422 
	#PIPEACONF_RESERVED
 ((1<<29)|(1<<28)|(1<<27)|(1<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16)|0xffff)

	)

2423 
	#PIPEBCONF_RESERVED
 ((1<<30)|(1<<29)|(1<<28)|(1<<27)|(1<<26)|(1<<25)|(1<<23)|(1<<22)|(1<<21)|(1<<20)|(1<<19)|(1<<18)|(1<<17)|(1<<16)|0xffff)

	)

2424 
	#DSPACNTR_RESERVED
 ((1<<23)|(1<<19)|(1<<17)|(1<<16)|0xffff)

	)

2425 
	#DSPBCNTR_RESERVED
 ((1<<23)|(1<<19)|(1<<17)|(1<<16)|0x7f„)

	)

2427 
	#I830_GMCH_CTRL
 0x52

	)

2429 
	#I830_GMCH_ENABLED
 0x4

	)

2430 
	#I830_GMCH_MEM_MASK
 0x1

	)

2431 
	#I830_GMCH_MEM_64M
 0x1

	)

2432 
	#I830_GMCH_MEM_128M
 0

	)

2434 
	#I830_GMCH_GMS_MASK
 0x70

	)

2435 
	#I830_GMCH_GMS_DISABLED
 0x00

	)

2436 
	#I830_GMCH_GMS_LOCAL
 0x10

	)

2437 
	#I830_GMCH_GMS_STOLEN_512
 0x20

	)

2438 
	#I830_GMCH_GMS_STOLEN_1024
 0x30

	)

2439 
	#I830_GMCH_GMS_STOLEN_8192
 0x40

	)

2441 
	#I830_RDRAM_CHANNEL_TYPE
 0x03010

	)

2442 
	#I830_RDRAM_ND
(
x
Ë(((xË& 0x20Ë>> 5)

	)

2443 
	#I830_RDRAM_DDT
(
x
Ë(((xË& 0x18Ë>> 3)

	)

2445 
	#I855_GMCH_GMS_MASK
 (0xF << 4)

	)

2446 
	#I855_GMCH_GMS_DISABLED
 0x00

	)

2447 
	#I855_GMCH_GMS_STOLEN_1M
 (0x1 << 4)

	)

2448 
	#I855_GMCH_GMS_STOLEN_4M
 (0x2 << 4)

	)

2449 
	#I855_GMCH_GMS_STOLEN_8M
 (0x3 << 4)

	)

2450 
	#I855_GMCH_GMS_STOLEN_16M
 (0x4 << 4)

	)

2451 
	#I855_GMCH_GMS_STOLEN_32M
 (0x5 << 4)

	)

2452 
	#I915G_GMCH_GMS_STOLEN_48M
 (0x6 << 4)

	)

2453 
	#I915G_GMCH_GMS_STOLEN_64M
 (0x7 << 4)

	)

2454 
	#G33_GMCH_GMS_STOLEN_128M
 (0x8 << 4)

	)

2455 
	#G33_GMCH_GMS_STOLEN_256M
 (0x9 << 4)

	)

2456 
	#INTEL_GMCH_GMS_STOLEN_96M
 (0x®<< 4)

	)

2457 
	#INTEL_GMCH_GMS_STOLEN_160M
 (0xb << 4)

	)

2458 
	#INTEL_GMCH_GMS_STOLEN_224M
 (0x¯<< 4)

	)

2459 
	#INTEL_GMCH_GMS_STOLEN_352M
 (0xd << 4)

	)

2462 
	#I85X_CAPID
 0x44

	)

2463 
	#I85X_VARIANT_MASK
 0x7

	)

2464 
	#I85X_VARIANT_SHIFT
 5

	)

2465 
	#I855_GME
 0x0

	)

2466 
	#I855_GM
 0x4

	)

2467 
	#I852_GME
 0x2

	)

2468 
	#I852_GM
 0x5

	)

2470 
	#I915_GCFGC
 0xf0

	)

2471 
	#I915_LOW_FREQUENCY_ENABLE
 (1 << 7)

	)

2472 
	#I915_DISPLAY_CLOCK_190_200_MHZ
 (0 << 4)

	)

2473 
	#I915_DISPLAY_CLOCK_333_MHZ
 (4 << 4)

	)

2474 
	#I915_DISPLAY_CLOCK_MASK
 (7 << 4)

	)

2476 
	#I855_HPLLCC
 0xc0

	)

2477 
	#I855_CLOCK_CONTROL_MASK
 (3 << 0)

	)

2478 
	#I855_CLOCK_133_200
 (0 << 0)

	)

2479 
	#I855_CLOCK_100_200
 (1 << 0)

	)

2480 
	#I855_CLOCK_100_133
 (2 << 0)

	)

2481 
	#I855_CLOCK_166_250
 (3 << 0)

	)

2484 
	#COLOR_BLT_CMD
 ((2<<29)|(0x40<<22)|(0x3))

	)

2485 
	#COLOR_BLT_WRITE_ALPHA
 (1<<21)

	)

2486 
	#COLOR_BLT_WRITE_RGB
 (1<<20)

	)

2488 
	#XY_COLOR_BLT_CMD_NOLEN
 ((2<<29)|(0x50<<22))

	)

2489 
	#XY_COLOR_BLT_WRITE_ALPHA
 (1<<21)

	)

2490 
	#XY_COLOR_BLT_WRITE_RGB
 (1<<20)

	)

2491 
	#XY_COLOR_BLT_TILED
 (1<<11)

	)

2493 
	#XY_SETUP_CLIP_BLT_CMD
 ((2<<29)|(3<<22)|1)

	)

2495 
	#XY_SRC_COPY_BLT_CMD
 ((2<<29)|(0x53<<22))

	)

2496 
	#XY_SRC_COPY_BLT_WRITE_ALPHA
 (1<<21)

	)

2497 
	#XY_SRC_COPY_BLT_WRITE_RGB
 (1<<20)

	)

2498 
	#XY_SRC_COPY_BLT_SRC_TILED
 (1<<15)

	)

2499 
	#XY_SRC_COPY_BLT_DST_TILED
 (1<<11)

	)

2501 
	#SRC_COPY_BLT_CMD
 ((2<<29)|(0x43<<22)|0x4)

	)

2502 
	#SRC_COPY_BLT_WRITE_ALPHA
 (1<<21)

	)

2503 
	#SRC_COPY_BLT_WRITE_RGB
 (1<<20)

	)

2505 
	#XY_PAT_BLT_IMMEDIATE
 ((2<<29)|(0x72<<22))

	)

2507 
	#XY_MONO_PAT_BLT_CMD
 ((0x2<<29)|(0x52<<22)|0x7)

	)

2508 
	#XY_MONO_PAT_VERT_SEED
 ((1<<10)|(1<<9)|(1<<8))

	)

2509 
	#XY_MONO_PAT_HORT_SEED
 ((1<<14)|(1<<13)|(1<<12))

	)

2510 
	#XY_MONO_PAT_BLT_WRITE_ALPHA
 (1<<21)

	)

2511 
	#XY_MONO_PAT_BLT_WRITE_RGB
 (1<<20)

	)

2513 
	#XY_MONO_SRC_BLT_CMD
 ((0x2<<29)|(0x54<<22)|(0x6))

	)

2514 
	#XY_MONO_SRC_BLT_WRITE_ALPHA
 (1<<21)

	)

2515 
	#XY_MONO_SRC_BLT_WRITE_RGB
 (1<<20)

	)

2517 
	#XY_FAST_COPY_BLT
 ((2<<29)|(0x42<<22)|0x8)

	)

2519 
	#XY_FAST_COPY_SRC_TILING_LINEAR
 (0 << 20)

	)

2520 
	#XY_FAST_COPY_SRC_TILING_X
 (1 << 20)

	)

2521 
	#XY_FAST_COPY_SRC_TILING_Yb_Yf
 (2 << 20)

	)

2522 
	#XY_FAST_COPY_SRC_TILING_Ys
 (3 << 20)

	)

2523 
	#XY_FAST_COPY_SRC_HORIZONTAL_ALIGNMENT
(
n
Ë“ << 17)

	)

2524 
	#XY_FAST_COPY_SRC_VERTICAL_ALIGNMENT
(
n
Ë“ << 15)

	)

2525 
	#XY_FAST_COPY_DST_TILING_X
 (1 << 13)

	)

2526 
	#XY_FAST_COPY_DST_TILING_Yb_Yf
 (2 << 13)

	)

2527 
	#XY_FAST_COPY_DST_TILING_Ys
 (3 << 13)

	)

2528 
	#XY_FAST_COPY_DST_HORIZONTAL_ALIGNMENT
(
n
Ë“ << 10)

	)

2529 
	#XY_FAST_COPY_DST_VERTICAL_ALIGNMENT
(
n
Ë“ << 8)

	)

2531 
	#XY_FAST_COPY_SRC_TILING_Yf
 (1 << 31)

	)

2532 
	#XY_FAST_COPY_DST_TILING_Yf
 (1 << 30)

	)

2533 
	#XY_FAST_COPY_COLOR_DEPTH_32
 (3 << 24)

	)

2535 
	#MI_STORE_DWORD_IMM
 ((0x20<<23)|2)

	)

2536 
	#MI_MEM_VIRTUAL
 (1 << 22Ë

	)

2538 
	#MI_SET_CONTEXT
 (0x18<<23)

	)

2539 
	#CTXT_NO_RESTORE
 (1)

	)

2540 
	#CTXT_PALETTE_SAVE_DISABLE
 (1<<3)

	)

2541 
	#CTXT_PALETTE_RESTORE_DISABLE
 (1<<2)

	)

2544 
	#MI_VERTEX_BUFFER
 (0x17<<23)

	)

2545 
	#MI_VERTEX_BUFFER_IDX
(
x
Ë(x<<20)

	)

2546 
	#MI_VERTEX_BUFFER_PITCH
(
x
Ë(x<<13)

	)

2547 
	#MI_VERTEX_BUFFER_WIDTH
(
x
Ë(x<<6)

	)

2549 
	#MI_VERTEX_BUFFER_DISABLE
 (1)

	)

2552 
	#MI_OVERLAY_FLIP
 (0x11<<23)

	)

2553 
	#MI_OVERLAY_FLIP_CONTINUE
 (0<<21)

	)

2554 
	#MI_OVERLAY_FLIP_ON
 (1<<21)

	)

2555 
	#MI_OVERLAY_FLIP_OFF
 (2<<21)

	)

2558 
	#MI_WAIT_FOR_EVENT
 (0x03<<23)

	)

2559 
	#MI_WAIT_FOR_PIPEB_SVBLANK
 (1<<18)

	)

2560 
	#MI_WAIT_FOR_PIPEA_SVBLANK
 (1<<17)

	)

2561 
	#MI_WAIT_FOR_OVERLAY_FLIP
 (1<<16)

	)

2562 
	#MI_WAIT_FOR_PIPEB_VBLANK
 (1<<7)

	)

2563 
	#MI_WAIT_FOR_PIPEA_VBLANK
 (1<<3)

	)

2564 
	#MI_WAIT_FOR_PIPEB_SCAN_LINE_WINDOW
 (1<<5)

	)

2565 
	#MI_WAIT_FOR_PIPEA_SCAN_LINE_WINDOW
 (1<<1)

	)

2567 
	#MI_LOAD_SCAN_LINES_INCL
 (0x12<<23)

	)

2568 
	#MI_LOAD_REGISTER_IMM
 ((0x22 << 23Ë| 1)

	)

2571 
	#MI_FLUSH
 (0x04<<23)

	)

2572 
	#MI_WRITE_DIRTY_STATE
 (1<<4)

	)

2573 
	#MI_END_SCENE
 (1<<3)

	)

2574 
	#MI_GLOBAL_SNAPSHOT_COUNT_RESET
 (1<<3)

	)

2575 
	#MI_INHIBIT_RENDER_CACHE_FLUSH
 (1<<2)

	)

2576 
	#MI_STATE_INSTRUCTION_CACHE_FLUSH
 (1<<1)

	)

2577 
	#MI_INVALIDATE_MAP_CACHE
 (1<<0)

	)

2579 
	#BRW_MI_GLOBAL_SNAPSHOT_RESET
 (1 << 3)

	)

2582 
	#MI_NOOP
 0x00

	)

2583 
	#MI_NOOP_WRITE_ID
 (1<<22)

	)

2584 
	#MI_NOOP_ID_MASK
 (1<<22 - 1)

	)

2586 
	#STATE3D_COLOR_FACTOR
 ((0x3<<29)|(0x1d<<24)|(0x01<<16))

	)

2589 
	#MI_BATCH_BUFFER
 ((0x30 << 23Ë| 1)

	)

2590 
	#MI_BATCH_BUFFER_START
 (0x31 << 23)

	)

2591 
	#MI_BATCH_BUFFER_END
 (0xA << 23)

	)

2592 
	#MI_BATCH_NON_SECURE
 (1)

	)

2593 
	#MI_BATCH_NON_SECURE_I965
 (1 << 8)

	)

2594 
	#MI_BATCH_NON_SECURE_HSW
 (1<<13Ë

	)

2596 
	#MAX_DISPLAY_PIPES
 2

	)

2599 
	mCπIndex
 = 0,

2600 
	mTvIndex
,

2601 
	mDÂIndex
,

2602 
	mLÂIndex
,

2603 
	mCπ2Index
,

2604 
	mTv2Index
,

2605 
	mDÂ2Index
,

2606 
	mLÂ2Index
,

2607 
	mNumDi•œyTy≥s


2608 } 
	tDi•œyTy≥
;

2611 
	#PIPE_ACTIVE_MASK
 0xff

	)

2612 
	#PIPE_CRT_ACTIVE
 (1 << 
CπIndex
)

	)

2613 
	#PIPE_TV_ACTIVE
 (1 << 
TvIndex
)

	)

2614 
	#PIPE_DFP_ACTIVE
 (1 << 
DÂIndex
)

	)

2615 
	#PIPE_LCD_ACTIVE
 (1 << 
LÂIndex
)

	)

2616 
	#PIPE_CRT2_ACTIVE
 (1 << 
Cπ2Index
)

	)

2617 
	#PIPE_TV2_ACTIVE
 (1 << 
Tv2Index
)

	)

2618 
	#PIPE_DFP2_ACTIVE
 (1 << 
DÂ2Index
)

	)

2619 
	#PIPE_LCD2_ACTIVE
 (1 << 
LÂ2Index
)

	)

2621 
	#PIPE_SIZED_DISP_MASK
 (
PIPE_DFP_ACTIVE
 | \

2622 
PIPE_LCD_ACTIVE
 | \

2623 
PIPE_DFP2_ACTIVE
)

	)

2625 
	#PIPE_A_SHIFT
 0

	)

2626 
	#PIPE_B_SHIFT
 8

	)

2627 
	#PIPE_SHIFT
(
n
) ((n) == 0 ? \

2628 
PIPE_A_SHIFT
 : 
PIPE_B_SHIFT
)

	)

2635 
	#SWF0
 0x71410

	)

2636 
	#SWF1
 0x71414

	)

2637 
	#SWF2
 0x71418

	)

2638 
	#SWF3
 0x7141c

	)

2639 
	#SWF4
 0x71420

	)

2640 
	#SWF5
 0x71424

	)

2641 
	#SWF6
 0x71428

	)

2646 
	#SWF00
 0x70410

	)

2647 
	#SWF01
 0x70414

	)

2648 
	#SWF02
 0x70418

	)

2649 
	#SWF03
 0x7041c

	)

2650 
	#SWF04
 0x70420

	)

2651 
	#SWF05
 0x70424

	)

2652 
	#SWF06
 0x70428

	)

2654 
	#SWF10
 
SWF0


	)

2655 
	#SWF11
 
SWF1


	)

2656 
	#SWF12
 
SWF2


	)

2657 
	#SWF13
 
SWF3


	)

2658 
	#SWF14
 
SWF4


	)

2659 
	#SWF15
 
SWF5


	)

2660 
	#SWF16
 
SWF6


	)

2662 
	#SWF30
 0x72414

	)

2663 
	#SWF31
 0x72418

	)

2664 
	#SWF32
 0x7241c

	)

2670 
	#OVADD
 0x30000

	)

2672 
	#DOVSTA
 0x30008

	)

2673 
	#OC_BUF
 (0x3<<20)

	)

2675 
	#OGAMC5
 0x30010

	)

2676 
	#OGAMC4
 0x30014

	)

2677 
	#OGAMC3
 0x30018

	)

2678 
	#OGAMC2
 0x3001c

	)

2679 
	#OGAMC1
 0x30020

	)

2680 
	#OGAMC0
 0x30024

	)

2686 
	#PALETTE_A
 0x0a000

	)

2687 
	#PALETTE_B
 0x0a800

	)

2690 
	#FBC_CFB_BASE
 0x03200

	)

2691 
	#FBC_LL_BASE
 0x03204

	)

2692 
	#FBC_CONTROL
 0x03208

	)

2693 
	#FBC_CTL_EN
 (1<<31)

	)

2694 
	#FBC_CTL_PERIODIC
 (1<<30)

	)

2695 
	#FBC_CTL_INTERVAL_SHIFT
 (16)

	)

2696 
	#FBC_CTL_UNCOMPRESSIBLE
 (1<<14)

	)

2697 
	#FBC_CTL_STRIDE_SHIFT
 (5)

	)

2698 
	#FBC_CTL_FENCENO
 (1<<0)

	)

2699 
	#FBC_COMMAND
 0x0320c

	)

2700 
	#FBC_CMD_COMPRESS
 (1<<0)

	)

2701 
	#FBC_STATUS
 0x03210

	)

2702 
	#FBC_STAT_COMPRESSING
 (1<<31)

	)

2703 
	#FBC_STAT_COMPRESSED
 (1<<30)

	)

2704 
	#FBC_STAT_MODIFIED
 (1<<29)

	)

2705 
	#FBC_STAT_CURRENT_LINE
 (1<<0)

	)

2706 
	#FBC_CONTROL2
 0x03214

	)

2707 
	#FBC_CTL_FENCE_DBL
 (0<<4)

	)

2708 
	#FBC_CTL_IDLE_IMM
 (0<<2)

	)

2709 
	#FBC_CTL_IDLE_FULL
 (1<<2)

	)

2710 
	#FBC_CTL_IDLE_LINE
 (2<<2)

	)

2711 
	#FBC_CTL_IDLE_DEBUG
 (3<<2)

	)

2712 
	#FBC_CTL_CPU_FENCE
 (1<<1)

	)

2713 
	#FBC_CTL_PLANEA
 (0<<0)

	)

2714 
	#FBC_CTL_PLANEB
 (1<<0)

	)

2715 
	#FBC_FENCE_OFF
 0x0321b

	)

2716 
	#FBC_MOD_NUM
 0x03220

	)

2717 
	#FBC_TAG_DEBUG
 0x03300

	)

2719 
	#FBC_LL_SIZE
 (1536)

	)

2720 
	#FBC_LL_PAD
 (32)

	)

2723 
	#DPFC_CB_BASE
 0x3200

	)

2724 
	#DPFC_CONTROL
 0x3208

	)

2725 
	#DPFC_CTL_EN
 (1<<31)

	)

2726 
	#DPFC_CTL_PLANEA
 (0<<30)

	)

2727 
	#DPFC_CTL_PLANEB
 (1<<30)

	)

2728 
	#DPFC_CTL_FENCE_EN
 (1<<29)

	)

2729 
	#DPFC_CTL_LIMIT_1X
 (0<<6)

	)

2730 
	#DPFC_CTL_LIMIT_2X
 (1<<6)

	)

2731 
	#DPFC_CTL_LIMIT_4X
 (2<<6)

	)

2732 
	#DPFC_RECOMP_CTL
 0x320c

	)

2733 
	#DPFC_RECOMP_STALL_EN
 (1<<27)

	)

2734 
	#DPFC_RECOMP_STALL_WM_SHIFT
 (16)

	)

2735 
	#DPFC_RECOMP_STALL_WM_MASK
 (0x07ff0000)

	)

2736 
	#DPFC_RECOMP_TIMER_COUNT_SHIFT
 (0)

	)

2737 
	#DPFC_RECOMP_TIMER_COUNT_MASK
 (0x0000003f)

	)

2738 
	#DPFC_STATUS
 0x3210

	)

2739 
	#DPFC_INVAL_SEG_SHIFT
 (16)

	)

2740 
	#DPFC_INVAL_SEG_MASK
 (0x07ff0000)

	)

2741 
	#DPFC_COMP_SEG_SHIFT
 (0)

	)

2742 
	#DPFC_COMP_SEG_MASK
 (0x000003ff)

	)

2743 
	#DPFC_STATUS2
 0x3214

	)

2744 
	#DPFC_FENCE_YOFF
 0x3218

	)

2746 
	#PEG_BAND_GAP_DATA
 0x14d68

	)

2748 
	#MCHBAR_RENDER_STANDBY
 0x111B8

	)

2749 
	#RENDER_STANDBY_ENABLE
 (1 << 30)

	)

2755 
	#WARMUP_PCH_REF_CLK_SSC_MOD
 1

	)

2756 
	#WARMUP_PCH_FDI_RECEIVER_PLL
 25

	)

2757 
	#WARMUP_PCH_DPLL
 50

	)

2758 
	#WARMUP_CPU_DP_PLL
 20

	)

2759 
	#WARMUP_CPU_FDI_TRANSMITTER_PLL
 10

	)

2760 
	#WARMUP_DMI_LATENCY
 20

	)

2761 
	#FDI_TRAIN_PATTERN_1_TIME
 0.5

	)

2762 
	#FDI_TRAIN_PATTERN_2_TIME
 1.5

	)

2763 
	#FDI_ONE_IDLE_PATTERN_TIME
 31

	)

2765 
	#CPU_VGACNTRL
 0x41000

	)

2767 
	#DIGITAL_PORT_HOTPLUG_CNTRL
 0x44030

	)

2768 
	#DIGITAL_PORTA_HOTPLUG_ENABLE
 (1 << 4)

	)

2769 
	#DIGITAL_PORTA_SHORT_PULSE_2MS
 (0 << 2)

	)

2770 
	#DIGITAL_PORTA_SHORT_PULSE_4_5MS
 (1 << 2)

	)

2771 
	#DIGITAL_PORTA_SHORT_PULSE_6MS
 (2 << 2)

	)

2772 
	#DIGITAL_PORTA_SHORT_PULSE_100MS
 (3 << 2)

	)

2773 
	#DIGITAL_PORTA_NO_DETECT
 (0 << 0)

	)

2774 
	#DIGITAL_PORTA_LONG_PULSE_DETECT_MASK
 (1 << 1)

	)

2775 
	#DIGITAL_PORTA_SHORT_PULSE_DETECT_MASK
 (1 << 0)

	)

2778 
	#RR_HW_CTL
 0x45300

	)

2779 
	#RR_HW_LOW_POWER_FRAMES_MASK
 0xff

	)

2780 
	#RR_HW_HIGH_POWER_FRAMES_MASK
 0xff00

	)

2782 
	#FDI_PLL_BIOS_0
 0x46000

	)

2783 
	#FDI_PLL_BIOS_1
 0x46004

	)

2784 
	#FDI_PLL_BIOS_2
 0x46008

	)

2785 
	#DISPLAY_PORT_PLL_BIOS_0
 0x4600c

	)

2786 
	#DISPLAY_PORT_PLL_BIOS_1
 0x46010

	)

2787 
	#DISPLAY_PORT_PLL_BIOS_2
 0x46014

	)

2789 
	#FDI_PLL_FREQ_CTL
 0x46030

	)

2790 
	#FDI_PLL_FREQ_CHANGE_REQUEST
 (1<<24)

	)

2791 
	#FDI_PLL_FREQ_LOCK_LIMIT_MASK
 0xfff00

	)

2792 
	#FDI_PLL_FREQ_DISABLE_COUNT_LIMIT_MASK
 0xff

	)

2794 
	#PIPEA_DATA_M1
 0x60030

	)

2795 
	#TU_SIZE
(
x
Ë(((x)-1Ë<< 25Ë

	)

2796 
	#TU_SIZE_MASK
 0x7e000000

	)

2797 
	#PIPEA_DATA_M1_OFFSET
 0

	)

2798 
	#PIPEA_DATA_N1
 0x60034

	)

2799 
	#PIPEA_DATA_N1_OFFSET
 0

	)

2801 
	#PIPEA_DATA_M2
 0x60038

	)

2802 
	#PIPEA_DATA_M2_OFFSET
 0

	)

2803 
	#PIPEA_DATA_N2
 0x6003c

	)

2804 
	#PIPEA_DATA_N2_OFFSET
 0

	)

2806 
	#PIPEA_LINK_M1
 0x60040

	)

2807 
	#PIPEA_LINK_M1_OFFSET
 0

	)

2808 
	#PIPEA_LINK_N1
 0x60044

	)

2809 
	#PIPEA_LINK_N1_OFFSET
 0

	)

2811 
	#PIPEA_LINK_M2
 0x60048

	)

2812 
	#PIPEA_LINK_M2_OFFSET
 0

	)

2813 
	#PIPEA_LINK_N2
 0x6004c

	)

2814 
	#PIPEA_LINK_N2_OFFSET
 0

	)

2818 
	#PIPEB_DATA_M1
 0x61030

	)

2819 
	#PIPEB_DATA_N1
 0x61034

	)

2821 
	#PIPEB_DATA_M2
 0x61038

	)

2822 
	#PIPEB_DATA_N2
 0x6103c

	)

2824 
	#PIPEB_LINK_M1
 0x61040

	)

2825 
	#PIPEB_LINK_N1
 0x61044

	)

2827 
	#PIPEB_LINK_M2
 0x61048

	)

2828 
	#PIPEB_LINK_N2
 0x6104c

	)

2832 
	#PIPEC_DATA_M1
 0x62030

	)

2833 
	#PIPEC_DATA_N1
 0x62034

	)

2835 
	#PIPEC_DATA_M2
 0x62038

	)

2836 
	#PIPEC_DATA_N2
 0x6203c

	)

2838 
	#PIPEC_LINK_M1
 0x62040

	)

2839 
	#PIPEC_LINK_N1
 0x62044

	)

2841 
	#PIPEC_LINK_M2
 0x62048

	)

2842 
	#PIPEC_LINK_N2
 0x6204c

	)

2844 
	#PIPEEDP_DATA_M1
 0x6F030

	)

2845 
	#PIPEEDP_DATA_N1
 0x6F034

	)

2847 
	#PIPEEDP_LINK_M1
 0x6F040

	)

2848 
	#PIPEEDP_LINK_N1
 0x6F044

	)

2858 
	#PFA_CTL_1
 0x68080

	)

2859 
	#PFB_CTL_1
 0x68880

	)

2860 
	#PFC_CTL_1
 0x69080

	)

2861 
	#PF_ENABLE
 (1<<31)

	)

2862 
	#PFA_CTL_2
 0x68084

	)

2863 
	#PFB_CTL_2
 0x68884

	)

2864 
	#PFC_CTL_2
 0x69084

	)

2865 
	#PFA_CTL_3
 0x68088

	)

2866 
	#PFB_CTL_3
 0x68888

	)

2867 
	#PFC_CTL_3
 0x69088

	)

2868 
	#PFA_CTL_4
 0x68090

	)

2869 
	#PFB_CTL_4
 0x68890

	)

2870 
	#PFC_CTL_4
 0x69090

	)

2872 
	#PFA_WIN_POS
 0x68070

	)

2873 
	#PFB_WIN_POS
 0x68870

	)

2874 
	#PFC_WIN_POS
 0x69070

	)

2875 
	#PFA_WIN_SIZE
 0x68074

	)

2876 
	#PFB_WIN_SIZE
 0x68874

	)

2877 
	#PFC_WIN_SIZE
 0x69074

	)

2880 
	#LGC_PALETTE_A
 0x4a000

	)

2881 
	#LGC_PALETTE_B
 0x4a800

	)

2884 
	#DE_MASTER_IRQ_CONTROL
 (1 << 31)

	)

2885 
	#DE_SPRITEB_FLIP_DONE
 (1 << 29)

	)

2886 
	#DE_SPRITEA_FLIP_DONE
 (1 << 28)

	)

2887 
	#DE_PLANEB_FLIP_DONE
 (1 << 27)

	)

2888 
	#DE_PLANEA_FLIP_DONE
 (1 << 26)

	)

2889 
	#DE_PCU_EVENT
 (1 << 25)

	)

2890 
	#DE_GTT_FAULT
 (1 << 24)

	)

2891 
	#DE_POISON
 (1 << 23)

	)

2892 
	#DE_PERFORM_COUNTER
 (1 << 22)

	)

2893 
	#DE_PCH_EVENT
 (1 << 21)

	)

2894 
	#DE_AUX_CHANNEL_A
 (1 << 20)

	)

2895 
	#DE_DP_A_HOTPLUG
 (1 << 19)

	)

2896 
	#DE_GSE
 (1 << 18)

	)

2897 
	#DE_PIPEB_VBLANK
 (1 << 15)

	)

2898 
	#DE_PIPEB_EVEN_FIELD
 (1 << 14)

	)

2899 
	#DE_PIPEB_ODD_FIELD
 (1 << 13)

	)

2900 
	#DE_PIPEB_LINE_COMPARE
 (1 << 12)

	)

2901 
	#DE_PIPEB_VSYNC
 (1 << 11)

	)

2902 
	#DE_PIPEB_FIFO_UNDERRUN
 (1 << 8)

	)

2903 
	#DE_PIPEA_VBLANK
 (1 << 7)

	)

2904 
	#DE_PIPEA_EVEN_FIELD
 (1 << 6)

	)

2905 
	#DE_PIPEA_ODD_FIELD
 (1 << 5)

	)

2906 
	#DE_PIPEA_LINE_COMPARE
 (1 << 4)

	)

2907 
	#DE_PIPEA_VSYNC
 (1 << 3)

	)

2908 
	#DE_PIPEA_FIFO_UNDERRUN
 (1 << 0)

	)

2910 
	#DEISR
 0x44000

	)

2911 
	#DEIMR
 0x44004

	)

2912 
	#DEIIR
 0x44008

	)

2913 
	#DEIER
 0x4400c

	)

2915 
	#GEN8_DE_PIPE_ISR
(
pùe
Ë(0x44400 + 0x10 * (pùe))

	)

2916 
	#GEN8_DE_PIPE_IMR
(
pùe
Ë(0x44404 + 0x10 * (pùe))

	)

2917 
	#GEN8_DE_PIPE_IIR
(
pùe
Ë(0x44408 + 0x10 * (pùe))

	)

2918 
	#GEN8_DE_PIPE_IER
(
pùe
Ë(0x4440¯+ 0x10 * (pùe))

	)

2921 
	#GT_SYNC_STATUS
 (1 << 2)

	)

2922 
	#GT_USER_INTERRUPT
 (1 << 0)

	)

2924 
	#GTISR
 0x44010

	)

2925 
	#GTIMR
 0x44014

	)

2926 
	#GTIIR
 0x44018

	)

2927 
	#GTIER
 0x4401c

	)

2932 
	#SDE_CRT_HOTPLUG
 (1 << 11)

	)

2933 
	#SDE_PORTD_HOTPLUG
 (1 << 10)

	)

2934 
	#SDE_PORTC_HOTPLUG
 (1 << 9)

	)

2935 
	#SDE_PORTB_HOTPLUG
 (1 << 8)

	)

2936 
	#SDE_SDVOB_HOTPLUG
 (1 << 6)

	)

2938 
	#SDEISR
 0xc4000

	)

2939 
	#SDEIMR
 0xc4004

	)

2940 
	#SDEIIR
 0xc4008

	)

2941 
	#SDEIER
 0xc400c

	)

2944 
	#PCH_PORT_HOTPLUG
 0xc4030

	)

2945 
	#PORTD_HOTPLUG_ENABLE
 (1 << 20)

	)

2946 
	#PORTD_PULSE_DURATION_2ms
 (0)

	)

2947 
	#PORTD_PULSE_DURATION_4_5ms
 (1 << 18)

	)

2948 
	#PORTD_PULSE_DURATION_6ms
 (2 << 18)

	)

2949 
	#PORTD_PULSE_DURATION_100ms
 (3 << 18)

	)

2950 
	#PORTD_HOTPLUG_NO_DETECT
 (0)

	)

2951 
	#PORTD_HOTPLUG_SHORT_DETECT
 (1 << 16)

	)

2952 
	#PORTD_HOTPLUG_LONG_DETECT
 (1 << 17)

	)

2953 
	#PORTC_HOTPLUG_ENABLE
 (1 << 12)

	)

2954 
	#PORTC_PULSE_DURATION_2ms
 (0)

	)

2955 
	#PORTC_PULSE_DURATION_4_5ms
 (1 << 10)

	)

2956 
	#PORTC_PULSE_DURATION_6ms
 (2 << 10)

	)

2957 
	#PORTC_PULSE_DURATION_100ms
 (3 << 10)

	)

2958 
	#PORTC_HOTPLUG_NO_DETECT
 (0)

	)

2959 
	#PORTC_HOTPLUG_SHORT_DETECT
 (1 << 8)

	)

2960 
	#PORTC_HOTPLUG_LONG_DETECT
 (1 << 9)

	)

2961 
	#PORTB_HOTPLUG_ENABLE
 (1 << 4)

	)

2962 
	#PORTB_PULSE_DURATION_2ms
 (0)

	)

2963 
	#PORTB_PULSE_DURATION_4_5ms
 (1 << 2)

	)

2964 
	#PORTB_PULSE_DURATION_6ms
 (2 << 2)

	)

2965 
	#PORTB_PULSE_DURATION_100ms
 (3 << 2)

	)

2966 
	#PORTB_HOTPLUG_NO_DETECT
 (0)

	)

2967 
	#PORTB_HOTPLUG_SHORT_DETECT
 (1 << 0)

	)

2968 
	#PORTB_HOTPLUG_LONG_DETECT
 (1 << 1)

	)

2970 
	#PCH_GPIOA
 0xc5010

	)

2971 
	#PCH_GPIOB
 0xc5014

	)

2972 
	#PCH_GPIOC
 0xc5018

	)

2973 
	#PCH_GPIOD
 0xc501c

	)

2974 
	#PCH_GPIOE
 0xc5020

	)

2975 
	#PCH_GPIOF
 0xc5024

	)

2976 
	#PCH_GMBUS0
 0xc5100

	)

2977 
	#PCH_GMBUS1
 0xc5104

	)

2978 
	#PCH_GMBUS2
 0xc5108

	)

2979 
	#PCH_GMBUS3
 0xc510c

	)

2980 
	#PCH_GMBUS4
 0xc5110

	)

2981 
	#PCH_GMBUS5
 0xc5120

	)

2983 
	#PCH_DPLL_A
 0xc6014

	)

2984 
	#PCH_DPLL_B
 0xc6018

	)

2986 
	#PCH_FPA0
 0xc6040

	)

2987 
	#PCH_FPA1
 0xc6044

	)

2988 
	#PCH_FPB0
 0xc6048

	)

2989 
	#PCH_FPB1
 0xc604c

	)

2991 
	#PCH_DPLL_TEST
 0xc606c

	)

2993 
	#PCH_DREF_CONTROL
 0xC6200

	)

2994 
	#DREF_CONTROL_MASK
 0x7fc3

	)

2995 
	#DREF_CPU_SOURCE_OUTPUT_DISABLE
 (0<<13)

	)

2996 
	#DREF_CPU_SOURCE_OUTPUT_DOWNSPREAD
 (2<<13)

	)

2997 
	#DREF_CPU_SOURCE_OUTPUT_NONSPREAD
 (3<<13)

	)

2998 
	#DREF_SSC_SOURCE_DISABLE
 (0<<11)

	)

2999 
	#DREF_SSC_SOURCE_ENABLE
 (2<<11)

	)

3000 
	#DREF_NONSPREAD_SOURCE_DISABLE
 (0<<9)

	)

3001 
	#DREF_NONSPREAD_SOURCE_ENABLE
 (2<<9)

	)

3002 
	#DREF_SUPERSPREAD_SOURCE_DISABLE
 (0<<7)

	)

3003 
	#DREF_SUPERSPREAD_SOURCE_ENABLE
 (2<<7)

	)

3004 
	#DREF_SSC4_DOWNSPREAD
 (0<<6)

	)

3005 
	#DREF_SSC4_CENTERSPREAD
 (1<<6)

	)

3006 
	#DREF_SSC1_DISABLE
 (0<<1)

	)

3007 
	#DREF_SSC1_ENABLE
 (1<<1)

	)

3008 
	#DREF_SSC4_DISABLE
 (0)

	)

3009 
	#DREF_SSC4_ENABLE
 (1)

	)

3011 
	#PCH_RAWCLK_FREQ
 0xc6204

	)

3012 
	#FDL_TP1_TIMER_SHIFT
 12

	)

3013 
	#FDL_TP1_TIMER_MASK
 (3<<12)

	)

3014 
	#FDL_TP2_TIMER_SHIFT
 10

	)

3015 
	#FDL_TP2_TIMER_MASK
 (3<<10)

	)

3016 
	#RAWCLK_FREQ_MASK
 0x3ff

	)

3018 
	#PCH_DPLL_TMR_CFG
 0xc6208

	)

3020 
	#PCH_SSC4_PARMS
 0xc6210

	)

3021 
	#PCH_SSC4_AUX_PARMS
 0xc6214

	)

3024 
	#PCH_DPLL_ANALOG_CTL
 0xc6300

	)

3026 
	#PCH_DPLL_SEL
 0xc7000

	)

3027 
	#TRANSA_DPLL_ENABLE
 (1<<3)

	)

3028 
	#TRANSA_DPLLA_SEL
 (0)

	)

3029 
	#TRANSA_DPLLB_SEL
 (1<<0)

	)

3030 
	#TRANSB_DPLL_ENABLE
 (1<<7)

	)

3031 
	#TRANSB_DPLLA_SEL
 (0<<4)

	)

3032 
	#TRANSB_DPLLB_SEL
 (1<<4)

	)

3033 
	#TRANSC_DPLL_ENABLE
 (1<<11)

	)

3034 
	#TRANSC_DPLLA_SEL
 (0<<8)

	)

3035 
	#TRANSC_DPLLB_SEL
 (1<<8)

	)

3039 
	#TRANS_HTOTAL_A
 0xe0000

	)

3040 
	#TRANS_HTOTAL_SHIFT
 16

	)

3041 
	#TRANS_HACTIVE_SHIFT
 0

	)

3042 
	#TRANS_HBLANK_A
 0xe0004

	)

3043 
	#TRANS_HBLANK_END_SHIFT
 16

	)

3044 
	#TRANS_HBLANK_START_SHIFT
 0

	)

3045 
	#TRANS_HSYNC_A
 0xe0008

	)

3046 
	#TRANS_HSYNC_END_SHIFT
 16

	)

3047 
	#TRANS_HSYNC_START_SHIFT
 0

	)

3048 
	#TRANS_VTOTAL_A
 0xe000c

	)

3049 
	#TRANS_VTOTAL_SHIFT
 16

	)

3050 
	#TRANS_VACTIVE_SHIFT
 0

	)

3051 
	#TRANS_VBLANK_A
 0xe0010

	)

3052 
	#TRANS_VBLANK_END_SHIFT
 16

	)

3053 
	#TRANS_VBLANK_START_SHIFT
 0

	)

3054 
	#TRANS_VSYNC_A
 0xe0014

	)

3055 
	#TRANS_VSYNC_END_SHIFT
 16

	)

3056 
	#TRANS_VSYNC_START_SHIFT
 0

	)

3057 
	#TRANS_VSYNCSHIFT_A
 0xe0028

	)

3059 
	#TRANSA_DATA_M1
 0xe0030

	)

3060 
	#TRANSA_DATA_N1
 0xe0034

	)

3061 
	#TRANSA_DATA_M2
 0xe0038

	)

3062 
	#TRANSA_DATA_N2
 0xe003c

	)

3063 
	#TRANSA_DP_LINK_M1
 0xe0040

	)

3064 
	#TRANSA_DP_LINK_N1
 0xe0044

	)

3065 
	#TRANSA_DP_LINK_M2
 0xe0048

	)

3066 
	#TRANSA_DP_LINK_N2
 0xe004c

	)

3068 
	#TRANS_HTOTAL_B
 0xe1000

	)

3069 
	#TRANS_HBLANK_B
 0xe1004

	)

3070 
	#TRANS_HSYNC_B
 0xe1008

	)

3071 
	#TRANS_VTOTAL_B
 0xe100c

	)

3072 
	#TRANS_VBLANK_B
 0xe1010

	)

3073 
	#TRANS_VSYNC_B
 0xe1014

	)

3074 
	#TRANS_VSYNCSHIFT_B
 0xe1028

	)

3076 
	#TRANSB_DATA_M1
 0xe1030

	)

3077 
	#TRANSB_DATA_N1
 0xe1034

	)

3078 
	#TRANSB_DATA_M2
 0xe1038

	)

3079 
	#TRANSB_DATA_N2
 0xe103c

	)

3080 
	#TRANSB_DP_LINK_M1
 0xe1040

	)

3081 
	#TRANSB_DP_LINK_N1
 0xe1044

	)

3082 
	#TRANSB_DP_LINK_M2
 0xe1048

	)

3083 
	#TRANSB_DP_LINK_N2
 0xe104c

	)

3085 
	#TRANS_HTOTAL_C
 0xe2000

	)

3086 
	#TRANS_HBLANK_C
 0xe2004

	)

3087 
	#TRANS_HSYNC_C
 0xe2008

	)

3088 
	#TRANS_VTOTAL_C
 0xe200c

	)

3089 
	#TRANS_VBLANK_C
 0xe2010

	)

3090 
	#TRANS_VSYNC_C
 0xe2014

	)

3091 
	#TRANS_VSYNCSHIFT_C
 0xe2028

	)

3093 
	#TRANSC_DATA_M1
 0xe2030

	)

3094 
	#TRANSC_DATA_N1
 0xe2034

	)

3095 
	#TRANSC_DATA_M2
 0xe2038

	)

3096 
	#TRANSC_DATA_N2
 0xe203c

	)

3097 
	#TRANSC_DP_LINK_M1
 0xe2040

	)

3098 
	#TRANSC_DP_LINK_N1
 0xe2044

	)

3099 
	#TRANSC_DP_LINK_M2
 0xe2048

	)

3100 
	#TRANSC_DP_LINK_N2
 0xe204c

	)

3102 
	#DP_BUFTRANS
(
x
Ë(0xe4f00 + 4 * (x))

	)

3104 
	#TRANSACONF
 0xf0008

	)

3105 
	#TRANSBCONF
 0xf1008

	)

3106 
	#TRANSCCONF
 0xf2008

	)

3107 
	#TRANS_DISABLE
 (0<<31)

	)

3108 
	#TRANS_ENABLE
 (1<<31)

	)

3109 
	#TRANS_STATE_MASK
 (1<<30)

	)

3110 
	#TRANS_STATE_DISABLE
 (0<<30)

	)

3111 
	#TRANS_STATE_ENABLE
 (1<<30)

	)

3112 
	#TRANS_FSYNC_DELAY_HB1
 (0<<27)

	)

3113 
	#TRANS_FSYNC_DELAY_HB2
 (1<<27)

	)

3114 
	#TRANS_FSYNC_DELAY_HB3
 (2<<27)

	)

3115 
	#TRANS_FSYNC_DELAY_HB4
 (3<<27)

	)

3116 
	#TRANS_DP_AUDIO_ONLY
 (1<<26)

	)

3117 
	#TRANS_DP_VIDEO_AUDIO
 (0<<26)

	)

3118 
	#TRANS_PROGRESSIVE
 (0<<21)

	)

3119 
	#TRANS_8BPC
 (0<<5)

	)

3120 
	#TRANS_10BPC
 (1<<5)

	)

3121 
	#TRANS_6BPC
 (2<<5)

	)

3122 
	#TRANS_12BPC
 (3<<5)

	)

3124 
	#FDI_RXA_CHICKEN
 0xc200c

	)

3125 
	#FDI_RXB_CHICKEN
 0xc2010

	)

3126 
	#FDI_RX_PHASE_SYNC_POINTER_ENABLE
 (1)

	)

3129 
	#FDI_TXA_CTL
 0x60100

	)

3130 
	#FDI_TXB_CTL
 0x61100

	)

3131 
	#FDI_TXC_CTL
 0x62100

	)

3132 
	#FDI_TX_DISABLE
 (0<<31)

	)

3133 
	#FDI_TX_ENABLE
 (1<<31)

	)

3134 
	#FDI_LINK_TRAIN_PATTERN_1
 (0<<28)

	)

3135 
	#FDI_LINK_TRAIN_PATTERN_2
 (1<<28)

	)

3136 
	#FDI_LINK_TRAIN_PATTERN_IDLE
 (2<<28)

	)

3137 
	#FDI_LINK_TRAIN_NONE
 (3<<28)

	)

3138 
	#FDI_LINK_TRAIN_VOLTAGE_0_4V
 (0<<25)

	)

3139 
	#FDI_LINK_TRAIN_VOLTAGE_0_6V
 (1<<25)

	)

3140 
	#FDI_LINK_TRAIN_VOLTAGE_0_8V
 (2<<25)

	)

3141 
	#FDI_LINK_TRAIN_VOLTAGE_1_2V
 (3<<25)

	)

3142 
	#FDI_LINK_TRAIN_PRE_EMPHASIS_NONE
 (0<<22)

	)

3143 
	#FDI_LINK_TRAIN_PRE_EMPHASIS_1_5X
 (1<<22)

	)

3144 
	#FDI_LINK_TRAIN_PRE_EMPHASIS_2X
 (2<<22)

	)

3145 
	#FDI_LINK_TRAIN_PRE_EMPHASIS_3X
 (3<<22)

	)

3149 
	#FDI_LINK_TRAIN_400MV_0DB_SNB_A
 (0x38<<22)

	)

3150 
	#FDI_LINK_TRAIN_400MV_6DB_SNB_A
 (0x02<<22)

	)

3151 
	#FDI_LINK_TRAIN_600MV_3_5DB_SNB_A
 (0x01<<22)

	)

3152 
	#FDI_LINK_TRAIN_800MV_0DB_SNB_A
 (0x0<<22)

	)

3154 
	#FDI_LINK_TRAIN_400MV_0DB_SNB_B
 (0x0<<22)

	)

3155 
	#FDI_LINK_TRAIN_400MV_6DB_SNB_B
 (0x3a<<22)

	)

3156 
	#FDI_LINK_TRAIN_600MV_3_5DB_SNB_B
 (0x39<<22)

	)

3157 
	#FDI_LINK_TRAIN_800MV_0DB_SNB_B
 (0x38<<22)

	)

3158 
	#FDI_LINK_TRAIN_VOL_EMP_MASK
 (0x3f<<22)

	)

3159 
	#FDI_DP_PORT_WIDTH_X1
 (0<<19)

	)

3160 
	#FDI_DP_PORT_WIDTH_X2
 (1<<19)

	)

3161 
	#FDI_DP_PORT_WIDTH_X3
 (2<<19)

	)

3162 
	#FDI_DP_PORT_WIDTH_X4
 (3<<19)

	)

3163 
	#FDI_TX_ENHANCE_FRAME_ENABLE
 (1<<18)

	)

3165 
	#FDI_TX_PLL_ENABLE
 (1<<14)

	)

3167 
	#FDI_SCRAMBLING_ENABLE
 (0<<7)

	)

3168 
	#FDI_SCRAMBLING_DISABLE
 (1<<7)

	)

3171 
	#DPAFE_BMFUNC
 0x6c024

	)

3172 
	#DPAFE_DL_IREFCAL0
 0x6c02c

	)

3173 
	#DPAFE_DL_IREFCAL1
 0x6c030

	)

3174 
	#DPAFE_DP_IREFCAL
 0x6c034

	)

3177 
	#FDI_RXA_CTL
 0xf000c

	)

3178 
	#FDI_RXB_CTL
 0xf100c

	)

3179 
	#FDI_RXC_CTL
 0xf200c

	)

3180 
	#FDI_RX_ENABLE
 (1<<31)

	)

3181 
	#FDI_RX_DISABLE
 (0<<31)

	)

3183 
	#FDI_DP_PORT_WIDTH_X8
 (7<<19)

	)

3184 
	#FDI_8BPC
 (0<<16)

	)

3185 
	#FDI_10BPC
 (1<<16)

	)

3186 
	#FDI_6BPC
 (2<<16)

	)

3187 
	#FDI_12BPC
 (3<<16)

	)

3188 
	#FDI_LINK_REVERSE_OVERWRITE
 (1<<15)

	)

3189 
	#FDI_DMI_LINK_REVERSE_MASK
 (1<<14)

	)

3190 
	#FDI_RX_PLL_ENABLE
 (1<<13)

	)

3191 
	#FDI_FS_ERR_CORRECT_ENABLE
 (1<<11)

	)

3192 
	#FDI_FE_ERR_CORRECT_ENABLE
 (1<<10)

	)

3193 
	#FDI_FS_ERR_REPORT_ENABLE
 (1<<9)

	)

3194 
	#FDI_FE_ERR_REPORT_ENABLE
 (1<<8)

	)

3195 
	#FDI_RX_ENHANCE_FRAME_ENABLE
 (1<<6)

	)

3196 
	#FDI_SEL_RAWCLK
 (0<<4)

	)

3197 
	#FDI_SEL_PCDCLK
 (1<<4)

	)

3199 
	#FDI_AUTO_TRAINING
 (1<<10)

	)

3200 
	#FDI_LINK_TRAIN_PATTERN_1_CPT
 (0<<8)

	)

3201 
	#FDI_LINK_TRAIN_PATTERN_2_CPT
 (1<<8)

	)

3202 
	#FDI_LINK_TRAIN_PATTERN_IDLE_CPT
 (2<<8)

	)

3203 
	#FDI_LINK_TRAIN_NORMAL_CPT
 (3<<8)

	)

3204 
	#FDI_LINK_TRAIN_PATTERN_MASK_CPT
 (3<<8)

	)

3206 
	#FDI_RXA_MISC
 0xf0010

	)

3207 
	#FDI_RXB_MISC
 0xf1010

	)

3208 
	#FDI_RXC_MISC
 0xf2010

	)

3209 
	#FDI_RXA_TUSIZE1
 0xf0030

	)

3210 
	#FDI_RXA_TUSIZE2
 0xf0038

	)

3211 
	#FDI_RXB_TUSIZE1
 0xf1030

	)

3212 
	#FDI_RXB_TUSIZE2
 0xf1038

	)

3213 
	#FDI_RXC_TUSIZE1
 0xf2030

	)

3214 
	#FDI_RXC_TUSIZE2
 0xf2038

	)

3217 
	#FDI_RX_INTER_LANE_ALIGN
 (1<<10)

	)

3218 
	#FDI_RX_SYMBOL_LOCK
 (1<<9Ë

	)

3219 
	#FDI_RX_BIT_LOCK
 (1<<8Ë

	)

3220 
	#FDI_RX_TRAIN_PATTERN_2_FAIL
 (1<<7)

	)

3221 
	#FDI_RX_FS_CODE_ERR
 (1<<6)

	)

3222 
	#FDI_RX_FE_CODE_ERR
 (1<<5)

	)

3223 
	#FDI_RX_SYMBOL_ERR_RATE_ABOVE
 (1<<4)

	)

3224 
	#FDI_RX_HDCP_LINK_FAIL
 (1<<3)

	)

3225 
	#FDI_RX_PIXEL_FIFO_OVERFLOW
 (1<<2)

	)

3226 
	#FDI_RX_CROSS_CLOCK_OVERFLOW
 (1<<1)

	)

3227 
	#FDI_RX_SYMBOL_QUEUE_OVERFLOW
 (1<<0)

	)

3229 
	#FDI_RXA_IIR
 0xf0014

	)

3230 
	#FDI_RXA_IMR
 0xf0018

	)

3231 
	#FDI_RXB_IIR
 0xf1014

	)

3232 
	#FDI_RXB_IMR
 0xf1018

	)

3234 
	#FDI_PLL_CTL_1
 0x„000

	)

3235 
	#FDI_PLL_CTL_2
 0x„004

	)

3238 
	#PCH_ADPA
 0xe1100

	)

3239 
	#ADPA_TRANS_SELECT_MASK
 (1<<30)

	)

3240 
	#ADPA_TRANS_A_SELECT
 0

	)

3241 
	#ADPA_TRANS_B_SELECT
 (1<<30)

	)

3243 
	#ADPA_CRT_HOTPLUG_MASK
 0x03ff0000

	)

3244 
	#ADPA_CRT_HOTPLUG_MONITOR_NONE
 (0<<24)

	)

3245 
	#ADPA_CRT_HOTPLUG_MONITOR_MASK
 (3<<24)

	)

3246 
	#ADPA_CRT_HOTPLUG_MONITOR_COLOR
 (3<<24)

	)

3247 
	#ADPA_CRT_HOTPLUG_MONITOR_MONO
 (2<<24)

	)

3248 
	#ADPA_CRT_HOTPLUG_ENABLE
 (1<<23)

	)

3249 
	#ADPA_CRT_HOTPLUG_PERIOD_64
 (0<<22)

	)

3250 
	#ADPA_CRT_HOTPLUG_PERIOD_128
 (1<<22)

	)

3251 
	#ADPA_CRT_HOTPLUG_WARMUP_5MS
 (0<<21)

	)

3252 
	#ADPA_CRT_HOTPLUG_WARMUP_10MS
 (1<<21)

	)

3253 
	#ADPA_CRT_HOTPLUG_SAMPLE_2S
 (0<<20)

	)

3254 
	#ADPA_CRT_HOTPLUG_SAMPLE_4S
 (1<<20)

	)

3255 
	#ADPA_CRT_HOTPLUG_VOLTAGE_40
 (0<<18)

	)

3256 
	#ADPA_CRT_HOTPLUG_VOLTAGE_50
 (1<<18)

	)

3257 
	#ADPA_CRT_HOTPLUG_VOLTAGE_60
 (2<<18)

	)

3258 
	#ADPA_CRT_HOTPLUG_VOLTAGE_70
 (3<<18)

	)

3259 
	#ADPA_CRT_HOTPLUG_VOLREF_325MV
 (0<<17)

	)

3260 
	#ADPA_CRT_HOTPLUG_VOLREF_475MV
 (1<<17)

	)

3261 
	#ADPA_CRT_HOTPLUG_FORCE_TRIGGER
 (1<<16)

	)

3265 
	#HDMIB
 0xe1140

	)

3266 
	#PORT_ENABLE
 (1 << 31)

	)

3267 
	#TRANSCODER_A
 (0)

	)

3268 
	#TRANSCODER_B
 (1 << 30)

	)

3269 
	#COLOR_FORMAT_8bpc
 (0)

	)

3270 
	#COLOR_FORMAT_12bpc
 (3 << 26)

	)

3271 
	#SDVOB_HOTPLUG_ENABLE
 (1 << 23)

	)

3272 
	#SDVO_ENCODING
 (0)

	)

3273 
	#TMDS_ENCODING
 (2 << 10)

	)

3274 
	#NULL_PACKET_VSYNC_ENABLE
 (1 << 9)

	)

3275 
	#SDVOB_BORDER_ENABLE
 (1 << 7)

	)

3276 
	#AUDIO_ENABLE
 (1 << 6)

	)

3277 
	#VSYNC_ACTIVE_HIGH
 (1 << 4)

	)

3278 
	#HSYNC_ACTIVE_HIGH
 (1 << 3)

	)

3279 
	#PORT_DETECTED
 (1 << 2)

	)

3281 
	#HDMIC
 0xe1150

	)

3282 
	#HDMID
 0xe1160

	)

3283 
	#PCH_LVDS
 0xe1180

	)

3286 
	#BLC_PWM_CPU_CTL2
 0x48250

	)

3287 
	#BLC_PWM2_CPU_CTL2
 0x48350

	)

3288 
	#PWM_ENABLE
 (1 << 31)

	)

3289 
	#PWM_PIPE_A
 (0 << 29)

	)

3290 
	#PWM_PIPE_B
 (1 << 29)

	)

3291 
	#BLC_PWM_CPU_CTL
 0x48254

	)

3292 
	#BLC_PWM2_CPU_CTL
 0x48354

	)

3293 
	#BLC_MISC_CTL
 0x48360

	)

3295 
	#UTIL_PIN_CTL
 0x48400

	)

3297 
	#BLC_PWM_PCH_CTL1
 0xc8250

	)

3298 
	#PWM_PCH_ENABLE
 (1 << 31)

	)

3299 
	#PWM_POLARITY_ACTIVE_LOW
 (1 << 29)

	)

3300 
	#PWM_POLARITY_ACTIVE_HIGH
 (0 << 29)

	)

3301 
	#PWM_POLARITY_ACTIVE_LOW2
 (1 << 28)

	)

3302 
	#PWM_POLARITY_ACTIVE_HIGH2
 (0 << 28)

	)

3304 
	#BLC_PWM_PCH_CTL2
 0xc8254

	)

3306 
	#PCH_PP_STATUS
 0xc7200

	)

3307 
	#PCH_PP_CONTROL
 0xc7204

	)

3308 
	#EDP_FORCE_VDD
 (1 << 3)

	)

3309 
	#EDP_BLC_ENABLE
 (1 << 2)

	)

3310 
	#PANEL_POWER_RESET
 (1 << 1)

	)

3311 
	#PANEL_POWER_OFF
 (0 << 0)

	)

3312 
	#PANEL_POWER_ON
 (1 << 0)

	)

3313 
	#PCH_PP_ON_DELAYS
 0xc7208

	)

3314 
	#EDP_PANEL
 (1 << 30)

	)

3315 
	#PCH_PP_OFF_DELAYS
 0xc720c

	)

3316 
	#PCH_PP_DIVISOR
 0xc7210

	)

3318 
	#AUD_CONFIG
 0x62000

	)

3319 
	#AUD_DEBUG
 0x62010

	)

3320 
	#AUD_VID_DID
 0x62020

	)

3321 
	#AUD_RID
 0x62024

	)

3322 
	#AUD_SUBN_CNT
 0x62028

	)

3323 
	#AUD_FUNC_GRP
 0x62040

	)

3324 
	#AUD_SUBN_CNT2
 0x62044

	)

3325 
	#AUD_GRP_CAP
 0x62048

	)

3326 
	#AUD_PWRST
 0x6204c

	)

3327 
	#AUD_SUPPWR
 0x62050

	)

3328 
	#AUD_SID
 0x62054

	)

3329 
	#AUD_OUT_CWCAP
 0x62070

	)

3330 
	#AUD_OUT_PCMSIZE
 0x62074

	)

3331 
	#AUD_OUT_STR
 0x62078

	)

3332 
	#AUD_OUT_DIG_CNVT
 0x6207c

	)

3333 
	#AUD_OUT_CH_STR
 0x62080

	)

3334 
	#AUD_OUT_STR_DESC
 0x62084

	)

3335 
	#AUD_PINW_CAP
 0x620a0

	)

3336 
	#AUD_PIN_CAP
 0x620a4

	)

3337 
	#AUD_PINW_CONNLNG
 0x620a8

	)

3338 
	#AUD_PINW_CONNLST
 0x620ac

	)

3339 
	#AUD_PINW_CNTR
 0x620b0

	)

3340 
	#AUD_PINW_UNSOLRESP
 0x620b8

	)

3341 
	#AUD_CNTL_ST
 0x620b4

	)

3342 
	#AUD_PINW_CONFIG
 0x620bc

	)

3343 
	#AUD_HDMIW_STATUS
 0x620d4

	)

3344 
	#AUD_HDMIW_HDMIEDID
 0x6210c

	)

3345 
	#AUD_HDMIW_INFOFR
 0x62118

	)

3346 
	#AUD_CONV_CHCNT
 0x62120

	)

3347 
	#AUD_CTS_ENABLE
 0x62128

	)

3349 
	#VIDEO_DIP_CTL
 0x61170

	)

3350 
	#VIDEO_DIP_DATA
 0x61178

	)

3353 
	#TRANS_DP_CTL_A
 0xe0300

	)

3354 
	#TRANS_DP_CTL_B
 0xe1300

	)

3355 
	#TRANS_DP_CTL_C
 0xe2300

	)

3356 
	#TRANS_DP_OUTPUT_ENABLE
 (1<<31)

	)

3357 
	#TRANS_DP_PORT_SEL_B
 (0<<29)

	)

3358 
	#TRANS_DP_PORT_SEL_C
 (1<<29)

	)

3359 
	#TRANS_DP_PORT_SEL_D
 (2<<29)

	)

3360 
	#TRANS_DP_PORT_SEL_MASK
 (3<<29)

	)

3361 
	#TRANS_DP_AUDIO_ONLY
 (1<<26)

	)

3362 
	#TRANS_DP_ENH_FRAMING
 (1<<18)

	)

3363 
	#TRANS_DP_8BPC
 (0<<9)

	)

3364 
	#TRANS_DP_10BPC
 (1<<9)

	)

3365 
	#TRANS_DP_6BPC
 (2<<9)

	)

3366 
	#TRANS_DP_12BPC
 (3<<9)

	)

3367 
	#TRANS_DP_VSYNC_ACTIVE_HIGH
 (1<<4)

	)

3368 
	#TRANS_DP_VSYNC_ACTIVE_LOW
 0

	)

3369 
	#TRANS_DP_HSYNC_ACTIVE_HIGH
 (1<<3)

	)

3370 
	#TRANS_DP_HSYNC_ACTIVE_LOW
 0

	)

3373 
	#GEN6_TD_CTL
 0x7000

	)

3374 
	#GEN6_TD_CTL_FORCE_TD_BKPT
 (1<<4)

	)

3379 
	#PORT_DBG
 0x42308

	)

3380 
	#PORT_DBG_DRRS_HW_STATE_OFF
 (0<<30)

	)

3381 
	#PORT_DBG_DRRS_HW_STATE_LOW
 (1<<30)

	)

3382 
	#PORT_DBG_DRRS_HW_STATE_HIGH
 (2<<30)

	)

3386 
	#RC6_RESIDENCY_TIME
 0x138108

	)

3387 
	#RC6p_RESIDENCY_TIME
 0x13810C

	)

3388 
	#RC6µ_RESIDENCY_TIME
 0x138110

	)

3390 
	#GEN6_RPNSWREQ
 0xA008

	)

3391 
	#GEN6_RC_VIDEO_FREQ
 0xA00C

	)

3392 
	#GEN6_RC_CONTROL
 0xA090

	)

3393 
	#GEN6_RP_DOWN_TIMEOUT
 0xA010

	)

3394 
	#GEN6_RP_INTERRUPT_LIMITS
 0xA014

	)

3395 
	#GEN6_RPSTAT1
 0xA01C

	)

3396 
	#GEN6_RP_CONTROL
 0xA024

	)

3397 
	#GEN6_RP_UP_THRESHOLD
 0xA02C

	)

3398 
	#GEN6_RP_DOWN_THRESHOLD
 0xA030

	)

3399 
	#GEN6_RP_CUR_UP_EI
 0xA050

	)

3400 
	#GEN6_RP_CUR_UP
 0xA054

	)

3401 
	#GEN6_RP_PREV_UP
 0xA058

	)

3402 
	#GEN6_RP_CUR_DOWN_EI
 0xA05C

	)

3403 
	#GEN6_RP_CUR_DOWN
 0xA060

	)

3404 
	#GEN6_RP_PREV_DOWN
 0xA064

	)

3405 
	#GEN6_RP_UP_EI
 0xA068

	)

3406 
	#GEN6_RP_DOWN_EI
 0xA06C

	)

3407 
	#GEN6_RP_IDLE_HYSTERSIS
 0xA070

	)

3408 
	#GEN6_RC_STATE
 0xA094

	)

3409 
	#GEN6_RC1_WAKE_RATE_LIMIT
 0xA098

	)

3410 
	#GEN6_RC6_WAKE_RATE_LIMIT
 0xA09C

	)

3411 
	#GEN6_RC6µ_WAKE_RATE_LIMIT
 0xA0A0

	)

3412 
	#GEN6_RC_EVALUATION_INTERVAL
 0xA0A8

	)

3413 
	#GEN6_RC_IDLE_HYSTERSIS
 0xA0AC

	)

3414 
	#GEN6_RC_SLEEP
 0xA0B0

	)

3415 
	#GEN6_RC1e_THRESHOLD
 0xA0B4

	)

3416 
	#GEN6_RC6_THRESHOLD
 0xA0B8

	)

3417 
	#GEN6_RC6p_THRESHOLD
 0xA0BC

	)

3418 
	#GEN6_RC6µ_THRESHOLD
 0xA0C0

	)

3419 
	#GEN6_PMINTRMSK
 0xA168

	)

3420 
	#GEN6_RC_EVALUATION_INTERVAL
 0xA0A8

	)

3421 
	#GEN6_RC_IDLE_HYSTERSIS
 0xA0AC

	)

3422 
	#GEN6_PMIER
 0x4402C

	)

3423 
	#GEN6_PMIMR
 0x44024

	)

3424 
	#GEN6_PMINTRMSK
 0xA168

	)

3429 
	#HSW_PWR_WELL_CTL1
 0x45400

	)

3430 
	#HSW_PWR_WELL_CTL2
 0x45404

	)

3431 
	#HSW_PWR_WELL_CTL3
 0x45408

	)

3432 
	#HSW_PWR_WELL_CTL4
 0x4540C

	)

3433 
	#HSW_PWR_WELL_ENABLE_REQUEST
 (1<<31)

	)

3434 
	#HSW_PWR_WELL_STATE_ENABLED
 (1<<30)

	)

3435 
	#HSW_PWR_WELL_CTL5
 0x45410

	)

3436 
	#HSW_PWR_WELL_ENABLE_SINGLE_STEP
 (1<<31)

	)

3437 
	#HSW_PWR_WELL_PWR_GATE_OVERRIDE
 (1<<20)

	)

3438 
	#HSW_PWR_WELL_FORCE_ON
 (1<<19)

	)

3439 
	#HSW_PWR_WELL_CTL6
 0x45414

	)

3442 
	#PIPE_DDI_FUNC_CTL_A
 0x60400

	)

3443 
	#PIPE_DDI_FUNC_CTL_B
 0x61400

	)

3444 
	#PIPE_DDI_FUNC_CTL_C
 0x62400

	)

3445 
	#PIPE_DDI_FUNC_CTL_EDP
 0x6F400

	)

3446 
	#DDI_FUNC_CTL
(
pùe
Ë
	`_PIPE
(pipe, \

3447 
PIPE_DDI_FUNC_CTL_A
, \

3448 
PIPE_DDI_FUNC_CTL_B
)

	)

3449 
	#PIPE_DDI_FUNC_ENABLE
 (1<<31)

	)

3451 
	#PIPE_DDI_PORT_MASK
 (0xf<<28)

	)

3452 
	#PIPE_DDI_SELECT_PORT
(
x
Ë((x)<<28)

	)

3453 
	#PIPE_DDI_MODE_SELECT_HDMI
 (0<<24)

	)

3454 
	#PIPE_DDI_MODE_SELECT_DVI
 (1<<24)

	)

3455 
	#PIPE_DDI_MODE_SELECT_DP_SST
 (2<<24)

	)

3456 
	#PIPE_DDI_MODE_SELECT_DP_MST
 (3<<24)

	)

3457 
	#PIPE_DDI_MODE_SELECT_FDI
 (4<<24)

	)

3458 
	#PIPE_DDI_BPC_8
 (0<<20)

	)

3459 
	#PIPE_DDI_BPC_10
 (1<<20)

	)

3460 
	#PIPE_DDI_BPC_6
 (2<<20)

	)

3461 
	#PIPE_DDI_BPC_12
 (3<<20)

	)

3462 
	#PIPE_DDI_BFI_ENABLE
 (1<<4)

	)

3463 
	#PIPE_DDI_PORT_WIDTH_X1
 (0<<1)

	)

3464 
	#PIPE_DDI_PORT_WIDTH_X2
 (1<<1)

	)

3465 
	#PIPE_DDI_PORT_WIDTH_X4
 (3<<1)

	)

3468 
	#DP_TP_CTL_A
 0x64040

	)

3469 
	#DP_TP_CTL_B
 0x64140

	)

3470 
	#DP_TP_CTL_C
 0x64240

	)

3471 
	#DP_TP_CTL_D
 0x64340

	)

3472 
	#DP_TP_CTL_E
 0x64440

	)

3473 
	#DP_TP_CTL_ENABLE
 (1<<31)

	)

3474 
	#DP_TP_CTL_MODE_SST
 (0<<27)

	)

3475 
	#DP_TP_CTL_MODE_MST
 (1<<27)

	)

3476 
	#DP_TP_CTL_ENHANCED_FRAME_ENABLE
 (1<<18)

	)

3477 
	#DP_TP_CTL_FDI_AUTOTRAIN
 (1<<15)

	)

3478 
	#DP_TP_CTL_LINK_TRAIN_MASK
 (7<<8)

	)

3479 
	#DP_TP_CTL_LINK_TRAIN_PAT1
 (0<<8)

	)

3480 
	#DP_TP_CTL_LINK_TRAIN_PAT2
 (1<<8)

	)

3481 
	#DP_TP_CTL_LINK_TRAIN_NORMAL
 (3<<8)

	)

3484 
	#DP_TP_STATUS_A
 0x64044

	)

3485 
	#DP_TP_STATUS_B
 0x64144

	)

3486 
	#DP_TP_STATUS_C
 0x64244

	)

3487 
	#DP_TP_STATUS_D
 0x64344

	)

3488 
	#DP_TP_STATUS_E
 0x64444

	)

3489 
	#DP_TP_STATUS_AUTOTRAIN_DONE
 (1<<12)

	)

3492 
	#DDI_BUF_CTL_A
 0x64000

	)

3493 
	#DDI_BUF_CTL_B
 0x64100

	)

3494 
	#DDI_BUF_CTL_C
 0x64200

	)

3495 
	#DDI_BUF_CTL_D
 0x64300

	)

3496 
	#DDI_BUF_CTL_E
 0x64400

	)

3497 
	#DDI_BUF_CTL_ENABLE
 (1<<31)

	)

3498 
	#DDI_BUF_EMP_400MV_0DB_HSW
 (0<<24Ë

	)

3499 
	#DDI_BUF_EMP_400MV_3_5DB_HSW
 (1<<24Ë

	)

3500 
	#DDI_BUF_EMP_400MV_6DB_HSW
 (2<<24Ë

	)

3501 
	#DDI_BUF_EMP_400MV_9_5DB_HSW
 (3<<24Ë

	)

3502 
	#DDI_BUF_EMP_600MV_0DB_HSW
 (4<<24Ë

	)

3503 
	#DDI_BUF_EMP_600MV_3_5DB_HSW
 (5<<24Ë

	)

3504 
	#DDI_BUF_EMP_600MV_6DB_HSW
 (6<<24Ë

	)

3505 
	#DDI_BUF_EMP_800MV_0DB_HSW
 (7<<24Ë

	)

3506 
	#DDI_BUF_EMP_800MV_3_5DB_HSW
 (8<<24Ë

	)

3507 
	#DDI_BUF_EMP_MASK
 (0xf<<24)

	)

3508 
	#DDI_BUF_IS_IDLE
 (1<<7)

	)

3509 
	#DDI_PORT_WIDTH_X1
 (0<<1)

	)

3510 
	#DDI_PORT_WIDTH_X2
 (1<<1)

	)

3511 
	#DDI_PORT_WIDTH_X4
 (3<<1)

	)

3512 
	#DDI_INIT_DISPLAY_DETECTED
 (1<<0)

	)

3515 
	#PIXCLK_GATE
 0xC6020

	)

3516 
	#PIXCLK_GATE_UNGATE
 1<<0

	)

3517 
	#PIXCLK_GATE_GATE
 0<<0

	)

3520 
	#SPLL_CTL
 0x46020

	)

3521 
	#SPLL_PLL_ENABLE
 (1<<31)

	)

3522 
	#SPLL_PLL_SCC
 (1<<28)

	)

3523 
	#SPLL_PLL_NON_SCC
 (2<<28)

	)

3524 
	#SPLL_PLL_FREQ_810MHz
 (0<<26)

	)

3525 
	#SPLL_PLL_FREQ_1350MHz
 (1<<26)

	)

3528 
	#WRPLL_CTL1
 0x46040

	)

3529 
	#WRPLL_CTL2
 0x46060

	)

3530 
	#WRPLL_PLL_ENABLE
 (1<<31)

	)

3531 
	#WRPLL_PLL_SELECT_SSC
 (0x01<<28)

	)

3532 
	#WRPLL_PLL_SELECT_NON_SCC
 (0x02<<28)

	)

3533 
	#WRPLL_PLL_SELECT_LCPLL_2700
 (0x03<<28)

	)

3535 
	#WRPLL_DIVIDER_REFERENCE
(
x
Ë((x)<<0)

	)

3536 
	#WRPLL_DIVIDER_POST
(
x
Ë((x)<<8)

	)

3537 
	#WRPLL_DIVIDER_FEEDBACK
(
x
Ë((x)<<16)

	)

3540 
	#PORT_CLK_SEL_A
 0x46100

	)

3541 
	#PORT_CLK_SEL_B
 0x46104

	)

3542 
	#PORT_CLK_SEL_C
 0x46108

	)

3543 
	#PORT_CLK_SEL_D
 0x4610C

	)

3544 
	#PORT_CLK_SEL_E
 0x46110

	)

3545 
	#PORT_CLK_SEL_LCPLL_2700
 (0<<29)

	)

3546 
	#PORT_CLK_SEL_LCPLL_1350
 (1<<29)

	)

3547 
	#PORT_CLK_SEL_LCPLL_810
 (2<<29)

	)

3548 
	#PORT_CLK_SEL_SPLL
 (3<<29)

	)

3549 
	#PORT_CLK_SEL_WRPLL1
 (4<<29)

	)

3550 
	#PORT_CLK_SEL_WRPLL2
 (5<<29)

	)

3553 
	#PIPE_CLK_SEL_A
 0x46140

	)

3554 
	#PIPE_CLK_SEL_B
 0x46144

	)

3555 
	#PIPE_CLK_SEL_C
 0x46148

	)

3557 
	#PIPE_CLK_SEL_DISABLED
 (0x0<<29)

	)

3558 
	#PIPE_CLK_SEL_PORT
(
x
Ë((x+1)<<29)

	)

3561 
	#LCPLL_CTL
 0x130040

	)

3562 
	#LCPLL_PLL_DISABLE
 (1<<31)

	)

3563 
	#LCPLL_PLL_LOCK
 (1<<30)

	)

3564 
	#LCPLL_CD_CLOCK_DISABLE
 (1<<25)

	)

3565 
	#LCPLL_CD2X_CLOCK_DISABLE
 (1<<23)

	)

3568 
	#WM_PIPE_A
 0x45100

	)

3569 
	#WM_PIPE_B
 0x45104

	)

3570 
	#WM_PIPE_C
 0x45200

	)

3571 
	#WM_LP1
 0x45108

	)

3572 
	#WM_LP2
 0x4510C

	)

3573 
	#WM_LP3
 0x45110

	)

3574 
	#WM_LP1_SPR
 0x45120

	)

3575 
	#WM_LP2_SPR
 0x45124

	)

3576 
	#WM_LP3_SPR
 0x45128

	)

3577 
	#WM_MISC
 0x45260

	)

3578 
	#WM_SR_CNT
 0x45264

	)

3579 
	#WM_DBG
 0x45280

	)

3580 
	#PIPE_WM_LINETIME_A
 0x45270

	)

3581 
	#PIPE_WM_LINETIME_B
 0x45274

	)

3582 
	#PIPE_WM_LINETIME_C
 0x45278

	)

3583 
	#PIPE_WM_LINETIME_MASK
 (0x1ff)

	)

3584 
	#PIPE_WM_LINETIME_TIME
(
x
Ë((x))

	)

3585 
	#PIPE_WM_LINETIME_IPS_LINETIME_MASK
 (0x1ff<<16)

	)

3586 
	#PIPE_WM_LINETIME_IPS_LINETIME
(
x
Ë((x)<<16)

	)

3589 
	#SFUSE_STRAP
 0xc2014

	)

3590 
	#SFUSE_STRAP_DDIB_DETECTED
 (1<<2)

	)

3591 
	#SFUSE_STRAP_DDIC_DETECTED
 (1<<1)

	)

3592 
	#SFUSE_STRAP_DDID_DETECTED
 (1<<0)

	)

3595 
	#VLV_DISPLAY_BASE
 0x180000

	)

3600 
	#VLV_IOSF_DOORBELL_REQ
 (
VLV_DISPLAY_BASE
 + 0x2100)

	)

3601 
	#IOSF_DEVFN_SHIFT
 24

	)

3602 
	#IOSF_OPCODE_SHIFT
 16

	)

3603 
	#IOSF_PORT_SHIFT
 8

	)

3604 
	#IOSF_BYTE_ENABLES_SHIFT
 4

	)

3605 
	#IOSF_BAR_SHIFT
 1

	)

3606 
	#IOSF_SB_BUSY
 (1<<0)

	)

3607 
	#IOSF_PORT_BUNIT
 0x3

	)

3608 
	#IOSF_PORT_PUNIT
 0x4

	)

3609 
	#IOSF_PORT_NC
 0x11

	)

3610 
	#IOSF_PORT_DPIO
 0x12

	)

3611 
	#IOSF_PORT_DPIO_2
 0x1a

	)

3612 
	#IOSF_PORT_GPIO_NC
 0x13

	)

3613 
	#IOSF_PORT_CCK
 0x14

	)

3614 
	#IOSF_PORT_CCU
 0xA9

	)

3615 
	#IOSF_PORT_GPS_CORE
 0x48

	)

3616 
	#IOSF_PORT_FLISDSI
 0x1B

	)

3617 
	#VLV_IOSF_DATA
 (
VLV_DISPLAY_BASE
 + 0x2104)

	)

3618 
	#VLV_IOSF_ADDR
 (
VLV_DISPLAY_BASE
 + 0x2108)

	)

	@intel_reg_map.c

28 
	~<°dio.h
>

29 
	~<°d¨g.h
>

30 
	~<°dlib.h
>

31 
	~<sys/ty≥s.h
>

33 
	~"öãl_io.h
"

34 
	~"öãl_chù£t.h
"

35 
	~"igt_c‹e.h
"

37 
öãl_ªgi°î_ønge
 
	ggí_bw˛_ªgi°î_m≠
[] = {

38 {0x00000000, 0x00000fff, 
INTEL_RANGE_RW
},

39 {0x00001000, 0x00000fff, 
INTEL_RANGE_RSVD
},

40 {0x00002000, 0x00000fff, 
INTEL_RANGE_RW
},

41 {0x00003000, 0x000001ff, 
INTEL_RANGE_RW
},

42 {0x00003200, 0x00000dff, 
INTEL_RANGE_RW
},

43 {0x00004000, 0x000003ff, 
INTEL_RANGE_RSVD
},

44 {0x00004400, 0x00000bff, 
INTEL_RANGE_RSVD
},

45 {0x00005000, 0x00000fff, 
INTEL_RANGE_RW
},

46 {0x00006000, 0x00000fff, 
INTEL_RANGE_RW
},

47 {0x00007000, 0x000003ff, 
INTEL_RANGE_RW
},

48 {0x00007400, 0x000014ff, 
INTEL_RANGE_RW
},

49 {0x00008900, 0x000006ff, 
INTEL_RANGE_RSVD
},

50 {0x00009000, 0x00000fff, 
INTEL_RANGE_RSVD
},

51 {0x0000a000, 0x00000fff, 
INTEL_RANGE_RW
},

52 {0x0000b000, 0x00004fff, 
INTEL_RANGE_RSVD
},

53 {0x00010000, 0x00003fff, 
INTEL_RANGE_RW
},

54 {0x00014000, 0x0001bfff, 
INTEL_RANGE_RSVD
},

55 {0x00030000, 0x0000ffff, 
INTEL_RANGE_RW
},

56 {0x00040000, 0x0001ffff, 
INTEL_RANGE_RSVD
},

57 {0x00060000, 0x0000ffff, 
INTEL_RANGE_RW
},

58 {0x00070000, 0x00002fff, 
INTEL_RANGE_RW
},

59 {0x00073000, 0x00000fff, 
INTEL_RANGE_RW
},

60 {0x00074000, 0x0000bfff, 
INTEL_RANGE_RSVD
},

61 {0x00000000, 0x00000000, 
INTEL_RANGE_END
}

64 
öãl_ªgi°î_ønge
 
	ggí4_ªgi°î_m≠
[] = {

65 {0x00000000, 0x00000fff, 
INTEL_RANGE_RW
},

66 {0x00001000, 0x00000fff, 
INTEL_RANGE_RSVD
},

67 {0x00002000, 0x00000fff, 
INTEL_RANGE_RW
},

68 {0x00003000, 0x000001ff, 
INTEL_RANGE_RW
},

69 {0x00003200, 0x00000dff, 
INTEL_RANGE_RW
},

70 {0x00004000, 0x000003ff, 
INTEL_RANGE_RW
},

71 {0x00004400, 0x00000bff, 
INTEL_RANGE_RW
},

72 {0x00005000, 0x00000fff, 
INTEL_RANGE_RW
},

73 {0x00006000, 0x00000fff, 
INTEL_RANGE_RW
},

74 {0x00007000, 0x000003ff, 
INTEL_RANGE_RW
},

75 {0x00007400, 0x000014ff, 
INTEL_RANGE_RW
},

76 {0x00008900, 0x000006ff, 
INTEL_RANGE_RSVD
},

77 {0x00009000, 0x00000fff, 
INTEL_RANGE_RSVD
},

78 {0x0000a000, 0x00000fff, 
INTEL_RANGE_RW
},

79 {0x0000b000, 0x00004fff, 
INTEL_RANGE_RSVD
},

80 {0x00010000, 0x00003fff, 
INTEL_RANGE_RW
},

81 {0x00014000, 0x0001bfff, 
INTEL_RANGE_RSVD
},

82 {0x00030000, 0x0000ffff, 
INTEL_RANGE_RW
},

83 {0x00040000, 0x0001ffff, 
INTEL_RANGE_RSVD
},

84 {0x00060000, 0x0000ffff, 
INTEL_RANGE_RW
},

85 {0x00070000, 0x00002fff, 
INTEL_RANGE_RW
},

86 {0x00073000, 0x00000fff, 
INTEL_RANGE_RW
},

87 {0x00074000, 0x0000bfff, 
INTEL_RANGE_RSVD
},

88 {0x00000000, 0x00000000, 
INTEL_RANGE_END
}

92 
öãl_ªgi°î_ønge
 
	ggí6_gt_ªgi°î_m≠
[] = {

93 {0x00000000, 0x00000fff, 
INTEL_RANGE_RW
},

94 {0x00001000, 0x00000fff, 
INTEL_RANGE_RSVD
},

95 {0x00002000, 0x00000fff, 
INTEL_RANGE_RW
},

96 {0x00003000, 0x000001ff, 
INTEL_RANGE_RW
},

97 {0x00003200, 0x00000dff, 
INTEL_RANGE_RW
},

98 {0x00004000, 0x00000fff, 
INTEL_RANGE_RW
},

99 {0x00005000, 0x0000017f, 
INTEL_RANGE_RW
},

100 {0x00005180, 0x00000e7f, 
INTEL_RANGE_RW
},

101 {0x00006000, 0x00001fff, 
INTEL_RANGE_RW
},

102 {0x00008000, 0x000007ff, 
INTEL_RANGE_RW
},

103 {0x00008800, 0x000000ff, 
INTEL_RANGE_RSVD
},

104 {0x00008900, 0x000006ff, 
INTEL_RANGE_RW
},

105 {0x00009000, 0x00000fff, 
INTEL_RANGE_RSVD
},

106 {0x0000a000, 0x00000fff, 
INTEL_RANGE_RW
},

107 {0x0000b000, 0x00004fff, 
INTEL_RANGE_RSVD
},

108 {0x00010000, 0x00001fff, 
INTEL_RANGE_RW
},

109 {0x00012000, 0x000003ff, 
INTEL_RANGE_RW
},

110 {0x00012400, 0x00000bff, 
INTEL_RANGE_RW
},

111 {0x00013000, 0x00000fff, 
INTEL_RANGE_RW
},

112 {0x00014000, 0x00000fff, 
INTEL_RANGE_RW
},

113 {0x00015000, 0x0000cfff, 
INTEL_RANGE_RW
},

114 {0x00022000, 0x00000fff, 
INTEL_RANGE_RW
},

115 {0x00023000, 0x00000fff, 
INTEL_RANGE_RSVD
},

116 {0x00024000, 0x00000fff, 
INTEL_RANGE_RW
},

117 {0x00025000, 0x0000afff, 
INTEL_RANGE_RSVD
},

118 {0x00030000, 0x0000ffff, 
INTEL_RANGE_RW
},

119 {0x00040000, 0x0000ffff, 
INTEL_RANGE_RW
},

120 {0x00050000, 0x0000ffff, 
INTEL_RANGE_RW
},

121 {0x00060000, 0x0000ffff, 
INTEL_RANGE_RW
},

122 {0x00070000, 0x00003fff, 
INTEL_RANGE_RW
},

123 {0x00074000, 0x0008bfff, 
INTEL_RANGE_RSVD
},

124 {0x00100000, 0x00007fff, 
INTEL_RANGE_RW
},

125 {0x00108000, 0x00037fff, 
INTEL_RANGE_RSVD
},

126 {0x00140000, 0x0003ffff, 
INTEL_RANGE_RW
},

127 {0x00000000, 0x00000000, 
INTEL_RANGE_END
}

130 
öãl_ªgi°î_m≠


131 
	$öãl_gë_ªgi°î_m≠
(
uöt32_t
 
devid
)

133 
öãl_ªgi°î_m≠
 
m≠
;

134 c⁄° 
gí
 = 
	`öãl_gí
(
devid
);

136 i‡(
gí
 >= 6) {

137 
m≠
.m≠ = 
gí6_gt_ªgi°î_m≠
;

138 
m≠
.
t›
 = 0x180000;

139 } i‡(
	`IS_BROADWATER
(
devid
Ë|| 
	`IS_CRESTLINE
(devid)) {

140 
m≠
.m≠ = 
gí_bw˛_ªgi°î_m≠
;

141 
m≠
.
t›
 = 0x80000;

142 } i‡(
gí
 >= 4) {

143 
m≠
.m≠ = 
gí4_ªgi°î_m≠
;

144 
m≠
.
t›
 = 0x80000;

146 
	`igt_Áû_⁄
("Gen2/3 RangesáreÇot supported. Please use ""unsafeáccess.");

149 
m≠
.
Æignmít_mask
 = 0x3;

151  
m≠
;

152 
	}
}

154 
öãl_ªgi°î_ønge
 *

155 
	$öãl_gë_ªgi°î_ønge
(
öãl_ªgi°î_m≠
 
m≠
, 
uöt32_t
 
off£t
, uöt32_à
mode
)

157 
öãl_ªgi°î_ønge
 *
ønge
 = 
m≠
.map;

158 
uöt32_t
 
Æign
 = 
m≠
.
Æignmít_mask
;

160 i‡(
off£t
 & 
m≠
.
Æignmít_mask
)

161  
NULL
;

163 i‡(
off£t
 >
m≠
.
t›
)

164  
NULL
;

166 !(
ønge
->
Êags
 & 
INTEL_RANGE_END
)) {

168 i‡(
off£t
 < 
ønge
->
ba£
)

171 i‡–(
off£t
 >
ønge
->
ba£
) &&

172 (
off£t
 + 
Æign
Ë<(
ønge
->
ba£
 +Ñ™ge->
size
)) {

173 i‡((
mode
 & 
ønge
->
Êags
) == mode)

174  
ønge
;

176 
ønge
++;

179  
NULL
;

180 
	}
}

	@ioctl_wrappers.c

29 #ifde‡
HAVE_LIBGEN_H


30 
	~<libgí.h
>

32 
	~<°dio.h
>

33 
	~<f˙é.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/io˘l.h
>

36 
	~<°rög.h
>

37 
	~<sys/mm™.h
>

38 
	~<sig«l.h
>

39 
	~<pcüc˚ss.h
>

40 
	~<gë›t.h
>

41 
	~<°dlib.h
>

42 
	~<uni°d.h
>

43 
	~<sys/waô.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/sysˇŒ.h
>

46 
	~<sys/ut¢ame.h
>

47 
	~<ãrmios.h
>

48 
	~<î∫o.h
>

50 
	~"drmã°.h
"

51 
	~"i915_drm.h
"

52 
	~"öãl_chù£t.h
"

53 
	~"öãl_io.h
"

54 
	~"igt_debugfs.h
"

55 
	~"c⁄fig.h
"

57 #ifde‡
HAVE_VALGRIND


58 
	~<vÆgröd/vÆgröd.h
>

59 
	~<vÆgröd/memcheck.h
>

61 
	#VG
(
x
Ë
	)
x

63 
	#VG
(
x
Ëdÿ{} 0)

	)

66 
	~"io˘l_wøµîs.h
"

87 (*
igt_io˘l
)(
fd
, 
ªque°
, *
¨g
Ë
drmIo˘l
;

102 
drm_öãl_bo
 *

103 
	$gem_h™dÀ_to_libdrm_bo
(
drm_öãl_bufmgr
 *
bufmgr
, 
fd
, c⁄° *
«me
, 
uöt32_t
 
h™dÀ
)

105 
drm_gem_Êök
 
Êök
;

106 
ªt
;

107 
drm_öãl_bo
 *
bo
;

109 
	`mem£t
(&
Êök
, 0, (
h™dÀ
));

110 
Êök
.
h™dÀ
 = handle;

111 
ªt
 = 
	`io˘l
(
fd
, 
DRM_IOCTL_GEM_FLINK
, &
Êök
);

112 
	`igt_as£π
(
ªt
 == 0);

113 
î∫o
 = 0;

115 
bo
 = 
	`drm_öãl_bo_gem_¸óã_‰om_«me
(
bufmgr
, 
«me
, 
Êök
.name);

116 
	`igt_as£π
(
bo
);

118  
bo
;

119 
	}
}

122 
	$__gem_gë_tûög
(
fd
, 
drm_i915_gem_gë_tûög
 *
¨g
)

124 
îr
;

126 
îr
 = 0;

127 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_GET_TILING
, 
¨g
))

128 
îr
 = -
î∫o
;

129 
î∫o
 = 0;

131  
îr
;

132 
	}
}

145 
boﬁ


146 
	$gem_gë_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à*
tûög
, uöt32_à*
swizzÀ
)

148 
drm_i915_gem_gë_tûög
 
gë_tûög
;

150 
	`mem£t
(&
gë_tûög
, 0, (get_tiling));

151 
gë_tûög
.
h™dÀ
 = handle;

153 
	`igt_as£π_eq
(
	`__gem_gë_tûög
(
fd
, &
gë_tûög
), 0);

155 *
tûög
 = 
gë_tûög
.
tûög_mode
;

156 *
swizzÀ
 = 
gë_tûög
.
swizzÀ_mode
;

158  
gë_tûög
.
phys_swizzÀ_mode
 =gë_tûög.
swizzÀ_mode
;

159 
	}
}

161 
	$__gem_£t_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
tûög
, uöt32_à
°ride
)

163 
drm_i915_gem_£t_tûög
 
°
;

164 
ªt
;

167 i‡(
tûög
 =
I915_TILING_Yf
 ||Åûög =
I915_TILING_Ys
)

168 
tûög
 = 
I915_TILING_NONE
;

170 
	`mem£t
(&
°
, 0, (st));

172 
°
.
h™dÀ
 = handle;

173 
°
.
tûög_mode
 = 
tûög
;

174 
°
.
°ride
 = 
tûög
 ? stride : 0;

176 
ªt
 = 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_SET_TILING
, &
°
);

177 } 
ªt
 =-1 && (
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
));

178 i‡(
ªt
 != 0)

179  -
î∫o
;

181 
î∫o
 = 0;

182 
	`igt_as£π
(
°
.
tûög_mode
 =
tûög
);

184 
	}
}

195 
	$gem_£t_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
tûög
, uöt32_à
°ride
)

197 
	`igt_as£π
(
	`__gem_£t_tûög
(
fd
, 
h™dÀ
, 
tûög
, 
°ride
) == 0);

198 
	}
}

200 
	sloˇl_drm_i915_gem_ˇchög
 {

201 
uöt32_t
 
	mh™dÀ
;

202 
uöt32_t
 
	mˇchög
;

205 
	#LOCAL_DRM_I915_GEM_SET_CACHEING
 0x2f

	)

206 
	#LOCAL_DRM_I915_GEM_GET_CACHEING
 0x30

	)

207 
	#LOCAL_DRM_IOCTL_I915_GEM_SET_CACHEING
 \

208 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
LOCAL_DRM_I915_GEM_SET_CACHEING
, 
loˇl_drm_i915_gem_ˇchög
)

	)

209 
	#LOCAL_DRM_IOCTL_I915_GEM_GET_CACHEING
 \

210 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
LOCAL_DRM_I915_GEM_GET_CACHEING
, 
loˇl_drm_i915_gem_ˇchög
)

	)

212 
	$__gem_£t_ˇchög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ˇchög
)

214 
loˇl_drm_i915_gem_ˇchög
 
¨g
;

215 
îr
;

217 
	`mem£t
(&
¨g
, 0, (arg));

218 
¨g
.
h™dÀ
 = handle;

219 
¨g
.
ˇchög
 = caching;

221 
îr
 = 0;

222 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_DRM_IOCTL_I915_GEM_SET_CACHEING
, &
¨g
)) {

223 
îr
 = -
î∫o
;

224 
	`igt_as£π
(
î∫o
 =
ENOTTY
 ||Éºnÿ=
EINVAL
);

226  
îr
;

227 
	}
}

240 
	$gem_£t_ˇchög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ˇchög
)

242 
	`igt_ªquúe
(
	`__gem_£t_ˇchög
(
fd
, 
h™dÀ
, 
ˇchög
) == 0);

243 
î∫o
 = 0;

244 
	}
}

255 
uöt32_t
 
	$gem_gë_ˇchög
(
fd
, 
uöt32_t
 
h™dÀ
)

257 
loˇl_drm_i915_gem_ˇchög
 
¨g
;

258 
ªt
;

260 
	`mem£t
(&
¨g
, 0, (arg));

261 
¨g
.
h™dÀ
 = handle;

262 
ªt
 = 
	`io˘l
(
fd
, 
LOCAL_DRM_IOCTL_I915_GEM_GET_CACHEING
, &
¨g
);

263 
	`igt_as£π
(
ªt
 == 0);

264 
î∫o
 = 0;

266  
¨g
.
ˇchög
;

267 
	}
}

278 
uöt32_t
 
	$gem_›í
(
fd
, 
uöt32_t
 
«me
)

280 
drm_gem_›í
 
›í_°ru˘
;

281 
ªt
;

283 
	`mem£t
(&
›í_°ru˘
, 0, (open_struct));

284 
›í_°ru˘
.
«me
 =Çame;

285 
ªt
 = 
	`io˘l
(
fd
, 
DRM_IOCTL_GEM_OPEN
, &
›í_°ru˘
);

286 
	`igt_as£π
(
ªt
 == 0);

287 
	`igt_as£π
(
›í_°ru˘
.
h™dÀ
 != 0);

288 
î∫o
 = 0;

290  
›í_°ru˘
.
h™dÀ
;

291 
	}
}

304 
uöt32_t
 
	$gem_Êök
(
fd
, 
uöt32_t
 
h™dÀ
)

306 
drm_gem_Êök
 
Êök
;

307 
ªt
;

309 
	`mem£t
(&
Êök
, 0, (flink));

310 
Êök
.
h™dÀ
 = handle;

311 
ªt
 = 
	`io˘l
(
fd
, 
DRM_IOCTL_GEM_FLINK
, &
Êök
);

312 
	`igt_as£π
(
ªt
 == 0);

313 
î∫o
 = 0;

315  
Êök
.
«me
;

316 
	}
}

326 
	$gem_˛o£
(
fd
, 
uöt32_t
 
h™dÀ
)

328 
drm_gem_˛o£
 
˛o£_bo
;

330 
	`igt_as£π_√q
(
h™dÀ
, 0);

332 
	`mem£t
(&
˛o£_bo
, 0, (close_bo));

333 
˛o£_bo
.
h™dÀ
 = handle;

334 
	`do_io˘l
(
fd
, 
DRM_IOCTL_GEM_CLOSE
, &
˛o£_bo
);

335 
	}
}

337 
	$__gem_wrôe
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, c⁄° *
buf
, uöt64_à
Àngth
)

339 
drm_i915_gem_pwrôe
 
gem_pwrôe
;

340 
îr
;

342 
	`mem£t
(&
gem_pwrôe
, 0, (gem_pwrite));

343 
gem_pwrôe
.
h™dÀ
 = handle;

344 
gem_pwrôe
.
off£t
 = offset;

345 
gem_pwrôe
.
size
 = 
Àngth
;

346 
gem_pwrôe
.
d©a_±r
 = 
	`to_u£r_poöãr
(
buf
);

348 
îr
 = 0;

349 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_I915_GEM_PWRITE
, &
gem_pwrôe
))

350 
îr
 = -
î∫o
;

351  
îr
;

352 
	}
}

365 
	$gem_wrôe
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, c⁄° *
buf
, uöt64_à
Àngth
)

367 
	`igt_as£π_eq
(
	`__gem_wrôe
(
fd
, 
h™dÀ
, 
off£t
, 
buf
, 
Àngth
), 0);

368 
	}
}

370 
	$__gem_ªad
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, *
buf
, uöt64_à
Àngth
)

372 
drm_i915_gem_¥ód
 
gem_¥ód
;

373 
îr
;

375 
	`mem£t
(&
gem_¥ód
, 0, (gem_pread));

376 
gem_¥ód
.
h™dÀ
 = handle;

377 
gem_¥ód
.
off£t
 = offset;

378 
gem_¥ód
.
size
 = 
Àngth
;

379 
gem_¥ód
.
d©a_±r
 = 
	`to_u£r_poöãr
(
buf
);

381 
îr
 = 0;

382 i‡(
	`drmIo˘l
(
fd
, 
DRM_IOCTL_I915_GEM_PREAD
, &
gem_¥ód
))

383 
îr
 = -
î∫o
;

384  
îr
;

385 
	}
}

397 
	$gem_ªad
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, *
buf
, uöt64_à
Àngth
)

399 
	`igt_as£π_eq
(
	`__gem_ªad
(
fd
, 
h™dÀ
, 
off£t
, 
buf
, 
Àngth
), 0);

400 
	}
}

402 
	$__gem_£t_domaö
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ªad
, uöt32_à
wrôe
)

404 
drm_i915_gem_£t_domaö
 
£t_domaö
;

405 
îr
;

407 
	`mem£t
(&
£t_domaö
, 0, (set_domain));

408 
£t_domaö
.
h™dÀ
 = handle;

409 
£t_domaö
.
ªad_domaös
 = 
ªad
;

410 
£t_domaö
.
wrôe_domaö
 = 
wrôe
;

412 
îr
 = 0;

413 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_SET_DOMAIN
, &
£t_domaö
))

414 
îr
 = -
î∫o
;

416  
îr
;

417 
	}
}

431 
	$gem_£t_domaö
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ªad
, uöt32_à
wrôe
)

433 
	`igt_as£π_eq
(
	`__gem_£t_domaö
(
fd
, 
h™dÀ
, 
ªad
, 
wrôe
), 0);

434 
	}
}

446 
	$gem_waô
(
fd
, 
uöt32_t
 
h™dÀ
, 
öt64_t
 *
timeout_ns
)

448 
drm_i915_gem_waô
 
waô
;

449 
ªt
;

451 
	`mem£t
(&
waô
, 0, (wait));

452 
waô
.
bo_h™dÀ
 = 
h™dÀ
;

453 
waô
.
timeout_ns
 =Åimeout_ns ? *timeout_ns : -1;

454 
waô
.
Êags
 = 0;

456 
ªt
 = 0;

457 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_WAIT
, &
waô
))

458 
ªt
 = -
î∫o
;

460 i‡(
timeout_ns
)

461 *
timeout_ns
 = 
waô
.timeout_ns;

463  
ªt
;

464 
	}
}

473 
	$gem_sync
(
fd
, 
uöt32_t
 
h™dÀ
)

475 i‡(
	`gem_waô
(
fd
, 
h™dÀ
, 
NULL
))

476 
	`gem_£t_domaö
(
fd
, 
h™dÀ
,

477 
I915_GEM_DOMAIN_GTT
,

478 
I915_GEM_DOMAIN_GTT
);

479 
î∫o
 = 0;

480 
	}
}

483 
boﬁ
 
	$gem_¸óã__has_°ﬁí_suµ‹t
(
fd
)

485 
has_°ﬁí_suµ‹t
 = -1;

486 
drm_i915_gë∑øm
 
gp
;

487 
vÆ
 = -1;

489 i‡(
has_°ﬁí_suµ‹t
 < 0) {

490 
	`mem£t
(&
gp
, 0, (gp));

491 
gp
.
∑øm
 = 38;

492 
gp
.
vÆue
 = &
vÆ
;

495 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
);

496 
has_°ﬁí_suµ‹t
 = 
vÆ
 >= 2;

499  
has_°ﬁí_suµ‹t
;

500 
	}
}

502 
	sloˇl_i915_gem_¸óã_v2
 {

503 
uöt64_t
 
	msize
;

504 
uöt32_t
 
	mh™dÀ
;

505 
uöt32_t
 
	m∑d
;

506 
	#I915_CREATE_PLACEMENT_STOLEN
 (1<<0)

	)

507 
uöt32_t
 
	mÊags
;

510 
	#LOCAL_IOCTL_I915_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CREATE
, 
loˇl_i915_gem_¸óã_v2
)

	)

511 
uöt32_t
 
	$__gem_¸óã_°ﬁí
(
fd
, 
uöt64_t
 
size
)

513 
loˇl_i915_gem_¸óã_v2
 
¸óã
;

514 
ªt
;

516 
	`mem£t
(&
¸óã
, 0, (create));

517 
¸óã
.
h™dÀ
 = 0;

518 
¸óã
.
size
 = size;

519 
¸óã
.
Êags
 = 
I915_CREATE_PLACEMENT_STOLEN
;

520 
ªt
 = 
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CREATE
, &
¸óã
);

522 i‡(
ªt
 < 0)

525 
î∫o
 = 0;

526  
¸óã
.
h™dÀ
;

527 
	}
}

540 
uöt32_t
 
	$gem_¸óã_°ﬁí
(
fd
, 
uöt64_t
 
size
)

542 
loˇl_i915_gem_¸óã_v2
 
¸óã
;

544 
	`mem£t
(&
¸óã
, 0, (create));

545 
¸óã
.
h™dÀ
 = 0;

546 
¸óã
.
size
 = size;

547 
¸óã
.
Êags
 = 
I915_CREATE_PLACEMENT_STOLEN
;

548 
	`do_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_CREATE
, &
¸óã
);

549 
	`igt_as£π
(
¸óã
.
h™dÀ
);

551  
¸óã
.
h™dÀ
;

552 
	}
}

554 
	$__gem_¸óã
(
fd
, 
uöt64_t
 
size
, 
uöt32_t
 *
h™dÀ
)

556 
drm_i915_gem_¸óã
 
¸óã
 = {

557 .
size
 = size,

559 
îr
 = 0;

561 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_CREATE
, &
¸óã
) == 0)

562 *
h™dÀ
 = 
¸óã
.handle;

564 
îr
 = -
î∫o
;

566 
î∫o
 = 0;

567  
îr
;

568 
	}
}

580 
uöt32_t
 
	$gem_¸óã
(
fd
, 
uöt64_t
 
size
)

582 
uöt32_t
 
h™dÀ
;

584 
	`igt_as£π_eq
(
	`__gem_¸óã
(
fd
, 
size
, &
h™dÀ
), 0);

586  
h™dÀ
;

587 
	}
}

597 
	$__gem_execbuf
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
)

599 
îr
 = 0;

600 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_EXECBUFFER2
, 
execbuf
))

601 
îr
 = -
î∫o
;

602 
î∫o
 = 0;

603  
îr
;

604 
	}
}

614 
	$gem_execbuf
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
)

616 
	`igt_as£π_eq
(
	`__gem_execbuf
(
fd
, 
execbuf
), 0);

617 
	}
}

619 
	#LOCAL_IOCTL_I915_GEM_EXECBUFFER2_WR
 \

620 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_EXECBUFFER2
, 
drm_i915_gem_execbuf„r2
)

	)

630 
	$__gem_execbuf_wr
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
)

632 
îr
 = 0;

633 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_EXECBUFFER2_WR
, 
execbuf
))

634 
îr
 = -
î∫o
;

635 
î∫o
 = 0;

636  
îr
;

637 
	}
}

647 
	$gem_execbuf_wr
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
)

649 
	`igt_as£π_eq
(
	`__gem_execbuf_wr
(
fd
, 
execbuf
), 0);

650 
	}
}

664 *
	$__gem_mm≠__gâ
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
, 
¥Ÿ
)

666 
drm_i915_gem_mm≠_gâ
 
mm≠_¨g
;

667 *
±r
;

669 
	`mem£t
(&
mm≠_¨g
, 0, (mmap_arg));

670 
mm≠_¨g
.
h™dÀ
 = handle;

671 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_MMAP_GTT
, &
mm≠_¨g
))

672  
NULL
;

674 
±r
 = 
	`mm≠64
(0, 
size
, 
¥Ÿ
, 
MAP_SHARED
, 
fd
, 
mm≠_¨g
.
off£t
);

675 i‡(
±r
 =
MAP_FAILED
)

676 
±r
 = 
NULL
;

678 
î∫o
 = 0;

680 
	`VG
(
	`VALGRIND_MAKE_MEM_DEFINED
(
±r
, 
size
));

682  
±r
;

683 
	}
}

696 *
	$gem_mm≠__gâ
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
, 
¥Ÿ
)

698 *
±r
 = 
	`__gem_mm≠__gâ
(
fd
, 
h™dÀ
, 
size
, 
¥Ÿ
);

699 
	`igt_as£π
(
±r
);

700  
±r
;

701 
	}
}

703 
	$gem_munm≠
(*
±r
, 
uöt64_t
 
size
)

705 
ªt
 = 
	`munm≠
(
±r
, 
size
);

707 i‡(
ªt
 == 0)

708 
	`VG
(
	`VALGRIND_MAKE_MEM_NOACCESS
(
±r
, 
size
));

710  
ªt
;

711 
	}
}

713 
	sloˇl_i915_gem_mm≠_v2
 {

714 
uöt32_t
 
	mh™dÀ
;

715 
uöt32_t
 
	m∑d
;

716 
uöt64_t
 
	moff£t
;

717 
uöt64_t
 
	msize
;

718 
uöt64_t
 
	maddr_±r
;

719 
uöt64_t
 
	mÊags
;

720 
	#I915_MMAP_WC
 0x1

	)

722 
	#LOCAL_IOCTL_I915_GEM_MMAP_v2
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_MMAP
, 
loˇl_i915_gem_mm≠_v2
)

	)

724 
boﬁ
 
	$gem_mm≠__has_wc
(
fd
)

726 
has_wc
 = -1;

728 i‡(
has_wc
 == -1) {

729 
drm_i915_gë∑øm
 
gp
;

730 
mm≠_vîsi⁄
 = -1;

731 
gâ_vîsi⁄
 = -1;

733 
has_wc
 = 0;

735 
	`mem£t
(&
gp
, 0, (gp));

736 
gp
.
∑øm
 = 40;

737 
gp
.
vÆue
 = &
gâ_vîsi⁄
;

738 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
);

740 
	`mem£t
(&
gp
, 0, (gp));

741 
gp
.
∑øm
 = 30;

742 
gp
.
vÆue
 = &
mm≠_vîsi⁄
;

743 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
);

746 i‡(
mm≠_vîsi⁄
 >1 && 
gâ_vîsi⁄
 >= 2) {

747 
loˇl_i915_gem_mm≠_v2
 
¨g
;

750 
	`mem£t
(&
¨g
, 0, (arg));

751 
¨g
.
h™dÀ
 = 
	`gem_¸óã
(
fd
, 4096);

752 
¨g
.
off£t
 = 0;

753 
¨g
.
size
 = 4096;

754 
¨g
.
Êags
 = 
I915_MMAP_WC
;

755 
has_wc
 = 
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_MMAP_v2
, &
¨g
) == 0;

756 
	`gem_˛o£
(
fd
, 
¨g
.
h™dÀ
);

758 
î∫o
 = 0;

761  
has_wc
 > 0;

762 
	}
}

779 *
	$__gem_mm≠__wc
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
)

781 
loˇl_i915_gem_mm≠_v2
 
¨g
;

783 i‡(!
	`gem_mm≠__has_wc
(
fd
)) {

784 
î∫o
 = 
ENOSYS
;

785  
NULL
;

788 
	`mem£t
(&
¨g
, 0, (arg));

789 
¨g
.
h™dÀ
 = handle;

790 
¨g
.
off£t
 = offset;

791 
¨g
.
size
 = size;

792 
¨g
.
Êags
 = 
I915_MMAP_WC
;

793 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_MMAP_v2
, &
¨g
))

794  
NULL
;

796 
	`VG
(
	`VALGRIND_MAKE_MEM_DEFINED
(
	`‰om_u£r_poöãr
(
¨g
.
addr_±r
),árg.
size
));

798 
î∫o
 = 0;

799  
	`‰om_u£r_poöãr
(
¨g
.
addr_±r
);

800 
	}
}

814 *
	$gem_mm≠__wc
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
)

816 *
±r
 = 
	`__gem_mm≠__wc
(
fd
, 
h™dÀ
, 
off£t
, 
size
, 
¥Ÿ
);

817 
	`igt_as£π
(
±r
);

818  
±r
;

819 
	}
}

834 *
	$__gem_mm≠__˝u
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
)

836 
drm_i915_gem_mm≠
 
mm≠_¨g
;

838 
	`mem£t
(&
mm≠_¨g
, 0, (mmap_arg));

839 
mm≠_¨g
.
h™dÀ
 = handle;

840 
mm≠_¨g
.
off£t
 = offset;

841 
mm≠_¨g
.
size
 = size;

842 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_MMAP
, &
mm≠_¨g
))

843  
NULL
;

845 
	`VG
(
	`VALGRIND_MAKE_MEM_DEFINED
(
	`‰om_u£r_poöãr
(
mm≠_¨g
.
addr_±r
), mm≠_¨g.
size
));

847 
î∫o
 = 0;

848  
	`‰om_u£r_poöãr
(
mm≠_¨g
.
addr_±r
);

849 
	}
}

863 *
	$gem_mm≠__˝u
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
)

865 *
±r
 = 
	`__gem_mm≠__˝u
(
fd
, 
h™dÀ
, 
off£t
, 
size
, 
¥Ÿ
);

866 
	`igt_as£π
(
±r
);

867  
±r
;

868 
	}
}

884 
	$gem_madvi£
(
fd
, 
uöt32_t
 
h™dÀ
, 
°©e
)

886 
drm_i915_gem_madvi£
 
madv
;

888 
	`mem£t
(&
madv
, 0, (madv));

889 
madv
.
h™dÀ
 = handle;

890 
madv
.madv = 
°©e
;

891 
madv
.
ªèöed
 = 1;

892 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_MADVISE
, &
madv
);

894  
madv
.
ªèöed
;

895 
	}
}

897 
	$__gem_u£Ωå
(
fd
, *
±r
, 
size
, 
ªad_⁄ly
, 
uöt32_t
 
Êags
, uöt32_à*
h™dÀ
)

899 
loˇl_i915_gem_u£Ωå
 
u£Ωå
;

901 
	`mem£t
(&
u£Ωå
, 0, (userptr));

902 
u£Ωå
.
u£r_±r
 = 
	`to_u£r_poöãr
(
±r
);

903 
u£Ωå
.
u£r_size
 = 
size
;

904 
u£Ωå
.
Êags
 = flags;

905 i‡(
ªad_⁄ly
)

906 
u£Ωå
.
Êags
 |
LOCAL_I915_USERPTR_READ_ONLY
;

908 i‡(
	`igt_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_USERPTR
, &
u£Ωå
))

909  -
î∫o
;

911 *
h™dÀ
 = 
u£Ωå
.handle;

913 
	}
}

926 
	$gem_u£Ωå
(
fd
, *
±r
, 
size
, 
ªad_⁄ly
, 
uöt32_t
 
Êags
, uöt32_à*
h™dÀ
)

928 
	`igt_as£π_eq
(
	`__gem_u£Ωå
(
fd
, 
±r
, 
size
, 
ªad_⁄ly
, 
Êags
, 
h™dÀ
), 0);

929 
	}
}

940 
	$gem_sw_föish
(
fd
, 
uöt32_t
 
h™dÀ
)

942 
drm_i915_gem_sw_föish
 
föish
;

944 
	`mem£t
(&
föish
, 0, (finish));

945 
föish
.
h™dÀ
 = handle;

947 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_SW_FINISH
, &
föish
);

948 
	}
}

960 
boﬁ
 
	$gem_bo_busy
(
fd
, 
uöt32_t
 
h™dÀ
)

962 
drm_i915_gem_busy
 
busy
;

964 
	`mem£t
(&
busy
, 0, (busy));

965 
busy
.
h™dÀ
 = handle;

967 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_BUSY
, &
busy
);

969  !!
busy
.busy;

970 
	}
}

987 
	$gem_gâ_ty≥
(
fd
)

989 
drm_i915_gë∑øm
 
gp
;

990 
vÆ
 = 0;

992 
	`mem£t
(&
gp
, 0, (gp));

993 
gp
.
∑øm
 = 18;

994 
gp
.
vÆue
 = &
vÆ
;

996 i‡(
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp)))

999 
î∫o
 = 0;

1000  
vÆ
;

1001 
	}
}

1012 
boﬁ
 
	$gem_u£s_µgâ
(
fd
)

1014  
	`gem_gâ_ty≥
(
fd
) > 0;

1015 
	}
}

1027 
boﬁ
 
	$gem_u£s_fuŒ_µgâ
(
fd
)

1029  
	`gem_gâ_ty≥
(
fd
) > 1;

1030 
	}
}

1041 
	$gem_gpu_ª£t_ty≥
(
fd
)

1043 
drm_i915_gë∑øm
 
gp
;

1044 
gpu_ª£t_ty≥
 = -1;

1046 
	`mem£t
(&
gp
, 0, (gp));

1047 
gp
.
∑øm
 = 
I915_PARAM_HAS_GPU_RESET
;

1048 
gp
.
vÆue
 = &
gpu_ª£t_ty≥
;

1049 
	`drmIo˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
);

1051  
gpu_ª£t_ty≥
;

1052 
	}
}

1064 
boﬁ
 
	$gem_gpu_ª£t_íabÀd
(
fd
)

1066  
	`gem_gpu_ª£t_ty≥
(
fd
) > 0;

1067 
	}
}

1078 
boﬁ
 
	$gem_ígöe_ª£t_íabÀd
(
fd
)

1080  
	`gem_gpu_ª£t_ty≥
(
fd
) > 1;

1081 
	}
}

1092 
	$gem_avaûabÀ_„n˚s
(
fd
)

1094 
num_„n˚s
 = -1;

1096 i‡(
num_„n˚s
 < 0) {

1097 
drm_i915_gë∑øm
 
gp
;

1099 
	`mem£t
(&
gp
, 0, (gp));

1100 
gp
.
∑øm
 = 
I915_PARAM_NUM_FENCES_AVAIL
;

1101 
gp
.
vÆue
 = &
num_„n˚s
;

1103 
num_„n˚s
 = 0;

1104 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp));

1105 
î∫o
 = 0;

1108  
num_„n˚s
;

1109 
	}
}

1111 
boﬁ
 
	$gem_has_Œc
(
fd
)

1113 
has_Œc
 = -1;

1115 i‡(
has_Œc
 < 0) {

1116 
drm_i915_gë∑øm
 
gp
;

1118 
	`mem£t
(&
gp
, 0, (gp));

1119 
gp
.
∑øm
 = 
I915_PARAM_HAS_LLC
;

1120 
gp
.
vÆue
 = &
has_Œc
;

1122 
has_Œc
 = 0;

1123 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp));

1124 
î∫o
 = 0;

1127  
has_Œc
;

1128 
	}
}

1130 
boﬁ
 
	$has_∑øm
(
fd
, 
∑øm
)

1132 
drm_i915_gë∑øm_t
 
gp
;

1133 
tmp
 = 0;

1135 
	`mem£t
(&
gp
, 0, (gp));

1136 
gp
.
vÆue
 = &
tmp
;

1137 
gp
.
∑øm
 =Öaram;

1139 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
))

1140  
Ál£
;

1142 
î∫o
 = 0;

1143  
tmp
 > 0;

1144 
	}
}

1156 
boﬁ
 
	$gem_has_bsd
(
fd
)

1158 
has_bsd
 = -1;

1159 i‡(
has_bsd
 < 0)

1160 
has_bsd
 = 
	`has_∑øm
(
fd
, 
I915_PARAM_HAS_BSD
);

1161  
has_bsd
;

1162 
	}
}

1174 
boﬁ
 
	$gem_has_b…
(
fd
)

1176 
has_b…
 = -1;

1177 i‡(
has_b…
 < 0)

1178 
has_b…
 = 
	`has_∑øm
(
fd
, 
I915_PARAM_HAS_BLT
);

1179  
has_b…
;

1180 
	}
}

1182 
	#LOCAL_I915_PARAM_HAS_VEBOX
 22

	)

1194 
boﬁ
 
	$gem_has_vebox
(
fd
)

1196 
has_vebox
 = -1;

1197 i‡(
has_vebox
 < 0)

1198 
has_vebox
 = 
	`has_∑øm
(
fd
, 
LOCAL_I915_PARAM_HAS_VEBOX
);

1199  
has_vebox
;

1200 
	}
}

1202 
	#LOCAL_I915_PARAM_HAS_BSD2
 31

	)

1213 
boﬁ
 
	$gem_has_bsd2
(
fd
)

1215 
has_bsd2
 = -1;

1216 i‡(
has_bsd2
 < 0)

1217 
has_bsd2
 = 
	`has_∑øm
(
fd
, 
LOCAL_I915_PARAM_HAS_BSD2
);

1218  
has_bsd2
;

1219 
	}
}

1221 
	sloˇl_i915_gem_gë_≠îtuª
 {

1222 
__u64
 
	m≠î_size
;

1223 
__u64
 
	m≠î_avaûabÀ_size
;

1224 
__u64
 
	mvîsi⁄
;

1225 
__u64
 
	mm≠_tŸÆ_size
;

1226 
__u64
 
	m°ﬁí_tŸÆ_size
;

1228 
	#DRM_I915_GEM_GET_APERTURE
 0x23

	)

1229 
	#LOCAL_IOCTL_I915_GEM_GET_APERTURE
 
	`DRM_IOR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_GET_APERTURE
, 
loˇl_i915_gem_gë_≠îtuª
)

	)

1238 
uöt64_t
 
	$gem_tŸÆ_m≠∑bÀ_size
(
fd
)

1240 
loˇl_i915_gem_gë_≠îtuª
 
≠îtuª
;

1242 
	`mem£t
(&
≠îtuª
, 0, (aperture));

1243 
	`do_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_GET_APERTURE
, &
≠îtuª
);

1245  
≠îtuª
.
m≠_tŸÆ_size
;

1246 
	}
}

1256 
uöt64_t
 
	$gem_tŸÆ_°ﬁí_size
(
fd
)

1258 
loˇl_i915_gem_gë_≠îtuª
 
≠îtuª
;

1260 
	`mem£t
(&
≠îtuª
, 0, (aperture));

1261 
	`do_io˘l
(
fd
, 
LOCAL_IOCTL_I915_GEM_GET_APERTURE
, &
≠îtuª
);

1263  
≠îtuª
.
°ﬁí_tŸÆ_size
;

1264 
	}
}

1275 
uöt64_t
 
	$gem_avaûabÀ_≠îtuª_size
(
fd
)

1277 
drm_i915_gem_gë_≠îtuª
 
≠îtuª
;

1279 
	`mem£t
(&
≠îtuª
, 0, (aperture));

1280 
≠îtuª
.
≠î_size
 = 256*1024*1024;

1281 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_GET_APERTURE
, &
≠îtuª
);

1283  
≠îtuª
.
≠î_avaûabÀ_size
;

1284 
	}
}

1294 
uöt64_t
 
	$gem_≠îtuª_size
(
fd
)

1296 
uöt64_t
 
≠îtuª_size
 = 0;

1298 i‡(
≠îtuª_size
 == 0) {

1299 
loˇl_i915_gem_c⁄ãxt_∑øm
 
p
;

1301 
	`mem£t
(&
p
, 0, (p));

1302 
p
.
∑øm
 = 0x3;

1303 i‡(
	`__gem_c⁄ãxt_gë_∑øm
(
fd
, &
p
) == 0) {

1304 
≠îtuª_size
 = 
p
.
vÆue
;

1306 
drm_i915_gem_gë_≠îtuª
 
≠îtuª
;

1308 
	`mem£t
(&
≠îtuª
, 0, (aperture));

1309 
≠îtuª
.
≠î_size
 = 256*1024*1024;

1311 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_GET_APERTURE
, &
≠îtuª
);

1312 
≠îtuª_size
 = 
≠îtuª
.
≠î_size
;

1316  
≠îtuª_size
;

1317 
	}
}

1327 
uöt64_t
 
	$gem_m≠∑bÀ_≠îtuª_size
()

1329 
pci_devi˚
 *
pci_dev
 = 
	`öãl_gë_pci_devi˚
();

1330 
b¨
;

1332 i‡(
	`öãl_gí
(
pci_dev
->
devi˚_id
) < 3)

1333 
b¨
 = 0;

1335 
b¨
 = 2;

1337  
pci_dev
->
ªgi⁄s
[
b¨
].
size
;

1338 
	}
}

1349 
uöt64_t
 
	$gem_globÆ_≠îtuª_size
(
fd
)

1351 
drm_i915_gem_gë_≠îtuª
 
≠îtuª
;

1353 
	`mem£t
(&
≠îtuª
, 0, (aperture));

1354 
≠îtuª
.
≠î_size
 = 256*1024*1024;

1355 
	`do_io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_GET_APERTURE
, &
≠îtuª
);

1357  
≠îtuª
.
≠î_size
;

1358 
	}
}

1360 
	#LOCAL_I915_PARAM_HAS_EXEC_SOFTPIN
 37

	)

1370 
boﬁ
 
	$gem_has_so·pö
(
fd
)

1372 
has_so·pö
 = -1;

1374 i‡(
has_so·pö
 < 0) {

1375 
drm_i915_gë∑øm
 
gp
;

1377 
	`mem£t
(&
gp
, 0, (gp));

1378 
gp
.
∑øm
 = 
LOCAL_I915_PARAM_HAS_EXEC_SOFTPIN
;

1379 
gp
.
vÆue
 = &
has_so·pö
;

1381 
has_so·pö
 = 0;

1382 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp));

1383 
î∫o
 = 0;

1386  
has_so·pö
;

1387 
	}
}

1389 
	#LOCAL_PARAM_HAS_EXEC_FENCE
 44

	)

1399 
boﬁ
 
	$gem_has_exec_„n˚
(
fd
)

1401 
has_exec_„n˚
 = -1;

1403 i‡(
has_exec_„n˚
 < 0) {

1404 
drm_i915_gë∑øm
 
gp
;

1406 
	`mem£t
(&
gp
, 0, (gp));

1407 
gp
.
∑øm
 = 
LOCAL_PARAM_HAS_EXEC_FENCE
;

1408 
gp
.
vÆue
 = &
has_exec_„n˚
;

1410 
has_exec_„n˚
 = 0;

1411 
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GETPARAM
, &
gp
, (gp));

1412 
î∫o
 = 0;

1415  
has_exec_„n˚
;

1416 
	}
}

1425 
	$gem_ªquúe_ˇchög
(
fd
)

1427 
uöt32_t
 
h™dÀ
;

1429 
h™dÀ
 = 
	`gem_¸óã
(
fd
, 4096);

1430 
	`gem_£t_ˇchög
(
fd
, 
h™dÀ
, 0);

1431 
	`gem_˛o£
(
fd
, 
h™dÀ
);

1433 
î∫o
 = 0;

1434 
	}
}

1436 
	$igt_ªquúe_gem
(
fd
)

1438 
∑th
[256];

1439 
îr
;

1441 
	`igt_ªquúe_öãl
(
fd
);

1447 
	`¢¥ötf
(
∑th
, ’©h), "/¥oc/£lf/fd/%d", 
fd
);

1448 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
);

1449 
	`igt_as£π_…e
(0, 
fd
);

1451 
îr
 = 0;

1452 i‡(
	`io˘l
(
fd
, 
DRM_IOCTL_I915_GEM_THROTTLE
))

1453 
îr
 = -
î∫o
;

1454 
	`˛o£
(
fd
);

1456 
	`igt_ªquúe_f
(
îr
 == 0, "Unresponsive i915/GEM device\n");

1457 
	}
}

1459 
boﬁ
 
	$gem_has_rög
(
fd
, 
rög
)

1461 
drm_i915_gem_execbuf„r2
 
execbuf
;

1462 
drm_i915_gem_exec_obje˘2
 
exec
;

1465 i‡((
rög
 & ~(3<<13)Ë=
I915_EXEC_BSD
) {

1466 i‡(
rög
 & (3 << 13Ë&& !
	`gem_has_bsd2
(
fd
))

1467  
Ál£
;

1470 
	`mem£t
(&
exec
, 0, (exec));

1471 
	`mem£t
(&
execbuf
, 0, (execbuf));

1472 
execbuf
.
buf„rs_±r
 = 
	`to_u£r_poöãr
(&
exec
);

1473 
execbuf
.
buf„r_cou¡
 = 1;

1474 
execbuf
.
Êags
 = 
rög
;

1475  
	`__gem_execbuf
(
fd
, &
execbuf
Ë=-
ENOENT
;

1476 
	}
}

1487 
	$gem_ªquúe_rög
(
fd
, 
rög
)

1489 
	`igt_ªquúe
(
	`gem_has_rög
(
fd
, 
rög
));

1490 
	}
}

1499 
boﬁ
 
	$gem_has_mocs_ªgi°îs
(
fd
)

1501  
	`öãl_gí
(
	`öãl_gë_drm_devid
(
fd
)) >= 9;

1502 
	}
}

1511 
	$gem_ªquúe_mocs_ªgi°îs
(
fd
)

1513 
	`igt_ªquúe
(
	`gem_has_mocs_ªgi°îs
(
fd
));

1514 
	}
}

1529 
	$¥ime_h™dÀ_to_fd
(
fd
, 
uöt32_t
 
h™dÀ
)

1531 
drm_¥ime_h™dÀ
 
¨gs
;

1533 
	`mem£t
(&
¨gs
, 0, (args));

1534 
¨gs
.
h™dÀ
 = handle;

1535 
¨gs
.
Êags
 = 
DRM_CLOEXEC
;

1536 
¨gs
.
fd
 = -1;

1538 
	`do_io˘l
(
fd
, 
DRM_IOCTL_PRIME_HANDLE_TO_FD
, &
¨gs
);

1540  
¨gs
.
fd
;

1541 
	}
}

1553 
	$¥ime_h™dÀ_to_fd_f‹_mm≠
(
fd
, 
uöt32_t
 
h™dÀ
)

1555 
drm_¥ime_h™dÀ
 
¨gs
;

1557 
	`mem£t
(&
¨gs
, 0, (args));

1558 
¨gs
.
h™dÀ
 = handle;

1559 
¨gs
.
Êags
 = 
DRM_CLOEXEC
 | 
DRM_RDWR
;

1560 
¨gs
.
fd
 = -1;

1562 i‡(
	`igt_io˘l
(
fd
, 
DRM_IOCTL_PRIME_HANDLE_TO_FD
, &
¨gs
) != 0)

1565  
¨gs
.
fd
;

1566 
	}
}

1578 
uöt32_t
 
	$¥ime_fd_to_h™dÀ
(
fd
, 
dma_buf_fd
)

1580 
drm_¥ime_h™dÀ
 
¨gs
;

1582 
	`mem£t
(&
¨gs
, 0, (args));

1583 
¨gs
.
fd
 = 
dma_buf_fd
;

1584 
¨gs
.
Êags
 = 0;

1585 
¨gs
.
h™dÀ
 = 0;

1587 
	`do_io˘l
(
fd
, 
DRM_IOCTL_PRIME_FD_TO_HANDLE
, &
¨gs
);

1589  
¨gs
.
h™dÀ
;

1590 
	}
}

1602 
off_t
 
	$¥ime_gë_size
(
dma_buf_fd
)

1604 
off_t
 
ªt
;

1606 
ªt
 = 
	`l£ek
(
dma_buf_fd
, 0, 
SEEK_END
);

1607 
	`igt_as£π
(
ªt
 >0 || 
î∫o
 =
ESPIPE
);

1608 
	`igt_ªquúe
(
ªt
 >= 0);

1609 
î∫o
 = 0;

1611  
ªt
;

1612 
	}
}

1621 
	$¥ime_sync_°¨t
(
dma_buf_fd
, 
boﬁ
 
wrôe
)

1623 
loˇl_dma_buf_sync
 
sync_°¨t
;

1625 
	`mem£t
(&
sync_°¨t
, 0, (sync_start));

1626 
sync_°¨t
.
Êags
 = 
LOCAL_DMA_BUF_SYNC_START
;

1627 
sync_°¨t
.
Êags
 |
LOCAL_DMA_BUF_SYNC_READ
;

1628 i‡(
wrôe
)

1629 
sync_°¨t
.
Êags
 |
LOCAL_DMA_BUF_SYNC_WRITE
;

1630 
	`do_io˘l
(
dma_buf_fd
, 
LOCAL_DMA_BUF_IOCTL_SYNC
, &
sync_°¨t
);

1631 
	}
}

1640 
	$¥ime_sync_íd
(
dma_buf_fd
, 
boﬁ
 
wrôe
)

1642 
loˇl_dma_buf_sync
 
sync_íd
;

1644 
	`mem£t
(&
sync_íd
, 0, (sync_end));

1645 
sync_íd
.
Êags
 = 
LOCAL_DMA_BUF_SYNC_END
;

1646 
sync_íd
.
Êags
 |
LOCAL_DMA_BUF_SYNC_READ
;

1647 i‡(
wrôe
)

1648 
sync_íd
.
Êags
 |
LOCAL_DMA_BUF_SYNC_WRITE
;

1649 
	`do_io˘l
(
dma_buf_fd
, 
LOCAL_DMA_BUF_IOCTL_SYNC
, &
sync_íd
);

1650 
	}
}

1658 
	$igt_ªquúe_fb_modifõrs
(
fd
)

1660 
boﬁ
 
has_modifõrs
, 
ˇp_modifõrs_ã°ed
;

1662 i‡(!
ˇp_modifõrs_ã°ed
) {

1663 
uöt64_t
 
ˇp_modifõrs
;

1664 
ªt
;

1666 
ªt
 = 
	`drmGëC≠
(
fd
, 
LOCAL_DRM_CAP_ADDFB2_MODIFIERS
, &
ˇp_modifõrs
);

1667 
	`igt_as£π
(
ªt
 =0 || 
î∫o
 =
EINVAL
);

1668 
has_modifõrs
 = 
ªt
 =0 && 
ˇp_modifõrs
 == 1;

1669 
ˇp_modifõrs_ã°ed
 = 
åue
;

1672 
	`igt_ªquúe
(
has_modifõrs
);

1673 
	}
}

1675 
	$__kms_addfb
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
width
, uöt32_à
height
,

1676 
uöt32_t
 
°ride
, uöt32_à
pixñ_f‹m©
, 
uöt64_t
 
modifõr
,

1677 
uöt32_t
 
Êags
, uöt32_à*
buf_id
)

1679 
loˇl_drm_mode_fb_cmd2
 
f
;

1680 
ªt
;

1682 
	`igt_ªquúe_fb_modifõrs
(
fd
);

1684 
	`mem£t
(&
f
, 0, (f));

1686 
f
.
width
 = width;

1687 
f
.
height
 = height;

1688 
f
.
pixñ_f‹m©
 =Öixel_format;

1689 
f
.
Êags
 = flags;

1690 
f
.
h™dÀs
[0] = 
h™dÀ
;

1691 
f
.
pôches
[0] = 
°ride
;

1692 
f
.
modifõr
[0] = modifier;

1694 
ªt
 = 
	`igt_io˘l
(
fd
, 
LOCAL_DRM_IOCTL_MODE_ADDFB2
, &
f
);

1696 *
buf_id
 = 
f
.
fb_id
;

1698  
ªt
 < 0 ? -
î∫o
 :Ñet;

1699 
	}
}

	@ioctl_wrappers.h

30 #i‚de‡
IOCTL_WRAPPERS_H


31 
	#IOCTL_WRAPPERS_H


	)

33 
	~<°döt.h
>

34 
	~<°dboﬁ.h
>

35 
	~<sys/mm™.h
>

36 
	~<öãl_bufmgr.h
>

37 
	~<i915_drm.h
>

39 
	~"i915/gem_c⁄ãxt.h
"

40 
	~"i915/gem_scheduÀr.h
"

51 (*
igt_io˘l
)(
fd
, 
ªque°
, *
¨g
);

54 
drm_öãl_bo
 * 
	`gem_h™dÀ_to_libdrm_bo
(
drm_öãl_bufmgr
 *
bufmgr
, 
fd
,

55 c⁄° *
«me
, 
uöt32_t
 
h™dÀ
);

60 
boﬁ
 
	`gem_gë_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à*
tûög
, uöt32_à*
swizzÀ
);

61 
	`gem_£t_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
tûög
, uöt32_à
°ride
);

62 
	`__gem_£t_tûög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
tûög
, uöt32_à
°ride
);

64 
	`gem_£t_ˇchög
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ˇchög
);

65 
uöt32_t
 
	`gem_gë_ˇchög
(
fd
, uöt32_à
h™dÀ
);

66 
uöt32_t
 
	`gem_Êök
(
fd
, uöt32_à
h™dÀ
);

67 
uöt32_t
 
	`gem_›í
(
fd
, uöt32_à
«me
);

68 
	`gem_˛o£
(
fd
, 
uöt32_t
 
h™dÀ
);

69 
	`__gem_wrôe
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, c⁄° *
buf
, uöt64_à
Àngth
);

70 
	`gem_wrôe
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, c⁄° *
buf
, uöt64_à
Àngth
);

71 
	`gem_ªad
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, *
buf
, uöt64_à
Àngth
);

72 
	`__gem_£t_domaö
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ªad
, uöt32_à
wrôe
);

73 
	`gem_£t_domaö
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
ªad
, uöt32_à
wrôe
);

74 
	`gem_waô
(
fd
, 
uöt32_t
 
h™dÀ
, 
öt64_t
 *
timeout_ns
);

75 
	`gem_sync
(
fd
, 
uöt32_t
 
h™dÀ
);

76 
boﬁ
 
	`gem_¸óã__has_°ﬁí_suµ‹t
(
fd
);

77 
uöt32_t
 
	`__gem_¸óã_°ﬁí
(
fd
, 
uöt64_t
 
size
);

78 
uöt32_t
 
	`gem_¸óã_°ﬁí
(
fd
, 
uöt64_t
 
size
);

79 
	`__gem_¸óã
(
fd
, 
uöt64_t
 
size
, 
uöt32_t
 *
h™dÀ
);

80 
uöt32_t
 
	`gem_¸óã
(
fd
, 
uöt64_t
 
size
);

81 
	`gem_execbuf_wr
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
);

82 
	`__gem_execbuf_wr
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
);

83 
	`gem_execbuf
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
);

84 
	`__gem_execbuf
(
fd
, 
drm_i915_gem_execbuf„r2
 *
execbuf
);

86 *
	`gem_mm≠__gâ
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
, 
¥Ÿ
);

87 *
	`gem_mm≠__˝u
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
);

89 
boﬁ
 
	`gem_mm≠__has_wc
(
fd
);

90 *
	`gem_mm≠__wc
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
);

92 #i‚de‡
I915_GEM_DOMAIN_WC


93 
	#I915_GEM_DOMAIN_WC
 0x80

	)

96 *
	`__gem_mm≠__gâ
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
size
, 
¥Ÿ
);

97 *
	`__gem_mm≠__˝u
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
);

98 *
	`__gem_mm≠__wc
(
fd
, 
uöt32_t
 
h™dÀ
, 
uöt64_t
 
off£t
, uöt64_à
size
, 
¥Ÿ
);

100 
	`gem_munm≠
(*
±r
, 
uöt64_t
 
size
);

109 
	#gem_ªquúe_°ﬁí_suµ‹t
(
fd
) \

110 
	`igt_ªquúe
(
	`gem_¸óã__has_°ﬁí_suµ‹t
(
fd
) && \

111 (
	`gem_tŸÆ_°ﬁí_size
(
fd
Ë> 0))

	)

121 
	#gem_ªquúe_mm≠_wc
(
fd
Ë
	`igt_ªquúe
(
	`gem_mm≠__has_wc
(fd))

	)

123 
	`gem_madvi£
(
fd
, 
uöt32_t
 
h™dÀ
, 
°©e
);

125 
	#LOCAL_I915_GEM_USERPTR
 0x33

	)

126 
	#LOCAL_IOCTL_I915_GEM_USERPTR
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
LOCAL_I915_GEM_USERPTR
, 
loˇl_i915_gem_u£Ωå
)

	)

127 
	sloˇl_i915_gem_u£Ωå
 {

128 
uöt64_t
 
u£r_±r
;

129 
uöt64_t
 
u£r_size
;

130 
uöt32_t
 
Êags
;

131 
	#LOCAL_I915_USERPTR_READ_ONLY
 (1<<0)

	)

132 
	#LOCAL_I915_USERPTR_UNSYNCHRONIZED
 (1<<31)

	)

133 
uöt32_t
 
h™dÀ
;

135 
	`gem_u£Ωå
(
fd
, *
±r
, 
size
, 
ªad_⁄ly
, 
uöt32_t
 
Êags
, uöt32_à*
h™dÀ
);

136 
	`__gem_u£Ωå
(
fd
, *
±r
, 
size
, 
ªad_⁄ly
, 
uöt32_t
 
Êags
, uöt32_à*
h™dÀ
);

138 
	`gem_sw_föish
(
fd
, 
uöt32_t
 
h™dÀ
);

140 
boﬁ
 
	`gem_bo_busy
(
fd
, 
uöt32_t
 
h™dÀ
);

143 
	`igt_ªquúe_gem
(
fd
);

144 
boﬁ
 
	`gem_has_Œc
(
fd
);

145 
boﬁ
 
	`gem_has_bsd
(
fd
);

146 
boﬁ
 
	`gem_has_b…
(
fd
);

147 
boﬁ
 
	`gem_has_vebox
(
fd
);

148 
boﬁ
 
	`gem_has_bsd2
(
fd
);

149 
	`gem_gâ_ty≥
(
fd
);

150 
boﬁ
 
	`gem_u£s_µgâ
(
fd
);

151 
boﬁ
 
	`gem_u£s_fuŒ_µgâ
(
fd
);

152 
	`gem_gpu_ª£t_ty≥
(
fd
);

153 
boﬁ
 
	`gem_gpu_ª£t_íabÀd
(
fd
);

154 
boﬁ
 
	`gem_ígöe_ª£t_íabÀd
(
fd
);

155 
	`gem_avaûabÀ_„n˚s
(
fd
);

156 
uöt64_t
 
	`gem_tŸÆ_m≠∑bÀ_size
(
fd
);

157 
uöt64_t
 
	`gem_tŸÆ_°ﬁí_size
(
fd
);

158 
uöt64_t
 
	`gem_avaûabÀ_≠îtuª_size
(
fd
);

159 
uöt64_t
 
	`gem_≠îtuª_size
(
fd
);

160 
uöt64_t
 
	`gem_globÆ_≠îtuª_size
(
fd
);

161 
uöt64_t
 
	`gem_m≠∑bÀ_≠îtuª_size
();

162 
boﬁ
 
	`gem_has_so·pö
(
fd
);

163 
boﬁ
 
	`gem_has_exec_„n˚
(
fd
);

166 
	`gem_ªquúe_ˇchög
(
fd
);

167 
boﬁ
 
	`gem_has_rög
(
fd
, 
rög
);

168 
	`gem_ªquúe_rög
(
fd
, 
rög
);

169 
boﬁ
 
	`gem_has_mocs_ªgi°îs
(
fd
);

170 
	`gem_ªquúe_mocs_ªgi°îs
(
fd
);

173 
	sloˇl_dma_buf_sync
 {

174 
uöt64_t
 
Êags
;

177 
	#LOCAL_DMA_BUF_SYNC_READ
 (1 << 0)

	)

178 
	#LOCAL_DMA_BUF_SYNC_WRITE
 (2 << 0)

	)

179 
	#LOCAL_DMA_BUF_SYNC_RW
 (
LOCAL_DMA_BUF_SYNC_READ
 | 
LOCAL_DMA_BUF_SYNC_WRITE
)

	)

180 
	#LOCAL_DMA_BUF_SYNC_START
 (0 << 2)

	)

181 
	#LOCAL_DMA_BUF_SYNC_END
 (1 << 2)

	)

182 
	#LOCAL_DMA_BUF_SYNC_VALID_FLAGS_MASK
 \

183 (
LOCAL_DMA_BUF_SYNC_RW
 | 
LOCAL_DMA_BUF_SYNC_END
)

	)

185 
	#LOCAL_DMA_BUF_BASE
 'b'

	)

186 
	#LOCAL_DMA_BUF_IOCTL_SYNC
 
	`_IOW
(
LOCAL_DMA_BUF_BASE
, 0, 
loˇl_dma_buf_sync
)

	)

188 
	`¥ime_h™dÀ_to_fd
(
fd
, 
uöt32_t
 
h™dÀ
);

189 #i‚de‡
DRM_RDWR


190 
	#DRM_RDWR
 
O_RDWR


	)

192 
	`¥ime_h™dÀ_to_fd_f‹_mm≠
(
fd
, 
uöt32_t
 
h™dÀ
);

193 
uöt32_t
 
	`¥ime_fd_to_h™dÀ
(
fd
, 
dma_buf_fd
);

194 
off_t
 
	`¥ime_gë_size
(
dma_buf_fd
);

195 
	`¥ime_sync_°¨t
(
dma_buf_fd
, 
boﬁ
 
wrôe
);

196 
	`¥ime_sync_íd
(
dma_buf_fd
, 
boﬁ
 
wrôe
);

199 
	sloˇl_drm_mode_fb_cmd2
 {

200 
uöt32_t
 
fb_id
;

201 
uöt32_t
 
width
, 
height
;

202 
uöt32_t
 
pixñ_f‹m©
;

203 
uöt32_t
 
Êags
;

204 
uöt32_t
 
h™dÀs
[4];

205 
uöt32_t
 
pôches
[4];

206 
uöt32_t
 
off£ts
[4];

207 
uöt64_t
 
modifõr
[4];

210 
	#LOCAL_DRM_MODE_FB_MODIFIERS
 (1<<1)

	)

212 
	#LOCAL_DRM_FORMAT_MOD_VENDOR_INTEL
 0x01

	)

214 
	#loˇl_fourcc_mod_code
(
víd‹
, 
vÆ
) \

215 ((((
uöt64_t
)
LOCAL_DRM_FORMAT_MOD_VENDOR_
## 
víd‹
) << 56) | \

216 (
vÆ
 & 0x00ffffffffffffffL))

	)

218 
	#LOCAL_DRM_FORMAT_MOD_NONE
 (0)

	)

219 
	#LOCAL_I915_FORMAT_MOD_X_TILED
 
	`loˇl_fourcc_mod_code
(
INTEL
, 1)

	)

220 
	#LOCAL_I915_FORMAT_MOD_Y_TILED
 
	`loˇl_fourcc_mod_code
(
INTEL
, 2)

	)

221 
	#LOCAL_I915_FORMAT_MOD_Yf_TILED
 
	`loˇl_fourcc_mod_code
(
INTEL
, 3)

	)

222 
	#LOCAL_I915_FORMAT_MOD_Y_TILED_CCS
 
	`loˇl_fourcc_mod_code
(
INTEL
, 4)

	)

223 
	#LOCAL_I915_FORMAT_MOD_Yf_TILED_CCS
 
	`loˇl_fourcc_mod_code
(
INTEL
, 5)

	)

225 
	#LOCAL_DRM_IOCTL_MODE_ADDFB2
 
	`DRM_IOWR
(0xB8, \

226 
loˇl_drm_mode_fb_cmd2
)

	)

228 
	#LOCAL_DRM_CAP_ADDFB2_MODIFIERS
 0x10

	)

230 
	`igt_ªquúe_fb_modifõrs
(
fd
);

237 
	`__kms_addfb
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
width
, uöt32_à
height
,

238 
uöt32_t
 
°ride
, uöt32_à
pixñ_f‹m©
, 
uöt64_t
 
modifõr
,

239 
uöt32_t
 
Êags
, uöt32_à*
buf_id
);

247 
ölöe
 
uöt64_t
 
	$to_u£r_poöãr
(c⁄° *
±r
)

249  (
uöçå_t
)
±r
;

250 
	}
}

257 
ölöe
 *
	$‰om_u£r_poöãr
(
uöt64_t
 
u64
)

259  (*)(
uöçå_t
)
u64
;

260 
	}
}

	@media_fill.h

1 #i‚de‡
RENDE_MEDIA_FILL_H


2 
	#RENDE_MEDIA_FILL_H


	)

4 
	~<°döt.h
>

5 
	~"öãl_b©chbuf„r.h
"

8 
gí8_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

9 
igt_buf
 *
d°
,

10 
x
, 
y
,

11 
width
, 
height
,

12 
uöt8_t
 
cﬁ‹
);

15 
gí7_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

16 
igt_buf
 *
d°
,

17 
x
, 
y
,

18 
width
, 
height
,

19 
uöt8_t
 
cﬁ‹
);

22 
gí8Õ_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

23 
igt_buf
 *
d°
,

24 
x
, 
y
,

25 
width
, 
height
,

26 
uöt8_t
 
cﬁ‹
);

29 
gí9_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

30 
igt_buf
 *
d°
,

31 
x
, 
y
,

32 
width
, 
height
,

33 
uöt8_t
 
cﬁ‹
);

	@media_fill_gen7.c

1 
	~<öãl_bufmgr.h
>

2 
	~<i915_drm.h
>

4 
	~"medü_fûl.h
"

5 
	~"gí7_medü.h
"

6 
	~"öãl_ªg.h
"

7 
	~"drmã°.h
"

9 
	~<as£π.h
>

11 c⁄° 
uöt32_t
 
	gmedü_kî√l
[][4] = {

25 
uöt32_t


26 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

28  
b©ch
->
±r
 - b©ch->
buf„r
;

29 
	}
}

31 
uöt32_t


32 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

34 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

35 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

36 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

37  
off£t
;

38 
	}
}

41 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

43 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

44 
b©ch
->
±r
 +
size
;

45  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

46 
	}
}

48 
uöt32_t


49 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

51  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

52 
	}
}

54 
uöt32_t


55 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

57  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

58 
	}
}

61 
	$gí7_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

63 
ªt
;

65 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

66 i‡(
ªt
 == 0)

67 
ªt
 = 
	`drm_öãl_bo_mrb_exec
(
b©ch
->
bo
, 
b©ch_íd
,

68 
NULL
, 0, 0, 0);

69 
	`igt_as£π
(
ªt
 == 0);

70 
	}
}

72 
uöt32_t


73 
	$gí7_fûl_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

74 
uöt8_t
 
cﬁ‹
)

76 
uöt8_t
 *
curbe_buf„r
;

77 
uöt32_t
 
off£t
;

79 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, (
uöt32_t
) * 8, 64);

80 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

81 *
curbe_buf„r
 = 
cﬁ‹
;

83  
off£t
;

84 
	}
}

86 
uöt32_t


87 
	$gí7_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

88 
igt_buf
 *
buf
,

89 
uöt32_t
 
f‹m©
,

90 
is_d°
)

92 
gí7_surÁ˚_°©e
 *
ss
;

93 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

94 
ªt
;

96 i‡(
is_d°
) {

97 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

99 
wrôe_domaö
 = 0;

100 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

103 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

104 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

106 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN7_SURFACE_2D
;

107 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

108 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

110 i‡(
buf
->
tûög
 =
I915_TILING_X
)

111 
ss
->
ss0
.
tûed_mode
 = 2;

112 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

113 
ss
->
ss0
.
tûed_mode
 = 3;

115 
ss
->
ss1
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

116 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

117 
	`b©ch_off£t
(
b©ch
, 
ss
) + 4,

118 
buf
->
bo
, 0,

119 
ªad_domaö
, 
wrôe_domaö
);

120 
	`igt_as£π
(
ªt
 == 0);

122 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

123 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

125 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

127 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

128 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

129 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

130 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

132  
off£t
;

133 
	}
}

135 
uöt32_t


136 
	$gí7_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

137 
igt_buf
 *
d°
)

139 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

141 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

142 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

144 
bödög_èbÀ
[0] = 
	`gí7_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN7_SURFACEFORMAT_R8_UNORM
, 1);

146  
off£t
;

147 
	}
}

149 
uöt32_t


150 
	$gí7_fûl_medü_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

151 c⁄° 
uöt32_t
 
kî√l
[][4],

152 
size_t
 
size
)

154 
uöt32_t
 
off£t
;

156 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

158  
off£t
;

159 
	}
}

161 
uöt32_t


162 
	$gí7_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
,

163 c⁄° 
uöt32_t
 
kî√l
[][4], 
size_t
 
size
)

165 
gí7_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

166 
uöt32_t
 
off£t
;

167 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

169 
bödög_èbÀ_off£t
 = 
	`gí7_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

170 
kî√l_off£t
 = 
	`gí7_fûl_medü_kî√l
(
b©ch
, 
kî√l
, 
size
);

172 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

173 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

175 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

177 
idd
->
desc1
.
sögÀ_¥ogøm_Êow
 = 1;

178 
idd
->
desc1
.
Êﬂtög_poöt_mode
 = 
GEN7_FLOATING_POINT_IEEE_754
;

180 
idd
->
desc2
.
ßm∂î_cou¡
 = 0;

181 
idd
->
desc2
.
ßm∂î_°©e_poöãr
 = 0;

183 
idd
->
desc3
.
bödög_èbÀ_íåy_cou¡
 = 0;

184 
idd
->
desc3
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

186 
idd
->
desc4
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

187 
idd
->
desc4
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

189  
off£t
;

190 
	}
}

193 
	$gí7_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

195 
	`OUT_BATCH
(
GEN7_STATE_BASE_ADDRESS
 | (10 - 2));

198 
	`OUT_BATCH
(0);

201 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

204 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

207 
	`OUT_BATCH
(0);

210 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

213 
	`OUT_BATCH
(0);

214 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

215 
	`OUT_BATCH
(0);

216 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

217 
	}
}

220 
	$gí7_emô_v„_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

222 
	`OUT_BATCH
(
GEN7_MEDIA_VFE_STATE
 | (8 - 2));

225 
	`OUT_BATCH
(0);

228 
	`OUT_BATCH
(1 << 16 |

231 
	`OUT_BATCH
(0);

234 
	`OUT_BATCH
(2 << 16 |

238 
	`OUT_BATCH
(0);

239 
	`OUT_BATCH
(0);

240 
	`OUT_BATCH
(0);

241 
	}
}

244 
	$gí7_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

246 
	`OUT_BATCH
(
GEN7_MEDIA_CURBE_LOAD
 | (4 - 2));

247 
	`OUT_BATCH
(0);

249 
	`OUT_BATCH
(64);

251 
	`OUT_BATCH
(
curbe_buf„r
);

252 
	}
}

255 
	$gí7_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

257 
	`OUT_BATCH
(
GEN7_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

258 
	`OUT_BATCH
(0);

260 
	`OUT_BATCH
((
gí7_öãrÁ˚_des¸ùt‹_d©a
));

262 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

263 
	}
}

266 
	$gí7_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
,

267 
x
, 
y
,

268 
width
, 
height
)

270 
i
, 
j
;

272 
i
 = 0; i < 
width
 / 16; i++) {

273 
j
 = 0; j < 
height
 / 16; j++) {

274 
	`OUT_BATCH
(
GEN7_MEDIA_OBJECT
 | (8 - 2));

277 
	`OUT_BATCH
(0);

280 
	`OUT_BATCH
(0);

281 
	`OUT_BATCH
(0);

284 
	`OUT_BATCH
(0);

285 
	`OUT_BATCH
(0);

288 
	`OUT_BATCH
(
x
 + 
i
 * 16);

289 
	`OUT_BATCH
(
y
 + 
j
 * 16);

292 
	}
}

314 
	#BATCH_STATE_SPLIT
 2048

	)

317 
	$gí7_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

318 
igt_buf
 *
d°
,

319 
x
, 
y
,

320 
width
, 
height
,

321 
uöt8_t
 
cﬁ‹
)

323 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

324 
uöt32_t
 
b©ch_íd
;

326 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

329 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

331 
curbe_buf„r
 = 
	`gí7_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

332 
öãrÁ˚_des¸ùt‹
 = 
	`gí7_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
,

333 
medü_kî√l
,

334 (
medü_kî√l
));

335 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

338 
b©ch
->
±r
 = b©ch->
buf„r
;

339 
	`OUT_BATCH
(
GEN7_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
);

340 
	`gí7_emô_°©e_ba£_addªss
(
b©ch
);

342 
	`gí7_emô_v„_°©e
(
b©ch
);

344 
	`gí7_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

346 
	`gí7_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

348 
	`gí7_emô_medü_obje˘s
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

350 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

352 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

353 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

355 
	`gí7_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

356 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

357 
	}
}

	@media_fill_gen8.c

1 
	~<öãl_bufmgr.h
>

2 
	~<i915_drm.h
>

4 
	~"medü_fûl.h
"

5 
	~"gí8_medü.h
"

6 
	~"öãl_ªg.h
"

7 
	~"drmã°.h
"

9 
	~<as£π.h
>

12 c⁄° 
uöt32_t
 
	gmedü_kî√l
[][4] = {

26 
uöt32_t


27 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

29  
b©ch
->
±r
 - b©ch->
buf„r
;

30 
	}
}

32 
uöt32_t


33 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

35 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

36 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

37 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

38  
off£t
;

39 
	}
}

42 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

44 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

45 
b©ch
->
±r
 +
size
;

46  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

47 
	}
}

49 
uöt32_t


50 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

52  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

53 
	}
}

55 
uöt32_t


56 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

58  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

59 
	}
}

62 
	$gí8_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

64 
ªt
;

66 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

67 i‡(
ªt
 == 0)

68 
ªt
 = 
	`drm_öãl_bo_mrb_exec
(
b©ch
->
bo
, 
b©ch_íd
,

69 
NULL
, 0, 0, 0);

70 
	`igt_as£π
(
ªt
 == 0);

71 
	}
}

73 
uöt32_t


74 
	$gí8_fûl_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

75 
uöt8_t
 
cﬁ‹
)

77 
uöt8_t
 *
curbe_buf„r
;

78 
uöt32_t
 
off£t
;

80 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, (
uöt32_t
) * 8, 64);

81 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

82 *
curbe_buf„r
 = 
cﬁ‹
;

84  
off£t
;

85 
	}
}

87 
uöt32_t


88 
	$gí8_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

89 
igt_buf
 *
buf
,

90 
uöt32_t
 
f‹m©
,

91 
is_d°
)

93 
gí8_surÁ˚_°©e
 *
ss
;

94 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

95 
ªt
;

97 i‡(
is_d°
) {

98 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

100 
wrôe_domaö
 = 0;

101 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

104 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

105 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

107 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN8_SURFACE_2D
;

108 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

109 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

110 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

111 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

113 i‡(
buf
->
tûög
 =
I915_TILING_X
)

114 
ss
->
ss0
.
tûed_mode
 = 2;

115 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

116 
ss
->
ss0
.
tûed_mode
 = 3;

118 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

120 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

121 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

122 
buf
->
bo
, 0,

123 
ªad_domaö
, 
wrôe_domaö
);

124 
	`igt_as£π
(
ªt
 == 0);

126 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

127 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

128 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

130 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

131 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

132 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

133 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

135  
off£t
;

136 
	}
}

138 
uöt32_t


139 
	$gí8_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

140 
igt_buf
 *
d°
)

142 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

144 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

145 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

147 
bödög_èbÀ
[0] = 
	`gí8_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN8_SURFACEFORMAT_R8_UNORM
, 1);

149  
off£t
;

150 
	}
}

152 
uöt32_t


153 
	$gí8_fûl_medü_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

154 c⁄° 
uöt32_t
 
kî√l
[][4],

155 
size_t
 
size
)

157 
uöt32_t
 
off£t
;

159 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

161  
off£t
;

162 
	}
}

164 
uöt32_t


165 
	$gí8_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

167 
gí8_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

168 
uöt32_t
 
off£t
;

169 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

171 
bödög_èbÀ_off£t
 = 
	`gí8_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

172 
kî√l_off£t
 = 
	`gí8_fûl_medü_kî√l
(
b©ch
, 
medü_kî√l
, (media_kernel));

174 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

175 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

177 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

179 
idd
->
desc2
.
sögÀ_¥ogøm_Êow
 = 1;

180 
idd
->
desc2
.
Êﬂtög_poöt_mode
 = 
GEN8_FLOATING_POINT_IEEE_754
;

182 
idd
->
desc3
.
ßm∂î_cou¡
 = 0;

183 
idd
->
desc3
.
ßm∂î_°©e_poöãr
 = 0;

185 
idd
->
desc4
.
bödög_èbÀ_íåy_cou¡
 = 0;

186 
idd
->
desc4
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

188 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

189 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

191  
off£t
;

192 
	}
}

195 
	$gí8_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

197 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (16 - 2));

200 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

201 
	`OUT_BATCH
(0);

204 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

207 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

210 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

211 0, 
BASE_ADDRESS_MODIFY
);

214 
	`OUT_BATCH
(0);

215 
	`OUT_BATCH
(0);

218 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

221 
	`OUT_BATCH
(0xfffff000 | 1);

223 
	`OUT_BATCH
(1 << 12 | 1);

225 
	`OUT_BATCH
(0xfffff000 | 1);

227 
	`OUT_BATCH
(1 << 12 | 1);

228 
	}
}

231 
	$gí8_emô_v„_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

233 
	`OUT_BATCH
(
GEN8_MEDIA_VFE_STATE
 | (9 - 2));

236 
	`OUT_BATCH
(0);

237 
	`OUT_BATCH
(0);

240 
	`OUT_BATCH
(1 << 16 |

243 
	`OUT_BATCH
(0);

246 
	`OUT_BATCH
(2 << 16 |

250 
	`OUT_BATCH
(0);

251 
	`OUT_BATCH
(0);

252 
	`OUT_BATCH
(0);

253 
	}
}

256 
	$gí8_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

258 
	`OUT_BATCH
(
GEN8_MEDIA_CURBE_LOAD
 | (4 - 2));

259 
	`OUT_BATCH
(0);

261 
	`OUT_BATCH
(64);

263 
	`OUT_BATCH
(
curbe_buf„r
);

264 
	}
}

267 
	$gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

269 
	`OUT_BATCH
(
GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

270 
	`OUT_BATCH
(0);

272 
	`OUT_BATCH
((
gí8_öãrÁ˚_des¸ùt‹_d©a
));

274 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

275 
	}
}

278 
	$gí8_emô_medü_°©e_Êush
(
öãl_b©chbuf„r
 *
b©ch
)

280 
	`OUT_BATCH
(
GEN8_MEDIA_STATE_FLUSH
 | (2 - 2));

281 
	`OUT_BATCH
(0);

282 
	}
}

285 
	$gí8_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
,

286 
x
, 
y
,

287 
width
, 
height
)

289 
i
, 
j
;

291 
i
 = 0; i < 
width
 / 16; i++) {

292 
j
 = 0; j < 
height
 / 16; j++) {

293 
	`OUT_BATCH
(
GEN8_MEDIA_OBJECT
 | (8 - 2));

296 
	`OUT_BATCH
(0);

299 
	`OUT_BATCH
(0);

300 
	`OUT_BATCH
(0);

303 
	`OUT_BATCH
(0);

304 
	`OUT_BATCH
(0);

307 
	`OUT_BATCH
(
x
 + 
i
 * 16);

308 
	`OUT_BATCH
(
y
 + 
j
 * 16);

309 
	`gí8_emô_medü_°©e_Êush
(
b©ch
);

312 
	}
}

334 
	#BATCH_STATE_SPLIT
 2048

	)

337 
	$gí8_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

338 
igt_buf
 *
d°
,

339 
x
, 
y
,

340 
width
, 
height
,

341 
uöt8_t
 
cﬁ‹
)

343 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

344 
uöt32_t
 
b©ch_íd
;

346 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

349 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

351 
curbe_buf„r
 = 
	`gí8_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

352 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

353 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

356 
b©ch
->
±r
 = b©ch->
buf„r
;

357 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
);

358 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

360 
	`gí8_emô_v„_°©e
(
b©ch
);

362 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

364 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

366 
	`gí8_emô_medü_obje˘s
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

368 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

370 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

371 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

373 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

374 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

375 
	}
}

	@media_fill_gen8lp.c

1 
	~<öãl_bufmgr.h
>

2 
	~<i915_drm.h
>

4 
	~"medü_fûl.h
"

5 
	~"gí8_medü.h
"

6 
	~"öãl_ªg.h
"

7 
	~"drmã°.h
"

9 
	~<as£π.h
>

12 c⁄° 
uöt32_t
 
	gmedü_kî√l
[][4] = {

26 
uöt32_t


27 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

29  
b©ch
->
±r
 - b©ch->
buf„r
;

30 
	}
}

32 
uöt32_t


33 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

35 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

36 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

37 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

38  
off£t
;

39 
	}
}

42 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

44 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

45 
b©ch
->
±r
 +
size
;

46  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

47 
	}
}

49 
uöt32_t


50 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

52  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

53 
	}
}

55 
uöt32_t


56 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

58  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

59 
	}
}

62 
	$gí8_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

64 
ªt
;

66 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

67 i‡(
ªt
 == 0)

68 
ªt
 = 
	`drm_öãl_bo_mrb_exec
(
b©ch
->
bo
, 
b©ch_íd
,

69 
NULL
, 0, 0, 0);

70 
	`igt_as£π
(
ªt
 == 0);

71 
	}
}

73 
uöt32_t


74 
	$gí8_fûl_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

75 
uöt8_t
 
cﬁ‹
)

77 
uöt8_t
 *
curbe_buf„r
;

78 
uöt32_t
 
off£t
;

80 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, (
uöt32_t
) * 8, 64);

81 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

82 *
curbe_buf„r
 = 
cﬁ‹
;

84  
off£t
;

85 
	}
}

87 
uöt32_t


88 
	$gí8_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

89 
igt_buf
 *
buf
,

90 
uöt32_t
 
f‹m©
,

91 
is_d°
)

93 
gí8_surÁ˚_°©e
 *
ss
;

94 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

95 
ªt
;

97 i‡(
is_d°
) {

98 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

100 
wrôe_domaö
 = 0;

101 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

104 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

105 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

107 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN8_SURFACE_2D
;

108 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

109 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

110 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

111 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

113 i‡(
buf
->
tûög
 =
I915_TILING_X
)

114 
ss
->
ss0
.
tûed_mode
 = 2;

115 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

116 
ss
->
ss0
.
tûed_mode
 = 3;

118 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

120 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

121 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

122 
buf
->
bo
, 0,

123 
ªad_domaö
, 
wrôe_domaö
);

124 
	`igt_as£π
(
ªt
 == 0);

126 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

127 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

128 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

130 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

131 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

132 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

133 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

135  
off£t
;

136 
	}
}

138 
uöt32_t


139 
	$gí8_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

140 
igt_buf
 *
d°
)

142 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

144 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

145 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

147 
bödög_èbÀ
[0] = 
	`gí8_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN8_SURFACEFORMAT_R8_UNORM
, 1);

149  
off£t
;

150 
	}
}

152 
uöt32_t


153 
	$gí8_fûl_medü_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

154 c⁄° 
uöt32_t
 
kî√l
[][4],

155 
size_t
 
size
)

157 
uöt32_t
 
off£t
;

159 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

161  
off£t
;

162 
	}
}

164 
uöt32_t


165 
	$gí8_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

167 
gí8_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

168 
uöt32_t
 
off£t
;

169 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

171 
bödög_èbÀ_off£t
 = 
	`gí8_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

172 
kî√l_off£t
 = 
	`gí8_fûl_medü_kî√l
(
b©ch
, 
medü_kî√l
, (media_kernel));

174 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

175 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

177 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

179 
idd
->
desc2
.
sögÀ_¥ogøm_Êow
 = 1;

180 
idd
->
desc2
.
Êﬂtög_poöt_mode
 = 
GEN8_FLOATING_POINT_IEEE_754
;

182 
idd
->
desc3
.
ßm∂î_cou¡
 = 0;

183 
idd
->
desc3
.
ßm∂î_°©e_poöãr
 = 0;

185 
idd
->
desc4
.
bödög_èbÀ_íåy_cou¡
 = 0;

186 
idd
->
desc4
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

188 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

189 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

191  
off£t
;

192 
	}
}

195 
	$gí8_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

197 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (16 - 2));

200 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

201 
	`OUT_BATCH
(0);

204 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

207 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

210 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

211 0, 
BASE_ADDRESS_MODIFY
);

214 
	`OUT_BATCH
(0);

215 
	`OUT_BATCH
(0);

218 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

221 
	`OUT_BATCH
(0xfffff000 | 1);

223 
	`OUT_BATCH
(1 << 12 | 1);

225 
	`OUT_BATCH
(0xfffff000 | 1);

227 
	`OUT_BATCH
(1 << 12 | 1);

228 
	}
}

231 
	$gí8_emô_v„_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

233 
	`OUT_BATCH
(
GEN8_MEDIA_VFE_STATE
 | (9 - 2));

236 
	`OUT_BATCH
(0);

237 
	`OUT_BATCH
(0);

240 
	`OUT_BATCH
(1 << 16 |

243 
	`OUT_BATCH
(0);

246 
	`OUT_BATCH
(2 << 16 |

250 
	`OUT_BATCH
(0);

251 
	`OUT_BATCH
(0);

252 
	`OUT_BATCH
(0);

253 
	}
}

256 
	$gí8_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

258 
	`OUT_BATCH
(
GEN8_MEDIA_CURBE_LOAD
 | (4 - 2));

259 
	`OUT_BATCH
(0);

261 
	`OUT_BATCH
(64);

263 
	`OUT_BATCH
(
curbe_buf„r
);

264 
	}
}

267 
	$gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

269 
	`OUT_BATCH
(
GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

270 
	`OUT_BATCH
(0);

272 
	`OUT_BATCH
((
gí8_öãrÁ˚_des¸ùt‹_d©a
));

274 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

275 
	}
}

278 
	$gí8Õ_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
,

279 
x
, 
y
,

280 
width
, 
height
)

282 
i
, 
j
;

284 
i
 = 0; i < 
width
 / 16; i++) {

285 
j
 = 0; j < 
height
 / 16; j++) {

286 
	`OUT_BATCH
(
GEN8_MEDIA_OBJECT
 | (8 - 2));

289 
	`OUT_BATCH
(0);

292 
	`OUT_BATCH
(0);

293 
	`OUT_BATCH
(0);

296 
	`OUT_BATCH
(0);

297 
	`OUT_BATCH
(0);

300 
	`OUT_BATCH
(
x
 + 
i
 * 16);

301 
	`OUT_BATCH
(
y
 + 
j
 * 16);

304 
	}
}

326 
	#BATCH_STATE_SPLIT
 2048

	)

329 
	$gí8Õ_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

330 
igt_buf
 *
d°
,

331 
x
, 
y
,

332 
width
, 
height
,

333 
uöt8_t
 
cﬁ‹
)

335 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

336 
uöt32_t
 
b©ch_íd
;

338 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

341 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

343 
curbe_buf„r
 = 
	`gí8_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

344 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

345 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

348 
b©ch
->
±r
 = b©ch->
buf„r
;

349 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
);

350 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

352 
	`gí8_emô_v„_°©e
(
b©ch
);

354 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

356 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

358 
	`gí8Õ_emô_medü_obje˘s
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

360 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

362 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

363 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

365 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

366 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

367 
	}
}

	@media_fill_gen9.c

1 
	~<öãl_bufmgr.h
>

2 
	~<i915_drm.h
>

4 
	~"medü_fûl.h
"

5 
	~"gí8_medü.h
"

6 
	~"öãl_ªg.h
"

8 
	~<as£π.h
>

10 
	#ALIGN
(
x
, 
y
Ë(((xË+ (y)-1Ë& ~((y)-1))

	)

12 c⁄° 
uöt32_t
 
	gmedü_kî√l
[][4] = {

26 
uöt32_t


27 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

29  
b©ch
->
±r
 - b©ch->
buf„r
;

30 
	}
}

32 
uöt32_t


33 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

35 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

36 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

37 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

38  
off£t
;

39 
	}
}

42 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

44 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

45 
b©ch
->
±r
 +
size
;

46  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

47 
	}
}

49 
uöt32_t


50 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

52  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

53 
	}
}

55 
uöt32_t


56 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

58  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

59 
	}
}

62 
	$gí8_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

64 
ªt
;

66 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

67 i‡(
ªt
 == 0)

68 
ªt
 = 
	`drm_öãl_bo_mrb_exec
(
b©ch
->
bo
, 
b©ch_íd
,

69 
NULL
, 0, 0, 0);

70 
	`as£π
(
ªt
 == 0);

71 
	}
}

73 
uöt32_t


74 
	$gí8_fûl_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

75 
uöt8_t
 
cﬁ‹
)

77 
uöt8_t
 *
curbe_buf„r
;

78 
uöt32_t
 
off£t
;

80 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, (
uöt32_t
) * 8, 64);

81 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

82 *
curbe_buf„r
 = 
cﬁ‹
;

84  
off£t
;

85 
	}
}

87 
uöt32_t


88 
	$gí8_fûl_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

89 
igt_buf
 *
buf
,

90 
uöt32_t
 
f‹m©
,

91 
is_d°
)

93 
gí8_surÁ˚_°©e
 *
ss
;

94 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

95 
ªt
;

97 i‡(
is_d°
) {

98 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

100 
wrôe_domaö
 = 0;

101 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

104 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

105 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

107 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN8_SURFACE_2D
;

108 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

109 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

110 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

111 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

113 i‡(
buf
->
tûög
 =
I915_TILING_X
)

114 
ss
->
ss0
.
tûed_mode
 = 2;

115 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

116 
ss
->
ss0
.
tûed_mode
 = 3;

118 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

120 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

121 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

122 
buf
->
bo
, 0,

123 
ªad_domaö
, 
wrôe_domaö
);

124 
	`as£π
(
ªt
 == 0);

126 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

127 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

128 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

130 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

131 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

132 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

133 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

135  
off£t
;

136 
	}
}

138 
uöt32_t


139 
	$gí8_fûl_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

140 
igt_buf
 *
d°
)

142 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

144 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

145 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

147 
bödög_èbÀ
[0] = 
	`gí8_fûl_surÁ˚_°©e
(
b©ch
, 
d°
, 
GEN8_SURFACEFORMAT_R8_UNORM
, 1);

149  
off£t
;

150 
	}
}

152 
uöt32_t


153 
	$gí8_fûl_medü_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

154 c⁄° 
uöt32_t
 
kî√l
[][4],

155 
size_t
 
size
)

157 
uöt32_t
 
off£t
;

159 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

161  
off£t
;

162 
	}
}

164 
uöt32_t


165 
	$gí8_fûl_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

167 
gí8_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

168 
uöt32_t
 
off£t
;

169 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

171 
bödög_èbÀ_off£t
 = 
	`gí8_fûl_bödög_èbÀ
(
b©ch
, 
d°
);

172 
kî√l_off£t
 = 
	`gí8_fûl_medü_kî√l
(
b©ch
, 
medü_kî√l
, (media_kernel));

174 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

175 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

177 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

179 
idd
->
desc2
.
sögÀ_¥ogøm_Êow
 = 1;

180 
idd
->
desc2
.
Êﬂtög_poöt_mode
 = 
GEN8_FLOATING_POINT_IEEE_754
;

182 
idd
->
desc3
.
ßm∂î_cou¡
 = 0;

183 
idd
->
desc3
.
ßm∂î_°©e_poöãr
 = 0;

185 
idd
->
desc4
.
bödög_èbÀ_íåy_cou¡
 = 0;

186 
idd
->
desc4
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

188 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

189 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

191  
off£t
;

192 
	}
}

195 
	$gí9_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

197 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (19 - 2));

200 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

201 
	`OUT_BATCH
(0);

204 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

207 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

210 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

211 0, 
BASE_ADDRESS_MODIFY
);

214 
	`OUT_BATCH
(0);

215 
	`OUT_BATCH
(0);

218 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

221 
	`OUT_BATCH
(0xfffff000 | 1);

223 
	`OUT_BATCH
(1 << 12 | 1);

225 
	`OUT_BATCH
(0xfffff000 | 1);

227 
	`OUT_BATCH
(1 << 12 | 1);

230 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

231 
	`OUT_BATCH
(0);

232 
	`OUT_BATCH
(0xfffff000);

233 
	}
}

236 
	$gí8_emô_v„_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

238 
	`OUT_BATCH
(
GEN8_MEDIA_VFE_STATE
 | (9 - 2));

241 
	`OUT_BATCH
(0);

242 
	`OUT_BATCH
(0);

245 
	`OUT_BATCH
(1 << 16 |

248 
	`OUT_BATCH
(0);

251 
	`OUT_BATCH
(2 << 16 |

255 
	`OUT_BATCH
(0);

256 
	`OUT_BATCH
(0);

257 
	`OUT_BATCH
(0);

258 
	}
}

261 
	$gí8_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

263 
	`OUT_BATCH
(
GEN8_MEDIA_CURBE_LOAD
 | (4 - 2));

264 
	`OUT_BATCH
(0);

266 
	`OUT_BATCH
(64);

268 
	`OUT_BATCH
(
curbe_buf„r
);

269 
	}
}

272 
	$gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

274 
	`OUT_BATCH
(
GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

275 
	`OUT_BATCH
(0);

277 
	`OUT_BATCH
((
gí8_öãrÁ˚_des¸ùt‹_d©a
));

279 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

280 
	}
}

283 
	$gí8_emô_medü_°©e_Êush
(
öãl_b©chbuf„r
 *
b©ch
)

285 
	`OUT_BATCH
(
GEN8_MEDIA_STATE_FLUSH
 | (2 - 2));

286 
	`OUT_BATCH
(0);

287 
	}
}

290 
	$gí8_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
,

291 
x
, 
y
,

292 
width
, 
height
)

294 
i
, 
j
;

296 
i
 = 0; i < 
width
 / 16; i++) {

297 
j
 = 0; j < 
height
 / 16; j++) {

298 
	`OUT_BATCH
(
GEN8_MEDIA_OBJECT
 | (8 - 2));

301 
	`OUT_BATCH
(0);

304 
	`OUT_BATCH
(0);

305 
	`OUT_BATCH
(0);

308 
	`OUT_BATCH
(0);

309 
	`OUT_BATCH
(0);

312 
	`OUT_BATCH
(
x
 + 
i
 * 16);

313 
	`OUT_BATCH
(
y
 + 
j
 * 16);

314 
	`gí8_emô_medü_°©e_Êush
(
b©ch
);

317 
	}
}

339 
	#BATCH_STATE_SPLIT
 2048

	)

342 
	$gí9_medü_fûlfunc
(
öãl_b©chbuf„r
 *
b©ch
,

343 
igt_buf
 *
d°
,

344 
x
, 
y
,

345 
width
, 
height
,

346 
uöt8_t
 
cﬁ‹
)

348 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

349 
uöt32_t
 
b©ch_íd
;

351 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

354 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

356 
curbe_buf„r
 = 
	`gí8_fûl_curbe_buf„r_d©a
(
b©ch
, 
cﬁ‹
);

357 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_fûl_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

358 
	`as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

361 
b©ch
->
±r
 = b©ch->
buf„r
;

362 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
 |

363 
GEN9_FORCE_MEDIA_AWAKE_ENABLE
 |

364 
GEN9_SAMPLER_DOP_GATE_DISABLE
 |

365 
GEN9_PIPELINE_SELECTION_MASK
 |

366 
GEN9_SAMPLER_DOP_GATE_MASK
 |

367 
GEN9_FORCE_MEDIA_AWAKE_MASK
);

368 
	`gí9_emô_°©e_ba£_addªss
(
b©ch
);

370 
	`gí8_emô_v„_°©e
(
b©ch
);

372 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

374 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

376 
	`gí8_emô_medü_obje˘s
(
b©ch
, 
x
, 
y
, 
width
, 
height
);

378 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
 |

379 
GEN9_FORCE_MEDIA_AWAKE_DISABLE
 |

380 
GEN9_SAMPLER_DOP_GATE_ENABLE
 |

381 
GEN9_PIPELINE_SELECTION_MASK
 |

382 
GEN9_SAMPLER_DOP_GATE_MASK
 |

383 
GEN9_FORCE_MEDIA_AWAKE_MASK
);

385 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

387 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

388 
	`as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

390 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

391 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

392 
	}
}

	@media_spin.c

27 
	~<öãl_bufmgr.h
>

28 
	~<i915_drm.h
>

29 
	~"öãl_ªg.h
"

30 
	~"drmã°.h
"

31 
	~"öãl_b©chbuf„r.h
"

32 
	~"gí8_medü.h
"

33 
	~"medü_•ö.h
"

35 c⁄° 
uöt32_t
 
	g•ö_kî√l
[][4] = {

48 
uöt32_t


49 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

51  
b©ch
->
±r
 - b©ch->
buf„r
;

52 
	}
}

54 
uöt32_t


55 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

57 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

58 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

59 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

60  
off£t
;

61 
	}
}

64 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

66 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

67 
b©ch
->
±r
 +
size
;

68  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

69 
	}
}

71 
uöt32_t


72 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

74  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

75 
	}
}

77 
uöt32_t


78 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
,

79 
uöt32_t
 
Æign
)

81  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

82 
	}
}

85 
	$gí8_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
b©ch_íd
)

87 
ªt
;

89 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

90 i‡(
ªt
 == 0)

91 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
NULL
,

92 
b©ch_íd
, 0);

93 
	`igt_as£π_eq
(
ªt
, 0);

94 
	}
}

96 
uöt32_t


97 
	$gí8_•ö_curbe_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

98 
uöt32_t
 
ôîs
)

100 
uöt32_t
 *
curbe_buf„r
;

101 
uöt32_t
 
off£t
;

103 
curbe_buf„r
 = 
	`b©ch_Æloc
(
b©ch
, 64, 64);

104 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
curbe_buf„r
);

105 *
curbe_buf„r
 = 
ôîs
;

107  
off£t
;

108 
	}
}

110 
uöt32_t


111 
	$gí8_•ö_surÁ˚_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

112 
igt_buf
 *
buf
,

113 
uöt32_t
 
f‹m©
,

114 
is_d°
)

116 
gí8_surÁ˚_°©e
 *
ss
;

117 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

118 
ªt
;

120 i‡(
is_d°
) {

121 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

123 
wrôe_domaö
 = 0;

124 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

127 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

128 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

130 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN8_SURFACE_2D
;

131 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

132 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

133 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

134 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

136 i‡(
buf
->
tûög
 =
I915_TILING_X
)

137 
ss
->
ss0
.
tûed_mode
 = 2;

138 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

139 
ss
->
ss0
.
tûed_mode
 = 3;

141 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

143 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

144 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

145 
buf
->
bo
, 0,

146 
ªad_domaö
, 
wrôe_domaö
);

147 
	`igt_as£π_eq
(
ªt
, 0);

149 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

150 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

151 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

153 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

154 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

155 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

156 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

158  
off£t
;

159 
	}
}

161 
uöt32_t


162 
	$gí8_•ö_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

163 
igt_buf
 *
d°
)

165 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

167 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 64);

168 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

170 
bödög_èbÀ
[0] = 
	`gí8_•ö_surÁ˚_°©e
(
b©ch
, 
d°
,

171 
GEN8_SURFACEFORMAT_R8_UNORM
, 1);

173  
off£t
;

174 
	}
}

176 
uöt32_t


177 
	$gí8_•ö_medü_kî√l
(
öãl_b©chbuf„r
 *
b©ch
,

178 c⁄° 
uöt32_t
 
kî√l
[][4],

179 
size_t
 
size
)

181 
uöt32_t
 
off£t
;

183 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

185  
off£t
;

186 
	}
}

188 
uöt32_t


189 
	$gí8_•ö_öãrÁ˚_des¸ùt‹
(
öãl_b©chbuf„r
 *
b©ch
,

190 
igt_buf
 *
d°
)

192 
gí8_öãrÁ˚_des¸ùt‹_d©a
 *
idd
;

193 
uöt32_t
 
off£t
;

194 
uöt32_t
 
bödög_èbÀ_off£t
, 
kî√l_off£t
;

196 
bödög_èbÀ_off£t
 = 
	`gí8_•ö_bödög_èbÀ
(
b©ch
, 
d°
);

197 
kî√l_off£t
 = 
	`gí8_•ö_medü_kî√l
(
b©ch
, 
•ö_kî√l
,

198 (
•ö_kî√l
));

200 
idd
 = 
	`b©ch_Æloc
(
b©ch
, (*idd), 64);

201 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
idd
);

203 
idd
->
desc0
.
kî√l_°¨t_poöãr
 = (
kî√l_off£t
 >> 6);

205 
idd
->
desc2
.
sögÀ_¥ogøm_Êow
 = 1;

206 
idd
->
desc2
.
Êﬂtög_poöt_mode
 = 
GEN8_FLOATING_POINT_IEEE_754
;

208 
idd
->
desc3
.
ßm∂î_cou¡
 = 0;

209 
idd
->
desc3
.
ßm∂î_°©e_poöãr
 = 0;

211 
idd
->
desc4
.
bödög_èbÀ_íåy_cou¡
 = 0;

212 
idd
->
desc4
.
bödög_èbÀ_poöãr
 = (
bödög_èbÀ_off£t
 >> 5);

214 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_off£t
 = 0;

215 
idd
->
desc5
.
c⁄°™t_urb_íåy_ªad_Àngth
 = 1;

217  
off£t
;

218 
	}
}

221 
	$gí8_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

223 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (16 - 2));

226 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

227 
	`OUT_BATCH
(0);

230 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

233 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

236 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

237 0, 
BASE_ADDRESS_MODIFY
);

240 
	`OUT_BATCH
(0);

241 
	`OUT_BATCH
(0);

244 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

247 
	`OUT_BATCH
(0xfffff000 | 1);

249 
	`OUT_BATCH
(1 << 12 | 1);

251 
	`OUT_BATCH
(0xfffff000 | 1);

253 
	`OUT_BATCH
(1 << 12 | 1);

254 
	}
}

257 
	$gí9_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

259 
	`OUT_BATCH
(
GEN8_STATE_BASE_ADDRESS
 | (19 - 2));

262 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

263 
	`OUT_BATCH
(0);

266 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

269 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

272 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

273 0, 
BASE_ADDRESS_MODIFY
);

276 
	`OUT_BATCH
(0);

277 
	`OUT_BATCH
(0);

280 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

283 
	`OUT_BATCH
(0xfffff000 | 1);

285 
	`OUT_BATCH
(1 << 12 | 1);

287 
	`OUT_BATCH
(0xfffff000 | 1);

289 
	`OUT_BATCH
(1 << 12 | 1);

292 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

293 
	`OUT_BATCH
(0);

294 
	`OUT_BATCH
(0xfffff000);

295 
	}
}

298 
	$gí8_emô_v„_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

300 
	`OUT_BATCH
(
GEN8_MEDIA_VFE_STATE
 | (9 - 2));

303 
	`OUT_BATCH
(0);

304 
	`OUT_BATCH
(0);

307 
	`OUT_BATCH
(2 << 8);

309 
	`OUT_BATCH
(0);

312 
	`OUT_BATCH
(2 << 16 |

316 
	`OUT_BATCH
(0);

317 
	`OUT_BATCH
(0);

318 
	`OUT_BATCH
(0);

319 
	}
}

322 
	$gí8_emô_curbe_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
curbe_buf„r
)

324 
	`OUT_BATCH
(
GEN8_MEDIA_CURBE_LOAD
 | (4 - 2));

325 
	`OUT_BATCH
(0);

327 
	`OUT_BATCH
(64);

329 
	`OUT_BATCH
(
curbe_buf„r
);

330 
	}
}

333 
	$gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
öãl_b©chbuf„r
 *
b©ch
,

334 
uöt32_t
 
öãrÁ˚_des¸ùt‹
)

336 
	`OUT_BATCH
(
GEN8_MEDIA_INTERFACE_DESCRIPTOR_LOAD
 | (4 - 2));

337 
	`OUT_BATCH
(0);

339 
	`OUT_BATCH
((
gí8_öãrÁ˚_des¸ùt‹_d©a
));

341 
	`OUT_BATCH
(
öãrÁ˚_des¸ùt‹
);

342 
	}
}

345 
	$gí8_emô_medü_°©e_Êush
(
öãl_b©chbuf„r
 *
b©ch
)

347 
	`OUT_BATCH
(
GEN8_MEDIA_STATE_FLUSH
 | (2 - 2));

348 
	`OUT_BATCH
(0);

349 
	}
}

352 
	$gí8_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
)

354 
	`OUT_BATCH
(
GEN8_MEDIA_OBJECT
 | (8 - 2));

357 
	`OUT_BATCH
(0);

360 
	`OUT_BATCH
(0);

361 
	`OUT_BATCH
(0);

364 
	`OUT_BATCH
(0);

365 
	`OUT_BATCH
(0);

368 
	`OUT_BATCH
(0);

369 
	`OUT_BATCH
(0);

370 
	`gí8_emô_medü_°©e_Êush
(
b©ch
);

371 
	}
}

374 
	$gí8Õ_emô_medü_obje˘s
(
öãl_b©chbuf„r
 *
b©ch
)

376 
	`OUT_BATCH
(
GEN8_MEDIA_OBJECT
 | (8 - 2));

379 
	`OUT_BATCH
(0);

382 
	`OUT_BATCH
(0);

383 
	`OUT_BATCH
(0);

386 
	`OUT_BATCH
(0);

387 
	`OUT_BATCH
(0);

390 
	`OUT_BATCH
(0);

391 
	`OUT_BATCH
(0);

392 
	}
}

414 
	#BATCH_STATE_SPLIT
 2048

	)

417 
	$gí8_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

418 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
)

420 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

421 
uöt32_t
 
b©ch_íd
;

423 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
NULL
);

426 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

428 
curbe_buf„r
 = 
	`gí8_•ö_curbe_buf„r_d©a
(
b©ch
, 
•ös
);

429 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_•ö_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

430 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

433 
b©ch
->
±r
 = b©ch->
buf„r
;

434 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
);

435 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

437 
	`gí8_emô_v„_°©e
(
b©ch
);

439 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

441 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

443 
	`gí8_emô_medü_obje˘s
(
b©ch
);

445 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

447 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

448 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

450 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

451 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

452 
	}
}

455 
	$gí8Õ_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

456 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
)

458 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

459 
uöt32_t
 
b©ch_íd
;

461 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
NULL
);

464 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

466 
curbe_buf„r
 = 
	`gí8_•ö_curbe_buf„r_d©a
(
b©ch
, 
•ös
);

467 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_•ö_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

468 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

471 
b©ch
->
±r
 = b©ch->
buf„r
;

472 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
);

473 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

475 
	`gí8_emô_v„_°©e
(
b©ch
);

477 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

479 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

481 
	`gí8Õ_emô_medü_obje˘s
(
b©ch
);

483 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

485 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

486 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

488 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

489 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

490 
	}
}

493 
	$gí9_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

494 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
)

496 
uöt32_t
 
curbe_buf„r
, 
öãrÁ˚_des¸ùt‹
;

497 
uöt32_t
 
b©ch_íd
;

499 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
NULL
);

502 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

504 
curbe_buf„r
 = 
	`gí8_•ö_curbe_buf„r_d©a
(
b©ch
, 
•ös
);

505 
öãrÁ˚_des¸ùt‹
 = 
	`gí8_•ö_öãrÁ˚_des¸ùt‹
(
b©ch
, 
d°
);

506 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

509 
b©ch
->
±r
 = b©ch->
buf„r
;

510 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
 |

511 
GEN9_FORCE_MEDIA_AWAKE_ENABLE
 |

512 
GEN9_SAMPLER_DOP_GATE_DISABLE
 |

513 
GEN9_PIPELINE_SELECTION_MASK
 |

514 
GEN9_SAMPLER_DOP_GATE_MASK
 |

515 
GEN9_FORCE_MEDIA_AWAKE_MASK
);

516 
	`gí9_emô_°©e_ba£_addªss
(
b©ch
);

518 
	`gí8_emô_v„_°©e
(
b©ch
);

520 
	`gí8_emô_curbe_lﬂd
(
b©ch
, 
curbe_buf„r
);

522 
	`gí8_emô_öãrÁ˚_des¸ùt‹_lﬂd
(
b©ch
, 
öãrÁ˚_des¸ùt‹
);

524 
	`gí8_emô_medü_obje˘s
(
b©ch
);

526 
	`OUT_BATCH
(
GEN8_PIPELINE_SELECT
 | 
PIPELINE_SELECT_MEDIA
 |

527 
GEN9_FORCE_MEDIA_AWAKE_DISABLE
 |

528 
GEN9_SAMPLER_DOP_GATE_ENABLE
 |

529 
GEN9_PIPELINE_SELECTION_MASK
 |

530 
GEN9_SAMPLER_DOP_GATE_MASK
 |

531 
GEN9_FORCE_MEDIA_AWAKE_MASK
);

533 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

535 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

536 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

538 
	`gí8_ªndî_Êush
(
b©ch
, 
b©ch_íd
);

539 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

540 
	}
}

	@media_spin.h

27 #i‚de‡
MEDIA_SPIN_H


28 
	#MEDIA_SPIN_H


	)

30 
gí8_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

31 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
);

33 
gí8Õ_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

34 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
);

36 
gí9_medü_•öfunc
(
öãl_b©chbuf„r
 *
b©ch
,

37 
igt_buf
 *
d°
, 
uöt32_t
 
•ös
);

	@rendercopy.h

1 
	~"öãl_b©chbuf„r.h
"

4 
ölöe
 
	$emô_vîãx_2s
(
öãl_b©chbuf„r
 *
b©ch
,

5 
öt16_t
 
x
, i¡16_à
y
)

7 
	`OUT_BATCH
((
uöt16_t
)
y
 << 16 | (uöt16_t)
x
);

8 
	}
}

10 
ölöe
 
	$emô_vîãx
(
öãl_b©chbuf„r
 *
b©ch
,

11 
f
)

13 uni⁄ { 
f
; 
uöt32_t
 
ui
; } 
u
;

14 
u
.
f
 = f;

15 
	`OUT_BATCH
(
u
.
ui
);

16 
	}
}

18 
ölöe
 
	$emô_vîãx_n‹mÆized
(
öãl_b©chbuf„r
 *
b©ch
,

19 
f
, 
tŸÆ
)

21 uni⁄ { 
f
; 
uöt32_t
 
ui
; } 
u
;

22 
u
.
f
 = f / 
tŸÆ
;

23 
	`OUT_BATCH
(
u
.
ui
);

24 
	}
}

26 
gí9_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

27 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

28 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

29 
width
, 
height
,

30 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

31 
gí8_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

32 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

33 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

34 
width
, 
height
,

35 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

36 
gí7_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

37 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

38 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

39 
width
, 
height
,

40 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

41 
gí6_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

42 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

43 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

44 
width
, 
height
,

45 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

46 
gí3_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

47 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

48 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

49 
width
, 
height
,

50 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

51 
gí2_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

52 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

53 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

54 
width
, 
height
,

55 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
);

	@rendercopy_gen6.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

3 
	~<sys/io˘l.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<f˙é.h
>

8 
	~<öây≥s.h
>

9 
	~<î∫o.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/time.h
>

12 
	~"drm.h
"

13 
	~"i915_drm.h
"

14 
	~"drmã°.h
"

15 
	~"öãl_bufmgr.h
"

16 
	~"öãl_b©chbuf„r.h
"

17 
	~"öãl_io.h
"

18 
	~"ªndîc›y.h
"

19 
	~"gí6_ªndî.h
"

20 
	~"öãl_ªg.h
"

22 
	#VERTEX_SIZE
 (3*4)

	)

24 c⁄° 
uöt32_t
 
	gps_kî√l_nomask_afföe
[][4] = {

51 
uöt32_t


52 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

54  
b©ch
->
±r
 - b©ch->
buf„r
;

55 
	}
}

57 
uöt32_t


58 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

60 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

61 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

62 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

63  
off£t
;

64 
	}
}

66 
uöt32_t


67 
	$b©ch_round_u±o
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
divis‹
)

69 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

70 
off£t
 = (off£à+ 
divis‹
-1) / divisor * divisor;

71 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

72  
off£t
;

73 
	}
}

76 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

78 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

79 
b©ch
->
±r
 +
size
;

80  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

81 
	}
}

83 
uöt32_t


84 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

86  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

87 
	}
}

89 
uöt32_t


90 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

92  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

93 
	}
}

96 
	$gí6_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
,

97 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
uöt32_t
 
b©ch_íd
)

99 
ªt
;

101 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

102 i‡(
ªt
 == 0)

103 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
c⁄ãxt
,

104 
b©ch_íd
, 0);

105 
	`igt_as£π
(
ªt
 == 0);

106 
	}
}

108 
uöt32_t


109 
	$gí6_böd_buf
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
buf
,

110 
uöt32_t
 
f‹m©
, 
is_d°
)

112 
gí6_surÁ˚_°©e
 *
ss
;

113 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
;

114 
ªt
;

116 i‡(
is_d°
) {

117 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

119 
wrôe_domaö
 = 0;

120 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

123 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 32);

124 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN6_SURFACE_2D
;

125 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

127 
ss
->
ss0
.
d©a_ªtu∫_f‹m©
 = 
GEN6_SURFACERETURNFORMAT_FLOAT32
;

128 
ss
->
ss0
.
cﬁ‹_bÀnd
 = 1;

129 
ss
->
ss1
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

131 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

132 
	`b©ch_off£t
(
b©ch
, 
ss
) + 4,

133 
buf
->
bo
, 0,

134 
ªad_domaö
, 
wrôe_domaö
);

135 
	`igt_as£π
(
ªt
 == 0);

137 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

138 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

139 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

140 
ss
->
ss3
.
tûed_surÁ˚
 = 
buf
->
tûög
 !
I915_TILING_NONE
;

141 
ss
->
ss3
.
tûe_wÆk
 = 
buf
->
tûög
 =
I915_TILING_Y
;

143  
	`b©ch_off£t
(
b©ch
, 
ss
);

144 
	}
}

146 
uöt32_t


147 
	$gí6_böd_surÁ˚s
(
öãl_b©chbuf„r
 *
b©ch
,

148 
igt_buf
 *
§c
,

149 
igt_buf
 *
d°
)

151 
uöt32_t
 *
bödög_èbÀ
;

153 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 32, 32);

155 
bödög_èbÀ
[0] =

156 
	`gí6_böd_buf
(
b©ch
, 
d°
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 1);

157 
bödög_èbÀ
[1] =

158 
	`gí6_böd_buf
(
b©ch
, 
§c
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 0);

160  
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

161 
	}
}

164 
	$gí6_emô_sù
(
öãl_b©chbuf„r
 *
b©ch
)

166 
	`OUT_BATCH
(
GEN6_STATE_SIP
 | 0);

167 
	`OUT_BATCH
(0);

168 
	}
}

171 
	$gí6_emô_urb
(
öãl_b©chbuf„r
 *
b©ch
)

173 
	`OUT_BATCH
(
GEN6_3DSTATE_URB
 | (3 - 2));

174 
	`OUT_BATCH
((1 - 1Ë<< 
GEN6_3DSTATE_URB_VS_SIZE_SHIFT
 |

175 24 << 
GEN6_3DSTATE_URB_VS_ENTRIES_SHIFT
);

176 
	`OUT_BATCH
(0 << 
GEN6_3DSTATE_URB_GS_SIZE_SHIFT
 |

177 0 << 
GEN6_3DSTATE_URB_GS_ENTRIES_SHIFT
);

178 
	}
}

181 
	$gí6_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

183 
	`OUT_BATCH
(
GEN6_STATE_BASE_ADDRESS
 | (10 - 2));

184 
	`OUT_BATCH
(0);

185 
	`OUT_RELOC
(
b©ch
->
bo
,

186 
I915_GEM_DOMAIN_INSTRUCTION
, 0,

187 
BASE_ADDRESS_MODIFY
);

188 
	`OUT_RELOC
(
b©ch
->
bo
,

189 
I915_GEM_DOMAIN_INSTRUCTION
, 0,

190 
BASE_ADDRESS_MODIFY
);

191 
	`OUT_BATCH
(0);

192 
	`OUT_RELOC
(
b©ch
->
bo
,

193 
I915_GEM_DOMAIN_INSTRUCTION
, 0,

194 
BASE_ADDRESS_MODIFY
);

197 
	`OUT_BATCH
(0);

198 
	`OUT_BATCH
(
BASE_ADDRESS_MODIFY
);

199 
	`OUT_BATCH
(0);

200 
	`OUT_BATCH
(
BASE_ADDRESS_MODIFY
);

201 
	}
}

204 
	$gí6_emô_võwp‹ts
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
cc_vp
)

206 
	`OUT_BATCH
(
GEN6_3DSTATE_VIEWPORT_STATE_POINTERS
 |

207 
GEN6_3DSTATE_VIEWPORT_STATE_MODIFY_CC
 |

209 
	`OUT_BATCH
(0);

210 
	`OUT_BATCH
(0);

211 
	`OUT_BATCH
(
cc_vp
);

212 
	}
}

215 
	$gí6_emô_vs
(
öãl_b©chbuf„r
 *
b©ch
)

218 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_VS
 | (5 - 2));

219 
	`OUT_BATCH
(0);

220 
	`OUT_BATCH
(0);

221 
	`OUT_BATCH
(0);

222 
	`OUT_BATCH
(0);

224 
	`OUT_BATCH
(
GEN6_3DSTATE_VS
 | (6 - 2));

225 
	`OUT_BATCH
(0);

226 
	`OUT_BATCH
(0);

227 
	`OUT_BATCH
(0);

228 
	`OUT_BATCH
(0);

229 
	`OUT_BATCH
(0);

230 
	}
}

233 
	$gí6_emô_gs
(
öãl_b©chbuf„r
 *
b©ch
)

236 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_GS
 | (5 - 2));

237 
	`OUT_BATCH
(0);

238 
	`OUT_BATCH
(0);

239 
	`OUT_BATCH
(0);

240 
	`OUT_BATCH
(0);

242 
	`OUT_BATCH
(
GEN6_3DSTATE_GS
 | (7 - 2));

243 
	`OUT_BATCH
(0);

244 
	`OUT_BATCH
(0);

245 
	`OUT_BATCH
(0);

246 
	`OUT_BATCH
(0);

247 
	`OUT_BATCH
(0);

248 
	`OUT_BATCH
(0);

249 
	}
}

252 
	$gí6_emô_˛ù
(
öãl_b©chbuf„r
 *
b©ch
)

254 
	`OUT_BATCH
(
GEN6_3DSTATE_CLIP
 | (4 - 2));

255 
	`OUT_BATCH
(0);

256 
	`OUT_BATCH
(0);

257 
	`OUT_BATCH
(0);

258 
	}
}

261 
	$gí6_emô_wm_c⁄°™ts
(
öãl_b©chbuf„r
 *
b©ch
)

264 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_PS
 | (5 - 2));

265 
	`OUT_BATCH
(0);

266 
	`OUT_BATCH
(0);

267 
	`OUT_BATCH
(0);

268 
	`OUT_BATCH
(0);

269 
	}
}

272 
	$gí6_emô_nuŒ_dïth_buf„r
(
öãl_b©chbuf„r
 *
b©ch
)

274 
	`OUT_BATCH
(
GEN6_3DSTATE_DEPTH_BUFFER
 | (7 - 2));

275 
	`OUT_BATCH
(
GEN6_SURFACE_NULL
 << 
GEN6_3DSTATE_DEPTH_BUFFER_TYPE_SHIFT
 |

276 
GEN6_DEPTHFORMAT_D32_FLOAT
 << 
GEN6_3DSTATE_DEPTH_BUFFER_FORMAT_SHIFT
);

277 
	`OUT_BATCH
(0);

278 
	`OUT_BATCH
(0);

279 
	`OUT_BATCH
(0);

280 
	`OUT_BATCH
(0);

281 
	`OUT_BATCH
(0);

283 
	`OUT_BATCH
(
GEN6_3DSTATE_CLEAR_PARAMS
 | (2 - 2));

284 
	`OUT_BATCH
(0);

285 
	}
}

288 
	$gí6_emô_öv¨ü¡
(
öãl_b©chbuf„r
 *
b©ch
)

290 
	`OUT_BATCH
(
GEN6_PIPELINE_SELECT
 | 
PIPELINE_SELECT_3D
);

292 
	`OUT_BATCH
(
GEN6_3DSTATE_MULTISAMPLE
 | (3 - 2));

293 
	`OUT_BATCH
(
GEN6_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 |

294 
GEN6_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
);

295 
	`OUT_BATCH
(0);

297 
	`OUT_BATCH
(
GEN6_3DSTATE_SAMPLE_MASK
 | (2 - 2));

298 
	`OUT_BATCH
(1);

299 
	}
}

302 
	$gí6_emô_cc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
bÀnd
)

304 
	`OUT_BATCH
(
GEN6_3DSTATE_CC_STATE_POINTERS
 | (4 - 2));

305 
	`OUT_BATCH
(
bÀnd
 | 1);

306 
	`OUT_BATCH
(1024 | 1);

307 
	`OUT_BATCH
(1024 | 1);

308 
	}
}

311 
	$gí6_emô_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
°©e
)

313 
	`OUT_BATCH
(
GEN6_3DSTATE_SAMPLER_STATE_POINTERS
 |

314 
GEN6_3DSTATE_SAMPLER_STATE_MODIFY_PS
 |

316 
	`OUT_BATCH
(0);

317 
	`OUT_BATCH
(0);

318 
	`OUT_BATCH
(
°©e
);

319 
	}
}

322 
	$gí6_emô_sf
(
öãl_b©chbuf„r
 *
b©ch
)

324 
	`OUT_BATCH
(
GEN6_3DSTATE_SF
 | (20 - 2));

325 
	`OUT_BATCH
(1 << 
GEN6_3DSTATE_SF_NUM_OUTPUTS_SHIFT
 |

326 1 << 
GEN6_3DSTATE_SF_URB_ENTRY_READ_LENGTH_SHIFT
 |

327 1 << 
GEN6_3DSTATE_SF_URB_ENTRY_READ_OFFSET_SHIFT
);

328 
	`OUT_BATCH
(0);

329 
	`OUT_BATCH
(
GEN6_3DSTATE_SF_CULL_NONE
);

330 
	`OUT_BATCH
(2 << 
GEN6_3DSTATE_SF_TRIFAN_PROVOKE_SHIFT
);

331 
	`OUT_BATCH
(0);

332 
	`OUT_BATCH
(0);

333 
	`OUT_BATCH
(0);

334 
	`OUT_BATCH
(0);

335 
	`OUT_BATCH
(0);

336 
	`OUT_BATCH
(0);

337 
	`OUT_BATCH
(0);

338 
	`OUT_BATCH
(0);

339 
	`OUT_BATCH
(0);

340 
	`OUT_BATCH
(0);

341 
	`OUT_BATCH
(0);

342 
	`OUT_BATCH
(0);

343 
	`OUT_BATCH
(0);

344 
	`OUT_BATCH
(0);

345 
	`OUT_BATCH
(0);

346 
	}
}

349 
	$gí6_emô_wm
(
öãl_b©chbuf„r
 *
b©ch
, 
kî√l
)

351 
	`OUT_BATCH
(
GEN6_3DSTATE_WM
 | (9 - 2));

352 
	`OUT_BATCH
(
kî√l
);

353 
	`OUT_BATCH
(1 << 
GEN6_3DSTATE_WM_SAMPLER_COUNT_SHIFT
 |

354 2 << 
GEN6_3DSTATE_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT
);

355 
	`OUT_BATCH
(0);

356 
	`OUT_BATCH
(6 << 
GEN6_3DSTATE_WM_DISPATCH_START_GRF_0_SHIFT
);

357 
	`OUT_BATCH
((40 - 1Ë<< 
GEN6_3DSTATE_WM_MAX_THREADS_SHIFT
 |

358 
GEN6_3DSTATE_WM_DISPATCH_ENABLE
 |

359 
GEN6_3DSTATE_WM_16_DISPATCH_ENABLE
);

360 
	`OUT_BATCH
(1 << 
GEN6_3DSTATE_WM_NUM_SF_OUTPUTS_SHIFT
 |

361 
GEN6_3DSTATE_WM_PERSPECTIVE_PIXEL_BARYCENTRIC
);

362 
	`OUT_BATCH
(0);

363 
	`OUT_BATCH
(0);

364 
	}
}

367 
	$gí6_emô_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
wm_èbÀ
)

369 
	`OUT_BATCH
(
GEN6_3DSTATE_BINDING_TABLE_POINTERS
 |

370 
GEN6_3DSTATE_BINDING_TABLE_MODIFY_PS
 |

372 
	`OUT_BATCH
(0);

373 
	`OUT_BATCH
(0);

374 
	`OUT_BATCH
(
wm_èbÀ
);

375 
	}
}

378 
	$gí6_emô_døwög_ª˘™gÀ
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

380 
	`OUT_BATCH
(
GEN6_3DSTATE_DRAWING_RECTANGLE
 | (4 - 2));

381 
	`OUT_BATCH
(0);

382 
	`OUT_BATCH
((
	`igt_buf_height
(
d°
Ë- 1Ë<< 16 | (
	`igt_buf_width
(dst) - 1));

383 
	`OUT_BATCH
(0);

384 
	}
}

387 
	$gí6_emô_vîãx_ñemíts
(
öãl_b©chbuf„r
 *
b©ch
)

396 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_ELEMENTS
 | (2 * 3 + 1 - 2));

398 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

399 
GEN6_SURFACEFORMAT_R32G32B32A32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

400 0 << 
VE0_OFFSET_SHIFT
);

401 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

402 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

403 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

404 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_3_SHIFT
);

407 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

408 
GEN6_SURFACEFORMAT_R16G16_SSCALED
 << 
VE0_FORMAT_SHIFT
 |

409 0 << 
VE0_OFFSET_SHIFT
);

410 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

411 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

412 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

413 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_3_SHIFT
);

416 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

417 
GEN6_SURFACEFORMAT_R32G32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

418 4 << 
VE0_OFFSET_SHIFT
);

419 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

420 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

421 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

422 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_3_SHIFT
);

423 
	}
}

425 
uöt32_t


426 
	$gí6_¸óã_cc_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
)

428 
gí6_cc_võwp‹t
 *
vp
;

430 
vp
 = 
	`b©ch_Æloc
(
b©ch
, (*vp), 32);

432 
vp
->
mö_dïth
 = -1.e35;

433 
vp
->
max_dïth
 = 1.e35;

435  
	`b©ch_off£t
(
b©ch
, 
vp
);

436 
	}
}

438 
uöt32_t


439 
	$gí6_¸óã_cc_bÀnd
(
öãl_b©chbuf„r
 *
b©ch
)

441 
gí6_bÀnd_°©e
 *
bÀnd
;

443 
bÀnd
 = 
	`b©ch_Æloc
(
b©ch
, (*blend), 64);

445 
bÀnd
->
bÀnd0
.
de°_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ZERO
;

446 
bÀnd
->
bÀnd0
.
sour˚_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ONE
;

447 
bÀnd
->
bÀnd0
.
bÀnd_func
 = 
GEN6_BLENDFUNCTION_ADD
;

448 
bÀnd
->
bÀnd0
.
bÀnd_íabÀ
 = 1;

450 
bÀnd
->
bÀnd1
.
po°_bÀnd_˛amp_íabÀ
 = 1;

451 
bÀnd
->
bÀnd1
.
¥e_bÀnd_˛amp_íabÀ
 = 1;

453  
	`b©ch_off£t
(
b©ch
, 
bÀnd
);

454 
	}
}

456 
uöt32_t


457 
	$gí6_¸óã_kî√l
(
öãl_b©chbuf„r
 *
b©ch
)

459  
	`b©ch_c›y
(
b©ch
, 
ps_kî√l_nomask_afföe
,

460 (
ps_kî√l_nomask_afföe
),

462 
	}
}

464 
uöt32_t


465 
	$gí6_¸óã_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
,

466 
ßm∂î_fûãr_t
 
fûãr
,

467 
ßm∂î_exãnd_t
 
exãnd
)

469 
gí6_ßm∂î_°©e
 *
ss
;

471 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 32);

472 
ss
->
ss0
.
lod_¥e˛amp
 = 1;

476 
ss
->
ss0
.
b‹dî_cﬁ‹_mode
 = 
GEN6_BORDER_COLOR_MODE_LEGACY
;

478 
fûãr
) {

480 
SAMPLER_FILTER_NEAREST
:

481 
ss
->
ss0
.
mö_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

482 
ss
->
ss0
.
mag_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

484 
SAMPLER_FILTER_BILINEAR
:

485 
ss
->
ss0
.
mö_fûãr
 = 
GEN6_MAPFILTER_LINEAR
;

486 
ss
->
ss0
.
mag_fûãr
 = 
GEN6_MAPFILTER_LINEAR
;

490 
exãnd
) {

492 
SAMPLER_EXTEND_NONE
:

493 
ss
->
ss1
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP_BORDER
;

494 
ss
->
ss1
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP_BORDER
;

495 
ss
->
ss1
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP_BORDER
;

497 
SAMPLER_EXTEND_REPEAT
:

498 
ss
->
ss1
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_WRAP
;

499 
ss
->
ss1
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_WRAP
;

500 
ss
->
ss1
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_WRAP
;

502 
SAMPLER_EXTEND_PAD
:

503 
ss
->
ss1
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

504 
ss
->
ss1
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

505 
ss
->
ss1
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

507 
SAMPLER_EXTEND_REFLECT
:

508 
ss
->
ss1
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_MIRROR
;

509 
ss
->
ss1
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_MIRROR
;

510 
ss
->
ss1
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_MIRROR
;

514  
	`b©ch_off£t
(
b©ch
, 
ss
);

515 
	}
}

517 
	$gí6_emô_vîãx_buf„r
(
öãl_b©chbuf„r
 *
b©ch
)

519 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_BUFFERS
 | 3);

520 
	`OUT_BATCH
(
VB0_VERTEXDATA
 |

521 0 << 
VB0_BUFFER_INDEX_SHIFT
 |

522 
VERTEX_SIZE
 << 
VB0_BUFFER_PITCH_SHIFT
);

523 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_VERTEX
, 0, 0);

524 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_VERTEX
, 0, b©ch->bo->
size
-1);

525 
	`OUT_BATCH
(0);

526 
	}
}

528 
uöt32_t
 
	$gí6_emô_¥imôive
(
öãl_b©chbuf„r
 *
b©ch
)

530 
uöt32_t
 
off£t
;

532 
	`OUT_BATCH
(
GEN6_3DPRIMITIVE
 |

533 
GEN6_3DPRIMITIVE_VERTEX_SEQUENTIAL
 |

534 
_3DPRIM_RECTLIST
 << 
GEN6_3DPRIMITIVE_TOPOLOGY_SHIFT
 |

537 
	`OUT_BATCH
(3);

538 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

539 
	`OUT_BATCH
(0);

540 
	`OUT_BATCH
(1);

541 
	`OUT_BATCH
(0);

542 
	`OUT_BATCH
(0);

544  
off£t
;

545 
	}
}

547 
	$gí6_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

548 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

549 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

550 
width
, 
height
,

551 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

553 
uöt32_t
 
wm_°©e
, 
wm_kî√l
, 
wm_èbÀ
;

554 
uöt32_t
 
cc_vp
, 
cc_bÀnd
, 
off£t
;

555 
uöt32_t
 
b©ch_íd
;

557 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
c⁄ãxt
);

559 
b©ch
->
±r
 = b©ch->
buf„r
 + 1024;

560 
	`b©ch_Æloc
(
b©ch
, 64, 64);

561 
wm_èbÀ
 = 
	`gí6_böd_surÁ˚s
(
b©ch
, 
§c
, 
d°
);

562 
wm_kî√l
 = 
	`gí6_¸óã_kî√l
(
b©ch
);

563 
wm_°©e
 = 
	`gí6_¸óã_ßm∂î
(
b©ch
,

564 
SAMPLER_FILTER_NEAREST
,

565 
SAMPLER_EXTEND_NONE
);

567 
cc_vp
 = 
	`gí6_¸óã_cc_võwp‹t
(
b©ch
);

568 
cc_bÀnd
 = 
	`gí6_¸óã_cc_bÀnd
(
b©ch
);

570 
b©ch
->
±r
 = b©ch->
buf„r
;

572 
	`gí6_emô_öv¨ü¡
(
b©ch
);

573 
	`gí6_emô_°©e_ba£_addªss
(
b©ch
);

575 
	`gí6_emô_sù
(
b©ch
);

576 
	`gí6_emô_urb
(
b©ch
);

578 
	`gí6_emô_võwp‹ts
(
b©ch
, 
cc_vp
);

579 
	`gí6_emô_vs
(
b©ch
);

580 
	`gí6_emô_gs
(
b©ch
);

581 
	`gí6_emô_˛ù
(
b©ch
);

582 
	`gí6_emô_wm_c⁄°™ts
(
b©ch
);

583 
	`gí6_emô_nuŒ_dïth_buf„r
(
b©ch
);

585 
	`gí6_emô_døwög_ª˘™gÀ
(
b©ch
, 
d°
);

586 
	`gí6_emô_cc
(
b©ch
, 
cc_bÀnd
);

587 
	`gí6_emô_ßm∂î
(
b©ch
, 
wm_°©e
);

588 
	`gí6_emô_sf
(
b©ch
);

589 
	`gí6_emô_wm
(
b©ch
, 
wm_kî√l
);

590 
	`gí6_emô_vîãx_ñemíts
(
b©ch
);

591 
	`gí6_emô_bödög_èbÀ
(
b©ch
, 
wm_èbÀ
);

593 
	`gí6_emô_vîãx_buf„r
(
b©ch
);

594 
off£t
 = 
	`gí6_emô_¥imôive
(
b©ch
);

596 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

597 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

599 *(
uöt32_t
*)(
b©ch
->
buf„r
 + 
off£t
) =

600 
	`b©ch_round_u±o
(
b©ch
, 
VERTEX_SIZE
)/VERTEX_SIZE;

602 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
 + 
width
, 
d°_y
 + 
height
);

603 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
 + 
width
, 
	`igt_buf_width
(
§c
));

604 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

606 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
 + 
height
);

607 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

608 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

610 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
);

611 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

612 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
, 
	`igt_buf_height
(
§c
));

614 
	`gí6_ªndî_Êush
(
b©ch
, 
c⁄ãxt
, 
b©ch_íd
);

615 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

616 
	}
}

	@rendercopy_gen7.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

3 
	~<sys/io˘l.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<f˙é.h
>

8 
	~<öây≥s.h
>

9 
	~<î∫o.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/time.h
>

12 
	~"drm.h
"

13 
	~"i915_drm.h
"

14 
	~"drmã°.h
"

15 
	~"öãl_bufmgr.h
"

16 
	~"öãl_b©chbuf„r.h
"

17 
	~"öãl_io.h
"

18 
	~"öãl_chù£t.h
"

19 
	~"ªndîc›y.h
"

20 
	~"gí7_ªndî.h
"

21 
	~"öãl_ªg.h
"

24 c⁄° 
uöt32_t
 
	gps_kî√l
[][4] = {

35 
uöt32_t


36 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

38  
b©ch
->
°©e
 - b©ch->
buf„r
;

39 
	}
}

41 
uöt32_t


42 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

44 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

45 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

46 
b©ch
->
°©e
 = b©ch->
buf„r
 + 
off£t
;

47  
off£t
;

48 
	}
}

51 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

53 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

54 
b©ch
->
°©e
 +
size
;

55  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

56 
	}
}

58 
uöt32_t


59 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

61  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

62 
	}
}

64 
uöt32_t


65 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

67  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

68 
	}
}

71 
	$gí7_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
,

72 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
uöt32_t
 
b©ch_íd
)

74 
ªt
;

76 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

77 i‡(
ªt
 == 0)

78 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
c⁄ãxt
,

79 
b©ch_íd
, 0);

80 
	`igt_as£π
(
ªt
 == 0);

81 
	}
}

83 
uöt32_t


84 
	$gí7_tûög_bôs
(
uöt32_t
 
tûög
)

86 
tûög
) {

87 : 
	`igt_as£π
(0);

88 
I915_TILING_NONE
:  0;

89 
I915_TILING_X
:  
GEN7_SURFACE_TILED
;

90 
I915_TILING_Y
:  
GEN7_SURFACE_TILED
 | 
GEN7_SURFACE_TILED_Y
;

92 
	}
}

94 
uöt32_t


95 
	$gí7_böd_buf
(
öãl_b©chbuf„r
 *
b©ch
,

96 
igt_buf
 *
buf
,

97 
uöt32_t
 
f‹m©
,

98 
is_d°
)

100 
uöt32_t
 *
ss
;

101 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
;

102 
ªt
;

104 i‡(
is_d°
) {

105 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

107 
wrôe_domaö
 = 0;

108 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

111 
ss
 = 
	`b©ch_Æloc
(
b©ch
, 8 * (*ss), 32);

113 
ss
[0] = (
GEN7_SURFACE_2D
 << 
GEN7_SURFACE_TYPE_SHIFT
 |

114 
	`gí7_tûög_bôs
(
buf
->
tûög
) |

115 
f‹m©
 << 
GEN7_SURFACE_FORMAT_SHIFT
);

116 
ss
[1] = 
buf
->
bo
->
off£t
;

117 
ss
[2] = ((
	`igt_buf_width
(
buf
Ë- 1Ë<< 
GEN7_SURFACE_WIDTH_SHIFT
 |

118 (
	`igt_buf_height
(
buf
Ë- 1Ë<< 
GEN7_SURFACE_HEIGHT_SHIFT
);

119 
ss
[3] = (
buf
->
°ride
 - 1Ë<< 
GEN7_SURFACE_PITCH_SHIFT
;

120 
ss
[4] = 0;

121 
ss
[5] = 0;

122 
ss
[6] = 0;

123 
ss
[7] = 0;

124 i‡(
	`IS_HASWELL
(
b©ch
->
devid
))

125 
ss
[7] |
	`HSW_SURFACE_SWIZZLE
(
RED
, 
GREEN
, 
BLUE
, 
ALPHA
);

127 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

128 
	`b©ch_off£t
(
b©ch
, 
ss
) + 4,

129 
buf
->
bo
, 0,

130 
ªad_domaö
, 
wrôe_domaö
);

131 
	`igt_as£π
(
ªt
 == 0);

133  
	`b©ch_off£t
(
b©ch
, 
ss
);

134 
	}
}

137 
	$gí7_emô_vîãx_ñemíts
(
öãl_b©chbuf„r
 *
b©ch
)

139 
	`OUT_BATCH
(
GEN7_3DSTATE_VERTEX_ELEMENTS
 |

142 
	`OUT_BATCH
(0 << 
GEN7_VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
GEN7_VE0_VALID
 |

143 
GEN7_SURFACEFORMAT_R32G32B32A32_FLOAT
 << 
GEN7_VE0_FORMAT_SHIFT
 |

144 0 << 
GEN7_VE0_OFFSET_SHIFT
);

146 
	`OUT_BATCH
(
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_0_SHIFT
 |

147 
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_1_SHIFT
 |

148 
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_2_SHIFT
 |

149 
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_3_SHIFT
);

152 
	`OUT_BATCH
(0 << 
GEN7_VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
GEN7_VE0_VALID
 |

153 
GEN7_SURFACEFORMAT_R16G16_SSCALED
 << 
GEN7_VE0_FORMAT_SHIFT
 |

154 0 << 
GEN7_VE0_OFFSET_SHIFT
);

155 
	`OUT_BATCH
(
GEN7_VFCOMPONENT_STORE_SRC
 << 
GEN7_VE1_VFCOMPONENT_0_SHIFT
 |

156 
GEN7_VFCOMPONENT_STORE_SRC
 << 
GEN7_VE1_VFCOMPONENT_1_SHIFT
 |

157 
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_2_SHIFT
 |

158 
GEN7_VFCOMPONENT_STORE_1_FLT
 << 
GEN7_VE1_VFCOMPONENT_3_SHIFT
);

161 
	`OUT_BATCH
(0 << 
GEN7_VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
GEN7_VE0_VALID
 |

162 
GEN7_SURFACEFORMAT_R16G16_SSCALED
 << 
GEN7_VE0_FORMAT_SHIFT
 |

163 4 << 
GEN7_VE0_OFFSET_SHIFT
);

164 
	`OUT_BATCH
(
GEN7_VFCOMPONENT_STORE_SRC
 << 
GEN7_VE1_VFCOMPONENT_0_SHIFT
 |

165 
GEN7_VFCOMPONENT_STORE_SRC
 << 
GEN7_VE1_VFCOMPONENT_1_SHIFT
 |

166 
GEN7_VFCOMPONENT_STORE_0
 << 
GEN7_VE1_VFCOMPONENT_2_SHIFT
 |

167 
GEN7_VFCOMPONENT_STORE_1_FLT
 << 
GEN7_VE1_VFCOMPONENT_3_SHIFT
);

168 
	}
}

170 
uöt32_t


171 
	$gí7_¸óã_vîãx_buf„r
(
öãl_b©chbuf„r
 *
b©ch
,

172 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

173 
uöt32_t
 
d°_x
, uöt32_à
d°_y
,

174 
uöt32_t
 
width
, uöt32_à
height
)

176 
uöt16_t
 *
v
;

178 
v
 = 
	`b©ch_Æloc
(
b©ch
, 12*(*v), 8);

180 
v
[0] = 
d°_x
 + 
width
;

181 
v
[1] = 
d°_y
 + 
height
;

182 
v
[2] = 
§c_x
 + 
width
;

183 
v
[3] = 
§c_y
 + 
height
;

185 
v
[4] = 
d°_x
;

186 
v
[5] = 
d°_y
 + 
height
;

187 
v
[6] = 
§c_x
;

188 
v
[7] = 
§c_y
 + 
height
;

190 
v
[8] = 
d°_x
;

191 
v
[9] = 
d°_y
;

192 
v
[10] = 
§c_x
;

193 
v
[11] = 
§c_y
;

195  
	`b©ch_off£t
(
b©ch
, 
v
);

196 
	}
}

198 
	$gí7_emô_vîãx_buf„r
(
öãl_b©chbuf„r
 *
b©ch
,

199 
§c_x
, 
§c_y
,

200 
d°_x
, 
d°_y
,

201 
width
, 
height
)

203 
uöt32_t
 
off£t
;

205 
off£t
 = 
	`gí7_¸óã_vîãx_buf„r
(
b©ch
,

206 
§c_x
, 
§c_y
,

207 
d°_x
, 
d°_y
,

208 
width
, 
height
);

210 
	`OUT_BATCH
(
GEN7_3DSTATE_VERTEX_BUFFERS
 | (5 - 2));

211 
	`OUT_BATCH
(0 << 
GEN7_VB0_BUFFER_INDEX_SHIFT
 |

212 
GEN7_VB0_VERTEXDATA
 |

213 
GEN7_VB0_ADDRESS_MODIFY_ENABLE
 |

214 4*2 << 
GEN7_VB0_BUFFER_PITCH_SHIFT
);

216 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_VERTEX
, 0, 
off£t
);

217 
	`OUT_BATCH
(~0);

218 
	`OUT_BATCH
(0);

219 
	}
}

221 
uöt32_t


222 
	$gí7_böd_surÁ˚s
(
öãl_b©chbuf„r
 *
b©ch
,

223 
igt_buf
 *
§c
,

224 
igt_buf
 *
d°
)

226 
uöt32_t
 *
bödög_èbÀ
;

228 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 8, 32);

230 
bödög_èbÀ
[0] =

231 
	`gí7_böd_buf
(
b©ch
, 
d°
, 
GEN7_SURFACEFORMAT_B8G8R8A8_UNORM
, 1);

232 
bödög_èbÀ
[1] =

233 
	`gí7_böd_buf
(
b©ch
, 
§c
, 
GEN7_SURFACEFORMAT_B8G8R8A8_UNORM
, 0);

235  
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

236 
	}
}

239 
	$gí7_emô_bödög_èbÀ
(
öãl_b©chbuf„r
 *
b©ch
,

240 
igt_buf
 *
§c
,

241 
igt_buf
 *
d°
)

243 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_PS
 | (2 - 2));

244 
	`OUT_BATCH
(
	`gí7_böd_surÁ˚s
(
b©ch
, 
§c
, 
d°
));

245 
	}
}

248 
	$gí7_emô_døwög_ª˘™gÀ
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

250 
	`OUT_BATCH
(
GEN7_3DSTATE_DRAWING_RECTANGLE
 | (4 - 2));

251 
	`OUT_BATCH
(0);

252 
	`OUT_BATCH
((
	`igt_buf_height
(
d°
Ë- 1Ë<< 16 | (
	`igt_buf_width
(dst) - 1));

253 
	`OUT_BATCH
(0);

254 
	}
}

256 
uöt32_t


257 
	$gí7_¸óã_bÀnd_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

259 
gí7_bÀnd_°©e
 *
bÀnd
;

261 
bÀnd
 = 
	`b©ch_Æloc
(
b©ch
, (*blend), 64);

263 
bÀnd
->
bÀnd0
.
de°_bÀnd_Á˘‹
 = 
GEN7_BLENDFACTOR_ZERO
;

264 
bÀnd
->
bÀnd0
.
sour˚_bÀnd_Á˘‹
 = 
GEN7_BLENDFACTOR_ONE
;

265 
bÀnd
->
bÀnd0
.
bÀnd_func
 = 
GEN7_BLENDFUNCTION_ADD
;

266 
bÀnd
->
bÀnd1
.
po°_bÀnd_˛amp_íabÀ
 = 1;

267 
bÀnd
->
bÀnd1
.
¥e_bÀnd_˛amp_íabÀ
 = 1;

269  
	`b©ch_off£t
(
b©ch
, 
bÀnd
);

270 
	}
}

273 
	$gí7_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
)

275 
	`OUT_BATCH
(
GEN7_STATE_BASE_ADDRESS
 | (10 - 2));

276 
	`OUT_BATCH
(0);

277 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

278 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

279 
	`OUT_BATCH
(0);

280 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

282 
	`OUT_BATCH
(0);

283 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

284 
	`OUT_BATCH
(0);

285 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

286 
	}
}

288 
uöt32_t


289 
	$gí7_¸óã_cc_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
)

291 
gí7_cc_võwp‹t
 *
vp
;

293 
vp
 = 
	`b©ch_Æloc
(
b©ch
, (*vp), 32);

294 
vp
->
mö_dïth
 = -1.e35;

295 
vp
->
max_dïth
 = 1.e35;

297  
	`b©ch_off£t
(
b©ch
, 
vp
);

298 
	}
}

301 
	$gí7_emô_cc
(
öãl_b©chbuf„r
 *
b©ch
)

303 
	`OUT_BATCH
(
GEN7_3DSTATE_BLEND_STATE_POINTERS
 | (2 - 2));

304 
	`OUT_BATCH
(
	`gí7_¸óã_bÀnd_°©e
(
b©ch
));

306 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_CC
 | (2 - 2));

307 
	`OUT_BATCH
(
	`gí7_¸óã_cc_võwp‹t
(
b©ch
));

308 
	}
}

310 
uöt32_t


311 
	$gí7_¸óã_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
)

313 
gí7_ßm∂î_°©e
 *
ss
;

315 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 32);

317 
ss
->
ss0
.
mö_fûãr
 = 
GEN7_MAPFILTER_NEAREST
;

318 
ss
->
ss0
.
mag_fûãr
 = 
GEN7_MAPFILTER_NEAREST
;

320 
ss
->
ss3
.
r_wøp_mode
 = 
GEN7_TEXCOORDMODE_CLAMP
;

321 
ss
->
ss3
.
s_wøp_mode
 = 
GEN7_TEXCOORDMODE_CLAMP
;

322 
ss
->
ss3
.
t_wøp_mode
 = 
GEN7_TEXCOORDMODE_CLAMP
;

324 
ss
->
ss3
.
n⁄_n‹mÆized_co‹d
 = 1;

326  
	`b©ch_off£t
(
b©ch
, 
ss
);

327 
	}
}

330 
	$gí7_emô_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
)

332 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_PS
 | (2 - 2));

333 
	`OUT_BATCH
(
	`gí7_¸óã_ßm∂î
(
b©ch
));

334 
	}
}

337 
	$gí7_emô_mu…ißm∂e
(
öãl_b©chbuf„r
 *
b©ch
)

339 
	`OUT_BATCH
(
GEN7_3DSTATE_MULTISAMPLE
 | (4 - 2));

340 
	`OUT_BATCH
(
GEN7_3DSTATE_MULTISAMPLE_PIXEL_LOCATION_CENTER
 |

341 
GEN7_3DSTATE_MULTISAMPLE_NUMSAMPLES_1
);

342 
	`OUT_BATCH
(0);

343 
	`OUT_BATCH
(0);

345 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLE_MASK
 | (2 - 2));

346 
	`OUT_BATCH
(1);

347 
	}
}

350 
	$gí7_emô_urb
(
öãl_b©chbuf„r
 *
b©ch
)

352 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_PS
 | (2 - 2));

353 
	`OUT_BATCH
(8);

356 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_VS
 | (2 - 2));

357 
	`OUT_BATCH
((64 << 
GEN7_URB_ENTRY_NUMBER_SHIFT
) |

358 (2 - 1Ë<< 
GEN7_URB_ENTRY_SIZE_SHIFT
 |

359 (1 << 
GEN7_URB_STARTING_ADDRESS_SHIFT
));

361 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_HS
 | (2 - 2));

362 
	`OUT_BATCH
((0 << 
GEN7_URB_ENTRY_SIZE_SHIFT
) |

363 (2 << 
GEN7_URB_STARTING_ADDRESS_SHIFT
));

365 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_DS
 | (2 - 2));

366 
	`OUT_BATCH
((0 << 
GEN7_URB_ENTRY_SIZE_SHIFT
) |

367 (2 << 
GEN7_URB_STARTING_ADDRESS_SHIFT
));

369 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_GS
 | (2 - 2));

370 
	`OUT_BATCH
((0 << 
GEN7_URB_ENTRY_SIZE_SHIFT
) |

371 (1 << 
GEN7_URB_STARTING_ADDRESS_SHIFT
));

372 
	}
}

375 
	$gí7_emô_vs
(
öãl_b©chbuf„r
 *
b©ch
)

377 
	`OUT_BATCH
(
GEN7_3DSTATE_VS
 | (6 - 2));

378 
	`OUT_BATCH
(0);

379 
	`OUT_BATCH
(0);

380 
	`OUT_BATCH
(0);

381 
	`OUT_BATCH
(0);

382 
	`OUT_BATCH
(0);

383 
	}
}

386 
	$gí7_emô_hs
(
öãl_b©chbuf„r
 *
b©ch
)

388 
	`OUT_BATCH
(
GEN7_3DSTATE_HS
 | (7 - 2));

389 
	`OUT_BATCH
(0);

390 
	`OUT_BATCH
(0);

391 
	`OUT_BATCH
(0);

392 
	`OUT_BATCH
(0);

393 
	`OUT_BATCH
(0);

394 
	`OUT_BATCH
(0);

395 
	}
}

398 
	$gí7_emô_ã
(
öãl_b©chbuf„r
 *
b©ch
)

400 
	`OUT_BATCH
(
GEN7_3DSTATE_TE
 | (4 - 2));

401 
	`OUT_BATCH
(0);

402 
	`OUT_BATCH
(0);

403 
	`OUT_BATCH
(0);

404 
	}
}

407 
	$gí7_emô_ds
(
öãl_b©chbuf„r
 *
b©ch
)

409 
	`OUT_BATCH
(
GEN7_3DSTATE_DS
 | (6 - 2));

410 
	`OUT_BATCH
(0);

411 
	`OUT_BATCH
(0);

412 
	`OUT_BATCH
(0);

413 
	`OUT_BATCH
(0);

414 
	`OUT_BATCH
(0);

415 
	}
}

418 
	$gí7_emô_gs
(
öãl_b©chbuf„r
 *
b©ch
)

420 
	`OUT_BATCH
(
GEN7_3DSTATE_GS
 | (7 - 2));

421 
	`OUT_BATCH
(0);

422 
	`OUT_BATCH
(0);

423 
	`OUT_BATCH
(0);

424 
	`OUT_BATCH
(0);

425 
	`OUT_BATCH
(0);

426 
	`OUT_BATCH
(0);

427 
	}
}

430 
	$gí7_emô_°ªamout
(
öãl_b©chbuf„r
 *
b©ch
)

432 
	`OUT_BATCH
(
GEN7_3DSTATE_STREAMOUT
 | (3 - 2));

433 
	`OUT_BATCH
(0);

434 
	`OUT_BATCH
(0);

435 
	}
}

438 
	$gí7_emô_sf
(
öãl_b©chbuf„r
 *
b©ch
)

440 
	`OUT_BATCH
(
GEN7_3DSTATE_SF
 | (7 - 2));

441 
	`OUT_BATCH
(0);

442 
	`OUT_BATCH
(
GEN7_3DSTATE_SF_CULL_NONE
);

443 
	`OUT_BATCH
(2 << 
GEN7_3DSTATE_SF_TRIFAN_PROVOKE_SHIFT
);

444 
	`OUT_BATCH
(0);

445 
	`OUT_BATCH
(0);

446 
	`OUT_BATCH
(0);

447 
	}
}

450 
	$gí7_emô_sbe
(
öãl_b©chbuf„r
 *
b©ch
)

452 
	`OUT_BATCH
(
GEN7_3DSTATE_SBE
 | (14 - 2));

453 
	`OUT_BATCH
(1 << 
GEN7_SBE_NUM_OUTPUTS_SHIFT
 |

454 1 << 
GEN7_SBE_URB_ENTRY_READ_LENGTH_SHIFT
 |

455 1 << 
GEN7_SBE_URB_ENTRY_READ_OFFSET_SHIFT
);

456 
	`OUT_BATCH
(0);

457 
	`OUT_BATCH
(0);

458 
	`OUT_BATCH
(0);

459 
	`OUT_BATCH
(0);

460 
	`OUT_BATCH
(0);

461 
	`OUT_BATCH
(0);

462 
	`OUT_BATCH
(0);

463 
	`OUT_BATCH
(0);

464 
	`OUT_BATCH
(0);

465 
	`OUT_BATCH
(0);

466 
	`OUT_BATCH
(0);

467 
	`OUT_BATCH
(0);

468 
	}
}

471 
	$gí7_emô_ps
(
öãl_b©chbuf„r
 *
b©ch
)

473 
thªads
;

475 i‡(
	`IS_HASWELL
(
b©ch
->
devid
))

476 
thªads
 = 40 << 
HSW_PS_MAX_THREADS_SHIFT
 | 1 << 
HSW_PS_SAMPLE_MASK_SHIFT
;

478 
thªads
 = 40 << 
IVB_PS_MAX_THREADS_SHIFT
;

480 
	`OUT_BATCH
(
GEN7_3DSTATE_PS
 | (8 - 2));

481 
	`OUT_BATCH
(
	`b©ch_c›y
(
b©ch
, 
ps_kî√l
, (ps_kernel), 64));

482 
	`OUT_BATCH
(1 << 
GEN7_PS_SAMPLER_COUNT_SHIFT
 |

483 2 << 
GEN7_PS_BINDING_TABLE_ENTRY_COUNT_SHIFT
);

484 
	`OUT_BATCH
(0);

485 
	`OUT_BATCH
(
thªads
 |

486 
GEN7_PS_16_DISPATCH_ENABLE
 |

487 
GEN7_PS_ATTRIBUTE_ENABLE
);

488 
	`OUT_BATCH
(6 << 
GEN7_PS_DISPATCH_START_GRF_SHIFT_0
);

489 
	`OUT_BATCH
(0);

490 
	`OUT_BATCH
(0);

491 
	}
}

494 
	$gí7_emô_˛ù
(
öãl_b©chbuf„r
 *
b©ch
)

496 
	`OUT_BATCH
(
GEN7_3DSTATE_CLIP
 | (4 - 2));

497 
	`OUT_BATCH
(0);

498 
	`OUT_BATCH
(0);

499 
	`OUT_BATCH
(0);

501 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CL
 | (2 - 2));

502 
	`OUT_BATCH
(0);

503 
	}
}

506 
	$gí7_emô_wm
(
öãl_b©chbuf„r
 *
b©ch
)

508 
	`OUT_BATCH
(
GEN7_3DSTATE_WM
 | (3 - 2));

509 
	`OUT_BATCH
(
GEN7_WM_DISPATCH_ENABLE
 |

510 
GEN7_WM_PERSPECTIVE_PIXEL_BARYCENTRIC
);

511 
	`OUT_BATCH
(0);

512 
	}
}

515 
	$gí7_emô_nuŒ_dïth_buf„r
(
öãl_b©chbuf„r
 *
b©ch
)

517 
	`OUT_BATCH
(
GEN7_3DSTATE_DEPTH_BUFFER
 | (7 - 2));

518 
	`OUT_BATCH
(
GEN7_SURFACE_NULL
 << 
GEN7_3DSTATE_DEPTH_BUFFER_TYPE_SHIFT
 |

519 
GEN7_DEPTHFORMAT_D32_FLOAT
 << 
GEN7_3DSTATE_DEPTH_BUFFER_FORMAT_SHIFT
);

520 
	`OUT_BATCH
(0);

521 
	`OUT_BATCH
(0);

522 
	`OUT_BATCH
(0);

523 
	`OUT_BATCH
(0);

524 
	`OUT_BATCH
(0);

526 
	`OUT_BATCH
(
GEN7_3DSTATE_CLEAR_PARAMS
 | (3 - 2));

527 
	`OUT_BATCH
(0);

528 
	`OUT_BATCH
(0);

529 
	}
}

531 
	#BATCH_STATE_SPLIT
 2048

	)

532 
	$gí7_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

533 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

534 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

535 
width
, 
height
,

536 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

538 
uöt32_t
 
b©ch_íd
;

540 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
c⁄ãxt
);

542 
b©ch
->
°©e
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

544 
	`OUT_BATCH
(
GEN7_PIPELINE_SELECT
 | 
PIPELINE_SELECT_3D
);

546 
	`gí7_emô_°©e_ba£_addªss
(
b©ch
);

547 
	`gí7_emô_mu…ißm∂e
(
b©ch
);

548 
	`gí7_emô_urb
(
b©ch
);

549 
	`gí7_emô_vs
(
b©ch
);

550 
	`gí7_emô_hs
(
b©ch
);

551 
	`gí7_emô_ã
(
b©ch
);

552 
	`gí7_emô_ds
(
b©ch
);

553 
	`gí7_emô_gs
(
b©ch
);

554 
	`gí7_emô_˛ù
(
b©ch
);

555 
	`gí7_emô_sf
(
b©ch
);

556 
	`gí7_emô_wm
(
b©ch
);

557 
	`gí7_emô_°ªamout
(
b©ch
);

558 
	`gí7_emô_nuŒ_dïth_buf„r
(
b©ch
);

560 
	`gí7_emô_cc
(
b©ch
);

561 
	`gí7_emô_ßm∂î
(
b©ch
);

562 
	`gí7_emô_sbe
(
b©ch
);

563 
	`gí7_emô_ps
(
b©ch
);

564 
	`gí7_emô_vîãx_ñemíts
(
b©ch
);

565 
	`gí7_emô_vîãx_buf„r
(
b©ch
,

566 
§c_x
, 
§c_y
, 
d°_x
, 
d°_y
, 
width
, 
height
);

567 
	`gí7_emô_bödög_èbÀ
(
b©ch
, 
§c
, 
d°
);

568 
	`gí7_emô_døwög_ª˘™gÀ
(
b©ch
, 
d°
);

570 
	`OUT_BATCH
(
GEN7_3DPRIMITIVE
 | (7- 2));

571 
	`OUT_BATCH
(
GEN7_3DPRIMITIVE_VERTEX_SEQUENTIAL
 | 
_3DPRIM_RECTLIST
);

572 
	`OUT_BATCH
(3);

573 
	`OUT_BATCH
(0);

574 
	`OUT_BATCH
(1);

575 
	`OUT_BATCH
(0);

576 
	`OUT_BATCH
(0);

578 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

580 
b©ch_íd
 = 
b©ch
->
±r
 - b©ch->
buf„r
;

581 
b©ch_íd
 = 
	`ALIGN
(batch_end, 8);

582 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

584 
	`gí7_ªndî_Êush
(
b©ch
, 
c⁄ãxt
, 
b©ch_íd
);

585 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

586 
	}
}

	@rendercopy_gen8.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

3 
	~<sys/io˘l.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<f˙é.h
>

8 
	~<öây≥s.h
>

9 
	~<î∫o.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/time.h
>

13 
	~<drm.h
>

14 
	~<i915_drm.h
>

16 
	~"drmã°.h
"

17 
	~"öãl_bufmgr.h
"

18 
	~"öãl_b©chbuf„r.h
"

19 
	~"öãl_io.h
"

20 
	~"ªndîc›y.h
"

21 
	~"gí8_ªndî.h
"

22 
	~"öãl_ªg.h
"

23 
	~"igt_aux.h
"

25 
	~<öãl_aub.h
>

27 
	#VERTEX_SIZE
 (3*4)

	)

29 #i‡
DEBUG_RENDERCPY


30 
	$dump_b©ch
(
öãl_b©chbuf„r
 *
b©ch
) {

31 
fd
 = 
	`›í
("/tmp/i965-b©chbuf„rs.dump", 
O_WRONLY
 | 
O_CREAT
, 0666);

32 i‡(
fd
 != -1) {

33 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
b©ch
->
buf„r
, 4096), 4096);

34 
fd
 = 
	`˛o£
(fd);

36 
	}
}

38 
	#dump_b©ch
(
x
Ëdÿ{ } 0)

	)

42 
uöt32_t
 
	mcc_°©e
;

43 
uöt32_t
 
	mbÀnd_°©e
;

44 } 
	gcc
;

47 
uöt32_t
 
	mcc_°©e
;

48 
uöt32_t
 
	msf_˛ù_°©e
;

49 } 
	gvõwp‹t
;

52 c⁄° 
uöt32_t
 
	gps_kî√l
[][4] = {

75 
	#MAX_ANNOTATIONS
 33

	)

76 
	s™nŸ©i⁄s_c⁄ãxt
 {

77 
drm_öãl_aub_™nŸ©i⁄
 
	m™nŸ©i⁄s
[
MAX_ANNOTATIONS
];

78 
	mödex
;

79 
uöt32_t
 
	moff£t
;

82 
	$™nŸ©i⁄_öô
(
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

88 
aub
->
ödex
 = 1;

89 
	}
}

91 
	$add_™nŸ©i⁄
(
drm_öãl_aub_™nŸ©i⁄
 *
a
,

92 
uöt32_t
 
ty≥
, uöt32_à
subty≥
,

93 
uöt32_t
 
ídög_off£t
)

95 
a
->
ty≥
 =Åype;

96 
a
->
subty≥
 = subtype;

97 
a
->
ídög_off£t
 =Énding_offset;

98 
	}
}

100 
	$™nŸ©i⁄_add_b©ch
(
™nŸ©i⁄s_c⁄ãxt
 *
aub
, 
size_t
 
size
)

102 
	`add_™nŸ©i⁄
(&
aub
->
™nŸ©i⁄s
[0], 
AUB_TRACE_TYPE_BATCH
, 0, 
size
);

103 
	}
}

105 
	$™nŸ©i⁄_add_°©e
(
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

106 
uöt32_t
 
°©e_ty≥
,

107 
uöt32_t
 
°¨t_off£t
,

108 
size_t
 
size
)

110 
	`igt_as£π
(
aub
->
ödex
 < 
MAX_ANNOTATIONS
);

112 
	`add_™nŸ©i⁄
(&
aub
->
™nŸ©i⁄s
[aub->
ödex
++],

113 
AUB_TRACE_TYPE_NOTYPE
, 0,

114 
°¨t_off£t
);

115 
	`add_™nŸ©i⁄
(&
aub
->
™nŸ©i⁄s
[aub->
ödex
++],

116 
	`AUB_TRACE_TYPE
(
°©e_ty≥
),

117 
	`AUB_TRACE_SUBTYPE
(
°©e_ty≥
),

118 
°¨t_off£t
 + 
size
);

119 
	}
}

121 
	$™nŸ©i⁄_Êush
(
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

122 
öãl_b©chbuf„r
 *
b©ch
)

124 i‡(!
	`igt_aub_dump_íabÀd
())

127 
	`drm_öãl_bufmgr_gem_£t_aub_™nŸ©i⁄s
(
b©ch
->
bo
,

128 
aub
->
™nŸ©i⁄s
,

129 
aub
->
ödex
);

130 
	}
}

132 
uöt32_t


133 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

135  
b©ch
->
±r
 - b©ch->
buf„r
;

136 
	}
}

138 
uöt32_t


139 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

141 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

142 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

143 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

144  
off£t
;

145 
	}
}

148 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

150 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

151 
b©ch
->
±r
 +
size
;

152  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

153 
	}
}

155 
uöt32_t


156 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

158  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

159 
	}
}

161 
uöt32_t


162 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

164  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

165 
	}
}

168 
	$gí6_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
,

169 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
uöt32_t
 
b©ch_íd
)

171 
ªt
;

173 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

174 i‡(
ªt
 == 0)

175 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
c⁄ãxt
,

176 
b©ch_íd
, 0);

177 
	`igt_as£π
(
ªt
 == 0);

178 
	}
}

181 
uöt32_t


182 
	$gí8_böd_buf
(
öãl_b©chbuf„r
 *
b©ch
,

183 
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

184 
igt_buf
 *
buf
,

185 
uöt32_t
 
f‹m©
, 
is_d°
)

187 
gí8_surÁ˚_°©e
 *
ss
;

188 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

189 
ªt
;

191 i‡(
is_d°
) {

192 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

194 
wrôe_domaö
 = 0;

195 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

198 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

199 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

200 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_SURFACE_STATE
, 
off£t
, (*
ss
));

202 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN6_SURFACE_2D
;

203 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

204 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

205 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

206 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

207 i‡(
buf
->
tûög
 =
I915_TILING_X
)

208 
ss
->
ss0
.
tûed_mode
 = 2;

209 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

210 
ss
->
ss0
.
tûed_mode
 = 3;

212 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

214 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

215 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

216 
buf
->
bo
, 0,

217 
ªad_domaö
, 
wrôe_domaö
);

218 
	`igt_as£π
(
ªt
 == 0);

220 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

221 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

222 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

224 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

225 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

226 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

227 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

229  
off£t
;

230 
	}
}

232 
uöt32_t


233 
	$gí8_böd_surÁ˚s
(
öãl_b©chbuf„r
 *
b©ch
,

234 
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

235 
igt_buf
 *
§c
,

236 
igt_buf
 *
d°
)

238 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

240 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 8, 32);

241 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

242 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_BINDING_TABLE
, 
off£t
, 8);

244 
bödög_èbÀ
[0] =

245 
	`gí8_böd_buf
(
b©ch
, 
aub
,

246 
d°
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 1);

247 
bödög_èbÀ
[1] =

248 
	`gí8_böd_buf
(
b©ch
, 
aub
,

249 
§c
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 0);

251  
off£t
;

252 
	}
}

255 
uöt32_t


256 
	$gí8_¸óã_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
,

257 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

259 
gí8_ßm∂î_°©e
 *
ss
;

260 
uöt32_t
 
off£t
;

262 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

263 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

264 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_SAMPLER_STATE
,

265 
off£t
, (*
ss
));

267 
ss
->
ss0
.
mö_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

268 
ss
->
ss0
.
mag_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

269 
ss
->
ss3
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

270 
ss
->
ss3
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

271 
ss
->
ss3
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

275 
ss
->
ss3
.
n⁄_n‹mÆized_co‹d
 = 0;

277  
off£t
;

278 
	}
}

280 
uöt32_t


281 
	$gí8_fûl_ps
(
öãl_b©chbuf„r
 *
b©ch
,

282 
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

283 c⁄° 
uöt32_t
 
kî√l
[][4],

284 
size_t
 
size
)

286 
uöt32_t
 
off£t
;

288 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

289 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_KERNEL_INSTRUCTIONS
, 
off£t
, 
size
);

291  
off£t
;

292 
	}
}

304 
uöt32_t


305 
	$gí7_fûl_vîãx_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

306 
™nŸ©i⁄s_c⁄ãxt
 *
aub
,

307 
igt_buf
 *
§c
,

308 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

309 
uöt32_t
 
d°_x
, uöt32_à
d°_y
,

310 
uöt32_t
 
width
, uöt32_à
height
)

312 *
°¨t
;

313 
uöt32_t
 
off£t
;

315 
	`b©ch_Æign
(
b©ch
, 8);

316 
°¨t
 = 
b©ch
->
±r
;

318 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
 + 
width
, 
d°_y
 + 
height
);

319 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
 + 
width
, 
	`igt_buf_width
(
§c
));

320 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

322 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
 + 
height
);

323 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

324 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

326 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
);

327 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

328 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
, 
	`igt_buf_height
(
§c
));

330 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
°¨t
);

331 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_VERTEX_BUFFER
,

332 
off£t
, 3 * 
VERTEX_SIZE
);

333  
off£t
;

334 
	}
}

346 
	$gí6_emô_vîãx_ñemíts
(
öãl_b©chbuf„r
 *
b©ch
) {

353 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_ELEMENTS
 | (3 * 2 + 1 - 2));

358 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

359 
GEN6_SURFACEFORMAT_R32G32B32A32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

360 0 << 
VE0_OFFSET_SHIFT
);

361 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

362 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

363 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

364 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_3_SHIFT
);

372 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

373 
GEN6_SURFACEFORMAT_R16G16_SSCALED
 << 
VE0_FORMAT_SHIFT
 |

374 0 << 
VE0_OFFSET_SHIFT
);

375 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

376 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

377 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

378 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_3_SHIFT
);

384 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

385 
GEN6_SURFACEFORMAT_R32G32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

386 4 << 
VE0_OFFSET_SHIFT
);

387 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

388 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

389 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

390 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_3_SHIFT
);

391 
	}
}

399 
	$gí8_emô_vîãx_buf„r
(
öãl_b©chbuf„r
 *
b©ch
,

400 
uöt32_t
 
off£t
) {

401 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_BUFFERS
 | (1 + (4 * 1) - 2));

402 
	`OUT_BATCH
(0 << 
VB0_BUFFER_INDEX_SHIFT
 |

403 
GEN7_VB0_BUFFER_ADDR_MOD_EN
 |

404 
VERTEX_SIZE
 << 
VB0_BUFFER_PITCH_SHIFT
);

405 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_VERTEX
, 0, 
off£t
);

406 
	`OUT_BATCH
(3 * 
VERTEX_SIZE
);

407 
	}
}

409 
uöt32_t


410 
	$gí6_¸óã_cc_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

411 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

413 
gí6_cﬁ‹_ˇlc_°©e
 *
cc_°©e
;

414 
uöt32_t
 
off£t
;

416 
cc_°©e
 = 
	`b©ch_Æloc
(
b©ch
, (*cc_state), 64);

417 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
cc_°©e
);

418 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_CC_STATE
,

419 
off£t
, (*
cc_°©e
));

421  
off£t
;

422 
	}
}

424 
uöt32_t


425 
	$gí8_¸óã_bÀnd_°©e
(
öãl_b©chbuf„r
 *
b©ch
,

426 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

428 
gí8_bÀnd_°©e
 *
bÀnd
;

429 
i
;

430 
uöt32_t
 
off£t
;

432 
bÀnd
 = 
	`b©ch_Æloc
(
b©ch
, (*blend), 64);

433 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bÀnd
);

434 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_BLEND_STATE
,

435 
off£t
, (*
bÀnd
));

437 
i
 = 0; i < 16; i++) {

438 
bÀnd
->
bs
[
i
].
de°_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ZERO
;

439 
bÀnd
->
bs
[
i
].
sour˚_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ONE
;

440 
bÀnd
->
bs
[
i
].
cﬁ‹_bÀnd_func
 = 
GEN6_BLENDFUNCTION_ADD
;

441 
bÀnd
->
bs
[
i
].
¥e_bÀnd_cﬁ‹_˛amp
 = 1;

442 
bÀnd
->
bs
[
i
].
cﬁ‹_buf„r_bÀnd
 = 0;

445  
off£t
;

446 
	}
}

448 
uöt32_t


449 
	$gí6_¸óã_cc_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
,

450 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

452 
gí6_cc_võwp‹t
 *
vp
;

453 
uöt32_t
 
off£t
;

455 
vp
 = 
	`b©ch_Æloc
(
b©ch
, (*vp), 32);

456 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
vp
);

457 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_CC_VP_STATE
,

458 
off£t
, (*
vp
));

461 
vp
->
mö_dïth
 = -1.e35;

462 
vp
->
max_dïth
 = 1.e35;

464  
off£t
;

465 
	}
}

467 
uöt32_t


468 
	$gí7_¸óã_sf_˛ù_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
,

469 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

472 
gí7_sf_˛ù_võwp‹t
 *
scv_°©e
;

473 
uöt32_t
 
off£t
;

475 
scv_°©e
 = 
	`b©ch_Æloc
(
b©ch
, (*scv_state), 64);

476 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
scv_°©e
);

477 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_CLIP_VP_STATE
,

478 
off£t
, (*
scv_°©e
));

480 
scv_°©e
->
gu¨db™d
.
xmö
 = 0;

481 
scv_°©e
->
gu¨db™d
.
xmax
 = 1.0f;

482 
scv_°©e
->
gu¨db™d
.
ymö
 = 0;

483 
scv_°©e
->
gu¨db™d
.
ymax
 = 1.0f;

485  
off£t
;

486 
	}
}

488 
uöt32_t


489 
	$gí6_¸óã_sciss‹_ª˘
(
öãl_b©chbuf„r
 *
b©ch
,

490 
™nŸ©i⁄s_c⁄ãxt
 *
aub
)

492 
gí6_sciss‹_ª˘
 *
sciss‹
;

493 
uöt32_t
 
off£t
;

495 
sciss‹
 = 
	`b©ch_Æloc
(
b©ch
, (*scissor), 64);

496 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
sciss‹
);

497 
	`™nŸ©i⁄_add_°©e
(
aub
, 
AUB_TRACE_SCISSOR_STATE
,

498 
off£t
, (*
sciss‹
));

500  
off£t
;

501 
	}
}

504 
	$gí8_emô_sù
(
öãl_b©chbuf„r
 *
b©ch
) {

505 
	`OUT_BATCH
(
GEN6_STATE_SIP
 | (3 - 2));

506 
	`OUT_BATCH
(0);

507 
	`OUT_BATCH
(0);

508 
	}
}

511 
	$gí7_emô_push_c⁄°™ts
(
öãl_b©chbuf„r
 *
b©ch
) {

512 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_VS
);

513 
	`OUT_BATCH
(0);

514 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_HS
);

515 
	`OUT_BATCH
(0);

516 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_DS
);

517 
	`OUT_BATCH
(0);

518 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_GS
);

519 
	`OUT_BATCH
(0);

520 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_PS
);

521 
	`OUT_BATCH
(0);

522 
	}
}

525 
	$gí8_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
) {

526 
	`OUT_BATCH
(
GEN6_STATE_BASE_ADDRESS
 | (16 - 2));

529 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

530 
	`OUT_BATCH
(0);

533 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

536 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

539 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

540 0, 
BASE_ADDRESS_MODIFY
);

543 
	`OUT_BATCH
(0);

544 
	`OUT_BATCH
(0);

547 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

550 
	`OUT_BATCH
(0xfffff000 | 1);

552 
	`OUT_BATCH
(1 << 12 | 1);

554 
	`OUT_BATCH
(0xfffff000 | 1);

556 
	`OUT_BATCH
(1 << 12 | 1);

557 
	}
}

560 
	$gí7_emô_urb
(
öãl_b©chbuf„r
 *
b©ch
) {

562 c⁄° 
vs_íåõs
 = 64;

563 c⁄° 
vs_size
 = 2;

564 c⁄° 
vs_°¨t
 = 2;

566 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_VS
);

567 
	`OUT_BATCH
(
vs_íåõs
 | ((
vs_size
 - 1Ë<< 16Ë| (
vs_°¨t
 << 25));

568 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_GS
);

569 
	`OUT_BATCH
(
vs_°¨t
 << 25);

570 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_HS
);

571 
	`OUT_BATCH
(
vs_°¨t
 << 25);

572 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_DS
);

573 
	`OUT_BATCH
(
vs_°¨t
 << 25);

574 
	}
}

577 
	$gí8_emô_cc
(
öãl_b©chbuf„r
 *
b©ch
) {

578 
	`OUT_BATCH
(
GEN7_3DSTATE_BLEND_STATE_POINTERS
);

579 
	`OUT_BATCH
(
cc
.
bÀnd_°©e
 | 1);

581 
	`OUT_BATCH
(
GEN6_3DSTATE_CC_STATE_POINTERS
);

582 
	`OUT_BATCH
(
cc
.
cc_°©e
 | 1);

583 
	}
}

586 
	$gí8_emô_mu…ißm∂e
(
öãl_b©chbuf„r
 *
b©ch
) {

587 
	`OUT_BATCH
(
GEN8_3DSTATE_MULTISAMPLE
);

588 
	`OUT_BATCH
(0);

590 
	`OUT_BATCH
(
GEN6_3DSTATE_SAMPLE_MASK
);

591 
	`OUT_BATCH
(1);

592 
	}
}

595 
	$gí8_emô_vs
(
öãl_b©chbuf„r
 *
b©ch
) {

596 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_VS
);

597 
	`OUT_BATCH
(0);

599 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_VS
);

600 
	`OUT_BATCH
(0);

602 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_VS
 | (11 - 2));

603 
	`OUT_BATCH
(0);

604 
	`OUT_BATCH
(0);

605 
	`OUT_BATCH
(0);

606 
	`OUT_BATCH
(0);

607 
	`OUT_BATCH
(0);

608 
	`OUT_BATCH
(0);

609 
	`OUT_BATCH
(0);

610 
	`OUT_BATCH
(0);

611 
	`OUT_BATCH
(0);

612 
	`OUT_BATCH
(0);

614 
	`OUT_BATCH
(
GEN6_3DSTATE_VS
 | (9-2));

615 
	`OUT_BATCH
(0);

616 
	`OUT_BATCH
(0);

617 
	`OUT_BATCH
(0);

618 
	`OUT_BATCH
(0);

619 
	`OUT_BATCH
(0);

620 
	`OUT_BATCH
(0);

621 
	`OUT_BATCH
(0);

622 
	`OUT_BATCH
(0);

623 
	}
}

626 
	$gí8_emô_hs
(
öãl_b©chbuf„r
 *
b©ch
) {

627 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_HS
 | (11 - 2));

628 
	`OUT_BATCH
(0);

629 
	`OUT_BATCH
(0);

630 
	`OUT_BATCH
(0);

631 
	`OUT_BATCH
(0);

632 
	`OUT_BATCH
(0);

633 
	`OUT_BATCH
(0);

634 
	`OUT_BATCH
(0);

635 
	`OUT_BATCH
(0);

636 
	`OUT_BATCH
(0);

637 
	`OUT_BATCH
(0);

639 
	`OUT_BATCH
(
GEN7_3DSTATE_HS
 | (9-2));

640 
	`OUT_BATCH
(0);

641 
	`OUT_BATCH
(0);

642 
	`OUT_BATCH
(0);

643 
	`OUT_BATCH
(0);

644 
	`OUT_BATCH
(0);

645 
	`OUT_BATCH
(0);

646 
	`OUT_BATCH
(0);

647 
	`OUT_BATCH
(0);

649 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_HS
);

650 
	`OUT_BATCH
(0);

652 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_HS
);

653 
	`OUT_BATCH
(0);

654 
	}
}

657 
	$gí8_emô_gs
(
öãl_b©chbuf„r
 *
b©ch
) {

658 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_GS
 | (11 - 2));

659 
	`OUT_BATCH
(0);

660 
	`OUT_BATCH
(0);

661 
	`OUT_BATCH
(0);

662 
	`OUT_BATCH
(0);

663 
	`OUT_BATCH
(0);

664 
	`OUT_BATCH
(0);

665 
	`OUT_BATCH
(0);

666 
	`OUT_BATCH
(0);

667 
	`OUT_BATCH
(0);

668 
	`OUT_BATCH
(0);

670 
	`OUT_BATCH
(
GEN7_3DSTATE_GS
 | (10-2));

671 
	`OUT_BATCH
(0);

672 
	`OUT_BATCH
(0);

673 
	`OUT_BATCH
(0);

674 
	`OUT_BATCH
(0);

675 
	`OUT_BATCH
(0);

676 
	`OUT_BATCH
(0);

677 
	`OUT_BATCH
(0);

678 
	`OUT_BATCH
(0);

679 
	`OUT_BATCH
(0);

681 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_GS
);

682 
	`OUT_BATCH
(0);

684 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_GS
);

685 
	`OUT_BATCH
(0);

686 
	}
}

689 
	$gí8_emô_ds
(
öãl_b©chbuf„r
 *
b©ch
) {

690 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_DS
 | (11 - 2));

691 
	`OUT_BATCH
(0);

692 
	`OUT_BATCH
(0);

693 
	`OUT_BATCH
(0);

694 
	`OUT_BATCH
(0);

695 
	`OUT_BATCH
(0);

696 
	`OUT_BATCH
(0);

697 
	`OUT_BATCH
(0);

698 
	`OUT_BATCH
(0);

699 
	`OUT_BATCH
(0);

700 
	`OUT_BATCH
(0);

702 
	`OUT_BATCH
(
GEN7_3DSTATE_DS
 | (9-2));

703 
	`OUT_BATCH
(0);

704 
	`OUT_BATCH
(0);

705 
	`OUT_BATCH
(0);

706 
	`OUT_BATCH
(0);

707 
	`OUT_BATCH
(0);

708 
	`OUT_BATCH
(0);

709 
	`OUT_BATCH
(0);

710 
	`OUT_BATCH
(0);

712 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_DS
);

713 
	`OUT_BATCH
(0);

715 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_DS
);

716 
	`OUT_BATCH
(0);

717 
	}
}

720 
	$gí8_emô_wm_hz_›
(
öãl_b©chbuf„r
 *
b©ch
) {

721 
	`OUT_BATCH
(
GEN8_3DSTATE_WM_HZ_OP
 | (5-2));

722 
	`OUT_BATCH
(0);

723 
	`OUT_BATCH
(0);

724 
	`OUT_BATCH
(0);

725 
	`OUT_BATCH
(0);

726 
	}
}

729 
	$gí8_emô_nuŒ_°©e
(
öãl_b©chbuf„r
 *
b©ch
) {

730 
	`gí8_emô_wm_hz_›
(
b©ch
);

731 
	`gí8_emô_hs
(
b©ch
);

732 
	`OUT_BATCH
(
GEN7_3DSTATE_TE
 | (4-2));

733 
	`OUT_BATCH
(0);

734 
	`OUT_BATCH
(0);

735 
	`OUT_BATCH
(0);

736 
	`gí8_emô_gs
(
b©ch
);

737 
	`gí8_emô_ds
(
b©ch
);

738 
	`gí8_emô_vs
(
b©ch
);

739 
	}
}

742 
	$gí7_emô_˛ù
(
öãl_b©chbuf„r
 *
b©ch
) {

743 
	`OUT_BATCH
(
GEN6_3DSTATE_CLIP
 | (4 - 2));

744 
	`OUT_BATCH
(0);

745 
	`OUT_BATCH
(0);

746 
	`OUT_BATCH
(0);

747 
	}
}

750 
	$gí8_emô_sf
(
öãl_b©chbuf„r
 *
b©ch
)

752 
i
;

754 
	`OUT_BATCH
(
GEN7_3DSTATE_SBE
 | (4 - 2));

755 
	`OUT_BATCH
(1 << 
GEN7_SBE_NUM_OUTPUTS_SHIFT
 |

756 
GEN8_SBE_FORCE_URB_ENTRY_READ_LENGTH
 |

757 
GEN8_SBE_FORCE_URB_ENTRY_READ_OFFSET
 |

758 1 << 
GEN7_SBE_URB_ENTRY_READ_LENGTH_SHIFT
 |

759 1 << 
GEN8_SBE_URB_ENTRY_READ_OFFSET_SHIFT
);

760 
	`OUT_BATCH
(0);

761 
	`OUT_BATCH
(0);

763 
	`OUT_BATCH
(
GEN8_3DSTATE_SBE_SWIZ
 | (11 - 2));

764 
i
 = 0; i < 8; i++)

765 
	`OUT_BATCH
(0);

766 
	`OUT_BATCH
(0);

767 
	`OUT_BATCH
(0);

769 
	`OUT_BATCH
(
GEN8_3DSTATE_RASTER
 | (5 - 2));

770 
	`OUT_BATCH
(
GEN8_RASTER_FRONT_WINDING_CCW
 | 
GEN8_RASTER_CULL_NONE
);

771 
	`OUT_BATCH
(0);

772 
	`OUT_BATCH
(0);

773 
	`OUT_BATCH
(0);

775 
	`OUT_BATCH
(
GEN6_3DSTATE_SF
 | (4 - 2));

776 
	`OUT_BATCH
(0);

777 
	`OUT_BATCH
(0);

778 
	`OUT_BATCH
(0);

779 
	}
}

782 
	$gí8_emô_ps
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
kî√l
) {

783 c⁄° 
max_thªads
 = 63;

785 
	`OUT_BATCH
(
GEN6_3DSTATE_WM
 | (2 - 2));

786 
	`OUT_BATCH
(

789 
GEN7_3DSTATE_PS_PERSPECTIVE_PIXEL_BARYCENTRIC
);

791 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_PS
 | (11-2));

792 
	`OUT_BATCH
(0);

793 
	`OUT_BATCH
(0);

794 
	`OUT_BATCH
(0);

795 
	`OUT_BATCH
(0);

796 
	`OUT_BATCH
(0);

797 
	`OUT_BATCH
(0);

798 
	`OUT_BATCH
(0);

799 
	`OUT_BATCH
(0);

800 
	`OUT_BATCH
(0);

801 
	`OUT_BATCH
(0);

803 
	`OUT_BATCH
(
GEN7_3DSTATE_PS
 | (12-2));

804 
	`OUT_BATCH
(
kî√l
);

805 
	`OUT_BATCH
(0);

806 
	`OUT_BATCH
(1 << 
GEN6_3DSTATE_WM_SAMPLER_COUNT_SHIFT
 |

807 2 << 
GEN6_3DSTATE_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT
);

808 
	`OUT_BATCH
(0);

809 
	`OUT_BATCH
(0);

810 
	`OUT_BATCH
((
max_thªads
 - 1Ë<< 
GEN8_3DSTATE_PS_MAX_THREADS_SHIFT
 |

811 
GEN6_3DSTATE_WM_16_DISPATCH_ENABLE
);

812 
	`OUT_BATCH
(6 << 
GEN6_3DSTATE_WM_DISPATCH_START_GRF_0_SHIFT
);

813 
	`OUT_BATCH
(0);

814 
	`OUT_BATCH
(0);

815 
	`OUT_BATCH
(0);

816 
	`OUT_BATCH
(0);

818 
	`OUT_BATCH
(
GEN8_3DSTATE_PS_BLEND
 | (2 - 2));

819 
	`OUT_BATCH
(
GEN8_PS_BLEND_HAS_WRITEABLE_RT
);

821 
	`OUT_BATCH
(
GEN8_3DSTATE_PS_EXTRA
 | (2 - 2));

822 
	`OUT_BATCH
(
GEN8_PSX_PIXEL_SHADER_VALID
 | 
GEN8_PSX_ATTRIBUTE_ENABLE
);

823 
	}
}

826 
	$gí8_emô_dïth
(
öãl_b©chbuf„r
 *
b©ch
) {

827 
	`OUT_BATCH
(
GEN8_3DSTATE_WM_DEPTH_STENCIL
 | (3 - 2));

828 
	`OUT_BATCH
(0);

829 
	`OUT_BATCH
(0);

831 
	`OUT_BATCH
(
GEN7_3DSTATE_DEPTH_BUFFER
 | (8-2));

832 
	`OUT_BATCH
(0);

833 
	`OUT_BATCH
(0);

834 
	`OUT_BATCH
(0);

835 
	`OUT_BATCH
(0);

836 
	`OUT_BATCH
(0);

837 
	`OUT_BATCH
(0);

838 
	`OUT_BATCH
(0);

840 
	`OUT_BATCH
(
GEN7_3DSTATE_HIER_DEPTH_BUFFER
 | (5 - 2));

841 
	`OUT_BATCH
(0);

842 
	`OUT_BATCH
(0);

843 
	`OUT_BATCH
(0);

844 
	`OUT_BATCH
(0);

846 
	`OUT_BATCH
(
GEN7_3DSTATE_STENCIL_BUFFER
 | (5 - 2));

847 
	`OUT_BATCH
(0);

848 
	`OUT_BATCH
(0);

849 
	`OUT_BATCH
(0);

850 
	`OUT_BATCH
(0);

851 
	}
}

854 
	$gí7_emô_˛ór
(
öãl_b©chbuf„r
 *
b©ch
) {

855 
	`OUT_BATCH
(
GEN7_3DSTATE_CLEAR_PARAMS
 | (3-2));

856 
	`OUT_BATCH
(0);

857 
	`OUT_BATCH
(1);

858 
	}
}

861 
	$gí6_emô_døwög_ª˘™gÀ
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

863 
	`OUT_BATCH
(
GEN6_3DSTATE_DRAWING_RECTANGLE
 | (4 - 2));

864 
	`OUT_BATCH
(0);

865 
	`OUT_BATCH
((
	`igt_buf_height
(
d°
Ë- 1Ë<< 16 | (
	`igt_buf_width
(dst) - 1));

866 
	`OUT_BATCH
(0);

867 
	}
}

869 
	$gí8_emô_vf_t›ﬁogy
(
öãl_b©chbuf„r
 *
b©ch
)

871 
	`OUT_BATCH
(
GEN8_3DSTATE_VF_TOPOLOGY
);

872 
	`OUT_BATCH
(
_3DPRIM_RECTLIST
);

873 
	}
}

876 
	$gí8_emô_¥imôive
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
off£t
)

878 
	`OUT_BATCH
(
GEN8_3DSTATE_VF_INSTANCING
 | (3 - 2));

879 
	`OUT_BATCH
(0);

880 
	`OUT_BATCH
(0);

882 
	`OUT_BATCH
(
GEN6_3DPRIMITIVE
 | (7-2));

883 
	`OUT_BATCH
(0);

884 
	`OUT_BATCH
(3);

885 
	`OUT_BATCH
(0);

886 
	`OUT_BATCH
(1);

887 
	`OUT_BATCH
(0);

888 
	`OUT_BATCH
(0);

889 
	}
}

921 
	#BATCH_STATE_SPLIT
 2048

	)

923 
	$gí8_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

924 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

925 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

926 
width
, 
height
,

927 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

929 
™nŸ©i⁄s_c⁄ãxt
 
aub_™nŸ©i⁄s
;

930 
uöt32_t
 
ps_ßm∂î_°©e
, 
ps_kî√l_off
, 
ps_bödög_èbÀ
;

931 
uöt32_t
 
sciss‹_°©e
;

932 
uöt32_t
 
vîãx_buf„r
;

933 
uöt32_t
 
b©ch_íd
;

935 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
c⁄ãxt
);

937 
	`b©ch_Æign
(
b©ch
, 8);

939 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

941 
	`™nŸ©i⁄_öô
(&
aub_™nŸ©i⁄s
);

943 
ps_bödög_èbÀ
 = 
	`gí8_böd_surÁ˚s
(
b©ch
, &
aub_™nŸ©i⁄s
,

944 
§c
, 
d°
);

945 
ps_ßm∂î_°©e
 = 
	`gí8_¸óã_ßm∂î
(
b©ch
, &
aub_™nŸ©i⁄s
);

946 
ps_kî√l_off
 = 
	`gí8_fûl_ps
(
b©ch
, &
aub_™nŸ©i⁄s
,

947 
ps_kî√l
, (ps_kernel));

948 
vîãx_buf„r
 = 
	`gí7_fûl_vîãx_buf„r_d©a
(
b©ch
, &
aub_™nŸ©i⁄s
,

949 
§c
,

950 
§c_x
, 
§c_y
,

951 
d°_x
, 
d°_y
,

952 
width
, 
height
);

953 
cc
.
cc_°©e
 = 
	`gí6_¸óã_cc_°©e
(
b©ch
, &
aub_™nŸ©i⁄s
);

954 
cc
.
bÀnd_°©e
 = 
	`gí8_¸óã_bÀnd_°©e
(
b©ch
, &
aub_™nŸ©i⁄s
);

955 
võwp‹t
.
cc_°©e
 = 
	`gí6_¸óã_cc_võwp‹t
(
b©ch
, &
aub_™nŸ©i⁄s
);

956 
võwp‹t
.
sf_˛ù_°©e
 = 
	`gí7_¸óã_sf_˛ù_võwp‹t
(
b©ch
, &
aub_™nŸ©i⁄s
);

957 
sciss‹_°©e
 = 
	`gí6_¸óã_sciss‹_ª˘
(
b©ch
, &
aub_™nŸ©i⁄s
);

960 
	`igt_as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

962 
b©ch
->
±r
 = b©ch->
buf„r
;

966 
	`OUT_BATCH
(
GEN6_PIPELINE_SELECT
 | 
PIPELINE_SELECT_3D
);

968 
	`gí8_emô_sù
(
b©ch
);

970 
	`gí7_emô_push_c⁄°™ts
(
b©ch
);

972 
	`gí8_emô_°©e_ba£_addªss
(
b©ch
);

974 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_CC
);

975 
	`OUT_BATCH
(
võwp‹t
.
cc_°©e
);

976 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CLIP
);

977 
	`OUT_BATCH
(
võwp‹t
.
sf_˛ù_°©e
);

979 
	`gí7_emô_urb
(
b©ch
);

981 
	`gí8_emô_cc
(
b©ch
);

983 
	`gí8_emô_mu…ißm∂e
(
b©ch
);

985 
	`gí8_emô_nuŒ_°©e
(
b©ch
);

987 
	`OUT_BATCH
(
GEN7_3DSTATE_STREAMOUT
 | (5-2));

988 
	`OUT_BATCH
(0);

989 
	`OUT_BATCH
(0);

990 
	`OUT_BATCH
(0);

991 
	`OUT_BATCH
(0);

993 
	`gí7_emô_˛ù
(
b©ch
);

995 
	`gí8_emô_sf
(
b©ch
);

997 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_PS
);

998 
	`OUT_BATCH
(
ps_bödög_èbÀ
);

1000 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_PS
);

1001 
	`OUT_BATCH
(
ps_ßm∂î_°©e
);

1003 
	`gí8_emô_ps
(
b©ch
, 
ps_kî√l_off
);

1005 
	`OUT_BATCH
(
GEN6_3DSTATE_SCISSOR_STATE_POINTERS
);

1006 
	`OUT_BATCH
(
sciss‹_°©e
);

1008 
	`gí8_emô_dïth
(
b©ch
);

1010 
	`gí7_emô_˛ór
(
b©ch
);

1012 
	`gí6_emô_døwög_ª˘™gÀ
(
b©ch
, 
d°
);

1014 
	`gí8_emô_vîãx_buf„r
(
b©ch
, 
vîãx_buf„r
);

1015 
	`gí6_emô_vîãx_ñemíts
(
b©ch
);

1017 
	`gí8_emô_vf_t›ﬁogy
(
b©ch
);

1018 
	`gí8_emô_¥imôive
(
b©ch
, 
vîãx_buf„r
);

1020 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

1022 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

1023 
	`igt_as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

1024 
	`™nŸ©i⁄_add_b©ch
(&
aub_™nŸ©i⁄s
, 
b©ch_íd
);

1026 
	`dump_b©ch
(
b©ch
);

1028 
	`™nŸ©i⁄_Êush
(&
aub_™nŸ©i⁄s
, 
b©ch
);

1030 
	`gí6_ªndî_Êush
(
b©ch
, 
c⁄ãxt
, 
b©ch_íd
);

1031 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

1032 
	}
}

	@rendercopy_gen9.c

1 
	~<as£π.h
>

2 
	~<°dlib.h
>

3 
	~<sys/io˘l.h
>

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<f˙é.h
>

8 
	~<öây≥s.h
>

9 
	~<î∫o.h
>

10 
	~<sys/°©.h
>

11 
	~<sys/time.h
>

12 
	~<gë›t.h
>

14 
	~<drm.h
>

15 
	~<i915_drm.h
>

17 
	~"drmã°.h
"

18 
	~"öãl_bufmgr.h
"

19 
	~"öãl_b©chbuf„r.h
"

20 
	~"öãl_io.h
"

21 
	~"ªndîc›y.h
"

22 
	~"gí9_ªndî.h
"

23 
	~"öãl_ªg.h
"

24 
	~"igt_aux.h
"

26 
	~<öãl_aub.h
>

28 
	#VERTEX_SIZE
 (3*4)

	)

30 #i‡
DEBUG_RENDERCPY


31 
	$dump_b©ch
(
öãl_b©chbuf„r
 *
b©ch
) {

32 
fd
 = 
	`›í
("/tmp/i965-b©chbuf„rs.dump", 
O_WRONLY
 | 
O_CREAT
, 0666);

33 i‡(
fd
 != -1) {

34 
	`igt_as£π_eq
(
	`wrôe
(
fd
, 
b©ch
->
buf„r
, 4096), 4096);

35 
fd
 = 
	`˛o£
(fd);

37 
	}
}

39 
	#dump_b©ch
(
x
Ëdÿ{ } 0)

	)

43 
uöt32_t
 
	mcc_°©e
;

44 
uöt32_t
 
	mbÀnd_°©e
;

45 } 
	gcc
;

48 
uöt32_t
 
	mcc_°©e
;

49 
uöt32_t
 
	msf_˛ù_°©e
;

50 } 
	gvõwp‹t
;

53 c⁄° 
uöt32_t
 
	gps_kî√l
[][4] = {

76 
	#MAX_ANNOTATIONS
 33

	)

77 
	s™nŸ©i⁄s_c⁄ãxt
 {

78 
drm_öãl_aub_™nŸ©i⁄
 
	m™nŸ©i⁄s
[
MAX_ANNOTATIONS
];

79 
	mödex
;

80 
uöt32_t
 
	moff£t
;

81 } 
	gaub_™nŸ©i⁄s
;

83 
	$™nŸ©i⁄_öô
(
™nŸ©i⁄s_c⁄ãxt
 *
˘x
)

89 
˘x
->
ödex
 = 1;

90 
	}
}

92 
	$add_™nŸ©i⁄
(
drm_öãl_aub_™nŸ©i⁄
 *
a
,

93 
uöt32_t
 
ty≥
, uöt32_à
subty≥
,

94 
uöt32_t
 
ídög_off£t
)

96 
a
->
ty≥
 =Åype;

97 
a
->
subty≥
 = subtype;

98 
a
->
ídög_off£t
 =Énding_offset;

99 
	}
}

101 
	$™nŸ©i⁄_add_b©ch
(
™nŸ©i⁄s_c⁄ãxt
 *
˘x
, 
size_t
 
size
)

103 
	`add_™nŸ©i⁄
(&
˘x
->
™nŸ©i⁄s
[0], 
AUB_TRACE_TYPE_BATCH
, 0, 
size
);

104 
	}
}

106 
	$™nŸ©i⁄_add_°©e
(
™nŸ©i⁄s_c⁄ãxt
 *
˘x
,

107 
uöt32_t
 
°©e_ty≥
,

108 
uöt32_t
 
°¨t_off£t
,

109 
size_t
 
size
)

111 
	`as£π
(
˘x
->
ödex
 < 
MAX_ANNOTATIONS
);

113 
	`add_™nŸ©i⁄
(&
˘x
->
™nŸ©i⁄s
[˘x->
ödex
++],

114 
AUB_TRACE_TYPE_NOTYPE
, 0,

115 
°¨t_off£t
);

116 
	`add_™nŸ©i⁄
(&
˘x
->
™nŸ©i⁄s
[˘x->
ödex
++],

117 
	`AUB_TRACE_TYPE
(
°©e_ty≥
),

118 
	`AUB_TRACE_SUBTYPE
(
°©e_ty≥
),

119 
°¨t_off£t
 + 
size
);

120 
	}
}

122 
	$™nŸ©i⁄_Êush
(
™nŸ©i⁄s_c⁄ãxt
 *
˘x
,

123 
öãl_b©chbuf„r
 *
b©ch
)

125 i‡(!
	`igt_aub_dump_íabÀd
())

128 
	`drm_öãl_bufmgr_gem_£t_aub_™nŸ©i⁄s
(
b©ch
->
bo
,

129 
˘x
->
™nŸ©i⁄s
,

130 
˘x
->
ödex
);

131 
	}
}

133 
uöt32_t


134 
	$b©ch_u£d
(
öãl_b©chbuf„r
 *
b©ch
)

136  
b©ch
->
±r
 - b©ch->
buf„r
;

137 
	}
}

139 
uöt32_t


140 
	$b©ch_Æign
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
Æign
)

142 
uöt32_t
 
off£t
 = 
	`b©ch_u£d
(
b©ch
);

143 
off£t
 = 
	`ALIGN
(off£t, 
Æign
);

144 
b©ch
->
±r
 = b©ch->
buf„r
 + 
off£t
;

145  
off£t
;

146 
	}
}

149 
	$b©ch_Æloc
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
size
, uöt32_à
Æign
)

151 
uöt32_t
 
off£t
 = 
	`b©ch_Æign
(
b©ch
, 
Æign
);

152 
b©ch
->
±r
 +
size
;

153  
	`mem£t
(
b©ch
->
buf„r
 + 
off£t
, 0, 
size
);

154 
	}
}

156 
uöt32_t


157 
	$b©ch_off£t
(
öãl_b©chbuf„r
 *
b©ch
, *
±r
)

159  (
uöt8_t
 *)
±r
 - 
b©ch
->
buf„r
;

160 
	}
}

162 
uöt32_t


163 
	$b©ch_c›y
(
öãl_b©chbuf„r
 *
b©ch
, c⁄° *
±r
, 
uöt32_t
 
size
, uöt32_à
Æign
)

165  
	`b©ch_off£t
(
b©ch
, 
	`mem˝y
(
	`b©ch_Æloc
(b©ch, 
size
, 
Æign
), 
±r
, size));

166 
	}
}

169 
	$gí6_ªndî_Êush
(
öãl_b©chbuf„r
 *
b©ch
,

170 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
, 
uöt32_t
 
b©ch_íd
)

172 
ªt
;

174 
ªt
 = 
	`drm_öãl_bo_subd©a
(
b©ch
->
bo
, 0, 4096, b©ch->
buf„r
);

175 i‡(
ªt
 == 0)

176 
ªt
 = 
	`drm_öãl_gem_bo_c⁄ãxt_exec
(
b©ch
->
bo
, 
c⁄ãxt
,

177 
b©ch_íd
, 0);

178 
	`as£π
(
ªt
 == 0);

179 
	}
}

182 
uöt32_t


183 
	$gí8_böd_buf
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
buf
,

184 
uöt32_t
 
f‹m©
, 
is_d°
) {

185 
gí8_surÁ˚_°©e
 *
ss
;

186 
uöt32_t
 
wrôe_domaö
, 
ªad_domaö
, 
off£t
;

187 
ªt
;

189 i‡(
is_d°
) {

190 
wrôe_domaö
 = 
ªad_domaö
 = 
I915_GEM_DOMAIN_RENDER
;

192 
wrôe_domaö
 = 0;

193 
ªad_domaö
 = 
I915_GEM_DOMAIN_SAMPLER
;

196 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

197 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

198 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_SURFACE_STATE
,

199 
off£t
, (*
ss
));

201 
ss
->
ss0
.
surÁ˚_ty≥
 = 
GEN6_SURFACE_2D
;

202 
ss
->
ss0
.
surÁ˚_f‹m©
 = 
f‹m©
;

203 
ss
->
ss0
.
ªndî_ˇche_ªad_wrôe
 = 1;

204 
ss
->
ss0
.
vîtiˇl_Æignmít
 = 1;

205 
ss
->
ss0
.
h‹iz⁄èl_Æignmít
 = 1;

206 i‡(
buf
->
tûög
 =
I915_TILING_X
)

207 
ss
->
ss0
.
tûed_mode
 = 2;

208 i‡(
buf
->
tûög
 =
I915_TILING_Y
)

209 
ss
->
ss0
.
tûed_mode
 = 3;

211 
ss
->
ss8
.
ba£_addr
 = 
buf
->
bo
->
off£t
;

213 
ªt
 = 
	`drm_öãl_bo_emô_ªloc
(
b©ch
->
bo
,

214 
	`b©ch_off£t
(
b©ch
, 
ss
) + 8 * 4,

215 
buf
->
bo
, 0,

216 
ªad_domaö
, 
wrôe_domaö
);

217 
	`as£π
(
ªt
 == 0);

219 
ss
->
ss2
.
height
 = 
	`igt_buf_height
(
buf
) - 1;

220 
ss
->
ss2
.
width
 = 
	`igt_buf_width
(
buf
) - 1;

221 
ss
->
ss3
.
pôch
 = 
buf
->
°ride
 - 1;

223 
ss
->
ss7
.
shadî_ch™ñ_£À˘_r
 = 4;

224 
ss
->
ss7
.
shadî_ch™ñ_£À˘_g
 = 5;

225 
ss
->
ss7
.
shadî_ch™ñ_£À˘_b
 = 6;

226 
ss
->
ss7
.
shadî_ch™ñ_£À˘_a
 = 7;

228  
off£t
;

229 
	}
}

231 
uöt32_t


232 
	$gí8_böd_surÁ˚s
(
öãl_b©chbuf„r
 *
b©ch
,

233 
igt_buf
 *
§c
,

234 
igt_buf
 *
d°
)

236 
uöt32_t
 *
bödög_èbÀ
, 
off£t
;

238 
bödög_èbÀ
 = 
	`b©ch_Æloc
(
b©ch
, 8, 32);

239 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bödög_èbÀ
);

240 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_BINDING_TABLE
,

241 
off£t
, 8);

243 
bödög_èbÀ
[0] =

244 
	`gí8_böd_buf
(
b©ch
, 
d°
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 1);

245 
bödög_èbÀ
[1] =

246 
	`gí8_böd_buf
(
b©ch
, 
§c
, 
GEN6_SURFACEFORMAT_B8G8R8A8_UNORM
, 0);

248  
off£t
;

249 
	}
}

252 
uöt32_t


253 
	$gí8_¸óã_ßm∂î
(
öãl_b©chbuf„r
 *
b©ch
) {

254 
gí8_ßm∂î_°©e
 *
ss
;

255 
uöt32_t
 
off£t
;

257 
ss
 = 
	`b©ch_Æloc
(
b©ch
, (*ss), 64);

258 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
ss
);

259 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_SAMPLER_STATE
,

260 
off£t
, (*
ss
));

262 
ss
->
ss0
.
mö_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

263 
ss
->
ss0
.
mag_fûãr
 = 
GEN6_MAPFILTER_NEAREST
;

264 
ss
->
ss3
.
r_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

265 
ss
->
ss3
.
s_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

266 
ss
->
ss3
.
t_wøp_mode
 = 
GEN6_TEXCOORDMODE_CLAMP
;

270 
ss
->
ss3
.
n⁄_n‹mÆized_co‹d
 = 0;

272  
off£t
;

273 
	}
}

275 
uöt32_t


276 
	$gí8_fûl_ps
(
öãl_b©chbuf„r
 *
b©ch
,

277 c⁄° 
uöt32_t
 
kî√l
[][4],

278 
size_t
 
size
)

280 
uöt32_t
 
off£t
;

282 
off£t
 = 
	`b©ch_c›y
(
b©ch
, 
kî√l
, 
size
, 64);

283 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_KERNEL_INSTRUCTIONS
,

284 
off£t
, 
size
);

286  
off£t
;

287 
	}
}

299 
uöt32_t


300 
	$gí7_fûl_vîãx_buf„r_d©a
(
öãl_b©chbuf„r
 *
b©ch
,

301 
igt_buf
 *
§c
,

302 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

303 
uöt32_t
 
d°_x
, uöt32_à
d°_y
,

304 
uöt32_t
 
width
, uöt32_à
height
)

306 *
°¨t
;

307 
uöt32_t
 
off£t
;

309 
	`b©ch_Æign
(
b©ch
, 8);

310 
°¨t
 = 
b©ch
->
±r
;

312 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
 + 
width
, 
d°_y
 + 
height
);

313 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
 + 
width
, 
	`igt_buf_width
(
§c
));

314 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

316 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
 + 
height
);

317 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

318 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

320 
	`emô_vîãx_2s
(
b©ch
, 
d°_x
, 
d°_y
);

321 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

322 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
, 
	`igt_buf_height
(
§c
));

324 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
°¨t
);

325 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_VERTEX_BUFFER
,

326 
off£t
, 3 * 
VERTEX_SIZE
);

327  
off£t
;

328 
	}
}

340 
	$gí6_emô_vîãx_ñemíts
(
öãl_b©chbuf„r
 *
b©ch
) {

347 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_ELEMENTS
 | (3 * 2 + 1 - 2));

352 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

353 
GEN6_SURFACEFORMAT_R32G32B32A32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

354 0 << 
VE0_OFFSET_SHIFT
);

355 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

356 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

357 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

358 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_3_SHIFT
);

366 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

367 
GEN6_SURFACEFORMAT_R16G16_SSCALED
 << 
VE0_FORMAT_SHIFT
 |

368 0 << 
VE0_OFFSET_SHIFT
);

369 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

370 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

371 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

372 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_3_SHIFT
);

378 
	`OUT_BATCH
(0 << 
VE0_VERTEX_BUFFER_INDEX_SHIFT
 | 
VE0_VALID
 |

379 
GEN6_SURFACEFORMAT_R32G32_FLOAT
 << 
VE0_FORMAT_SHIFT
 |

380 4 << 
VE0_OFFSET_SHIFT
);

381 
	`OUT_BATCH
(
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_0_SHIFT
 |

382 
GEN6_VFCOMPONENT_STORE_SRC
 << 
VE1_VFCOMPONENT_1_SHIFT
 |

383 
GEN6_VFCOMPONENT_STORE_0
 << 
VE1_VFCOMPONENT_2_SHIFT
 |

384 
GEN6_VFCOMPONENT_STORE_1_FLT
 << 
VE1_VFCOMPONENT_3_SHIFT
);

385 
	}
}

393 
	$gí7_emô_vîãx_buf„r
(
öãl_b©chbuf„r
 *
b©ch
,

394 
uöt32_t
 
off£t
) {

395 
	`OUT_BATCH
(
GEN6_3DSTATE_VERTEX_BUFFERS
 | (1 + (4 * 1) - 2));

396 
	`OUT_BATCH
(0 << 
VB0_BUFFER_INDEX_SHIFT
 |

397 
GEN7_VB0_BUFFER_ADDR_MOD_EN
 |

398 
VERTEX_SIZE
 << 
VB0_BUFFER_PITCH_SHIFT
);

399 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_VERTEX
, 0, 
off£t
);

400 
	`OUT_BATCH
(3 * 
VERTEX_SIZE
);

401 
	}
}

403 
uöt32_t


404 
	$gí6_¸óã_cc_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

406 
gí6_cﬁ‹_ˇlc_°©e
 *
cc_°©e
;

407 
uöt32_t
 
off£t
;

409 
cc_°©e
 = 
	`b©ch_Æloc
(
b©ch
, (*cc_state), 64);

410 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
cc_°©e
);

411 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_CC_STATE
,

412 
off£t
, (*
cc_°©e
));

414  
off£t
;

415 
	}
}

417 
uöt32_t


418 
	$gí8_¸óã_bÀnd_°©e
(
öãl_b©chbuf„r
 *
b©ch
)

420 
gí8_bÀnd_°©e
 *
bÀnd
;

421 
i
;

422 
uöt32_t
 
off£t
;

424 
bÀnd
 = 
	`b©ch_Æloc
(
b©ch
, (*blend), 64);

425 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
bÀnd
);

426 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_BLEND_STATE
,

427 
off£t
, (*
bÀnd
));

429 
i
 = 0; i < 16; i++) {

430 
bÀnd
->
bs
[
i
].
de°_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ZERO
;

431 
bÀnd
->
bs
[
i
].
sour˚_bÀnd_Á˘‹
 = 
GEN6_BLENDFACTOR_ONE
;

432 
bÀnd
->
bs
[
i
].
cﬁ‹_bÀnd_func
 = 
GEN6_BLENDFUNCTION_ADD
;

433 
bÀnd
->
bs
[
i
].
¥e_bÀnd_cﬁ‹_˛amp
 = 1;

434 
bÀnd
->
bs
[
i
].
cﬁ‹_buf„r_bÀnd
 = 0;

437  
off£t
;

438 
	}
}

440 
uöt32_t


441 
	$gí6_¸óã_cc_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
)

443 
gí6_cc_võwp‹t
 *
vp
;

444 
uöt32_t
 
off£t
;

446 
vp
 = 
	`b©ch_Æloc
(
b©ch
, (*vp), 32);

447 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
vp
);

448 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_CC_VP_STATE
,

449 
off£t
, (*
vp
));

452 
vp
->
mö_dïth
 = -1.e35;

453 
vp
->
max_dïth
 = 1.e35;

455  
off£t
;

456 
	}
}

458 
uöt32_t


459 
	$gí7_¸óã_sf_˛ù_võwp‹t
(
öãl_b©chbuf„r
 *
b©ch
) {

461 
gí7_sf_˛ù_võwp‹t
 *
scv_°©e
;

462 
uöt32_t
 
off£t
;

464 
scv_°©e
 = 
	`b©ch_Æloc
(
b©ch
, (*scv_state), 64);

465 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
scv_°©e
);

466 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_CLIP_VP_STATE
,

467 
off£t
, (*
scv_°©e
));

469 
scv_°©e
->
gu¨db™d
.
xmö
 = 0;

470 
scv_°©e
->
gu¨db™d
.
xmax
 = 1.0f;

471 
scv_°©e
->
gu¨db™d
.
ymö
 = 0;

472 
scv_°©e
->
gu¨db™d
.
ymax
 = 1.0f;

474  
off£t
;

475 
	}
}

477 
uöt32_t


478 
	$gí6_¸óã_sciss‹_ª˘
(
öãl_b©chbuf„r
 *
b©ch
)

480 
gí6_sciss‹_ª˘
 *
sciss‹
;

481 
uöt32_t
 
off£t
;

483 
sciss‹
 = 
	`b©ch_Æloc
(
b©ch
, (*scissor), 64);

484 
off£t
 = 
	`b©ch_off£t
(
b©ch
, 
sciss‹
);

485 
	`™nŸ©i⁄_add_°©e
(&
aub_™nŸ©i⁄s
, 
AUB_TRACE_SCISSOR_STATE
,

486 
off£t
, (*
sciss‹
));

488  
off£t
;

489 
	}
}

492 
	$gí8_emô_sù
(
öãl_b©chbuf„r
 *
b©ch
) {

493 
	`OUT_BATCH
(
GEN6_STATE_SIP
 | (3 - 2));

494 
	`OUT_BATCH
(0);

495 
	`OUT_BATCH
(0);

496 
	}
}

499 
	$gí7_emô_push_c⁄°™ts
(
öãl_b©chbuf„r
 *
b©ch
) {

500 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_VS
);

501 
	`OUT_BATCH
(0);

502 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_HS
);

503 
	`OUT_BATCH
(0);

504 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_DS
);

505 
	`OUT_BATCH
(0);

506 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_GS
);

507 
	`OUT_BATCH
(0);

508 
	`OUT_BATCH
(
GEN7_3DSTATE_PUSH_CONSTANT_ALLOC_PS
);

509 
	`OUT_BATCH
(0);

510 
	}
}

513 
	$gí9_emô_°©e_ba£_addªss
(
öãl_b©chbuf„r
 *
b©ch
) {

518 
	`OUT_BATCH
(
GEN6_STATE_BASE_ADDRESS
 | (19 - 1 - 2));

521 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

522 
	`OUT_BATCH
(0);

525 
	`OUT_BATCH
(0 | 
BASE_ADDRESS_MODIFY
);

528 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 
BASE_ADDRESS_MODIFY
);

531 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_RENDER
 | 
I915_GEM_DOMAIN_INSTRUCTION
,

532 0, 
BASE_ADDRESS_MODIFY
);

535 
	`OUT_BATCH
(0);

536 
	`OUT_BATCH
(0);

539 
	`OUT_RELOC
(
b©ch
->
bo
, 
I915_GEM_DOMAIN_INSTRUCTION
, 0, 
BASE_ADDRESS_MODIFY
);

542 
	`OUT_BATCH
(0xfffff000 | 1);

544 
	`OUT_BATCH
(1 << 12 | 1);

546 
	`OUT_BATCH
(0xfffff000 | 1);

548 
	`OUT_BATCH
(1 << 12 | 1);

551 
	`OUT_BATCH
(0);

552 
	`OUT_BATCH
(0);

553 
	`OUT_BATCH
(0);

554 
	}
}

557 
	$gí7_emô_urb
(
öãl_b©chbuf„r
 *
b©ch
) {

559 c⁄° 
vs_íåõs
 = 64;

560 c⁄° 
vs_size
 = 2;

561 c⁄° 
vs_°¨t
 = 4;

563 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_VS
);

564 
	`OUT_BATCH
(
vs_íåõs
 | ((
vs_size
 - 1Ë<< 16Ë| (
vs_°¨t
 << 25));

565 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_GS
);

566 
	`OUT_BATCH
(
vs_°¨t
 << 25);

567 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_HS
);

568 
	`OUT_BATCH
(
vs_°¨t
 << 25);

569 
	`OUT_BATCH
(
GEN7_3DSTATE_URB_DS
);

570 
	`OUT_BATCH
(
vs_°¨t
 << 25);

571 
	}
}

574 
	$gí8_emô_cc
(
öãl_b©chbuf„r
 *
b©ch
) {

575 
	`OUT_BATCH
(
GEN7_3DSTATE_BLEND_STATE_POINTERS
);

576 
	`OUT_BATCH
(
cc
.
bÀnd_°©e
 | 1);

578 
	`OUT_BATCH
(
GEN6_3DSTATE_CC_STATE_POINTERS
);

579 
	`OUT_BATCH
(
cc
.
cc_°©e
 | 1);

580 
	}
}

583 
	$gí8_emô_mu…ißm∂e
(
öãl_b©chbuf„r
 *
b©ch
) {

584 
	`OUT_BATCH
(
GEN8_3DSTATE_MULTISAMPLE
 | 0);

585 
	`OUT_BATCH
(0);

587 
	`OUT_BATCH
(
GEN6_3DSTATE_SAMPLE_MASK
);

588 
	`OUT_BATCH
(1);

589 
	}
}

592 
	$gí8_emô_vs
(
öãl_b©chbuf„r
 *
b©ch
) {

593 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_VS
 | (11-2));

594 
	`OUT_BATCH
(0);

595 
	`OUT_BATCH
(0);

596 
	`OUT_BATCH
(0);

597 
	`OUT_BATCH
(0);

598 
	`OUT_BATCH
(0);

599 
	`OUT_BATCH
(0);

600 
	`OUT_BATCH
(0);

601 
	`OUT_BATCH
(0);

602 
	`OUT_BATCH
(0);

603 
	`OUT_BATCH
(0);

605 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_VS
);

606 
	`OUT_BATCH
(0);

608 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_VS
);

609 
	`OUT_BATCH
(0);

611 
	`OUT_BATCH
(
GEN6_3DSTATE_VS
 | (9-2));

612 
	`OUT_BATCH
(0);

613 
	`OUT_BATCH
(0);

614 
	`OUT_BATCH
(0);

615 
	`OUT_BATCH
(0);

616 
	`OUT_BATCH
(0);

617 
	`OUT_BATCH
(0);

618 
	`OUT_BATCH
(0);

619 
	`OUT_BATCH
(0);

620 
	}
}

623 
	$gí8_emô_hs
(
öãl_b©chbuf„r
 *
b©ch
) {

624 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_HS
 | (11-2));

625 
	`OUT_BATCH
(0);

626 
	`OUT_BATCH
(0);

627 
	`OUT_BATCH
(0);

628 
	`OUT_BATCH
(0);

629 
	`OUT_BATCH
(0);

630 
	`OUT_BATCH
(0);

631 
	`OUT_BATCH
(0);

632 
	`OUT_BATCH
(0);

633 
	`OUT_BATCH
(0);

634 
	`OUT_BATCH
(0);

636 
	`OUT_BATCH
(
GEN7_3DSTATE_HS
 | (9-2));

637 
	`OUT_BATCH
(0);

638 
	`OUT_BATCH
(0);

639 
	`OUT_BATCH
(0);

640 
	`OUT_BATCH
(0);

641 
	`OUT_BATCH
(0);

642 
	`OUT_BATCH
(0);

643 
	`OUT_BATCH
(0);

644 
	`OUT_BATCH
(0);

646 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_HS
);

647 
	`OUT_BATCH
(0);

649 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_HS
);

650 
	`OUT_BATCH
(0);

651 
	}
}

654 
	$gí8_emô_gs
(
öãl_b©chbuf„r
 *
b©ch
) {

655 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_GS
 | (11-2));

656 
	`OUT_BATCH
(0);

657 
	`OUT_BATCH
(0);

658 
	`OUT_BATCH
(0);

659 
	`OUT_BATCH
(0);

660 
	`OUT_BATCH
(0);

661 
	`OUT_BATCH
(0);

662 
	`OUT_BATCH
(0);

663 
	`OUT_BATCH
(0);

664 
	`OUT_BATCH
(0);

665 
	`OUT_BATCH
(0);

667 
	`OUT_BATCH
(
GEN7_3DSTATE_GS
 | (10-2));

668 
	`OUT_BATCH
(0);

669 
	`OUT_BATCH
(0);

670 
	`OUT_BATCH
(0);

671 
	`OUT_BATCH
(0);

672 
	`OUT_BATCH
(0);

673 
	`OUT_BATCH
(0);

674 
	`OUT_BATCH
(0);

675 
	`OUT_BATCH
(0);

676 
	`OUT_BATCH
(0);

678 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_GS
);

679 
	`OUT_BATCH
(0);

681 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_GS
);

682 
	`OUT_BATCH
(0);

683 
	}
}

686 
	$gí9_emô_ds
(
öãl_b©chbuf„r
 *
b©ch
) {

687 
	`OUT_BATCH
(
GEN7_3DSTATE_CONSTANT_DS
 | (11-2));

688 
	`OUT_BATCH
(0);

689 
	`OUT_BATCH
(0);

690 
	`OUT_BATCH
(0);

691 
	`OUT_BATCH
(0);

692 
	`OUT_BATCH
(0);

693 
	`OUT_BATCH
(0);

694 
	`OUT_BATCH
(0);

695 
	`OUT_BATCH
(0);

696 
	`OUT_BATCH
(0);

697 
	`OUT_BATCH
(0);

699 
	`OUT_BATCH
(
GEN7_3DSTATE_DS
 | (11-2));

700 
	`OUT_BATCH
(0);

701 
	`OUT_BATCH
(0);

702 
	`OUT_BATCH
(0);

703 
	`OUT_BATCH
(0);

704 
	`OUT_BATCH
(0);

705 
	`OUT_BATCH
(0);

706 
	`OUT_BATCH
(0);

707 
	`OUT_BATCH
(0);

708 
	`OUT_BATCH
(0);

709 
	`OUT_BATCH
(0);

711 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_DS
);

712 
	`OUT_BATCH
(0);

714 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_DS
);

715 
	`OUT_BATCH
(0);

716 
	}
}

720 
	$gí8_emô_wm_hz_›
(
öãl_b©chbuf„r
 *
b©ch
) {

721 
	`OUT_BATCH
(
GEN8_3DSTATE_WM_HZ_OP
 | (5-2));

722 
	`OUT_BATCH
(0);

723 
	`OUT_BATCH
(0);

724 
	`OUT_BATCH
(0);

725 
	`OUT_BATCH
(0);

726 
	}
}

729 
	$gí8_emô_nuŒ_°©e
(
öãl_b©chbuf„r
 *
b©ch
) {

730 
	`gí8_emô_wm_hz_›
(
b©ch
);

731 
	`gí8_emô_hs
(
b©ch
);

732 
	`OUT_BATCH
(
GEN7_3DSTATE_TE
 | (4-2));

733 
	`OUT_BATCH
(0);

734 
	`OUT_BATCH
(0);

735 
	`OUT_BATCH
(0);

736 
	`gí8_emô_gs
(
b©ch
);

737 
	`gí9_emô_ds
(
b©ch
);

738 
	`gí8_emô_vs
(
b©ch
);

739 
	}
}

742 
	$gí7_emô_˛ù
(
öãl_b©chbuf„r
 *
b©ch
) {

743 
	`OUT_BATCH
(
GEN6_3DSTATE_CLIP
 | (4 - 2));

744 
	`OUT_BATCH
(0);

745 
	`OUT_BATCH
(0);

746 
	`OUT_BATCH
(0);

747 
	}
}

750 
	$gí8_emô_sf
(
öãl_b©chbuf„r
 *
b©ch
)

752 
i
;

754 
	`OUT_BATCH
(
GEN7_3DSTATE_SBE
 | (6 - 2));

755 
	`OUT_BATCH
(1 << 
GEN7_SBE_NUM_OUTPUTS_SHIFT
 |

756 
GEN8_SBE_FORCE_URB_ENTRY_READ_LENGTH
 |

757 
GEN8_SBE_FORCE_URB_ENTRY_READ_OFFSET
 |

758 1 << 
GEN7_SBE_URB_ENTRY_READ_LENGTH_SHIFT
 |

759 1 << 
GEN8_SBE_URB_ENTRY_READ_OFFSET_SHIFT
);

760 
	`OUT_BATCH
(0);

761 
	`OUT_BATCH
(0);

762 
	`OUT_BATCH
(
GEN9_SBE_ACTIVE_COMPONENT_XYZW
 << 0);

763 
	`OUT_BATCH
(0);

765 
	`OUT_BATCH
(
GEN8_3DSTATE_SBE_SWIZ
 | (11 - 2));

766 
i
 = 0; i < 8; i++)

767 
	`OUT_BATCH
(0);

768 
	`OUT_BATCH
(0);

769 
	`OUT_BATCH
(0);

771 
	`OUT_BATCH
(
GEN8_3DSTATE_RASTER
 | (5 - 2));

772 
	`OUT_BATCH
(
GEN8_RASTER_FRONT_WINDING_CCW
 | 
GEN8_RASTER_CULL_NONE
);

773 
	`OUT_BATCH
(0);

774 
	`OUT_BATCH
(0);

775 
	`OUT_BATCH
(0);

777 
	`OUT_BATCH
(
GEN6_3DSTATE_SF
 | (4 - 2));

778 
	`OUT_BATCH
(0);

779 
	`OUT_BATCH
(0);

780 
	`OUT_BATCH
(0);

781 
	}
}

784 
	$gí8_emô_ps
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
kî√l
) {

785 c⁄° 
max_thªads
 = 63;

787 
	`OUT_BATCH
(
GEN6_3DSTATE_WM
 | (2 - 2));

788 
	`OUT_BATCH
(

791 
GEN7_3DSTATE_PS_PERSPECTIVE_PIXEL_BARYCENTRIC
);

793 
	`OUT_BATCH
(
GEN6_3DSTATE_CONSTANT_PS
 | (11-2));

794 
	`OUT_BATCH
(0);

795 
	`OUT_BATCH
(0);

796 
	`OUT_BATCH
(0);

797 
	`OUT_BATCH
(0);

798 
	`OUT_BATCH
(0);

799 
	`OUT_BATCH
(0);

800 
	`OUT_BATCH
(0);

801 
	`OUT_BATCH
(0);

802 
	`OUT_BATCH
(0);

803 
	`OUT_BATCH
(0);

805 
	`OUT_BATCH
(
GEN7_3DSTATE_PS
 | (12-2));

806 
	`OUT_BATCH
(
kî√l
);

807 
	`OUT_BATCH
(0);

808 
	`OUT_BATCH
(1 << 
GEN6_3DSTATE_WM_SAMPLER_COUNT_SHIFT
 |

809 2 << 
GEN6_3DSTATE_WM_BINDING_TABLE_ENTRY_COUNT_SHIFT
);

810 
	`OUT_BATCH
(0);

811 
	`OUT_BATCH
(0);

812 
	`OUT_BATCH
((
max_thªads
 - 1Ë<< 
GEN8_3DSTATE_PS_MAX_THREADS_SHIFT
 |

813 
GEN6_3DSTATE_WM_16_DISPATCH_ENABLE
);

814 
	`OUT_BATCH
(6 << 
GEN6_3DSTATE_WM_DISPATCH_START_GRF_0_SHIFT
);

815 
	`OUT_BATCH
(0);

816 
	`OUT_BATCH
(0);

817 
	`OUT_BATCH
(0);

818 
	`OUT_BATCH
(0);

820 
	`OUT_BATCH
(
GEN8_3DSTATE_PS_BLEND
 | (2 - 2));

821 
	`OUT_BATCH
(
GEN8_PS_BLEND_HAS_WRITEABLE_RT
);

823 
	`OUT_BATCH
(
GEN8_3DSTATE_PS_EXTRA
 | (2 - 2));

824 
	`OUT_BATCH
(
GEN8_PSX_PIXEL_SHADER_VALID
 | 
GEN8_PSX_ATTRIBUTE_ENABLE
);

825 
	}
}

828 
	$gí9_emô_dïth
(
öãl_b©chbuf„r
 *
b©ch
)

830 
	`OUT_BATCH
(
GEN8_3DSTATE_WM_DEPTH_STENCIL
 | (4 - 2));

831 
	`OUT_BATCH
(0);

832 
	`OUT_BATCH
(0);

833 
	`OUT_BATCH
(0);

835 
	`OUT_BATCH
(
GEN7_3DSTATE_DEPTH_BUFFER
 | (8-2));

836 
	`OUT_BATCH
(0);

837 
	`OUT_BATCH
(0);

838 
	`OUT_BATCH
(0);

839 
	`OUT_BATCH
(0);

840 
	`OUT_BATCH
(0);

841 
	`OUT_BATCH
(0);

842 
	`OUT_BATCH
(0);

844 
	`OUT_BATCH
(
GEN7_3DSTATE_HIER_DEPTH_BUFFER
 | (5-2));

845 
	`OUT_BATCH
(0);

846 
	`OUT_BATCH
(0);

847 
	`OUT_BATCH
(0);

848 
	`OUT_BATCH
(0);

850 
	`OUT_BATCH
(
GEN7_3DSTATE_STENCIL_BUFFER
 | (5-2));

851 
	`OUT_BATCH
(0);

852 
	`OUT_BATCH
(0);

853 
	`OUT_BATCH
(0);

854 
	`OUT_BATCH
(0);

855 
	}
}

858 
	$gí7_emô_˛ór
(
öãl_b©chbuf„r
 *
b©ch
) {

859 
	`OUT_BATCH
(
GEN7_3DSTATE_CLEAR_PARAMS
 | (3-2));

860 
	`OUT_BATCH
(0);

861 
	`OUT_BATCH
(1);

862 
	}
}

865 
	$gí6_emô_døwög_ª˘™gÀ
(
öãl_b©chbuf„r
 *
b©ch
, 
igt_buf
 *
d°
)

867 
	`OUT_BATCH
(
GEN6_3DSTATE_DRAWING_RECTANGLE
 | (4 - 2));

868 
	`OUT_BATCH
(0);

869 
	`OUT_BATCH
((
	`igt_buf_height
(
d°
Ë- 1Ë<< 16 | (
	`igt_buf_width
(dst) - 1));

870 
	`OUT_BATCH
(0);

871 
	}
}

873 
	$gí8_emô_vf_t›ﬁogy
(
öãl_b©chbuf„r
 *
b©ch
)

875 
	`OUT_BATCH
(
GEN8_3DSTATE_VF_TOPOLOGY
);

876 
	`OUT_BATCH
(
_3DPRIM_RECTLIST
);

877 
	}
}

880 
	$gí8_emô_¥imôive
(
öãl_b©chbuf„r
 *
b©ch
, 
uöt32_t
 
off£t
)

882 
	`OUT_BATCH
(
GEN7_3DSTATE_VF
 | (2 - 2));

883 
	`OUT_BATCH
(0);

885 
	`OUT_BATCH
(
GEN8_3DSTATE_VF_INSTANCING
 | (3 - 2));

886 
	`OUT_BATCH
(0);

887 
	`OUT_BATCH
(0);

889 
	`OUT_BATCH
(
GEN6_3DPRIMITIVE
 | (7-2));

890 
	`OUT_BATCH
(0);

891 
	`OUT_BATCH
(3);

892 
	`OUT_BATCH
(0);

893 
	`OUT_BATCH
(1);

894 
	`OUT_BATCH
(0);

895 
	`OUT_BATCH
(0);

896 
	}
}

928 
	#BATCH_STATE_SPLIT
 2048

	)

930 
	$gí9_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

931 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

932 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

933 
width
, 
height
,

934 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

936 
uöt32_t
 
ps_ßm∂î_°©e
, 
ps_kî√l_off
, 
ps_bödög_èbÀ
;

937 
uöt32_t
 
sciss‹_°©e
;

938 
uöt32_t
 
vîãx_buf„r
;

939 
uöt32_t
 
b©ch_íd
;

941 
	`öãl_b©chbuf„r_Êush_wôh_c⁄ãxt
(
b©ch
, 
c⁄ãxt
);

943 
	`b©ch_Æign
(
b©ch
, 8);

945 
b©ch
->
±r
 = &b©ch->
buf„r
[
BATCH_STATE_SPLIT
];

947 
	`™nŸ©i⁄_öô
(&
aub_™nŸ©i⁄s
);

949 
ps_bödög_èbÀ
 = 
	`gí8_böd_surÁ˚s
(
b©ch
, 
§c
, 
d°
);

950 
ps_ßm∂î_°©e
 = 
	`gí8_¸óã_ßm∂î
(
b©ch
);

951 
ps_kî√l_off
 = 
	`gí8_fûl_ps
(
b©ch
, 
ps_kî√l
, (ps_kernel));

952 
vîãx_buf„r
 = 
	`gí7_fûl_vîãx_buf„r_d©a
(
b©ch
, 
§c
,

953 
§c_x
, 
§c_y
,

954 
d°_x
, 
d°_y
,

955 
width
, 
height
);

956 
cc
.
cc_°©e
 = 
	`gí6_¸óã_cc_°©e
(
b©ch
);

957 
cc
.
bÀnd_°©e
 = 
	`gí8_¸óã_bÀnd_°©e
(
b©ch
);

958 
võwp‹t
.
cc_°©e
 = 
	`gí6_¸óã_cc_võwp‹t
(
b©ch
);

959 
võwp‹t
.
sf_˛ù_°©e
 = 
	`gí7_¸óã_sf_˛ù_võwp‹t
(
b©ch
);

960 
sciss‹_°©e
 = 
	`gí6_¸óã_sciss‹_ª˘
(
b©ch
);

963 
	`as£π
(
b©ch
->
±r
 < &b©ch->
buf„r
[4095]);

965 
b©ch
->
±r
 = b©ch->
buf„r
;

969 
	`OUT_BATCH
(
GEN6_PIPELINE_SELECT
 | 
PIPELINE_SELECT_3D
 |

970 
GEN9_PIPELINE_SELECTION_MASK
);

972 
	`gí8_emô_sù
(
b©ch
);

974 
	`gí7_emô_push_c⁄°™ts
(
b©ch
);

976 
	`gí9_emô_°©e_ba£_addªss
(
b©ch
);

978 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_CC
);

979 
	`OUT_BATCH
(
võwp‹t
.
cc_°©e
);

980 
	`OUT_BATCH
(
GEN7_3DSTATE_VIEWPORT_STATE_POINTERS_SF_CLIP
);

981 
	`OUT_BATCH
(
võwp‹t
.
sf_˛ù_°©e
);

983 
	`gí7_emô_urb
(
b©ch
);

985 
	`gí8_emô_cc
(
b©ch
);

987 
	`gí8_emô_mu…ißm∂e
(
b©ch
);

989 
	`gí8_emô_nuŒ_°©e
(
b©ch
);

991 
	`OUT_BATCH
(
GEN7_3DSTATE_STREAMOUT
 | (5 - 2));

992 
	`OUT_BATCH
(0);

993 
	`OUT_BATCH
(0);

994 
	`OUT_BATCH
(0);

995 
	`OUT_BATCH
(0);

997 
	`gí7_emô_˛ù
(
b©ch
);

999 
	`gí8_emô_sf
(
b©ch
);

1001 
	`gí8_emô_ps
(
b©ch
, 
ps_kî√l_off
);

1003 
	`OUT_BATCH
(
GEN7_3DSTATE_BINDING_TABLE_POINTERS_PS
);

1004 
	`OUT_BATCH
(
ps_bödög_èbÀ
);

1006 
	`OUT_BATCH
(
GEN7_3DSTATE_SAMPLER_STATE_POINTERS_PS
);

1007 
	`OUT_BATCH
(
ps_ßm∂î_°©e
);

1009 
	`OUT_BATCH
(
GEN6_3DSTATE_SCISSOR_STATE_POINTERS
);

1010 
	`OUT_BATCH
(
sciss‹_°©e
);

1012 
	`gí9_emô_dïth
(
b©ch
);

1014 
	`gí7_emô_˛ór
(
b©ch
);

1016 
	`gí6_emô_døwög_ª˘™gÀ
(
b©ch
, 
d°
);

1018 
	`gí7_emô_vîãx_buf„r
(
b©ch
, 
vîãx_buf„r
);

1019 
	`gí6_emô_vîãx_ñemíts
(
b©ch
);

1021 
	`gí8_emô_vf_t›ﬁogy
(
b©ch
);

1022 
	`gí8_emô_¥imôive
(
b©ch
, 
vîãx_buf„r
);

1024 
	`OUT_BATCH
(
MI_BATCH_BUFFER_END
);

1026 
b©ch_íd
 = 
	`b©ch_Æign
(
b©ch
, 8);

1027 
	`as£π
(
b©ch_íd
 < 
BATCH_STATE_SPLIT
);

1028 
	`™nŸ©i⁄_add_b©ch
(&
aub_™nŸ©i⁄s
, 
b©ch_íd
);

1030 
	`dump_b©ch
(
b©ch
);

1032 
	`™nŸ©i⁄_Êush
(&
aub_™nŸ©i⁄s
, 
b©ch
);

1034 
	`gí6_ªndî_Êush
(
b©ch
, 
c⁄ãxt
, 
b©ch_íd
);

1035 
	`öãl_b©chbuf„r_ª£t
(
b©ch
);

1036 
	}
}

	@rendercopy_i830.c

1 
	~<°dlib.h
>

2 
	~<sys/io˘l.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

6 
	~<f˙é.h
>

7 
	~<öây≥s.h
>

8 
	~<î∫o.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/time.h
>

11 
	~"drm.h
"

12 
	~"i915_drm.h
"

13 
	~"drmã°.h
"

14 
	~"öãl_bufmgr.h
"

15 
	~"öãl_b©chbuf„r.h
"

16 
	~"öãl_io.h
"

18 
	~"i830_ªg.h
"

19 
	~"ªndîc›y.h
"

21 
	#TB0C_LAST_STAGE
 (1 << 31)

	)

22 
	#TB0C_RESULT_SCALE_1X
 (0 << 29)

	)

23 
	#TB0C_RESULT_SCALE_2X
 (1 << 29)

	)

24 
	#TB0C_RESULT_SCALE_4X
 (2 << 29)

	)

25 
	#TB0C_OP_ARG1
 (1 << 25)

	)

26 
	#TB0C_OP_MODULE
 (3 << 25)

	)

27 
	#TB0C_OUTPUT_WRITE_CURRENT
 (0 << 24)

	)

28 
	#TB0C_OUTPUT_WRITE_ACCUM
 (1 << 24)

	)

29 
	#TB0C_ARG3_REPLICATE_ALPHA
 (1<<23)

	)

30 
	#TB0C_ARG3_INVERT
 (1<<22)

	)

31 
	#TB0C_ARG3_SEL_XXX


	)

32 
	#TB0C_ARG2_REPLICATE_ALPHA
 (1<<17)

	)

33 
	#TB0C_ARG2_INVERT
 (1<<16)

	)

34 
	#TB0C_ARG2_SEL_ONE
 (0 << 12)

	)

35 
	#TB0C_ARG2_SEL_FACTOR
 (1 << 12)

	)

36 
	#TB0C_ARG2_SEL_TEXEL0
 (6 << 12)

	)

37 
	#TB0C_ARG2_SEL_TEXEL1
 (7 << 12)

	)

38 
	#TB0C_ARG2_SEL_TEXEL2
 (8 << 12)

	)

39 
	#TB0C_ARG2_SEL_TEXEL3
 (9 << 12)

	)

40 
	#TB0C_ARG1_REPLICATE_ALPHA
 (1<<11)

	)

41 
	#TB0C_ARG1_INVERT
 (1<<10)

	)

42 
	#TB0C_ARG1_SEL_ONE
 (0 << 6)

	)

43 
	#TB0C_ARG1_SEL_TEXEL0
 (6 << 6)

	)

44 
	#TB0C_ARG1_SEL_TEXEL1
 (7 << 6)

	)

45 
	#TB0C_ARG1_SEL_TEXEL2
 (8 << 6)

	)

46 
	#TB0C_ARG1_SEL_TEXEL3
 (9 << 6)

	)

47 
	#TB0C_ARG0_REPLICATE_ALPHA
 (1<<5)

	)

48 
	#TB0C_ARG0_SEL_XXX


	)

50 
	#TB0A_CTR_STAGE_ENABLE
 (1<<31)

	)

51 
	#TB0A_RESULT_SCALE_1X
 (0 << 29)

	)

52 
	#TB0A_RESULT_SCALE_2X
 (1 << 29)

	)

53 
	#TB0A_RESULT_SCALE_4X
 (2 << 29)

	)

54 
	#TB0A_OP_ARG1
 (1 << 25)

	)

55 
	#TB0A_OP_MODULE
 (3 << 25)

	)

56 
	#TB0A_OUTPUT_WRITE_CURRENT
 (0<<24)

	)

57 
	#TB0A_OUTPUT_WRITE_ACCUM
 (1<<24)

	)

58 
	#TB0A_CTR_STAGE_SEL_BITS_XXX


	)

59 
	#TB0A_ARG3_SEL_XXX


	)

60 
	#TB0A_ARG3_INVERT
 (1<<17)

	)

61 
	#TB0A_ARG2_INVERT
 (1<<16)

	)

62 
	#TB0A_ARG2_SEL_ONE
 (0 << 12)

	)

63 
	#TB0A_ARG2_SEL_TEXEL0
 (6 << 12)

	)

64 
	#TB0A_ARG2_SEL_TEXEL1
 (7 << 12)

	)

65 
	#TB0A_ARG2_SEL_TEXEL2
 (8 << 12)

	)

66 
	#TB0A_ARG2_SEL_TEXEL3
 (9 << 12)

	)

67 
	#TB0A_ARG1_INVERT
 (1<<10)

	)

68 
	#TB0A_ARG1_SEL_ONE
 (0 << 6)

	)

69 
	#TB0A_ARG1_SEL_TEXEL0
 (6 << 6)

	)

70 
	#TB0A_ARG1_SEL_TEXEL1
 (7 << 6)

	)

71 
	#TB0A_ARG1_SEL_TEXEL2
 (8 << 6)

	)

72 
	#TB0A_ARG1_SEL_TEXEL3
 (9 << 6)

	)

75 
	$gí2_emô_öv¨ü¡
(
öãl_b©chbuf„r
 *
b©ch
)

77 
i
;

79 
i
 = 0; i < 4; i++) {

80 
	`OUT_BATCH
(
_3DSTATE_MAP_CUBE
 | 
	`MAP_UNIT
(
i
));

81 
	`OUT_BATCH
(
_3DSTATE_MAP_TEX_STREAM_CMD
 | 
	`MAP_UNIT
(
i
) |

82 
DISABLE_TEX_STREAM_BUMP
 |

83 
ENABLE_TEX_STREAM_COORD_SET
 | 
	`TEX_STREAM_COORD_SET
(
i
) |

84 
ENABLE_TEX_STREAM_MAP_IDX
 | 
	`TEX_STREAM_MAP_IDX
(
i
));

85 
	`OUT_BATCH
(
_3DSTATE_MAP_COORD_TRANSFORM
);

86 
	`OUT_BATCH
(
DISABLE_TEX_TRANSFORM
 | 
	`TEXTURE_SET
(
i
));

89 
	`OUT_BATCH
(
_3DSTATE_MAP_COORD_SETBIND_CMD
);

90 
	`OUT_BATCH
(
	`TEXBIND_SET3
(
TEXCOORDSRC_VTXSET_3
) |

91 
	`TEXBIND_SET2
(
TEXCOORDSRC_VTXSET_2
) |

92 
	`TEXBIND_SET1
(
TEXCOORDSRC_VTXSET_1
) |

93 
	`TEXBIND_SET0
(
TEXCOORDSRC_VTXSET_0
));

95 
	`OUT_BATCH
(
_3DSTATE_SCISSOR_ENABLE_CMD
 | 
DISABLE_SCISSOR_RECT
);

97 
	`OUT_BATCH
(
_3DSTATE_VERTEX_TRANSFORM
);

98 
	`OUT_BATCH
(
DISABLE_VIEWPORT_TRANSFORM
 | 
DISABLE_PERSPECTIVE_DIVIDE
);

100 
	`OUT_BATCH
(
_3DSTATE_W_STATE_CMD
);

101 
	`OUT_BATCH
(
MAGIC_W_STATE_DWORD1
);

102 
	`OUT_BATCH
(0x3f800000 );

104 
	`OUT_BATCH
(
_3DSTATE_INDPT_ALPHA_BLEND_CMD
 |

105 
DISABLE_INDPT_ALPHA_BLEND
 |

106 
ENABLE_ALPHA_BLENDFUNC
 | 
ABLENDFUNC_ADD
);

108 
	`OUT_BATCH
(
_3DSTATE_CONST_BLEND_COLOR_CMD
);

109 
	`OUT_BATCH
(0);

111 
	`OUT_BATCH
(
_3DSTATE_MODES_1_CMD
 |

112 
ENABLE_COLR_BLND_FUNC
 | 
BLENDFUNC_ADD
 |

113 
ENABLE_SRC_BLND_FACTOR
 | 
	`SRC_BLND_FACT
(
BLENDFACTOR_ONE
) |

114 
ENABLE_DST_BLND_FACTOR
 | 
	`DST_BLND_FACT
(
BLENDFACTOR_ZERO
));

116 
	`OUT_BATCH
(
_3DSTATE_ENABLES_1_CMD
 |

117 
DISABLE_LOGIC_OP
 |

118 
DISABLE_STENCIL_TEST
 |

119 
DISABLE_DEPTH_BIAS
 |

120 
DISABLE_SPEC_ADD
 |

121 
DISABLE_FOG
 |

122 
DISABLE_ALPHA_TEST
 |

123 
DISABLE_DEPTH_TEST
 |

124 
ENABLE_COLOR_BLEND
);

126 
	`OUT_BATCH
(
_3DSTATE_ENABLES_2_CMD
 |

127 
DISABLE_STENCIL_WRITE
 |

128 
DISABLE_DITHER
 |

129 
DISABLE_DEPTH_WRITE
 |

130 
ENABLE_COLOR_MASK
 |

131 
ENABLE_COLOR_WRITE
 |

132 
ENABLE_TEX_CACHE
);

133 
	}
}

135 
	$gí2_emô_èrgë
(
öãl_b©chbuf„r
 *
b©ch
,

136 
igt_buf
 *
d°
)

138 
uöt32_t
 
tûög
;

140 
tûög
 = 0;

141 i‡(
d°
->
tûög
 !
I915_TILING_NONE
)

142 
tûög
 = 
BUF_3D_TILED_SURFACE
;

143 i‡(
d°
->
tûög
 =
I915_TILING_Y
)

144 
tûög
 |
BUF_3D_TILE_WALK_Y
;

146 
	`OUT_BATCH
(
_3DSTATE_BUF_INFO_CMD
);

147 
	`OUT_BATCH
(
BUF_3D_ID_COLOR_BACK
 | 
tûög
 | 
	`BUF_3D_PITCH
(
d°
->
°ride
));

148 
	`OUT_RELOC
(
d°
->
bo
, 
I915_GEM_DOMAIN_RENDER
, I915_GEM_DOMAIN_RENDER, 0);

150 
	`OUT_BATCH
(
_3DSTATE_DST_BUF_VARS_CMD
);

151 
	`OUT_BATCH
(
COLR_BUF_ARGB8888
 |

152 
	`DSTORG_HORT_BIAS
(0x8) |

153 
	`DSTORG_VERT_BIAS
(0x8));

155 
	`OUT_BATCH
(
_3DSTATE_DRAW_RECT_CMD
);

156 
	`OUT_BATCH
(0);

157 
	`OUT_BATCH
(0);

158 
	`OUT_BATCH
(
	`DRAW_YMAX
(
	`igt_buf_height
(
d°
) - 1) |

159 
	`DRAW_XMAX
(
	`igt_buf_width
(
d°
) - 1));

160 
	`OUT_BATCH
(0);

161 
	}
}

163 
	$gí2_emô_ãxtuª
(
öãl_b©chbuf„r
 *
b©ch
,

164 
igt_buf
 *
§c
,

165 
unô
)

167 
uöt32_t
 
tûög
;

169 
tûög
 = 0;

170 i‡(
§c
->
tûög
 !
I915_TILING_NONE
)

171 
tûög
 = 
TM0S1_TILED_SURFACE
;

172 i‡(
§c
->
tûög
 =
I915_TILING_Y
)

173 
tûög
 |
TM0S1_TILE_WALK
;

175 
	`OUT_BATCH
(
_3DSTATE_LOAD_STATE_IMMEDIATE_2
 | 
	`LOAD_TEXTURE_MAP
(
unô
) | 4);

176 
	`OUT_RELOC
(
§c
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 0);

177 
	`OUT_BATCH
((
	`igt_buf_height
(
§c
Ë- 1Ë<< 
TM0S1_HEIGHT_SHIFT
 |

178 (
	`igt_buf_width
(
§c
Ë- 1Ë<< 
TM0S1_WIDTH_SHIFT
 |

179 
MAPSURF_32BIT
 | 
MT_32BIT_ARGB8888
 | 
tûög
);

180 
	`OUT_BATCH
((
§c
->
°ride
 / 4 - 1Ë<< 
TM0S2_PITCH_SHIFT
 | 
TM0S2_MAP_2D
);

181 
	`OUT_BATCH
(
FILTER_NEAREST
 << 
TM0S3_MAG_FILTER_SHIFT
 |

182 
FILTER_NEAREST
 << 
TM0S3_MIN_FILTER_SHIFT
 |

183 
MIPFILTER_NONE
 << 
TM0S3_MIP_FILTER_SHIFT
);

184 
	`OUT_BATCH
(0);

186 
	`OUT_BATCH
(
_3DSTATE_MAP_COORD_SET_CMD
 | 
	`TEXCOORD_SET
(
unô
) |

187 
ENABLE_TEXCOORD_PARAMS
 | 
TEXCOORDS_ARE_NORMAL
 |

188 
TEXCOORDTYPE_CARTESIAN
 |

189 
ENABLE_ADDR_V_CNTL
 | 
	`TEXCOORD_ADDR_V_MODE
(
TEXCOORDMODE_CLAMP_BORDER
) |

190 
ENABLE_ADDR_U_CNTL
 | 
	`TEXCOORD_ADDR_U_MODE
(
TEXCOORDMODE_CLAMP_BORDER
));

191 
	}
}

193 
	$gí2_emô_c›y_pùñöe
(
öãl_b©chbuf„r
 *
b©ch
)

195 
	`OUT_BATCH
(
_3DSTATE_INDPT_ALPHA_BLEND_CMD
 | 
DISABLE_INDPT_ALPHA_BLEND
);

196 
	`OUT_BATCH
(
_3DSTATE_ENABLES_1_CMD
 | 
DISABLE_LOGIC_OP
 |

197 
DISABLE_STENCIL_TEST
 | 
DISABLE_DEPTH_BIAS
 |

198 
DISABLE_SPEC_ADD
 | 
DISABLE_FOG
 | 
DISABLE_ALPHA_TEST
 |

199 
DISABLE_COLOR_BLEND
 | 
DISABLE_DEPTH_TEST
);

201 
	`OUT_BATCH
(
_3DSTATE_LOAD_STATE_IMMEDIATE_2
 |

202 
	`LOAD_TEXTURE_BLEND_STAGE
(0) | 1);

203 
	`OUT_BATCH
(
TB0C_LAST_STAGE
 | 
TB0C_RESULT_SCALE_1X
 |

204 
TB0C_OUTPUT_WRITE_CURRENT
 |

205 
TB0C_OP_ARG1
 | 
TB0C_ARG1_SEL_TEXEL0
);

206 
	`OUT_BATCH
(
TB0A_RESULT_SCALE_1X
 | 
TB0A_OUTPUT_WRITE_CURRENT
 |

207 
TB0A_OP_ARG1
 | 
TB0A_ARG1_SEL_TEXEL0
);

208 
	}
}

210 
	$gí2_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

211 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

212 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

213 
width
, 
height
,

214 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

216 
	`gí2_emô_öv¨ü¡
(
b©ch
);

217 
	`gí2_emô_c›y_pùñöe
(
b©ch
);

219 
	`gí2_emô_èrgë
(
b©ch
, 
d°
);

220 
	`gí2_emô_ãxtuª
(
b©ch
, 
§c
, 0);

222 
	`OUT_BATCH
(
_3DSTATE_LOAD_STATE_IMMEDIATE_1
 |

223 
	`I1_LOAD_S
(2) | I1_LOAD_S(3) | I1_LOAD_S(8) | 2);

224 
	`OUT_BATCH
(1<<12);

225 
	`OUT_BATCH
(
S3_CULLMODE_NONE
 | 
S3_VERTEXHAS_XY
);

226 
	`OUT_BATCH
(
S8_ENABLE_COLOR_BUFFER_WRITE
);

228 
	`OUT_BATCH
(
_3DSTATE_VERTEX_FORMAT_2_CMD
 | 
TEXCOORDFMT_2D
 << 0);

230 
	`OUT_BATCH
(
PRIM3D_INLINE
 | 
PRIM3D_RECTLIST
 | (3*4 -1));

231 
	`emô_vîãx
(
b©ch
, 
d°_x
 + 
width
);

232 
	`emô_vîãx
(
b©ch
, 
d°_y
 + 
height
);

233 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
 + 
width
, 
	`igt_buf_width
(
§c
));

234 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

236 
	`emô_vîãx
(
b©ch
, 
d°_x
);

237 
	`emô_vîãx
(
b©ch
, 
d°_y
 + 
height
);

238 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

239 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
 + 
height
, 
	`igt_buf_height
(
§c
));

241 
	`emô_vîãx
(
b©ch
, 
d°_x
);

242 
	`emô_vîãx
(
b©ch
, 
d°_y
);

243 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_x
, 
	`igt_buf_width
(
§c
));

244 
	`emô_vîãx_n‹mÆized
(
b©ch
, 
§c_y
, 
	`igt_buf_height
(
§c
));

246 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

247 
	}
}

	@rendercopy_i915.c

1 
	~<°dlib.h
>

2 
	~<sys/io˘l.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<as£π.h
>

6 
	~<f˙é.h
>

7 
	~<öây≥s.h
>

8 
	~<î∫o.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/time.h
>

11 
	~"drm.h
"

12 
	~"i915_drm.h
"

13 
	~"drmã°.h
"

14 
	~"öãl_bufmgr.h
"

15 
	~"öãl_b©chbuf„r.h
"

16 
	~"öãl_io.h
"

18 
	~"i915_ªg.h
"

19 
	~"i915_3d.h
"

20 
	~"ªndîc›y.h
"

22 
	$gí3_ªndî_c›yfunc
(
öãl_b©chbuf„r
 *
b©ch
,

23 
drm_öãl_c⁄ãxt
 *
c⁄ãxt
,

24 
igt_buf
 *
§c
, 
§c_x
, 
§c_y
,

25 
width
, 
height
,

26 
igt_buf
 *
d°
, 
d°_x
, 
d°_y
)

30 
	`OUT_BATCH
(
_3DSTATE_AA_CMD
 |

31 
AA_LINE_ECAAR_WIDTH_ENABLE
 |

32 
AA_LINE_ECAAR_WIDTH_1_0
 |

33 
AA_LINE_REGION_WIDTH_ENABLE
 | 
AA_LINE_REGION_WIDTH_1_0
);

34 
	`OUT_BATCH
(
_3DSTATE_INDEPENDENT_ALPHA_BLEND_CMD
 |

35 
IAB_MODIFY_ENABLE
 |

36 
IAB_MODIFY_FUNC
 | (
BLENDFUNC_ADD
 << 
IAB_FUNC_SHIFT
) |

37 
IAB_MODIFY_SRC_FACTOR
 | (
BLENDFACT_ONE
 <<

38 
IAB_SRC_FACTOR_SHIFT
) |

39 
IAB_MODIFY_DST_FACTOR
 | (
BLENDFACT_ZERO
 <<

40 
IAB_DST_FACTOR_SHIFT
));

41 
	`OUT_BATCH
(
_3DSTATE_DFLT_DIFFUSE_CMD
);

42 
	`OUT_BATCH
(0);

43 
	`OUT_BATCH
(
_3DSTATE_DFLT_SPEC_CMD
);

44 
	`OUT_BATCH
(0);

45 
	`OUT_BATCH
(
_3DSTATE_DFLT_Z_CMD
);

46 
	`OUT_BATCH
(0);

47 
	`OUT_BATCH
(
_3DSTATE_COORD_SET_BINDINGS
 |

48 
	`CSB_TCB
(0, 0) |

49 
	`CSB_TCB
(1, 1) |

50 
	`CSB_TCB
(2, 2) |

51 
	`CSB_TCB
(3, 3) |

52 
	`CSB_TCB
(4, 4) |

53 
	`CSB_TCB
(5, 5) | CSB_TCB(6, 6) | CSB_TCB(7, 7));

54 
	`OUT_BATCH
(
_3DSTATE_RASTER_RULES_CMD
 |

55 
ENABLE_POINT_RASTER_RULE
 |

56 
OGL_POINT_RASTER_RULE
 |

57 
ENABLE_LINE_STRIP_PROVOKE_VRTX
 |

58 
ENABLE_TRI_FAN_PROVOKE_VRTX
 |

59 
	`LINE_STRIP_PROVOKE_VRTX
(1) |

60 
	`TRI_FAN_PROVOKE_VRTX
(2Ë| 
ENABLE_TEXKILL_3D_4D
 | 
TEXKILL_4D
);

61 
	`OUT_BATCH
(
_3DSTATE_MODES_4_CMD
 |

62 
ENABLE_LOGIC_OP_FUNC
 | 
	`LOGIC_OP_FUNC
(
LOGICOP_COPY
) |

63 
ENABLE_STENCIL_WRITE_MASK
 | 
	`STENCIL_WRITE_MASK
(0xff) |

64 
ENABLE_STENCIL_TEST_MASK
 | 
	`STENCIL_TEST_MASK
(0xff));

65 
	`OUT_BATCH
(
_3DSTATE_LOAD_STATE_IMMEDIATE_1
 | 
	`I1_LOAD_S
(3) | I1_LOAD_S(4) | I1_LOAD_S(5) | 2);

66 
	`OUT_BATCH
(0x00000000);

67 
	`OUT_BATCH
((1 << 
S4_POINT_WIDTH_SHIFT
) |

68 
S4_LINE_WIDTH_ONE
 |

69 
S4_CULLMODE_NONE
 |

70 
S4_VFMT_XY
);

71 
	`OUT_BATCH
(0x00000000);

72 
	`OUT_BATCH
(
_3DSTATE_SCISSOR_ENABLE_CMD
 | 
DISABLE_SCISSOR_RECT
);

73 
	`OUT_BATCH
(
_3DSTATE_SCISSOR_RECT_0_CMD
);

74 
	`OUT_BATCH
(0);

75 
	`OUT_BATCH
(0);

76 
	`OUT_BATCH
(
_3DSTATE_DEPTH_SUBRECT_DISABLE
);

77 
	`OUT_BATCH
(
_3DSTATE_LOAD_INDIRECT
 | 0);

78 
	`OUT_BATCH
(0);

79 
	`OUT_BATCH
(
_3DSTATE_STIPPLE
);

80 
	`OUT_BATCH
(0x00000000);

81 
	`OUT_BATCH
(
_3DSTATE_BACKFACE_STENCIL_OPS
 | 
BFO_ENABLE_STENCIL_TWO_SIDE
 | 0);

86 
	#TEX_COUNT
 1

	)

87 
uöt32_t
 
tûög_bôs
 = 0;

88 i‡(
§c
->
tûög
 !
I915_TILING_NONE
)

89 
tûög_bôs
 = 
MS3_TILED_SURFACE
;

90 i‡(
§c
->
tûög
 =
I915_TILING_Y
)

91 
tûög_bôs
 |
MS3_TILE_WALK
;

93 
	`OUT_BATCH
(
_3DSTATE_MAP_STATE
 | (3 * 
TEX_COUNT
));

94 
	`OUT_BATCH
((1 << 
TEX_COUNT
) - 1);

95 
	`OUT_RELOC
(
§c
->
bo
, 
I915_GEM_DOMAIN_SAMPLER
, 0, 0);

96 
	`OUT_BATCH
(
MAPSURF_32BIT
 | 
MT_32BIT_ARGB8888
 |

97 
tûög_bôs
 |

98 (
	`igt_buf_height
(
§c
Ë- 1Ë<< 
MS3_HEIGHT_SHIFT
 |

99 (
	`igt_buf_width
(
§c
Ë- 1Ë<< 
MS3_WIDTH_SHIFT
);

100 
	`OUT_BATCH
((
§c
->
°ride
/4-1Ë<< 
MS4_PITCH_SHIFT
);

102 
	`OUT_BATCH
(
_3DSTATE_SAMPLER_STATE
 | (3 * 
TEX_COUNT
));

103 
	`OUT_BATCH
((1 << 
TEX_COUNT
) - 1);

104 
	`OUT_BATCH
(
MIPFILTER_NONE
 << 
SS2_MIP_FILTER_SHIFT
 |

105 
FILTER_NEAREST
 << 
SS2_MAG_FILTER_SHIFT
 |

106 
FILTER_NEAREST
 << 
SS2_MIN_FILTER_SHIFT
);

107 
	`OUT_BATCH
(
TEXCOORDMODE_WRAP
 << 
SS3_TCX_ADDR_MODE_SHIFT
 |

108 
TEXCOORDMODE_WRAP
 << 
SS3_TCY_ADDR_MODE_SHIFT
 |

109 0 << 
SS3_TEXTUREMAP_INDEX_SHIFT
);

110 
	`OUT_BATCH
(0x00000000);

115 
uöt32_t
 
tûög_bôs
 = 0;

116 i‡(
d°
->
tûög
 !
I915_TILING_NONE
)

117 
tûög_bôs
 = 
BUF_3D_TILED_SURFACE
;

118 i‡(
d°
->
tûög
 =
I915_TILING_Y
)

119 
tûög_bôs
 |
BUF_3D_TILE_WALK_Y
;

121 
	`OUT_BATCH
(
_3DSTATE_BUF_INFO_CMD
);

122 
	`OUT_BATCH
(
BUF_3D_ID_COLOR_BACK
 | 
tûög_bôs
 |

123 
	`BUF_3D_PITCH
(
d°
->
°ride
));

124 
	`OUT_RELOC
(
d°
->
bo
, 
I915_GEM_DOMAIN_RENDER
, I915_GEM_DOMAIN_RENDER, 0);

126 
	`OUT_BATCH
(
_3DSTATE_DST_BUF_VARS_CMD
);

127 
	`OUT_BATCH
(
COLR_BUF_ARGB8888
 |

128 
	`DSTORG_HORT_BIAS
(0x8) |

129 
	`DSTORG_VERT_BIAS
(0x8));

132 
	`OUT_BATCH
(
_3DSTATE_DRAW_RECT_CMD
);

133 
	`OUT_BATCH
(0x00000000);

134 
	`OUT_BATCH
(0x00000000);

135 
	`OUT_BATCH
(
	`DRAW_YMAX
(
	`igt_buf_height
(
d°
) - 1) |

136 
	`DRAW_XMAX
(
	`igt_buf_width
(
d°
) - 1));

138 
	`OUT_BATCH
(0x00000000);

143 
	`OUT_BATCH
(
_3DSTATE_LOAD_STATE_IMMEDIATE_1
 |

144 
	`I1_LOAD_S
(1) | I1_LOAD_S(2) | I1_LOAD_S(6) | 2);

145 
	`OUT_BATCH
((4 << 
S1_VERTEX_WIDTH_SHIFT
) |

146 (4 << 
S1_VERTEX_PITCH_SHIFT
));

147 
	`OUT_BATCH
(~
	`S2_TEXCOORD_FMT
(0, 
TEXCOORDFMT_NOT_PRESENT
Ë| S2_TEXCOORD_FMT(0, 
TEXCOORDFMT_2D
));

148 
	`OUT_BATCH
(
S6_CBUF_BLEND_ENABLE
 | 
S6_COLOR_WRITE_ENABLE
 |

149 
BLENDFUNC_ADD
 << 
S6_CBUF_BLEND_FUNC_SHIFT
 |

150 
BLENDFACT_ONE
 << 
S6_CBUF_SRC_BLEND_FACT_SHIFT
 |

151 
BLENDFACT_ZERO
 << 
S6_CBUF_DST_BLEND_FACT_SHIFT
);

156 
	`OUT_BATCH
(
_3DSTATE_PIXEL_SHADER_PROGRAM
 | (1 + 3*3 - 2));

158 
	`OUT_BATCH
(
D0_DCL
 |

159 
	`REG_TYPE
(
FS_T0
Ë<< 
D0_TYPE_SHIFT
 |

160 
	`REG_NR
(
FS_T0
Ë<< 
D0_NR_SHIFT
 |

161 ((
	`REG_TYPE
(
FS_T0
Ë!
REG_TYPE_S
Ë? 
D0_CHANNEL_ALL
 : 0));

162 
	`OUT_BATCH
(0);

163 
	`OUT_BATCH
(0);

165 
	`OUT_BATCH
(
D0_DCL
 |

166 (
	`REG_TYPE
(
FS_S0
Ë<< 
D0_TYPE_SHIFT
) |

167 (
	`REG_NR
(
FS_S0
Ë<< 
D0_NR_SHIFT
) |

168 ((
	`REG_TYPE
(
FS_S0
Ë!
REG_TYPE_S
Ë? 
D0_CHANNEL_ALL
 : 0));

169 
	`OUT_BATCH
(0);

170 
	`OUT_BATCH
(0);

172 
	`OUT_BATCH
(
T0_TEXLD
 |

173 (
	`REG_TYPE
(
FS_OC
Ë<< 
T0_DEST_TYPE_SHIFT
) |

174 (
	`REG_NR
(
FS_OC
Ë<< 
T0_DEST_NR_SHIFT
) |

175 (
	`REG_NR
(
FS_S0
Ë<< 
T0_SAMPLER_NR_SHIFT
));

176 
	`OUT_BATCH
((
	`REG_TYPE
(
FS_T0
Ë<< 
T1_ADDRESS_REG_TYPE_SHIFT
) |

177 (
	`REG_NR
(
FS_T0
Ë<< 
T1_ADDRESS_REG_NR_SHIFT
));

178 
	`OUT_BATCH
(0);

181 
	`OUT_BATCH
(
PRIM3D_RECTLIST
 | (3*4 - 1));

182 
	`emô_vîãx
(
b©ch
, 
d°_x
 + 
width
);

183 
	`emô_vîãx
(
b©ch
, 
d°_y
 + 
height
);

184 
	`emô_vîãx
(
b©ch
, 
§c_x
 + 
width
);

185 
	`emô_vîãx
(
b©ch
, 
§c_y
 + 
height
);

187 
	`emô_vîãx
(
b©ch
, 
d°_x
);

188 
	`emô_vîãx
(
b©ch
, 
d°_y
 + 
height
);

189 
	`emô_vîãx
(
b©ch
, 
§c_x
);

190 
	`emô_vîãx
(
b©ch
, 
§c_y
 + 
height
);

192 
	`emô_vîãx
(
b©ch
, 
d°_x
);

193 
	`emô_vîãx
(
b©ch
, 
d°_y
);

194 
	`emô_vîãx
(
b©ch
, 
§c_x
);

195 
	`emô_vîãx
(
b©ch
, 
§c_y
);

197 
	`öãl_b©chbuf„r_Êush
(
b©ch
);

198 
	}
}

	@stubs/drm/intel_aub.h

40 #i‚de‡
_INTEL_AUB_H


41 
	#_INTEL_AUB_H


	)

43 
	#AUB_MI_NOOP
 (0)

	)

44 
	#AUB_MI_BATCH_BUFFER_START
 (0x31 << 23)

	)

45 
	#AUB_PIPE_CONTROL
 (0x7a000002)

	)

49 
	#CMD_AUB
 (7 << 29)

	)

51 
	#CMD_AUB_HEADER
 (
CMD_AUB
 | (1 << 23Ë| (0x05 << 16))

	)

53 
	#AUB_HEADER_MAJOR_SHIFT
 24

	)

54 
	#AUB_HEADER_MINOR_SHIFT
 16

	)

56 
	#CMD_AUB_TRACE_HEADER_BLOCK
 (
CMD_AUB
 | (1 << 23Ë| (0x41 << 16))

	)

57 
	#CMD_AUB_DUMP_BMP
 (
CMD_AUB
 | (1 << 23Ë| (0x9ê<< 16))

	)

60 
	#AUB_TRACE_OPERATION_MASK
 0x000000ff

	)

61 
	#AUB_TRACE_OP_COMMENT
 0x00000000

	)

62 
	#AUB_TRACE_OP_DATA_WRITE
 0x00000001

	)

63 
	#AUB_TRACE_OP_COMMAND_WRITE
 0x00000002

	)

64 
	#AUB_TRACE_OP_MMIO_WRITE
 0x00000003

	)

66 
	#AUB_TRACE_TYPE_MASK
 0x0000ff00

	)

67 
	#AUB_TRACE_TYPE_NOTYPE
 (0 << 8)

	)

68 
	#AUB_TRACE_TYPE_BATCH
 (1 << 8)

	)

69 
	#AUB_TRACE_TYPE_VERTEX_BUFFER
 (5 << 8)

	)

70 
	#AUB_TRACE_TYPE_2D_MAP
 (6 << 8)

	)

71 
	#AUB_TRACE_TYPE_CUBE_MAP
 (7 << 8)

	)

72 
	#AUB_TRACE_TYPE_VOLUME_MAP
 (9 << 8)

	)

73 
	#AUB_TRACE_TYPE_1D_MAP
 (10 << 8)

	)

74 
	#AUB_TRACE_TYPE_CONSTANT_BUFFER
 (11 << 8)

	)

75 
	#AUB_TRACE_TYPE_CONSTANT_URB
 (12 << 8)

	)

76 
	#AUB_TRACE_TYPE_INDEX_BUFFER
 (13 << 8)

	)

77 
	#AUB_TRACE_TYPE_GENERAL
 (14 << 8)

	)

78 
	#AUB_TRACE_TYPE_SURFACE
 (15 << 8)

	)

82 
	#AUB_TRACE_TYPE_RING_HWB
 (1 << 8)

	)

83 
	#AUB_TRACE_TYPE_RING_PRB0
 (2 << 8)

	)

84 
	#AUB_TRACE_TYPE_RING_PRB1
 (3 << 8)

	)

85 
	#AUB_TRACE_TYPE_RING_PRB2
 (4 << 8)

	)

88 
	#AUB_TRACE_ADDRESS_SPACE_MASK
 0x00ff0000

	)

89 
	#AUB_TRACE_MEMTYPE_GTT
 (0 << 16)

	)

90 
	#AUB_TRACE_MEMTYPE_LOCAL
 (1 << 16)

	)

91 
	#AUB_TRACE_MEMTYPE_NONLOCAL
 (2 << 16)

	)

92 
	#AUB_TRACE_MEMTYPE_PCI
 (3 << 16)

	)

93 
	#AUB_TRACE_MEMTYPE_GTT_ENTRY
 (4 << 16)

	)

102 
	#ENCODE_SS_TYPE
(
ty≥
, 
subty≥
Ë((—y≥Ë<< 16Ë| (subty≥))

	)

104 
	eaub_°©e_°ru˘_ty≥
 {

105 
	mAUB_TRACE_VS_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 1),

106 
	mAUB_TRACE_GS_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 2),

107 
	mAUB_TRACE_CLIP_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 3),

108 
	mAUB_TRACE_SF_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 4),

109 
	mAUB_TRACE_WM_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 5),

110 
	mAUB_TRACE_CC_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 6),

111 
	mAUB_TRACE_CLIP_VP_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 7),

112 
	mAUB_TRACE_SF_VP_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 8),

113 
	mAUB_TRACE_CC_VP_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0x9),

114 
	mAUB_TRACE_SAMPLER_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0xa),

115 
	mAUB_TRACE_KERNEL_INSTRUCTIONS
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0xb),

116 
	mAUB_TRACE_SCRATCH_SPACE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0xc),

117 
	mAUB_TRACE_SAMPLER_DEFAULT_COLOR
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0xd),

119 
	mAUB_TRACE_SCISSOR_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0x15),

120 
	mAUB_TRACE_BLEND_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0x16),

121 
	mAUB_TRACE_DEPTH_STENCIL_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_GENERAL
, 0x17),

123 
	mAUB_TRACE_VERTEX_BUFFER
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_VERTEX_BUFFER
, 0),

124 
	mAUB_TRACE_BINDING_TABLE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_SURFACE
, 0x100),

125 
	mAUB_TRACE_SURFACE_STATE
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_SURFACE
, 0x200),

126 
	mAUB_TRACE_VS_CONSTANTS
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_CONSTANT_BUFFER
, 0),

127 
	mAUB_TRACE_WM_CONSTANTS
 = 
ENCODE_SS_TYPE
(
AUB_TRACE_TYPE_CONSTANT_BUFFER
, 1),

130 #unde‡
ENCODE_SS_TYPE


136 
ölöe
 
uöt32_t
 
	$AUB_TRACE_TYPE
(
aub_°©e_°ru˘_ty≥
 
ss_ty≥
)

138  (
ss_ty≥
 & 0xFFFF0000) >> 16;

139 
	}
}

145 
ölöe
 
uöt32_t
 
	$AUB_TRACE_SUBTYPE
(
aub_°©e_°ru˘_ty≥
 
ss_ty≥
)

147  
ss_ty≥
 & 0xFFFF;

148 
	}
}

	@stubs/drm/intel_bufmgr.c

1 
	~<°dboﬁ.h
>

2 
	~<î∫o.h
>

4 
	~"igt_c‹e.h
"

5 
	~"öãl_bufmgr.h
"

7 #ifde‡
__GNUC__


8 #¥agm®
GCC
 
push_›ti⁄s


9 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsuggest-attribute=noreturn"

12 c⁄° 
	gmissög_suµ‹t_°r
[] = "Not compiled withÜibdrm_intel support\n";

14 
drm_öãl_bufmgr
 *
	$drm_öãl_bufmgr_gem_öô
(
fd
, 
b©ch_size
)

16 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

17  
NULL
;

18 
	}
}

20 
	$drm_öãl_bo_uƒe„ªn˚
(
drm_öãl_bo
 *
bo
)

22 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

23 
	}
}

25 
drm_öãl_bo
 *
	$drm_öãl_bo_Æloc
(
drm_öãl_bufmgr
 *
bufmgr
, c⁄° *
«me
,

26 
size
, 
Æignmít
)

28 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

29  
NULL
;

30 
	}
}

32 
	$drm_öãl_bo_subd©a
(
drm_öãl_bo
 *
bo
, 
off£t
,

33 
size
, c⁄° *
d©a
)

35 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

36  -
ENODEV
;

37 
	}
}

39 
	$drm_öãl_gem_bo_c⁄ãxt_exec
(
drm_öãl_bo
 *
bo
, 
drm_öãl_c⁄ãxt
 *
˘x
,

40 
u£d
, 
Êags
)

42 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

43  -
ENODEV
;

44 
	}
}

46 
	$drm_öãl_bo_emô_ªloc
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
off£t
,

47 
drm_öãl_bo
 *
èrgë_bo
, 
uöt32_t
 
èrgë_off£t
,

48 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaö
)

50 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

51  -
ENODEV
;

52 
	}
}

54 
	$drm_öãl_bo_emô_ªloc_„n˚
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
off£t
,

55 
drm_öãl_bo
 *
èrgë_bo
,

56 
uöt32_t
 
èrgë_off£t
,

57 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaö
)

59 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

60  -
ENODEV
;

61 
	}
}

63 
	$drm_öãl_bo_gë_tûög
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
tûög_mode
,

64 
uöt32_t
 * 
swizzÀ_mode
)

66 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

67  -
ENODEV
;

68 
	}
}

70 
	$drm_öãl_bo_mrb_exec
(
drm_öãl_bo
 *
bo
, 
u£d
,

71 
drm_˛ù_ª˘
 *
˛ùª˘s
, 
num_˛ùª˘s
,

72 
DR4
, 
Êags
)

74 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

75  -
ENODEV
;

76 
	}
}

78 
	$drm_öãl_bufmgr_gem_£t_aub_™nŸ©i⁄s
(
drm_öãl_bo
 *
bo
,

79 
drm_öãl_aub_™nŸ©i⁄
 *
™nŸ©i⁄s
,

80 
cou¡
)

82 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

83 
	}
}

85 
	$drm_öãl_bufmgr_gem_íabÀ_ªu£
(
drm_öãl_bufmgr
 *
bufmgr
)

87 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

88 
	}
}

90 
	$drm_öãl_bo_exec
(
drm_öãl_bo
 *
bo
, 
u£d
,

91 
drm_˛ù_ª˘
 *
˛ùª˘s
, 
num_˛ùª˘s
, 
DR4
)

93 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

94  -
ENODEV
;

95 
	}
}

97 
	$drm_öãl_bufmgr_de°roy
(
drm_öãl_bufmgr
 *
bufmgr
)

99 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

100 
	}
}

102 
	$drm_öãl_bo_waô_ªndîög
(
drm_öãl_bo
 *
bo
)

104 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

105 
	}
}

107 
	$drm_öãl_bo_gë_subd©a
(
drm_öãl_bo
 *
bo
, 
off£t
,

108 
size
, *
d©a
)

110 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

111  -
ENODEV
;

112 
	}
}

114 
	$drm_öãl_bo_m≠
(
drm_öãl_bo
 *
bo
, 
wrôe_íabÀ
)

116 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

117  -
ENODEV
;

118 
	}
}

120 
	$drm_öãl_gem_bo_m≠_gâ
(
drm_öãl_bo
 *
bo
)

122 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

123  -
ENODEV
;

124 
	}
}

126 
	$drm_öãl_bufmgr_gem_íabÀ_„n˚d_ªlocs
(
drm_öãl_bufmgr
 *
bufmgr
)

128 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

129 
	}
}

131 
	$drm_öãl_bo_unm≠
(
drm_öãl_bo
 *
bo
)

133 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

134  -
ENODEV
;

135 
	}
}

137 
	$drm_öãl_bo_Êök
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
«me
)

139 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

140  -
ENODEV
;

141 
	}
}

143 
drm_öãl_bo
 *
	$drm_öãl_bo_gem_¸óã_‰om_«me
(
drm_öãl_bufmgr
 *
bufmgr
,

144 c⁄° *
«me
,

145 
h™dÀ
)

147 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

148  
NULL
;

149 
	}
}

151 
	$drm_öãl_bo_gem_exp‹t_to_¥ime
(
drm_öãl_bo
 *
bo
, *
¥ime_fd
)

153 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

154  -
ENODEV
;

155 
	}
}

157 
drm_öãl_bo
 *
	$drm_öãl_bo_gem_¸óã_‰om_¥ime
(
drm_öãl_bufmgr
 *
bufmgr
,

158 
¥ime_fd
, 
size
)

160 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

161  
NULL
;

162 
	}
}

164 
	$drm_öãl_bufmgr_gem_£t_vma_ˇche_size
(
drm_öãl_bufmgr
 *
bufmgr
,

165 
limô
)

167 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

168 
	}
}

170 
	$drm_öãl_gem_bo_unm≠_gâ
(
drm_öãl_bo
 *
bo
)

172 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

173  -
ENODEV
;

174 
	}
}

176 
drm_öãl_c⁄ãxt
 *
	$drm_öãl_gem_c⁄ãxt_¸óã
(
drm_öãl_bufmgr
 *
bufmgr
)

178 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

179  
NULL
;

180 
	}
}

182 
	$drm_öãl_gem_c⁄ãxt_gë_id
(
drm_öãl_c⁄ãxt
 *
˘x
,

183 
uöt32_t
 *
˘x_id
)

185 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

186  -
ENODEV
;

187 
	}
}

189 
	$drm_öãl_gem_c⁄ãxt_de°roy
(
drm_öãl_c⁄ãxt
 *
˘x
)

191 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

192 
	}
}

194 
drm_öãl_bo
 *
	$drm_öãl_bo_Æloc_tûed
(
drm_öãl_bufmgr
 *
bufmgr
,

195 c⁄° *
«me
,

196 
x
, 
y
, 
˝p
,

197 
uöt32_t
 *
tûög_mode
,

198 *
pôch
,

199 
Êags
)

201 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

202  
NULL
;

203 
	}
}

205 
	$drm_öãl_bufmgr_gem_£t_aub_fûíame
(
drm_öãl_bufmgr
 *
bufmgr
,

206 c⁄° *
fûíame
)

208 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

209 
	}
}

211 
	$drm_öãl_bufmgr_gem_£t_aub_dump
(
drm_öãl_bufmgr
 *
bufmgr
, 
íabÀ
)

213 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

214 
	}
}

216 
	$drm_öãl_gem_bo_aub_dump_bmp
(
drm_öãl_bo
 *
bo
,

217 
x1
, 
y1
, 
width
, 
height
,

218 
aub_dump_bmp_f‹m©
 
f‹m©
,

219 
pôch
, 
off£t
)

221 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

222 
	}
}

224 
	$drm_öãl_gem_bo_°¨t_gâ_ac˚ss
(
drm_öãl_bo
 *
bo
, 
wrôe_íabÀ
)

226 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

227 
	}
}

229 
	$drm_öãl_bo_£t_tûög
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
tûög_mode
,

230 
uöt32_t
 
°ride
)

232 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

233  -
ENODEV
;

234 
	}
}

236 
	$drm_öãl_bo_dißbÀ_ªu£
(
drm_öãl_bo
 *
bo
)

238 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

239  -
ENODEV
;

240 
	}
}

242 
	$drm_öãl_bo_ª„ªn˚
(
drm_öãl_bo
 *
bo
)

244 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

245 
	}
}

247 
	$drm_öãl_bufmgr_gem_gë_devid
(
drm_öãl_bufmgr
 *
bufmgr
)

249 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

250  -
ENODEV
;

251 
	}
}

253 
drm_öãl_bo
 *
	$drm_öãl_bo_Æloc_f‹_ªndî
(
drm_öãl_bufmgr
 *
bufmgr
,

254 c⁄° *
«me
,

255 
size
,

256 
Æignmít
)

258 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

259  
NULL
;

260 
	}
}

262 
	$drm_öãl_bo_ª„ªn˚s
(
drm_öãl_bo
 *
bo
, drm_öãl_bÿ*
èrgë_bo
)

264 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

265  -
ENODEV
;

266 
	}
}

268 
	$drm_öãl_gem_bo_waô
(
drm_öãl_bo
 *
bo
, 
öt64_t
 
timeout_ns
)

270 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

271  -
ENODEV
;

272 
	}
}

274 
drm_öãl_bo
 *
	$drm_öãl_bo_Æloc_u£Ωå
(
drm_öãl_bufmgr
 *
bufmgr
,

275 c⁄° *
«me
,

276 *
addr
, 
uöt32_t
 
tûög_mode
,

277 
uöt32_t
 
°ride
, 
size
,

278 
Êags
)

280 
	`igt_ªquúe_f
(
Ál£
, 
missög_suµ‹t_°r
);

281  
NULL
;

282 
	}
}

284 #ifde‡
__GNUC__


285 #¥agm®
GCC
 
p›_›ti⁄s


	@stubs/drm/intel_bufmgr.h

34 #i‚de‡
INTEL_BUFMGR_H


35 
	#INTEL_BUFMGR_H


	)

37 
	~<°dio.h
>

38 
	~<°döt.h
>

39 
	~<°dio.h
>

41 #i‡
deföed
(
__˝lu•lus
)

45 
drm_˛ù_ª˘
;

47 
_drm_öãl_bufmgr
 
	tdrm_öãl_bufmgr
;

48 
_drm_öãl_c⁄ãxt
 
	tdrm_öãl_c⁄ãxt
;

49 
_drm_öãl_bo
 
	tdrm_öãl_bo
;

51 
	s_drm_öãl_bo
 {

58 
size
;

65 
Æign
;

71 
off£t
;

77 #ifde‡
__˝lu•lus


78 *
vút
;

80 *
vútuÆ
;

84 
drm_öãl_bufmgr
 *
bufmgr
;

89 
h™dÀ
;

96 
uöt64_t
 
off£t64
;

99 
	eaub_dump_bmp_f‹m©
 {

100 
AUB_DUMP_BMP_FORMAT_8BIT
 = 1,

101 
AUB_DUMP_BMP_FORMAT_ARGB_4444
 = 4,

102 
AUB_DUMP_BMP_FORMAT_ARGB_0888
 = 6,

103 
AUB_DUMP_BMP_FORMAT_ARGB_8888
 = 7,

106 
	s_drm_öãl_aub_™nŸ©i⁄
 {

107 
uöt32_t
 
ty≥
;

108 
uöt32_t
 
subty≥
;

109 
uöt32_t
 
ídög_off£t
;

110 } 
	tdrm_öãl_aub_™nŸ©i⁄
;

112 
	#BO_ALLOC_FOR_RENDER
 (1<<0)

	)

114 
drm_öãl_bo
 *
drm_öãl_bo_Æloc
(
drm_öãl_bufmgr
 *
bufmgr
, c⁄° *
«me
,

115 
size
, 
Æignmít
);

116 
drm_öãl_bo
 *
drm_öãl_bo_Æloc_f‹_ªndî
(
drm_öãl_bufmgr
 *
bufmgr
,

117 c⁄° *
«me
,

118 
size
,

119 
Æignmít
);

120 
drm_öãl_bo
 *
drm_öãl_bo_Æloc_u£Ωå
(
drm_öãl_bufmgr
 *
bufmgr
,

121 c⁄° *
«me
,

122 *
addr
, 
uöt32_t
 
tûög_mode
,

123 
uöt32_t
 
°ride
, 
size
,

124 
Êags
);

125 
drm_öãl_bo
 *
drm_öãl_bo_Æloc_tûed
(
drm_öãl_bufmgr
 *
bufmgr
,

126 c⁄° *
«me
,

127 
x
, 
y
, 
˝p
,

128 
uöt32_t
 *
tûög_mode
,

129 *
pôch
,

130 
Êags
);

131 
drm_öãl_bo_ª„ªn˚
(
drm_öãl_bo
 *
bo
);

132 
drm_öãl_bo_uƒe„ªn˚
(
drm_öãl_bo
 *
bo
);

133 
drm_öãl_bo_m≠
(
drm_öãl_bo
 *
bo
, 
wrôe_íabÀ
);

134 
drm_öãl_bo_unm≠
(
drm_öãl_bo
 *
bo
);

136 
drm_öãl_bo_subd©a
(
drm_öãl_bo
 *
bo
, 
off£t
,

137 
size
, c⁄° *
d©a
);

138 
drm_öãl_bo_gë_subd©a
(
drm_öãl_bo
 *
bo
, 
off£t
,

139 
size
, *
d©a
);

140 
drm_öãl_bo_waô_ªndîög
(
drm_öãl_bo
 *
bo
);

142 
drm_öãl_bufmgr_£t_debug
(
drm_öãl_bufmgr
 *
bufmgr
, 
íabÀ_debug
);

143 
drm_öãl_bufmgr_de°roy
(
drm_öãl_bufmgr
 *
bufmgr
);

144 
drm_öãl_bo_exec
(
drm_öãl_bo
 *
bo
, 
u£d
,

145 
drm_˛ù_ª˘
 *
˛ùª˘s
, 
num_˛ùª˘s
, 
DR4
);

146 
drm_öãl_bo_mrb_exec
(
drm_öãl_bo
 *
bo
, 
u£d
,

147 
drm_˛ù_ª˘
 *
˛ùª˘s
, 
num_˛ùª˘s
, 
DR4
,

148 
Êags
);

149 
drm_öãl_bufmgr_check_≠îtuª_•a˚
(
drm_öãl_bo
 ** 
bo_¨øy
, 
cou¡
);

151 
drm_öãl_bo_emô_ªloc
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
off£t
,

152 
drm_öãl_bo
 *
èrgë_bo
, 
uöt32_t
 
èrgë_off£t
,

153 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaö
);

154 
drm_öãl_bo_emô_ªloc_„n˚
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
off£t
,

155 
drm_öãl_bo
 *
èrgë_bo
,

156 
uöt32_t
 
èrgë_off£t
,

157 
uöt32_t
 
ªad_domaös
, uöt32_à
wrôe_domaö
);

158 
drm_öãl_bo_pö
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
Æignmít
);

159 
drm_öãl_bo_u≈ö
(
drm_öãl_bo
 *
bo
);

160 
drm_öãl_bo_£t_tûög
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
tûög_mode
,

161 
uöt32_t
 
°ride
);

162 
drm_öãl_bo_gë_tûög
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
tûög_mode
,

163 
uöt32_t
 * 
swizzÀ_mode
);

164 
drm_öãl_bo_Êök
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 * 
«me
);

165 
drm_öãl_bo_busy
(
drm_öãl_bo
 *
bo
);

166 
drm_öãl_bo_madvi£
(
drm_öãl_bo
 *
bo
, 
madv
);

167 
drm_öãl_bo_u£_48b_addªss_ønge
(
drm_öãl_bo
 *
bo
, 
uöt32_t
 
íabÀ
);

168 
drm_öãl_bo_£t_so·pö_off£t
(
drm_öãl_bo
 *
bo
, 
uöt64_t
 
off£t
);

170 
drm_öãl_bo_dißbÀ_ªu£
(
drm_öãl_bo
 *
bo
);

171 
drm_öãl_bo_is_ªußbÀ
(
drm_öãl_bo
 *
bo
);

172 
drm_öãl_bo_ª„ªn˚s
(
drm_öãl_bo
 *
bo
, drm_öãl_bÿ*
èrgë_bo
);

175 
drm_öãl_bufmgr
 *
drm_öãl_bufmgr_gem_öô
(
fd
, 
b©ch_size
);

176 
drm_öãl_bo
 *
drm_öãl_bo_gem_¸óã_‰om_«me
(
drm_öãl_bufmgr
 *
bufmgr
,

177 c⁄° *
«me
,

178 
h™dÀ
);

179 
drm_öãl_bufmgr_gem_íabÀ_ªu£
(
drm_öãl_bufmgr
 *
bufmgr
);

180 
drm_öãl_bufmgr_gem_íabÀ_„n˚d_ªlocs
(
drm_öãl_bufmgr
 *
bufmgr
);

181 
drm_öãl_bufmgr_gem_£t_vma_ˇche_size
(
drm_öãl_bufmgr
 *
bufmgr
,

182 
limô
);

183 
drm_öãl_gem_bo_m≠_unsynchr⁄ized
(
drm_öãl_bo
 *
bo
);

184 
drm_öãl_gem_bo_m≠_gâ
(
drm_öãl_bo
 *
bo
);

185 
drm_öãl_gem_bo_unm≠_gâ
(
drm_öãl_bo
 *
bo
);

187 
drm_öãl_gem_bo_gë_ªloc_cou¡
(
drm_öãl_bo
 *
bo
);

188 
drm_öãl_gem_bo_˛ór_ªlocs
(
drm_öãl_bo
 *
bo
, 
°¨t
);

189 
drm_öãl_gem_bo_°¨t_gâ_ac˚ss
(
drm_öãl_bo
 *
bo
, 
wrôe_íabÀ
);

192 
drm_öãl_bufmgr_gem_£t_aub_fûíame
(
drm_öãl_bufmgr
 *
bufmgr
,

193 c⁄° *
fûíame
);

194 
drm_öãl_bufmgr_gem_£t_aub_dump
(
drm_öãl_bufmgr
 *
bufmgr
, 
íabÀ
);

195 
drm_öãl_gem_bo_aub_dump_bmp
(
drm_öãl_bo
 *
bo
,

196 
x1
, 
y1
, 
width
, 
height
,

197 
aub_dump_bmp_f‹m©
 
f‹m©
,

198 
pôch
, 
off£t
);

200 
drm_öãl_bufmgr_gem_£t_aub_™nŸ©i⁄s
(
drm_öãl_bo
 *
bo
,

201 
drm_öãl_aub_™nŸ©i⁄
 *
™nŸ©i⁄s
,

202 
cou¡
);

204 
drm_öãl_gë_pùe_‰om_¸tc_id
(
drm_öãl_bufmgr
 *
bufmgr
, 
¸tc_id
);

206 
drm_öãl_gë_≠îtuª_sizes
(
fd
, 
size_t
 *
m≠∑bÀ
, size_à*
tŸÆ
);

207 
drm_öãl_bufmgr_gem_gë_devid
(
drm_öãl_bufmgr
 *
bufmgr
);

208 
drm_öãl_gem_bo_waô
(
drm_öãl_bo
 *
bo
, 
öt64_t
 
timeout_ns
);

210 
drm_öãl_c⁄ãxt
 *
drm_öãl_gem_c⁄ãxt_¸óã
(
drm_öãl_bufmgr
 *
bufmgr
);

211 
drm_öãl_gem_c⁄ãxt_gë_id
(
drm_öãl_c⁄ãxt
 *
˘x
,

212 
uöt32_t
 *
˘x_id
);

213 
drm_öãl_gem_c⁄ãxt_de°roy
(
drm_öãl_c⁄ãxt
 *
˘x
);

214 
drm_öãl_gem_bo_c⁄ãxt_exec
(
drm_öãl_bo
 *
bo
, 
drm_öãl_c⁄ãxt
 *
˘x
,

215 
u£d
, 
Êags
);

217 
drm_öãl_bo_gem_exp‹t_to_¥ime
(
drm_öãl_bo
 *
bo
, *
¥ime_fd
);

218 
drm_öãl_bo
 *
drm_öãl_bo_gem_¸óã_‰om_¥ime
(
drm_öãl_bufmgr
 *
bufmgr
,

219 
¥ime_fd
, 
size
);

222 
drm_öãl_bufmgr
 *
drm_öãl_bufmgr_Áke_öô
(
fd
,

223 
low_off£t
,

224 *
low_vútuÆ
,

225 
size
,

227 *
œ°_di•©ch
);

228 
drm_öãl_bufmgr_Áke_£t_œ°_di•©ch
(
drm_öãl_bufmgr
 *
bufmgr
,

230 *
œ°_di•©ch
);

231 
drm_öãl_bufmgr_Áke_£t_exec_ˇŒback
(
drm_öãl_bufmgr
 *
bufmgr
,

232 (*
exec
Ë(
drm_öãl_bo
 *
bo
,

233 
u£d
,

234 *
¥iv
),

235 *
¥iv
);

236 
drm_öãl_bufmgr_Áke_£t_„n˚_ˇŒback
(
drm_öãl_bufmgr
 *
bufmgr
,

237 (*
emô
Ë(*
¥iv
),

238 (*
waô
Ë(
„n˚
,

239 *
¥iv
),

240 *
¥iv
);

241 
drm_öãl_bo
 *
drm_öãl_bo_Áke_Æloc_°©ic
(
drm_öãl_bufmgr
 *
bufmgr
,

242 c⁄° *
«me
,

243 
off£t
,

244 
size
, *
vút
);

245 
drm_öãl_bo_Áke_dißbÀ_backög_°‹e
(
drm_öãl_bo
 *
bo
,

246 (*
övÆid©e_cb
Ë(
drm_öãl_bo


247 * 
bo
,

248 *
±r
),

249 *
±r
);

251 
drm_öãl_bufmgr_Áke_c⁄ãnded_lock_èke
(
drm_öãl_bufmgr
 *
bufmgr
);

252 
drm_öãl_bufmgr_Áke_evi˘_Æl
(
drm_öãl_bufmgr
 *
bufmgr
);

254 
drm_öãl_decode
 *
drm_öãl_decode_c⁄ãxt_Æloc
(
uöt32_t
 
devid
);

255 
drm_öãl_decode_c⁄ãxt_‰ì
(
drm_öãl_decode
 *
˘x
);

256 
drm_öãl_decode_£t_b©ch_poöãr
(
drm_öãl_decode
 *
˘x
,

257 *
d©a
, 
uöt32_t
 
hw_off£t
,

258 
cou¡
);

259 
drm_öãl_decode_£t_dump_∑°_íd
(
drm_öãl_decode
 *
˘x
,

260 
dump_∑°_íd
);

261 
drm_öãl_decode_£t_hód_èû
(
drm_öãl_decode
 *
˘x
,

262 
uöt32_t
 
hód
, uöt32_à
èû
);

263 
drm_öãl_decode_£t_ouçut_fûe
(
drm_öãl_decode
 *
˘x
, 
FILE
 *
out
);

264 
drm_öãl_decode
(drm_öãl_decodê*
˘x
);

266 
drm_öãl_ªg_ªad
(
drm_öãl_bufmgr
 *
bufmgr
,

267 
uöt32_t
 
off£t
,

268 
uöt64_t
 *
ªsu…
);

270 
drm_öãl_gë_ª£t_°©s
(
drm_öãl_c⁄ãxt
 *
˘x
,

271 
uöt32_t
 *
ª£t_cou¡
,

272 
uöt32_t
 *
a˘ive
,

273 
uöt32_t
 *
≥ndög
);

275 
drm_öãl_gë_sub¶i˚_tŸÆ
(
fd
, *
sub¶i˚_tŸÆ
);

276 
drm_öãl_gë_eu_tŸÆ
(
fd
, *
eu_tŸÆ
);

281 
	#dri_bo
 
drm_öãl_bo


	)

282 
	#dri_bufmgr
 
drm_öãl_bufmgr


	)

283 
	#dri_bo_Æloc
 
drm_öãl_bo_Æloc


	)

284 
	#dri_bo_ª„ªn˚
 
drm_öãl_bo_ª„ªn˚


	)

285 
	#dri_bo_uƒe„ªn˚
 
drm_öãl_bo_uƒe„ªn˚


	)

286 
	#dri_bo_m≠
 
drm_öãl_bo_m≠


	)

287 
	#dri_bo_unm≠
 
drm_öãl_bo_unm≠


	)

288 
	#dri_bo_subd©a
 
drm_öãl_bo_subd©a


	)

289 
	#dri_bo_gë_subd©a
 
drm_öãl_bo_gë_subd©a


	)

290 
	#dri_bo_waô_ªndîög
 
drm_öãl_bo_waô_ªndîög


	)

291 
	#dri_bufmgr_£t_debug
 
drm_öãl_bufmgr_£t_debug


	)

292 
	#dri_bufmgr_de°roy
 
drm_öãl_bufmgr_de°roy


	)

293 
	#dri_bo_exec
 
drm_öãl_bo_exec


	)

294 
	#dri_bufmgr_check_≠îtuª_•a˚
 
drm_öãl_bufmgr_check_≠îtuª_•a˚


	)

295 
	#dri_bo_emô_ªloc
(
ªloc_bo
, 
ªad
, 
wrôe
, 
èrgë_off£t
, \

296 
ªloc_off£t
, 
èrgë_bo
) \

297 
	`drm_öãl_bo_emô_ªloc
(
ªloc_bo
, 
ªloc_off£t
, \

298 
èrgë_bo
, 
èrgë_off£t
, \

299 
ªad
, 
wrôe
);

	)

300 
	#dri_bo_pö
 
drm_öãl_bo_pö


	)

301 
	#dri_bo_u≈ö
 
drm_öãl_bo_u≈ö


	)

302 
	#dri_bo_gë_tûög
 
drm_öãl_bo_gë_tûög


	)

303 
	#dri_bo_£t_tûög
(
bo
, 
mode
Ë
	`drm_öãl_bo_£t_tûög
(bo, mode, 0)

	)

304 
	#dri_bo_Êök
 
drm_öãl_bo_Êök


	)

305 
	#öãl_bufmgr_gem_öô
 
drm_öãl_bufmgr_gem_öô


	)

306 
	#öãl_bo_gem_¸óã_‰om_«me
 
drm_öãl_bo_gem_¸óã_‰om_«me


	)

307 
	#öãl_bufmgr_gem_íabÀ_ªu£
 
drm_öãl_bufmgr_gem_íabÀ_ªu£


	)

308 
	#öãl_bufmgr_Áke_öô
 
drm_öãl_bufmgr_Áke_öô


	)

309 
	#öãl_bufmgr_Áke_£t_œ°_di•©ch
 
drm_öãl_bufmgr_Áke_£t_œ°_di•©ch


	)

310 
	#öãl_bufmgr_Áke_£t_exec_ˇŒback
 
drm_öãl_bufmgr_Áke_£t_exec_ˇŒback


	)

311 
	#öãl_bufmgr_Áke_£t_„n˚_ˇŒback
 
drm_öãl_bufmgr_Áke_£t_„n˚_ˇŒback


	)

312 
	#öãl_bo_Áke_Æloc_°©ic
 
drm_öãl_bo_Áke_Æloc_°©ic


	)

313 
	#öãl_bo_Áke_dißbÀ_backög_°‹e
 
drm_öãl_bo_Áke_dißbÀ_backög_°‹e


	)

314 
	#öãl_bufmgr_Áke_c⁄ãnded_lock_èke
 
drm_öãl_bufmgr_Áke_c⁄ãnded_lock_èke


	)

315 
	#öãl_bufmgr_Áke_evi˘_Æl
 
drm_öãl_bufmgr_Áke_evi˘_Æl


	)

319 #i‡
deföed
(
__˝lu•lus
)

	@sw_sync.c

27 #ifde‡
HAVE_LIBGEN_H


28 
	~<libgí.h
>

30 
	~<f˙é.h
>

31 
	~<pﬁl.h
>

32 
	~<°dboﬁ.h
>

33 
	~<°döt.h
>

34 
	~<sys/io˘l.h
>

36 
	~"igt_debugfs.h
"

37 
	~"igt_kmod.h
"

38 
	~"sw_sync.h
"

39 
	~"drmã°.h
"

40 
	~"io˘l_wøµîs.h
"

49 
	söt_sync_¸óã_„n˚_d©a
 {

50 
__u32
 
	mvÆue
;

51 
	m«me
[32];

52 
__s32
 
	m„n˚
;

55 
	#INT_SYNC_IOC_MAGIC
 'W'

	)

56 
	#INT_SYNC_IOC_CREATE_FENCE
 
	`_IOWR
(
INT_SYNC_IOC_MAGIC
, 0, 
öt_sync_¸óã_„n˚_d©a
)

	)

57 
	#INT_SYNC_IOC_INC
 
	`_IOW
(
INT_SYNC_IOC_MAGIC
, 1, 
__u32
)

	)

59 
	sloˇl_sync_mîge_d©a
 {

60 
	m«me
[32];

62 
__s32
 
	mfd2
;

63 
__s32
 
	m„n˚
;

65 
__u32
 
	mÊags
;

66 
__u32
 
	m∑d
;

69 
	sloˇl_sync_„n˚_öfo
 {

70 
	mobj_«me
[32];

71 
	mdrivî_«me
[32];

73 
__s32
 
	m°©us
;

74 
__u32
 
	mÊags
;

76 
__u64
 
	mtime°amp_ns
;

79 
	sloˇl_sync_fûe_öfo
 {

80 
	m«me
[32];

82 
__s32
 
	m°©us
;

83 
__u32
 
	mÊags
;

84 
__u32
 
	mnum_„n˚s
;

85 
__u32
 
	m∑d
;

87 
__u64
 
	msync_„n˚_öfo
;

90 
	#UABI_SYNC_IOC_MAGIC
 '>'

	)

91 
	#LOCAL_SYNC_IOC_MERGE
 
	`_IOWR
(
UABI_SYNC_IOC_MAGIC
, 3, 
loˇl_sync_mîge_d©a
)

	)

92 
	#LOCAL_SYNC_IOC_FILE_INFO
 
	`_IOWR
(
UABI_SYNC_IOC_MAGIC
, 4, 
loˇl_sync_fûe_öfo
)

	)

94 
boﬁ
 
	$kî√l_sw_sync_∑th
(*
∑th
, 
Àngth
)

96 
	`¢¥ötf
(
∑th
, 
Àngth
, "%s", "/dev/sw_sync");

97 i‡(
	`ac˚ss
(
∑th
, 
R_OK
 | 
W_OK
) == 0)

98  
åue
;

100 
	`¢¥ötf
(
∑th
, 
Àngth
, "%s", "/sys/kernel/debug/sync/sw_sync");

101 i‡(
	`ac˚ss
(
∑th
, 
R_OK
 | 
W_OK
) == 0)

102  
åue
;

104 
	`¢¥ötf
(
∑th
, 
Àngth
, "%s/sw_sync", 
	`igt_debugfs_mou¡
());

105 i‡(
	`ac˚ss
(
∑th
, 
R_OK
 | 
W_OK
) == 0)

106  
åue
;

108  
Ál£
;

109 
	}
}

111 
boﬁ
 
	$sw_sync_fd_is_vÆid
(
fd
)

113 
°©us
;

115 i‡(
fd
 < 0)

116  
Ál£
;

118 
°©us
 = 
	`f˙é
(
fd
, 
F_GETFD
, 0);

119  
°©us
 >= 0;

120 
	}
}

122 
	$sw_sync_timñöe_¸óã
()

124 
buf
[128];

125 
fd
;

127 
	`igt_as£π_f
(
	`kî√l_sw_sync_∑th
(
buf
, (buf)),

130 
fd
 = 
	`›í
(
buf
, 
O_RDWR
);

131 
	`igt_as£π_f
(
	`sw_sync_fd_is_vÆid
(
fd
), "Created invalidÅimeline\n");

133  
fd
;

134 
	}
}

136 
	$__sw_sync_timñöe_¸óã_„n˚
(
fd
, 
uöt32_t
 
£qno
)

138 
öt_sync_¸óã_„n˚_d©a
 
d©a
 = { .
vÆue
 = 
£qno
};

140 i‡(
	`igt_io˘l
(
fd
, 
INT_SYNC_IOC_CREATE_FENCE
, &
d©a
))

141  -
î∫o
;

143  
d©a
.
„n˚
;

144 
	}
}

146 
	$sw_sync_timñöe_¸óã_„n˚
(
fd
, 
uöt32_t
 
£qno
)

148 
„n˚
 = 
	`__sw_sync_timñöe_¸óã_„n˚
(
fd
, 
£qno
);

150 
	`igt_as£π_f
(
	`sw_sync_fd_is_vÆid
(
„n˚
), "Created invalid fence\n");

152  
„n˚
;

153 
	}
}

155 
	$sw_sync_timñöe_öc
(
fd
, 
uöt32_t
 
cou¡
)

157 
	`do_io˘l
(
fd
, 
INT_SYNC_IOC_INC
, &
cou¡
);

158 
	}
}

160 
	$sync_„n˚_mîge
(
fd1
, 
fd2
)

162 
loˇl_sync_mîge_d©a
 
d©a
 = { .
fd2
 = fd2};

164 i‡(
	`io˘l
(
fd1
, 
LOCAL_SYNC_IOC_MERGE
, &
d©a
))

165  -
î∫o
;

167  
d©a
.
„n˚
;

168 
	}
}

170 
	$sync_„n˚_waô
(
fd
, 
timeout
)

172 
pﬁlfd
 
fds
 = { 
fd
, 
POLLIN
 };

173 
ªt
;

176 
ªt
 = 
	`pﬁl
(&
fds
, 1, 
timeout
);

177 i‡(
ªt
 > 0) {

178 i‡(
fds
.
ªvíts
 & (
POLLERR
 | 
POLLNVAL
))

179  -
EINVAL
;

182 } i‡(
ªt
 == 0) {

183  -
ETIME
;

185 
ªt
 = -
î∫o
;

186 i‡(
ªt
 =-
EINTR
 ||Ñë =-
EAGAIN
)

188  
ªt
;

191 
	}
}

193 
	$sync_„n˚_cou¡
(
fd
)

195 
loˇl_sync_fûe_öfo
 
öfo
 = {};

197 i‡(
	`io˘l
(
fd
, 
LOCAL_SYNC_IOC_FILE_INFO
, &
öfo
))

198  -
î∫o
;

200  
öfo
.
num_„n˚s
;

201 
	}
}

203 
	$__sync_„n˚_cou¡_°©us
(
fd
, 
°©us
)

205 
loˇl_sync_fûe_öfo
 
öfo
 = {};

206 
loˇl_sync_„n˚_öfo
 *
„n˚_öfo
;

207 
cou¡
;

208 
i
;

210 i‡(
	`io˘l
(
fd
, 
LOCAL_SYNC_IOC_FILE_INFO
, &
öfo
))

211  -
î∫o
;

213 
„n˚_öfo
 = 
	`ˇŒoc
(
öfo
.
num_„n˚s
, (*fence_info));

214 i‡(!
„n˚_öfo
)

215  -
ENOMEM
;

217 
öfo
.
sync_„n˚_öfo
 = 
	`to_u£r_poöãr
(
„n˚_öfo
);

218 i‡(
	`io˘l
(
fd
, 
LOCAL_SYNC_IOC_FILE_INFO
, &
öfo
)) {

219 
cou¡
 = -
î∫o
;

221 
cou¡
 = 0;

222 
i
 = 0 ; i < 
öfo
.
num_„n˚s
 ; i++)

223 i‡(
„n˚_öfo
[
i
].
°©us
 == status)

224 
cou¡
++;

227 
	`‰ì
(
„n˚_öfo
);

229  
cou¡
;

230 
	}
}

232 
	$sync_„n˚_cou¡_°©us
(
fd
, 
°©us
)

234 
cou¡
 = 
	`__sync_„n˚_cou¡_°©us
(
fd
, 
°©us
);

235 
	`igt_as£π_f
(
cou¡
 >= 0, "No fences with supplied status found\n");

237  
cou¡
;

238 
	}
}

240 
	$sync_„n˚_°©us
(
„n˚
)

242 
loˇl_sync_„n˚_öfo
 
„n˚_öfo
;

243 
loˇl_sync_fûe_öfo
 
fûe_öfo
 = {

244 .
sync_„n˚_öfo
 = 
	`to_u£r_poöãr
(&
„n˚_öfo
),

245 .
num_„n˚s
 = 1,

248 i‡(
	`io˘l
(
„n˚
, 
LOCAL_SYNC_IOC_FILE_INFO
, &
fûe_öfo
))

249  -
î∫o
;

251 i‡(
fûe_öfo
.
num_„n˚s
 != 1)

252  -
EINVAL
;

254  
„n˚_öfo
.
°©us
;

255 
	}
}

257 
	$mod¥obe
(c⁄° *
drivî
)

259 
	`igt_kmod_lﬂd
(
drivî
, "");

260 
	}
}

262 
boﬁ
 
	$kî√l_has_sw_sync
()

264 
buf
[128];

266 
	`mod¥obe
("sw_sync");

268  
	`kî√l_sw_sync_∑th
(
buf
, (buf));

269 
	}
}

271 
	$igt_ªquúe_sw_sync
()

273 
	`igt_ªquúe
(
	`kî√l_has_sw_sync
());

274 
	}
}

	@sw_sync.h

27 #i‚de‡
SW_SYNC_H


28 
	#SW_SYNC_H


	)

30 
	#SW_SYNC_FENCE_STATUS_ERROR
 (-1)

	)

31 
	#SW_SYNC_FENCE_STATUS_ACTIVE
 (0)

	)

32 
	#SW_SYNC_FENCE_STATUS_SIGNALED
 (1)

	)

34 
igt_ªquúe_sw_sync
();

36 
sw_sync_timñöe_¸óã
();

37 
sw_sync_timñöe_öc
(
timñöe
, 
uöt32_t
 
cou¡
);

39 
__sw_sync_timñöe_¸óã_„n˚
(
timñöe
, 
uöt32_t
 
£qno
);

40 
sw_sync_timñöe_¸óã_„n˚
(
timñöe
, 
uöt32_t
 
£qno
);

42 
sync_„n˚_mîge
(
„n˚1
, 
„n˚2
);

43 
sync_„n˚_waô
(
„n˚
, 
timeout
);

44 
sync_„n˚_°©us
(
„n˚
);

45 
sync_„n˚_cou¡
(
„n˚
);

46 
sync_„n˚_cou¡_°©us
(
„n˚
, 
°©us
);

48 
	#SYNC_FENCE_OK
 1

	)

	@tests/igt_assert.c

25 
	~<as£π.h
>

26 
	~<î∫o.h
>

27 
	~<Êﬂt.h
>

28 
	~<limôs.h
>

29 
	~<m©h.h
>

30 
	~<sig«l.h
>

31 
	~<°döt.h
>

32 
	~<°dlib.h
>

33 
	~<uni°d.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/waô.h
>

37 
	~"igt_c‹e.h
"

45 
	#öã∫Æ_as£π
 
as£π


	)

47 
	gã°
[] = "test";

48 *
	g¨gv_run
[] = { 
ã°
 };

49 (*
ã°_to_run
)(Ë
NULL
;

55 
	#CHECK_NEG
(
x
) { \

56 
	`igt_subã°_f
("XFAIL_sim∂e_%d", 
__LINE__
) { \

57 (*
exec_bef‹e
)++; \

58 
x
; \

59 
	`øi£
(
SIGBUS
); \

61 
exec_tŸÆ
++; \

62 
	}

	)
}

64 
	$do_f‹k
()

66 
pid
, 
°©us
;

67 
¨gc
;

69 
pid
 = 
	`f‹k
()) {

71 
	`öã∫Æ_as£π
(0);

73 
¨gc
 = 1;

74 
	`igt_sim∂e_öô
(
¨gc
, 
¨gv_run
);

75 
	`ã°_to_run
();

76 
	`igt_exô
();

78 
	`waôpid
(
pid
, &
°©us
, 0) == -1 &&

79 
î∫o
 =
EINTR
)

82 if(
	`WIFSIGNALED
(
°©us
))

83  
	`WTERMSIG
(
°©us
) + 128;

85  
	`WEXITSTATUS
(
°©us
);

87 
	}
}

89 
	$ã°_cmpöt_√g©ive
()

91 *
exec_bef‹e
 = 
	`ˇŒoc
(1, ());

92 
exec_tŸÆ
 = 0;

94 
	`CHECK_NEG
(
	`igt_as£π_eq
(
INT_MIN
, 
INT_MAX
));

96 
	`CHECK_NEG
(
	`igt_as£π_eq_u32
(0xfffffffeUL, 0xffffffffUL));

98 
	`CHECK_NEG
(
	`igt_as£π_eq_u64
(0xfffeffffffffffffULL, 0xffffffffffffffffULL));

99 
	`CHECK_NEG
(
	`igt_as£π_eq_u64
(0xfffffffeffffffffULL, 0xffffffffffffffffULL));

100 
	`CHECK_NEG
(
	`igt_as£π_eq_u64
(0xfffffffffffeffffULL, 0xffffffffffffffffULL));

102 
	`CHECK_NEG
(
	`igt_as£π_eq_doubÀ
(0.0, 
DBL_MAX
));

103 
	`CHECK_NEG
(
	`igt_as£π_eq_doubÀ
(
DBL_MAX
, 
	`√xâow¨d
(DBL_MAX, 0.0)));

105 i‡(*
exec_bef‹e
 !
exec_tŸÆ
)

106 
	`øi£
(
SIGSEGV
);

107 
	}
}

109 
	$ã°_cmpöt
()

111 
	`igt_as£π_eq
(0, 0);

112 
	`igt_as£π_eq
(
INT_MAX
, INT_MAX);

113 
	`igt_as£π_eq
(
INT_MAX
, INT_MAX);

114 
	`igt_as£π_√q
(
INT_MIN
, 
INT_MAX
);

116 
	`igt_as£π_eq_u32
(0, 0);

117 
	`igt_as£π_eq_u32
(0xffffffffUL, 0xffffffffUL);

118 
	`igt_as£π_√q_u32
(0xfffffffeUL, 0xffffffffUL);

120 
	`igt_as£π_eq_u64
(0, 0);

121 
	`igt_as£π_eq_u64
(0xffffffffffffffffULL, 0xffffffffffffffffULL);

122 
	`igt_as£π_√q_u64
(0xfffffffffffffffeULL, 0xffffffffffffffffULL);

124 
	`igt_as£π_eq_doubÀ
(0.0, 0.0);

125 
	`igt_as£π_eq_doubÀ
(
DBL_MAX
, DBL_MAX);

126 
	`igt_as£π_√q_doubÀ
(0.0, 
DBL_MAX
);

127 
	}
}

129 
	$ã°_fd_√g©ive
()

131 *
exec_bef‹e
 = 
	`ˇŒoc
(1, ());

132 
exec_tŸÆ
 = 0;

134 
	`CHECK_NEG
(
	`igt_as£π_fd
(-1));

135 
	`CHECK_NEG
(
	`igt_as£π_fd
(
INT_MIN
));

137 i‡(*
exec_bef‹e
 !
exec_tŸÆ
)

138 
	`øi£
(
SIGSEGV
);

139 
	}
}

141 
	$ã°_fd
()

143 
	`igt_as£π_fd
(0);

144 
	`igt_as£π_fd
(1);

145 
	`igt_as£π_fd
(
INT_MAX
);

146 
	}
}

148 
	gigt_maö


150 
	gªt
;

152 
igt_subã°
("igt_cmpint")

153 
ã°_cmpöt
();

161 
	gã°_to_run
 = 
ã°_cmpöt_√g©ive
;

162 
	gªt
 = 
do_f‹k
();

163 
igt_subã°
("igt_cmpint_negative")

164 
öã∫Æ_as£π
(
ªt
 =
IGT_EXIT_FAILURE
);

166 
igt_subã°
("igt_assert_fd")

167 
ã°_fd
();

169 
	gã°_to_run
 = 
ã°_fd_√g©ive
;

170 
	gªt
 = 
do_f‹k
();

171 
igt_subã°
("igt_assert_fd_negative")

172 
öã∫Æ_as£π
(
ªt
 =
IGT_EXIT_FAILURE
);

	@tests/igt_can_fail.c

25 
	~<as£π.h
>

26 
	~"igt_c‹e.h
"

29 
	gigt_maö


31 
as£π
(
igt_ˇn_Áû
(Ë=
Ál£
);

33 
	gigt_fixtuª
 {

34 
as£π
(
igt_ˇn_Áû
());

37 
as£π
(
igt_ˇn_Áû
(Ë=
Ál£
);

39 
igt_subã°
("subtest") {

40 
as£π
(
igt_ˇn_Áû
());

43 
as£π
(
igt_ˇn_Áû
(Ë=
Ál£
);

	@tests/igt_can_fail_simple.c

25 
	~<as£π.h
>

26 
	~"igt_c‹e.h
"

29 
	gigt_sim∂e_maö


31 
as£π
(
igt_ˇn_Áû
());

	@tests/igt_exit_handler.c

24 
	~<as£π.h
>

25 
	~<uni°d.h
>

26 
	~<f˙é.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/waô.h
>

29 
	~"igt_c‹e.h
"

31 
	gã°
;

32 
	gpùes
[2];

34 
	$exô_h™dÀr1
(
sig
)

36 
	`as£π
(
ã°
 == 1);

37 
ã°
++;

38 
	}
}

40 
	$exô_h™dÀr2
(
sig
)

42 
tmp
 = 1;

45 
	`as£π
(
ã°
 == 0);

46 
ã°
++;

50 
	`as£π
(
	`wrôe
(
pùes
[1], &
tmp
, 1) == 1);

51 
	}
}

53 
	eã°_ty≥
 {

54 
	mSUC
,

55 
	mNORMAL
,

56 
	mFAIL
,

57 
	mSKIP
,

58 
	mSIG


61 
	$ã°func
(
ã°_ty≥
Åest_type)

63 
¥og
[] = "igt_no_exit";

64 *
Áke_¨gv
[] = {
¥og
};

65 
Áke_¨gc
 = 1;

66 
pid_t
 
pid
;

67 
°©us
;

68 
tmp
 = 0;

70 
	`as£π
(
	`pùe2
(
pùes
, 
O_NONBLOCK
) == 0);

72 
pid
 = 
	`f‹k
();

74 i‡(
pid
 == 0) {

75 
	`igt_subã°_öô
(
Áke_¨gc
, 
Áke_¨gv
);

77 
igt_fixtuª
 {

79 
	`igt_ö°Æl_exô_h™dÀr
(
exô_h™dÀr1
);

80 
	`igt_ö°Æl_exô_h™dÀr
(
exô_h™dÀr1
);

82 
	`igt_ö°Æl_exô_h™dÀr
(
exô_h™dÀr2
);

85 
	`igt_subã°
("subtest") {

86 
ã°_ty≥
) {

87 
SUC
:

88 
	`igt_suc˚ss
();

89 
FAIL
:

90 
	`igt_Áû
(1);

91 
SKIP
:

92 
	`igt_skù
("skip");

93 
NORMAL
:

95 
SIG
:

96 
	`øi£
(
SIGTERM
);

100 
	`igt_exô
();

103 
	`as£π
(
	`waôpid
(
pid
, &
°©us
, 0) != -1);

105 
	`as£π
(
	`ªad
(
pùes
[0], &
tmp
, 1) == 1);

106 
	`as£π
(
tmp
 == 1);

108  
°©us
;

109 
	}
}

111 
	$maö
(
¨gc
, **
¨gv
)

113 
°©us
;

115 
	`as£π
(
	`ã°func
(
SUC
) == 0);

117 
	`as£π
(
	`ã°func
(
NORMAL
) == 0);

119 
°©us
 = 
	`ã°func
(
FAIL
);

120 
	`as£π
(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(status) == 1);

122 
°©us
 = 
	`ã°func
(
SKIP
);

123 
	`as£π
(
	`WIFEXITED
(
°©us
Ë&& 
	`WEXITSTATUS
(°©usË=
IGT_EXIT_SKIP
);

125 
°©us
 = 
	`ã°func
(
SIG
);

126 
	`as£π
(
	`WIFSIGNALED
(
°©us
Ë&& 
	`WTERMSIG
(°©usË=
SIGTERM
);

127 
	}
}

	@tests/igt_fork_helper.c

28 
	~"drmã°.h
"

29 
	~"igt_aux.h
"

31 
	$maö
(
¨gc
, **
¨gv
)

33 
i
 = 0; i < 1000; i++) {

34 
	`igt_f‹k_sig«l_hñ≥r
();

35 
	`igt_°›_sig«l_hñ≥r
();

37 
	}
}

	@tests/igt_hdmi_inject.c

25 
	~"igt.h
"

27 c⁄° 
	gedid_hódî
[] = {

36 
	$edid_hódî_is_vÆid
(c⁄° *
øw_edid
)

38 
i
, 
sc‹e
 = 0;

40 
i
 = 0; i < (
edid_hódî
); i++)

41 i‡(
øw_edid
[
i
] =
edid_hódî
[i])

42 
sc‹e
++;

44  
sc‹e
;

45 
	}
}

54 
	$edid_block_checksum
(c⁄° *
øw_edid
)

56 
i
;

57 
csum
 = 0;

58 
i
 = 0; i < 
EDID_LENGTH
; i++) {

59 
csum
 +
øw_edid
[
i
];

62  
csum
;

63 
	}
}

65 (*
	thdmi_öje˘_func
)(c⁄° *
	tedid
, 
	tsize_t
 
	tÀngth
,

66 *
	t√w_edid_±r
[], 
	tsize_t
 *
	t√w_Àngth
);

68 
igt_sim∂e_maö


71 c⁄° *
desc
;

72 
hdmi_öje˘_func
 
öje˘
;

73 } 
funcs
[] = {

74 { "3D", 
km°e°_edid_add_3d
 },

75 { "4k", 
km°e°_edid_add_4k
 },

76 { "audio", 
km°e°_edid_add_audio
 },

77 { 
NULL
, NULL },

78 }, *
f
;

80 
f
 = 
funcs
; f->
öje˘
; f++) {

81 *
edid
;

82 
size_t
 
Àngth
;

84 
f
->
	`öje˘
(
	`igt_kms_gë_ba£_edid
(), 
EDID_LENGTH
, &
edid
,

85 &
Àngth
);

87 
	`igt_as£π_f
(
	`edid_hódî_is_vÆid
(
edid
) == 8,

88 "övÆid hódî o¿HDMI %s", 
f
->
desc
);

90 
	`igt_as£π_f
(
	`edid_block_checksum
(
edid
) == 0,

91 "checksum faûed o¿HDMI %s", 
f
->
desc
);

93 
	`igt_as£π_f
(
	`edid_block_checksum
(
edid
 + 
EDID_LENGTH
) == 0,

94 "CEA block checksum faûed o¿HDMI %s", 
f
->
desc
);

96 
	}
}

	@tests/igt_invalid_subtest_name.c

24 
	~"igt_c‹e.h
"

26 
	gigt_maö


28 
igt_subã°
("# invalidÇame !") {

29 
igt_öfo
("Invalid subtestÇameÅest\n");

	@tests/igt_list_only.c

28 
	~"drmã°.h
"

30 
	$maö
(
¨gc
, **
¨gv
)

32 
¥og
[] = "igt_list_only";

33 
¨g
[] = "--list-subtests";

34 *
Áke_¨gv
[] = {
¥og
, 
¨g
};

35 
Áke_¨gc
 = 2;

37 
	`igt_subã°_öô
(
Áke_¨gc
, 
Áke_¨gv
);

39 
	`igt_subã°
("A")

42 
	`igt_exô
();

43 
	}
}

	@tests/igt_no_exit.c

28 
	~"drmã°.h
"

30 
	$maö
(
¨gc
, **
¨gv
)

32 
¥og
[] = "igt_no_exit";

33 *
Áke_¨gv
[] = {
¥og
};

34 
Áke_¨gc
 = 1;

36 
	`igt_subã°_öô
(
Áke_¨gc
, 
Áke_¨gv
);

38 
	`igt_subã°
("A")

40 
	}
}

	@tests/igt_no_exit_list_only.c

28 
	~"drmã°.h
"

30 
	$maö
(
¨gc
, **
¨gv
)

32 
¥og
[] = "igt_list_only";

33 
¨g
[] = "--list-subtests";

34 *
Áke_¨gv
[] = {
¥og
, 
¨g
};

35 
Áke_¨gc
 = 2;

37 
	`igt_subã°_öô
(
Áke_¨gc
, 
Áke_¨gv
);

39 
	`igt_subã°
("A")

41 
	}
}

	@tests/igt_no_subtest.c

28 
	~"drmã°.h
"

30 
	$maö
(
¨gc
, **
¨gv
)

32 
¥og
[] = "igt_no_exit";

33 *
Áke_¨gv
[] = {
¥og
};

34 
Áke_¨gc
 = 1;

36 
	`igt_subã°_öô
(
Áke_¨gc
, 
Áke_¨gv
);

38 
	`igt_exô
();

39 
	}
}

	@tests/igt_segfault.c

37 
	~<sig«l.h
>

38 
	~<°dlib.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<as£π.h
>

42 
	~<î∫o.h
>

44 
	~"drmã°.h
"

45 
	~"igt_c‹e.h
"

53 
	#öã∫Æ_as£π
 
as£π


	)

55 
boﬁ
 
	gsim∂e
;

56 
boﬁ
 
	gru«
;

57 
boﬁ
 
	grunc
;

58 
	gã°
[] = "test";

59 *
	g¨gv_run
[] = { 
ã°
 };

61 
	$¸ashme
()

63 
	`øi£
(
SIGSEGV
);

64 
	}
}

66 
	$do_f‹k
()

68 
pid
, 
°©us
;

69 
¨gc
;

71 
pid
 = 
	`f‹k
()) {

73 
	`öã∫Æ_as£π
(0);

75 i‡(
sim∂e
) {

76 
¨gc
 = 1;

77 
	`igt_sim∂e_öô
(
¨gc
, 
¨gv_run
);

78 
	`¸ashme
();

80 
	`igt_exô
();

83 
¨gc
 = 1;

84 
	`igt_subã°_öô
(
¨gc
, 
¨gv_run
);

86 if(
ru«
)

87 
	`igt_subã°
("A")

90 
	`igt_subã°
("B")

91 
	`¸ashme
();

93 if(
runc
)

94 
	`igt_subã°
("C")

97 
	`igt_exô
();

100 
	`waôpid
(
pid
, &
°©us
, 0) == -1 &&

101 
î∫o
 =
EINTR
)

104 if(
	`WIFSIGNALED
(
°©us
))

105  
	`WTERMSIG
(
°©us
) + 128;

107  
	`WEXITSTATUS
(
°©us
);

109 
	}
}

111 
	$maö
(
¨gc
, **
¨gv
)

114 
sim∂e
 = 
åue
;

115 
ru«
=
Ál£
;

116 
runc
=
Ál£
;

117 
	`igt_öfo
("SimpleÅest.\n");

118 
	`fÊush
(
°dout
);

119 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
SIGSEGV
 + 128);

122 
sim∂e
 = 
Ál£
;

123 
	`igt_öfo
("Single subtest.\n");

124 
	`fÊush
(
°dout
);

125 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
SIGSEGV
 + 128);

128 
sim∂e
 = 
Ál£
;

129 
ru«
=
åue
;

130 
	`igt_öfo
("PassingÅhen crashing subtest.\n");

131 
	`fÊush
(
°dout
);

132 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
SIGSEGV
 + 128);

135 
sim∂e
 = 
Ál£
;

136 
ru«
=
Ál£
;

137 
runc
=
åue
;

138 
	`igt_öfo
("CrashingÅhenÖassing subtest.\n");

139 
	`fÊush
(
°dout
);

140 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
SIGSEGV
 + 128);

143 
	}
}

	@tests/igt_simple_test_subtests.c

24 
	~"igt_c‹e.h
"

26 
	gigt_sim∂e_maö


28 
igt_subã°
("subtest") {

29 
igt_öfo
("Invalid subtest.\n");

	@tests/igt_simulation.c

28 
	~<°dlib.h
>

29 
	~<sys/waô.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<as£π.h
>

32 
	~<î∫o.h
>

34 
	~"drmã°.h
"

35 
	~"igt_c‹e.h
"

43 
	#öã∫Æ_as£π
 
as£π


	)

45 
boﬁ
 
	gsim∂e
;

46 
boﬁ
 
	gli°_subã°s
;

47 
boﬁ
 
	gö_fixtuª
;

48 
boﬁ
 
	gö_subã°
;

50 
	gã°
[] = "test";

51 
	gli°
[] = "--list-subtests";

52 *
	g¨gv_li°
[] = { 
ã°
, 
li°
 };

53 *
	g¨gv_run
[] = { 
ã°
 };

55 
	$do_f‹k
()

57 
pid
, 
°©us
;

58 
¨gc
;

60 
pid
 = 
	`f‹k
()) {

62 
	`öã∫Æ_as£π
(0);

64 i‡(
sim∂e
) {

65 
¨gc
 = 1;

66 
	`igt_sim∂e_öô
(
¨gc
, 
¨gv_run
);

68 
	`igt_skù_⁄_simuœti⁄
();

70 
	`igt_exô
();

72 i‡(
li°_subã°s
) {

73 
¨gc
 = 2;

74 
	`igt_subã°_öô
(
¨gc
, 
¨gv_li°
);

76 
¨gc
 = 1;

77 
	`igt_subã°_öô
(
¨gc
, 
¨gv_run
);

80 i‡(
ö_fixtuª
) {

81 
igt_fixtuª


82 
	`igt_skù_⁄_simuœti⁄
();

83 } i‡(
ö_subã°
) {

84 
	`igt_subã°
("sim")

85 
	`igt_skù_⁄_simuœti⁄
();

87 
	`igt_skù_⁄_simuœti⁄
();

89 i‡(!
ö_subã°
)

90 
	`igt_subã°
("foo")

93 
	`igt_exô
();

96 
	`waôpid
(
pid
, &
°©us
, 0) == -1 &&

97 
î∫o
 =
EINTR
)

100 
	`öã∫Æ_as£π
(
	`WIFEXITED
(
°©us
));

102  
	`WEXITSTATUS
(
°©us
);

104 
	}
}

106 
	$maö
(
¨gc
, **
¨gv
)

109 
sim∂e
 = 
åue
;

110 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

111 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SKIP
);

113 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

114 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

117 
sim∂e
 = 
Ál£
;

118 
li°_subã°s
 = 
åue
;

120 
ö_fixtuª
 = 
Ál£
;

121 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

122 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

124 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

125 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

127 
ö_fixtuª
 = 
åue
;

128 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

129 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

131 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

132 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

134 
ö_fixtuª
 = 
Ál£
;

135 
ö_subã°
 = 
åue
;

136 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

137 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

139 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

140 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

143 
sim∂e
 = 
Ál£
;

144 
li°_subã°s
 = 
Ál£
;

146 
ö_fixtuª
 = 
Ál£
;

147 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

148 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SKIP
);

150 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

151 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

153 
ö_fixtuª
 = 
åue
;

154 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

155 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SKIP
);

157 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

158 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

160 
ö_fixtuª
 = 
Ál£
;

161 
ö_subã°
 = 
åue
;

162 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "1", 1) == 0);

163 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SKIP
);

165 
	`öã∫Æ_as£π
(
	`£ãnv
("INTEL_SIMULATION", "0", 1) == 0);

166 
	`öã∫Æ_as£π
(
	`do_f‹k
(Ë=
IGT_EXIT_SUCCESS
);

169 
	}
}

	@tests/igt_stats.c

25 
	~"igt_c‹e.h
"

26 
	~"igt_°©s.h
"

28 
	#ARRAY_SIZE
(
¨r
Ë(◊º)/◊º[0]))

	)

30 
	$push_fixtuª_1
(
igt_°©s_t
 *
°©s
)

32 
	`igt_°©s_push
(
°©s
, 2);

33 
	`igt_°©s_push
(
°©s
, 4);

34 
	`igt_°©s_push
(
°©s
, 6);

35 
	`igt_°©s_push
(
°©s
, 8);

36 
	`igt_°©s_push
(
°©s
, 10);

37 
	}
}

40 
	$ã°_öô_zîo
()

42 
igt_°©s_t
 
°©s
;

44 
°©s
.
món
 = 1.;

45 
	`igt_°©s_öô
(&
°©s
);

46 
	`igt_as£π_eq_doubÀ
(
°©s
.
món
, 0.);

47 
	}
}

49 
	$ã°_öô
()

51 
igt_°©s_t
 
°©s
;

53 
	`igt_°©s_öô
(&
°©s
);

59 
	`igt_as£π
(
	`igt_°©s_is_p›uœti⁄
(&
°©s
Ë=
Ál£
);

60 
	}
}

62 
	$ã°_mö_max
()

64 
igt_°©s_t
 
°©s
;

66 
	`igt_°©s_öô
(&
°©s
);

67 
	`push_fixtuª_1
(&
°©s
);

69 
	`igt_as£π
(
	`igt_°©s_gë_mö
(&
°©s
) == 2);

70 
	`igt_as£π
(
	`igt_°©s_gë_max
(&
°©s
) == 10);

71 
	}
}

73 
	$ã°_ønge
()

75 
igt_°©s_t
 
°©s
;

77 
	`igt_°©s_öô
(&
°©s
);

78 
	`push_fixtuª_1
(&
°©s
);

80 
	`igt_as£π
(
	`igt_°©s_gë_ønge
(&
°©s
) == 8);

81 
	}
}

88 
	$ã°_qu¨tûes
()

90 c⁄° 
uöt64_t
 
s1
[] =

92 c⁄° 
uöt64_t
 
s2
[] = { 40, 41, 7, 15, 36, 39 };

93 
igt_°©s_t
 
°©s
;

94 
q1
, 
q2
, 
q3
;

97 
	`igt_°©s_öô
(&
°©s
);

98 
	`igt_°©s_push_¨øy
(&
°©s
, 
s1
, 
	`ARRAY_SIZE
(s1));

100 
	`igt_°©s_gë_qu¨tûes
(&
°©s
, &
q1
, &
q2
, &
q3
);

101 
	`igt_as£π_eq_doubÀ
(
q1
, 25.5);

102 
	`igt_as£π_eq_doubÀ
(
q2
, 40);

103 
	`igt_as£π_eq_doubÀ
(
q3
, 42.5);

104 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_medün
(&
°©s
), 40);

105 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_iqr
(&
°©s
), 42.5 - 25.5);

107 
	`igt_°©s_föi
(&
°©s
);

110 
	`igt_°©s_öô
(&
°©s
);

111 
	`igt_°©s_push_¨øy
(&
°©s
, 
s2
, 
	`ARRAY_SIZE
(s2));

113 
	`igt_°©s_gë_qu¨tûes
(&
°©s
, &
q1
, &
q2
, &
q3
);

114 
	`igt_as£π_eq_doubÀ
(
q1
, 15);

115 
	`igt_as£π_eq_doubÀ
(
q2
, 37.5);

116 
	`igt_as£π_eq_doubÀ
(
q3
, 40);

117 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_medün
(&
°©s
), 37.5);

118 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_iqr
(&
°©s
), 40 - 15);

120 
	`igt_°©s_föi
(&
°©s
);

121 
	}
}

123 
	$ã°_övÆid©e_s‹ãd
()

125 
igt_°©s_t
 
°©s
;

126 c⁄° 
uöt64_t
 
s1_åunˇãd
[] =

128 
medün1
, 
medün2
;

130 
	`igt_°©s_öô
(&
°©s
);

131 
	`igt_°©s_push_¨øy
(&
°©s
, 
s1_åunˇãd
, 
	`ARRAY_SIZE
(s1_truncated));

132 
medün1
 = 
	`igt_°©s_gë_medün
(&
°©s
);

134 
	`igt_°©s_push
(&
°©s
, 43);

135 
medün2
 = 
	`igt_°©s_gë_medün
(&
°©s
);

137 
	`igt_as£π_eq_doubÀ
(
medün2
, 40);

138 
	`igt_as£π
(
medün1
 !
medün2
);

139 
	}
}

141 
	$ã°_món
()

143 
igt_°©s_t
 
°©s
;

144 
món
;

146 
	`igt_°©s_öô
(&
°©s
);

147 
	`push_fixtuª_1
(&
°©s
);

149 
món
 = 
	`igt_°©s_gë_món
(&
°©s
);

150 
	`igt_as£π_eq_doubÀ
(
món
, (2 + 4 + 6 + 8 + 10) / 5.);

152 
	`igt_°©s_föi
(&
°©s
);

153 
	}
}

155 
	$ã°_övÆid©e_món
()

157 
igt_°©s_t
 
°©s
;

158 
món1
, 
món2
;

160 
	`igt_°©s_öô
(&
°©s
);

161 
	`push_fixtuª_1
(&
°©s
);

163 
món1
 = 
	`igt_°©s_gë_món
(&
°©s
);

164 
	`igt_as£π_eq_doubÀ
(
món1
, (2 + 4 + 6 + 8 + 10) / 5.);

166 
	`igt_°©s_push
(&
°©s
, 100);

168 
món2
 = 
	`igt_°©s_gë_món
(&
°©s
);

169 
	`igt_as£π
(
món1
 !
món2
);

171 
	`igt_°©s_föi
(&
°©s
);

172 
	}
}

178 
	$ã°_°d_devüti⁄
()

180 
igt_°©s_t
 
°©s
;

181 
món
, 
v¨ün˚
, 
°d_devüti⁄
;

183 
	`igt_°©s_öô
(&
°©s
);

184 
	`igt_°©s_£t_p›uœti⁄
(&
°©s
, 
åue
);

186 
	`igt_°©s_push
(&
°©s
, 2);

187 
	`igt_°©s_push
(&
°©s
, 4);

188 
	`igt_°©s_push
(&
°©s
, 4);

189 
	`igt_°©s_push
(&
°©s
, 4);

190 
	`igt_°©s_push
(&
°©s
, 5);

191 
	`igt_°©s_push
(&
°©s
, 5);

192 
	`igt_°©s_push
(&
°©s
, 7);

193 
	`igt_°©s_push
(&
°©s
, 9);

195 
món
 = 
	`igt_°©s_gë_món
(&
°©s
);

196 
	`igt_as£π_eq_doubÀ
(
món
, (2 + 3 * 4 + 2 * 5 + 7 + 9) / 8.);

198 
v¨ün˚
 = 
	`igt_°©s_gë_v¨ün˚
(&
°©s
);

199 
	`igt_as£π_eq_doubÀ
(
v¨ün˚
, 4);

201 
°d_devüti⁄
 = 
	`igt_°©s_gë_°d_devüti⁄
(&
°©s
);

202 
	`igt_as£π_eq_doubÀ
(
°d_devüti⁄
, 2);

204 
	`igt_°©s_föi
(&
°©s
);

205 
	}
}

207 
	$ã°_ªÆloˇti⁄
()

209 
igt_°©s_t
 
°©s
;

210 
i
;

212 
	`igt_°©s_öô_wôh_size
(&
°©s
, 1);

214 
i
 = 0; i < 101; i++) {

215 
	`igt_°©s_push
(&
°©s
, 
i
);

217 i‡(
i
 > 10)

218 
	`igt_°©s_gë_medün
(&
°©s
);

220 
	`igt_as£π
(!
°©s
.
is_Êﬂt
);

222 
	`igt_as£π_eq
(
°©s
.
n_vÆues
, 101);

223 
i
 = 0; i < 101; i++)

224 
	`igt_as£π_eq
(
°©s
.
vÆues_u64
[
i
], i);

225 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_món
(&
°©s
), 50.0);

226 
	`igt_as£π_eq_doubÀ
(
	`igt_°©s_gë_medün
(&
°©s
), 50.0);

228 
	`igt_°©s_föi
(&
°©s
);

229 
	}
}

231 
	gigt_sim∂e_maö


233 
ã°_öô_zîo
();

234 
ã°_öô
();

235 
ã°_mö_max
();

236 
ã°_ønge
();

237 
ã°_qu¨tûes
();

238 
ã°_övÆid©e_s‹ãd
();

239 
ã°_món
();

240 
ã°_övÆid©e_món
();

241 
ã°_°d_devüti⁄
();

242 
ã°_ªÆloˇti⁄
();

	@tests/igt_subtest_group.c

25 
	~<as£π.h
>

26 
	~"igt_c‹e.h
"

28 
	gigt_maö


30 
boﬁ
 
	gt1
 = 
Ál£
;

31 
	gt2
 = 0;

33 
	gigt_subã°_group
 {

34 
	gigt_fixtuª
 {

35 
igt_ªquúe
(
åue
);

38 
	gigt_subã°_group
 {

39 
	gigt_fixtuª
 {

40 
igt_ªquúe
(
Ál£
);

43 
igt_subã°
("not-run") {

44 
as£π
(0);

47 
	gigt_subã°_group
 {

51 
igt_subã°
("still-not-run") {

52 
as£π
(0);

57 
igt_subã°
("run") {

58 
	gt1
 = 
åue
;

59 
as£π
(1);

63 
	gigt_subã°_group
 {

64 
	gigt_fixtuª
 {

65 
as£π
(
t2
 == 0);

66 
	gt2
 = 1;

69 
igt_subã°
("run-again") {

70 
as£π
(
t2
 == 1);

71 
	gt2
 = 2;

74 
	gigt_fixtuª
 {

75 
as£π
(
t2
 == 2);

76 
	gt2
 = 3;

81 
as£π
(
t1
);

82 
as£π
(
t2
 == 3);

	@tests/igt_timeout.c

1 
	~"igt_c‹e.h
"

2 
	~<uni°d.h
>

4 
	gigt_sim∂e_maö


6 
igt_£t_timeout
(1, "Testcase");

7 
¶ìp
(5);

	@uwildmat/uwildmat.c

96 
	~<°rög.h
>

97 
	~<°döt.h
>

98 
	~"uwûdm©/uwûdm©.h
"

100 
	#ABORT
 -1

	)

103 
	#ISUTF8
(
c
Ë(((cË& 0xc0Ë=0xc0)

	)

114 
	$utf8_Àngth
(c⁄° *
°¨t
, c⁄° *
íd
)

116 
mask
 = 0x80;

117 c⁄° *
p
;

118 
Àngth
 = 0;

119 
À·
;

121 ; 
mask
 > 0 && (*
°¨t
 & mask) == mask; mask >>= 1)

122 
Àngth
++;

123 i‡(
Àngth
 < 2 ||Üength > 6)

125 i‡(
íd
 !
NULL
 && (íd - 
°¨t
 + 1Ë< 
Àngth
)

127 
À·
 = 
Àngth
 - 1;

128 
p
 = 
°¨t
 + 1; 
À·
 > 0 && (*p & 0xc0) == 0x80;Ö++)

129 
À·
--;

130  (
À·
 =0Ë? 
Àngth
 : 1;

131 
	}
}

137 
boﬁ


138 
	$is_vÆid_utf8
(c⁄° *
ãxt
)

140 
mask
;

141 c⁄° *
p
;

142 
Àngth
;

143 
À·
;

145 
p
 = (c⁄° *)
ãxt
; *p != '\0';) {

146 
mask
 = 0x80;

147 
Àngth
 = 0;

150 ; 
mask
 > 0 && (*
p
 & mask) == mask; mask >>= 1)

151 
Àngth
++;

153 
p
++;

156 i‡(
Àngth
 == 0)

160 i‡(
Àngth
 < 2 ||Üength > 6)

161  
Ál£
;

164 
À·
 = 
Àngth
 - 1;

165 ; 
À·
 > 0 && (*
p
 & 0xc0) == 0x80;Ö++)

166 
À·
--;

168 i‡(
À·
 > 0)

169  
Ál£
;

172  
åue
;

173 
	}
}

187 
	$utf8_decode
(c⁄° *
°¨t
, c⁄° *
íd
,

188 
uöt32_t
 *
ªsu…
)

190 
uöt32_t
 
vÆue
 = 0;

191 
Àngth
, 
i
;

192 c⁄° *
p
 = 
°¨t
;

193 
mask
;

195 
Àngth
 = 
	`utf8_Àngth
(
°¨t
, 
íd
);

196 i‡(
Àngth
 < 2) {

197 *
ªsu…
 = *
°¨t
;

200 
mask
 = (1 << (7 - 
Àngth
)) - 1;

201 
vÆue
 = *
p
 & 
mask
;

202 
p
++;

203 
i
 = 
Àngth
 - 1; i > 0; i--) {

204 
vÆue
 = (vÆuê<< 6Ë| (*
p
 & 0x3f);

205 
p
++;

207 *
ªsu…
 = 
vÆue
;

208  
Àngth
;

209 
	}
}

217 
boﬁ


218 
	$m©ch_˛ass
(
uöt32_t
 
ãxt
, c⁄° *
°¨t
,

219 c⁄° *
íd
)

221 
boﬁ
 
ªvî£d
, 
Ælowønge
;

222 c⁄° *
p
 = 
°¨t
;

223 
uöt32_t
 
fú°
 = 0;

224 
uöt32_t
 
œ°
;

230 
ªvî£d
 = (*
p
 == '^');

231 i‡(
ªvî£d
)

232 
p
++;

242 
Ælowønge
 = 
Ál£
;

243 
p
 <
íd
) {

244 i‡(
Ælowønge
 && *
p
 ='-' &&Ö < 
íd
) {

245 
p
++;

246 
p
 +
	`utf8_decode
’, 
íd
, &
œ°
);

247 i‡(
ãxt
 >
fú°
 &&Åexà<
œ°
)

248  !
ªvî£d
;

249 
Ælowønge
 = 
Ál£
;

251 
p
 +
	`utf8_decode
’, 
íd
, &
fú°
);

252 i‡(
ãxt
 =
fú°
)

253  !
ªvî£d
;

254 
Ælowønge
 = 
åue
;

257  
ªvî£d
;

258 
	}
}

267 
	$m©ch_∑âîn
(c⁄° *
ãxt
, c⁄° *
°¨t
,

268 c⁄° *
íd
)

270 c⁄° *
q
, *
íd˛ass
;

271 c⁄° *
p
 = 
°¨t
;

272 
boﬁ
 
ismëa
;

273 
m©ched
, 
width
;

274 
uöt32_t
 
c
;

276 ; 
p
 <
íd
;Ö++) {

277 i‡(!*
ãxt
 && *
p
 != '*')

278  
ABORT
;

280 *
p
) {

282 i‡(!*++
p
)

283  
ABORT
;

287 i‡(*
ãxt
++ !*
p
)

288  
Ál£
;

292 
ãxt
 +
	`ISUTF8
(*ãxtË? 
	`utf8_Àngth
—ext, 
NULL
) : 1;

298 ++
p
; *p == '*';Ö++)

302 i‡(
p
 > 
íd
)

303  
åue
;

315 
ismëa
 = (*
p
 == '[' || *p == '?' || *p == '\\');

316 *
ãxt
) {

317 
width
 = 
	`ISUTF8
(*
ãxt
Ë? 
	`utf8_Àngth
—ext, 
NULL
) : 1;

318 i‡(
ismëa
) {

319 
m©ched
 = 
	`m©ch_∑âîn
(
ãxt
, 
p
, 
íd
);

320 
ãxt
 +
width
;

322 *
ãxt
 && *ãxà!*
p
) {

323 
ãxt
 +
width
;

324 
width
 = 
	`ISUTF8
(*
ãxt
Ë? 
	`utf8_Àngth
—ext, 
NULL
) : 1;

326 i‡(!*
ãxt
)

327  
ABORT
;

328 
m©ched
 = 
	`m©ch_∑âîn
(++
ãxt
, 
p
 + 1, 
íd
);

330 i‡(
m©ched
 !
Ál£
)

331  
m©ched
;

333  
ABORT
;

338 
p
++;

339 
q
 = 
p
 + (*p == '^') + 1;

340 i‡(
q
 > 
íd
)

341  
ABORT
;

342 
íd˛ass
 = 
	`memchr
(
q
, ']', (
size_t
Ë(
íd
 - q + 1));

343 i‡(!
íd˛ass
)

344  
ABORT
;

348 
ãxt
 +
	`utf8_decode
—ext, 
NULL
, &
c
);

349 i‡(!
	`m©ch_˛ass
(
c
, 
p
, 
íd˛ass
 - 1))

350  
Ál£
;

351 
p
 = 
íd˛ass
;

356  (*
ãxt
 == '\0');

357 
	}
}

368 
uwûdm©


369 
	$m©ch_ex¥essi⁄
(c⁄° *
ãxt
, c⁄° *
°¨t
,

370 
boﬁ
 
Ælowpois⁄
)

372 c⁄° *
íd
, *
•lô
;

373 c⁄° *
p
 = 
°¨t
;

374 
boﬁ
 
ªvî£
, 
esˇ≥d
;

375 
boﬁ
 
m©ch
 = 
Ál£
;

376 
boﬁ
 
pois⁄
 = 
Ál£
;

377 
boﬁ
 
pois⁄ed
 = 
Ál£
;

381 i‡(!*
p
)

382  !*
ãxt
 ? 
UWILDMAT_MATCH
 : 
UWILDMAT_FAIL
;

383 
íd
 = 
°¨t
 + 
	`°æí
((const *) start) - 1;

388 ; 
p
 <
íd
 + 1;Ö = 
•lô
 + 1) {

389 i‡(
Ælowpois⁄
)

390 
pois⁄
 = (*
p
 == '@');

391 
ªvî£
 = (*
p
 ='!'Ë|| 
pois⁄
;

392 i‡(
ªvî£
)

393 
p
++;

398 
esˇ≥d
 = 
Ál£
, 
•lô
 = 
p
; s∂ô <
íd
; split++) {

399 i‡(*
•lô
 == '[') {

400 
•lô
++;

401 i‡(*
•lô
 == ']')

402 
•lô
++;

403 
•lô
 <
íd
 && *split != ']')

404 
•lô
++;

406 i‡(*
•lô
 =',' && !
esˇ≥d
)

408 
esˇ≥d
 = (*
•lô
 ='\\'Ë? !esˇ≥d : 
Ál£
;

413 i‡(
m©ch
 =!
ªvî£
 && 
pois⁄
 =
pois⁄ed
)

415 i‡(
	`m©ch_∑âîn
(
ãxt
, 
p
, 
•lô
 - 1Ë=
åue
) {

416 
pois⁄ed
 = 
pois⁄
;

417 
m©ch
 = !
ªvî£
;

420 i‡(
pois⁄ed
)

421  
UWILDMAT_POISON
;

422  
m©ch
 ? 
UWILDMAT_MATCH
 : 
UWILDMAT_FAIL
;

423 
	}
}

430 
boﬁ


431 
	$uwûdm©
(c⁄° *
ãxt
, c⁄° *
∑t
)

433 c⁄° *
uãxt
 = (c⁄° *Ë
ãxt
;

434 c⁄° *
u∑t
 = (c⁄° *Ë
∑t
;

436 i‡(
u∑t
[0] == '*' && upat[1] == '\0')

437  
åue
;

439  (
	`m©ch_ex¥essi⁄
(
uãxt
, 
u∑t
, 
Ál£
Ë=
UWILDMAT_MATCH
);

440 
	}
}

446 
uwûdm©


447 
	$uwûdm©_pois⁄
(c⁄° *
ãxt
, c⁄° *
∑t
)

449 c⁄° *
uãxt
 = (c⁄° *Ë
ãxt
;

450 c⁄° *
u∑t
 = (c⁄° *Ë
∑t
;

452 i‡(
u∑t
[0] == '*' && upat[1] == '\0')

453  
UWILDMAT_MATCH
;

455  
	`m©ch_ex¥essi⁄
(
uãxt
, 
u∑t
, 
åue
);

456 
	}
}

462 
boﬁ


463 
	$uwûdm©_sim∂e
(c⁄° *
ãxt
, c⁄° *
∑t
)

465 c⁄° *
uãxt
 = (c⁄° *Ë
ãxt
;

466 c⁄° *
u∑t
 = (c⁄° *Ë
∑t
;

467 
size_t
 
Àngth
;

469 i‡(
u∑t
[0] == '*' && upat[1] == '\0')

470  
åue
;

472 
Àngth
 = 
	`°æí
(
∑t
);

473  (
	`m©ch_∑âîn
(
uãxt
, 
u∑t
, u∑à+ 
Àngth
 - 1Ë=
åue
);

475 
	}
}

	@uwildmat/uwildmat.h

2 #i‚de‡
UWILDMAT_H


3 
	#UWILDMAT_H
 1

	)

5 
	~<°dio.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<°dboﬁ.h
>

12 
	euwûdm©
 {

13 
	mUWILDMAT_FAIL
 = 0,

14 
	mUWILDMAT_MATCH
 = 1,

15 
	mUWILDMAT_POISON


18 
boﬁ
 
is_vÆid_utf8
(c⁄° *
°¨t
);

19 
boﬁ
 
uwûdm©
(c⁄° *
ãxt
, c⁄° *
∑t
);

20 
boﬁ
 
uwûdm©_sim∂e
(c⁄° *
ãxt
, c⁄° *
∑t
);

21 
uwûdm©
 
uwûdm©_pois⁄
(c⁄° *
ãxt
, c⁄° *
∑t
);

	@version.h

1 
	#IGT_GIT_SHA1
 "ge2598d4e"

	)

	@/usr/include/alsa/asoundlib.h

28 #i‚de‡
__ASOUNDLIB_H


29 
	#__ASOUNDLIB_H


	)

31 
	~<uni°d.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<°rög.h
>

36 
	~<f˙é.h
>

37 
	~<as£π.h
>

38 
	~<sys/pﬁl.h
>

39 
	~<î∫o.h
>

40 
	~<°d¨g.h
>

41 
	~<ídün.h
>

43 #i‚de‡
__GNUC__


44 
	#__ölöe__
 
ölöe


	)

47 
	~<Æß/asoundef.h
>

48 
	~<Æß/vîsi⁄.h
>

49 
	~<Æß/globÆ.h
>

50 
	~<Æß/öput.h
>

51 
	~<Æß/ouçut.h
>

52 
	~<Æß/îr‹.h
>

53 
	~<Æß/c⁄f.h
>

54 
	~<Æß/pcm.h
>

55 
	~<Æß/øwmidi.h
>

56 
	~<Æß/timî.h
>

57 
	~<Æß/hwdï.h
>

58 
	~<Æß/c⁄åﬁ.h
>

59 
	~<Æß/mixî.h
>

60 
	~<Æß/£q_evít.h
>

61 
	~<Æß/£q.h
>

62 
	~<Æß/£qmid.h
>

63 
	~<Æß/£q_midi_evít.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/gsl/gsl_fft_real.h

20 #i‚de‡
__GSL_FFT_REAL_H__


21 
	#__GSL_FFT_REAL_H__


	)

23 
	~<°ddef.h
>

25 
	~<g¶/g¶_m©h.h
>

26 
	~<g¶/g¶_com∂ex.h
>

27 
	~<g¶/g¶_f·.h
>

29 #unde‡
__BEGIN_DECLS


30 #unde‡
__END_DECLS


31 #ifde‡
__˝lu•lus


32 
	#__BEGIN_DECLS
 "C" {

	)

33 
	#__END_DECLS
 }

	)

35 
	#__BEGIN_DECLS


	)

36 
	#__END_DECLS


	)

39 
__BEGIN_DECLS


41 
g¶_f·_ªÆ_ødix2_å™sf‹m
 (
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
) ;

45 
size_t
 
	mn
;

46 
size_t
 
	mnf
;

47 
size_t
 
	mÁ˘‹
[64];

48 
g¶_com∂ex
 *
	mtwiddÀ
[64];

49 
g¶_com∂ex
 *
	måig
;

51 
	tg¶_f·_ªÆ_wavëabÀ
;

55 
size_t
 
	mn
;

56 *
	ms¸©ch
;

58 
	tg¶_f·_ªÆ_w‹k•a˚
;

60 
g¶_f·_ªÆ_wavëabÀ
 * 
g¶_f·_ªÆ_wavëabÀ_Æloc
 (
size_t
 
n
);

62 
g¶_f·_ªÆ_wavëabÀ_‰ì
 (
g¶_f·_ªÆ_wavëabÀ
 * 
wavëabÀ
);

64 
g¶_f·_ªÆ_w‹k•a˚
 * 
g¶_f·_ªÆ_w‹k•a˚_Æloc
 (
size_t
 
n
);

66 
g¶_f·_ªÆ_w‹k•a˚_‰ì
 (
g¶_f·_ªÆ_w‹k•a˚
 * 
w‹k•a˚
);

69 
g¶_f·_ªÆ_å™sf‹m
 (
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
,

70 c⁄° 
g¶_f·_ªÆ_wavëabÀ
 * 
wavëabÀ
,

71 
g¶_f·_ªÆ_w‹k•a˚
 * 
w‹k
);

74 
g¶_f·_ªÆ_u≈ack
 (c⁄° 
ªÆ_c€fficõ¡
[],

75 
com∂ex_c€fficõ¡
[],

76 c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

78 
	g__END_DECLS


	@/usr/include/gsl/gsl_fit.h

20 #i‚de‡
__GSL_FIT_H__


21 
	#__GSL_FIT_H__


	)

23 
	~<°dlib.h
>

24 
	~<g¶/g¶_m©h.h
>

26 #unde‡
__BEGIN_DECLS


27 #unde‡
__END_DECLS


28 #ifde‡
__˝lu•lus


29 
	#__BEGIN_DECLS
 "C" {

	)

30 
	#__END_DECLS
 }

	)

32 
	#__BEGIN_DECLS


	)

33 
	#__END_DECLS


	)

36 
__BEGIN_DECLS


38 
g¶_fô_löór
 (c⁄° * 
x
, c⁄° 
size_t
 
x°ride
,

39 c⁄° * 
y
, c⁄° 
size_t
 
y°ride
,

40 c⁄° 
size_t
 
n
,

41 * 
c0
, * 
c1
,

42 * 
cov00
, * 
cov01
, * 
cov11
,

43 * 
sumsq
);

46 
g¶_fô_wlöór
 (c⁄° * 
x
, c⁄° 
size_t
 
x°ride
,

47 c⁄° * 
w
, c⁄° 
size_t
 
w°ride
,

48 c⁄° * 
y
, c⁄° 
size_t
 
y°ride
,

49 c⁄° 
size_t
 
n
,

50 * 
c0
, * 
c1
,

51 * 
cov00
, * 
cov01
, * 
cov11
,

52 * 
chisq
);

55 
g¶_fô_löór_e°
 (c⁄° 
x
,

56 c⁄° 
c0
, c⁄° 
c1
,

57 c⁄° 
cov00
, c⁄° 
cov01
, c⁄° 
cov11
,

58 *
y
, *
y_îr
);

61 
g¶_fô_mul
 (c⁄° * 
x
, c⁄° 
size_t
 
x°ride
,

62 c⁄° * 
y
, c⁄° 
size_t
 
y°ride
,

63 c⁄° 
size_t
 
n
,

64 * 
c1
,

65 * 
cov11
,

66 * 
sumsq
);

68 
g¶_fô_wmul
 (c⁄° * 
x
, c⁄° 
size_t
 
x°ride
,

69 c⁄° * 
w
, c⁄° 
size_t
 
w°ride
,

70 c⁄° * 
y
, c⁄° 
size_t
 
y°ride
,

71 c⁄° 
size_t
 
n
,

72 * 
c1
,

73 * 
cov11
,

74 * 
sumsq
);

78 
g¶_fô_mul_e°
 (c⁄° 
x
,

79 c⁄° 
c1
,

80 c⁄° 
cov11
,

81 *
y
, *
y_îr
);

83 
	g__END_DECLS


	@/usr/include/gsl/gsl_statistics_double.h

20 #i‚de‡
__GSL_STATISTICS_DOUBLE_H__


21 
	#__GSL_STATISTICS_DOUBLE_H__


	)

23 
	~<°ddef.h
>

25 #unde‡
__BEGIN_DECLS


26 #unde‡
__END_DECLS


27 #ifde‡
__˝lu•lus


28 
	#__BEGIN_DECLS
 "C" {

	)

29 
	#__END_DECLS
 }

	)

31 
	#__BEGIN_DECLS


	)

32 
	#__END_DECLS


	)

35 
__BEGIN_DECLS


37 
g¶_°©s_món
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

38 
g¶_°©s_v¨ün˚
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

39 
g¶_°©s_sd
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

40 
g¶_°©s_v¨ün˚_wôh_fixed_món
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

41 
g¶_°©s_sd_wôh_fixed_món
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

42 
g¶_°©s_tss
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

43 
g¶_°©s_tss_m
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

45 
g¶_°©s_absdev
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

46 
g¶_°©s_skew
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

47 
g¶_°©s_kuπosis
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

48 
g¶_°©s_œg1_autoc‹ªœti⁄
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

50 
g¶_°©s_cov¨ün˚
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
,c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n
);

51 
g¶_°©s_c‹ªœti⁄
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
,c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n
);

52 
g¶_°©s_•órm™
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
, c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n
, 
w‹k
[]);

54 
g¶_°©s_v¨ün˚_m
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

55 
g¶_°©s_sd_m
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

56 
g¶_°©s_absdev_m
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

57 
g¶_°©s_skew_m_sd
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
, c⁄° 
sd
);

58 
g¶_°©s_kuπosis_m_sd
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
, c⁄° 
sd
);

59 
g¶_°©s_œg1_autoc‹ªœti⁄_m
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
món
);

61 
g¶_°©s_cov¨ün˚_m
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
,c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n
, c⁄° 
món1
, c⁄° 
món2
);

65 
g¶_°©s_wmón
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

66 
g¶_°©s_wv¨ün˚
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

67 
g¶_°©s_wsd
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

68 
g¶_°©s_wv¨ün˚_wôh_fixed_món
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
món
);

69 
g¶_°©s_wsd_wôh_fixed_món
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
món
);

70 
g¶_°©s_wtss
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

71 
g¶_°©s_wtss_m
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
);

72 
g¶_°©s_wabsdev
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

73 
g¶_°©s_wskew
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

74 
g¶_°©s_wkuπosis
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

76 
g¶_°©s_wv¨ün˚_m
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
);

77 
g¶_°©s_wsd_m
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
);

78 
g¶_°©s_wabsdev_m
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
);

79 
g¶_°©s_wskew_m_sd
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
, c⁄° 
wsd
);

80 
g¶_°©s_wkuπosis_m_sd
 (c⁄° 
w
[], c⁄° 
size_t
 
w°ride
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
, c⁄° 
wmón
, c⁄° 
wsd
);

84 
g¶_°©s_pv¨ün˚
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
, c⁄° size_à
n1
, c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n2
);

85 
g¶_°©s_âe°
 (c⁄° 
d©a1
[], c⁄° 
size_t
 
°ride1
, c⁄° size_à
n1
, c⁄° 
d©a2
[], c⁄° size_à
°ride2
, c⁄° size_à
n2
);

87 
g¶_°©s_max
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

88 
g¶_°©s_mö
 (c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

89 
g¶_°©s_mömax
 (* 
mö
, * 
max
, c⁄° 
d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
);

91 
size_t
 
g¶_°©s_max_ödex
 (c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

92 
size_t
 
g¶_°©s_mö_ödex
 (c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

93 
g¶_°©s_mömax_ödex
 (
size_t
 * 
mö_ödex
, size_à* 
max_ödex
, c⁄° 
d©a
[], c⁄° size_à
°ride
, c⁄° size_à
n
);

95 
g¶_°©s_medün_‰om_s‹ãd_d©a
 (c⁄° 
s‹ãd_d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
) ;

96 
g¶_°©s_qu™tûe_‰om_s‹ãd_d©a
 (c⁄° 
s‹ãd_d©a
[], c⁄° 
size_t
 
°ride
, c⁄° size_à
n
, c⁄° 
f
) ;

98 
	g__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libkmod.h

20 #¥agm®
⁄˚


21 #i‚de‡
_LIBKMOD_H_


22 
	#_LIBKMOD_H_


	)

24 
	~<f˙é.h
>

25 
	~<°d¨g.h
>

26 
	~<°dboﬁ.h
>

27 
	~<öây≥s.h
>

29 #ifde‡
__˝lu•lus


39 
kmod_˘x
;

40 
kmod_˘x
 *
kmod_√w
(c⁄° *
dú«me
, c⁄° * c⁄° *
c⁄fig_∑ths
);

41 
kmod_˘x
 *
kmod_ªf
(kmod_˘x *
˘x
);

42 
kmod_˘x
 *
kmod_uƒef
(kmod_˘x *
˘x
);

43 
kmod_£t_log_‚
(
kmod_˘x
 *
˘x
,

44 (*
log_‚
)(*
log_d©a
,

45 
¥i‹ôy
, c⁄° *
fûe
, 
löe
,

46 c⁄° *
‚
, c⁄° *
f‹m©
,

47 
va_li°
 
¨gs
),

48 c⁄° *
d©a
);

49 
kmod_gë_log_¥i‹ôy
(c⁄° 
kmod_˘x
 *
˘x
);

50 
kmod_£t_log_¥i‹ôy
(
kmod_˘x
 *
˘x
, 
¥i‹ôy
);

51 *
kmod_gë_u£rd©a
(c⁄° 
kmod_˘x
 *
˘x
);

52 
kmod_£t_u£rd©a
(
kmod_˘x
 *
˘x
, c⁄° *
u£rd©a
);

54 c⁄° *
kmod_gë_dú«me
(c⁄° 
kmod_˘x
 *
˘x
);

59 
kmod_lﬂd_ªsour˚s
(
kmod_˘x
 *
˘x
);

60 
kmod_u∆ﬂd_ªsour˚s
(
kmod_˘x
 *
˘x
);

62 
	ekmod_ªsour˚s
 {

63 
KMOD_RESOURCES_OK
 = 0,

64 
KMOD_RESOURCES_MUST_RELOAD
 = 1,

65 
KMOD_RESOURCES_MUST_RECREATE
 = 2,

67 
kmod_vÆid©e_ªsour˚s
(
kmod_˘x
 *
˘x
);

69 
	ekmod_ödex
 {

70 
KMOD_INDEX_MODULES_DEP
 = 0,

71 
KMOD_INDEX_MODULES_ALIAS
,

72 
KMOD_INDEX_MODULES_SYMBOL
,

73 
KMOD_INDEX_MODULES_BUILTIN
,

75 
_KMOD_INDEX_PAD
 = (1 << 31),

77 
kmod_dump_ödex
(
kmod_˘x
 *
˘x
, 
kmod_ödex
 
ty≥
, 
fd
);

84 
kmod_li°
;

85 
kmod_li°
 *
kmod_li°_√xt
(c⁄° kmod_li° *
li°
,

86 c⁄° 
kmod_li°
 *
cuº
);

87 
kmod_li°
 *
kmod_li°_¥ev
(c⁄° kmod_li° *
li°
,

88 c⁄° 
kmod_li°
 *
cuº
);

89 
kmod_li°
 *
kmod_li°_œ°
(c⁄° kmod_li° *
li°
);

91 
	#kmod_li°_f‹óch
(
li°_íåy
, 
fú°_íåy
) \

92 
li°_íåy
 = 
fú°_íåy
; \

93 
li°_íåy
 !
NULL
; \

94 
li°_íåy
 = 
	`kmod_li°_√xt
(
fú°_íåy
,Üi°_íåy))

	)

96 
	#kmod_li°_f‹óch_ªvî£
(
li°_íåy
, 
fú°_íåy
) \

97 
li°_íåy
 = 
	`kmod_li°_œ°
(
fú°_íåy
); \

98 
li°_íåy
 !
NULL
; \

99 
li°_íåy
 = 
	`kmod_li°_¥ev
(
fú°_íåy
,Üi°_íåy))

	)

107 
kmod_c⁄fig_ôî
;

108 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_bœckli°s
(c⁄° 
kmod_˘x
 *
˘x
);

109 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_ö°Æl_comm™ds
(c⁄° 
kmod_˘x
 *
˘x
);

110 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_ªmove_comm™ds
(c⁄° 
kmod_˘x
 *
˘x
);

111 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_Æü£s
(c⁄° 
kmod_˘x
 *
˘x
);

112 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_›ti⁄s
(c⁄° 
kmod_˘x
 *
˘x
);

113 
kmod_c⁄fig_ôî
 *
kmod_c⁄fig_gë_so·dïs
(c⁄° 
kmod_˘x
 *
˘x
);

114 c⁄° *
kmod_c⁄fig_ôî_gë_key
(c⁄° 
kmod_c⁄fig_ôî
 *
ôî
);

115 c⁄° *
kmod_c⁄fig_ôî_gë_vÆue
(c⁄° 
kmod_c⁄fig_ôî
 *
ôî
);

116 
boﬁ
 
kmod_c⁄fig_ôî_√xt
(
kmod_c⁄fig_ôî
 *
ôî
);

117 
kmod_c⁄fig_ôî_‰ì_ôî
(
kmod_c⁄fig_ôî
 *
ôî
);

124 
kmod_moduÀ
;

125 
kmod_moduÀ_√w_‰om_«me
(
kmod_˘x
 *
˘x
, c⁄° *
«me
,

126 
kmod_moduÀ
 **
mod
);

127 
kmod_moduÀ_√w_‰om_∑th
(
kmod_˘x
 *
˘x
, c⁄° *
∑th
,

128 
kmod_moduÀ
 **
mod
);

129 
kmod_moduÀ_√w_‰om_lookup
(
kmod_˘x
 *
˘x
, c⁄° *
giví_Æüs
,

130 
kmod_li°
 **
li°
);

131 
kmod_moduÀ_√w_‰om_lﬂded
(
kmod_˘x
 *
˘x
,

132 
kmod_li°
 **
li°
);

134 
kmod_moduÀ
 *
kmod_moduÀ_ªf
(kmod_moduÀ *
mod
);

135 
kmod_moduÀ
 *
kmod_moduÀ_uƒef
(kmod_moduÀ *
mod
);

136 
kmod_moduÀ_uƒef_li°
(
kmod_li°
 *
li°
);

137 
kmod_moduÀ
 *
kmod_moduÀ_gë_moduÀ
(c⁄° 
kmod_li°
 *
íåy
);

141 
	ekmod_ªmove
 {

142 
KMOD_REMOVE_FORCE
 = 
O_TRUNC
,

143 
KMOD_REMOVE_NOWAIT
 = 
O_NONBLOCK
,

147 
	ekmod_ö£π
 {

148 
KMOD_INSERT_FORCE_VERMAGIC
 = 0x1,

149 
KMOD_INSERT_FORCE_MODVERSION
 = 0x2,

153 
	ekmod_¥obe
 {

154 
KMOD_PROBE_FORCE_VERMAGIC
 = 0x00001,

155 
KMOD_PROBE_FORCE_MODVERSION
 = 0x00002,

156 
KMOD_PROBE_IGNORE_COMMAND
 = 0x00004,

157 
KMOD_PROBE_IGNORE_LOADED
 = 0x00008,

158 
KMOD_PROBE_DRY_RUN
 = 0x00010,

159 
KMOD_PROBE_FAIL_ON_LOADED
 = 0x00020,

162 
KMOD_PROBE_APPLY_BLACKLIST_ALL
 = 0x10000,

163 
KMOD_PROBE_APPLY_BLACKLIST
 = 0x20000,

164 
KMOD_PROBE_APPLY_BLACKLIST_ALIAS_ONLY
 = 0x40000,

168 
	ekmod_fûãr
 {

169 
KMOD_FILTER_BLACKLIST
 = 0x00001,

170 
KMOD_FILTER_BUILTIN
 = 0x00002,

173 
kmod_moduÀ_ªmove_moduÀ
(
kmod_moduÀ
 *
mod
, 
Êags
);

174 
kmod_moduÀ_ö£π_moduÀ
(
kmod_moduÀ
 *
mod
, 
Êags
,

175 c⁄° *
›ti⁄s
);

176 
kmod_moduÀ_¥obe_ö£π_moduÀ
(
kmod_moduÀ
 *
mod
,

177 
Êags
, c⁄° *
exåa_›ti⁄s
,

178 (*
run_ö°Æl
)(
kmod_moduÀ
 *
m
,

179 c⁄° *
cmdlöe
, *
d©a
),

180 c⁄° *
d©a
,

181 (*
¥öt_a˘i⁄
)(
kmod_moduÀ
 *
m
, 
boﬁ
 
ö°Æl
,

182 c⁄° *
›ti⁄s
));

185 c⁄° *
kmod_moduÀ_gë_«me
(c⁄° 
kmod_moduÀ
 *
mod
);

186 c⁄° *
kmod_moduÀ_gë_∑th
(c⁄° 
kmod_moduÀ
 *
mod
);

187 c⁄° *
kmod_moduÀ_gë_›ti⁄s
(c⁄° 
kmod_moduÀ
 *
mod
);

188 c⁄° *
kmod_moduÀ_gë_ö°Æl_comm™ds
(c⁄° 
kmod_moduÀ
 *
mod
);

189 c⁄° *
kmod_moduÀ_gë_ªmove_comm™ds
(c⁄° 
kmod_moduÀ
 *
mod
);

190 
kmod_li°
 *
kmod_moduÀ_gë_dïídícõs
(c⁄° 
kmod_moduÀ
 *
mod
);

191 
kmod_moduÀ_gë_so·dïs
(c⁄° 
kmod_moduÀ
 *
mod
,

192 
kmod_li°
 **
¥e
, kmod_li° **
po°
);

193 
kmod_moduÀ_gë_fûãªd_bœckli°
(c⁄° 
kmod_˘x
 *
˘x
,

194 c⁄° 
kmod_li°
 *
öput
,

195 
kmod_li°
 **
ouçut
Ë
__©åibuã__
 ((
dïªˇãd
));

196 
kmod_moduÀ_≠∂y_fûãr
(c⁄° 
kmod_˘x
 *
˘x
,

197 
kmod_fûãr
 
fûãr_ty≥
,

198 c⁄° 
kmod_li°
 *
öput
,

199 
kmod_li°
 **
ouçut
);

208 
	ekmod_moduÀ_öô°©e
 {

209 
KMOD_MODULE_BUILTIN
 = 0,

210 
KMOD_MODULE_LIVE
,

211 
KMOD_MODULE_COMING
,

212 
KMOD_MODULE_GOING
,

214 
_KMOD_MODULE_PAD
 = (1 << 31),

216 c⁄° *
kmod_moduÀ_öô°©e_°r
(
kmod_moduÀ_öô°©e
 
°©e
);

217 
kmod_moduÀ_gë_öô°©e
(c⁄° 
kmod_moduÀ
 *
mod
);

218 
kmod_moduÀ_gë_ªf˙t
(c⁄° 
kmod_moduÀ
 *
mod
);

219 
kmod_li°
 *
kmod_moduÀ_gë_hﬁdîs
(c⁄° 
kmod_moduÀ
 *
mod
);

220 
kmod_li°
 *
kmod_moduÀ_gë_£˘i⁄s
(c⁄° 
kmod_moduÀ
 *
mod
);

221 c⁄° *
kmod_moduÀ_£˘i⁄_gë_«me
(c⁄° 
kmod_li°
 *
íåy
);

222 
kmod_moduÀ_£˘i⁄_gë_addªss
(c⁄° 
kmod_li°
 *
íåy
);

223 
kmod_moduÀ_£˘i⁄_‰ì_li°
(
kmod_li°
 *
li°
);

224 
kmod_moduÀ_gë_size
(c⁄° 
kmod_moduÀ
 *
mod
);

232 
kmod_moduÀ_gë_öfo
(c⁄° 
kmod_moduÀ
 *
mod
, 
kmod_li°
 **
li°
);

233 c⁄° *
kmod_moduÀ_öfo_gë_key
(c⁄° 
kmod_li°
 *
íåy
);

234 c⁄° *
kmod_moduÀ_öfo_gë_vÆue
(c⁄° 
kmod_li°
 *
íåy
);

235 
kmod_moduÀ_öfo_‰ì_li°
(
kmod_li°
 *
li°
);

237 
kmod_moduÀ_gë_vîsi⁄s
(c⁄° 
kmod_moduÀ
 *
mod
, 
kmod_li°
 **
li°
);

238 c⁄° *
kmod_moduÀ_vîsi⁄_gë_symbﬁ
(c⁄° 
kmod_li°
 *
íåy
);

239 
uöt64_t
 
kmod_moduÀ_vîsi⁄_gë_¸c
(c⁄° 
kmod_li°
 *
íåy
);

240 
kmod_moduÀ_vîsi⁄s_‰ì_li°
(
kmod_li°
 *
li°
);

242 
kmod_moduÀ_gë_symbﬁs
(c⁄° 
kmod_moduÀ
 *
mod
, 
kmod_li°
 **
li°
);

243 c⁄° *
kmod_moduÀ_symbﬁ_gë_symbﬁ
(c⁄° 
kmod_li°
 *
íåy
);

244 
uöt64_t
 
kmod_moduÀ_symbﬁ_gë_¸c
(c⁄° 
kmod_li°
 *
íåy
);

245 
kmod_moduÀ_symbﬁs_‰ì_li°
(
kmod_li°
 *
li°
);

247 
	ekmod_symbﬁ_böd
 {

248 
KMOD_SYMBOL_NONE
 = '\0',

249 
KMOD_SYMBOL_LOCAL
 = 'L',

250 
KMOD_SYMBOL_GLOBAL
 = 'G',

251 
KMOD_SYMBOL_WEAK
 = 'W',

252 
KMOD_SYMBOL_UNDEF
 = 'U'

255 
kmod_moduÀ_gë_dïídícy_symbﬁs
(c⁄° 
kmod_moduÀ
 *
mod
, 
kmod_li°
 **
li°
);

256 c⁄° *
kmod_moduÀ_dïídícy_symbﬁ_gë_symbﬁ
(c⁄° 
kmod_li°
 *
íåy
);

257 
kmod_moduÀ_dïídícy_symbﬁ_gë_böd
(c⁄° 
kmod_li°
 *
íåy
);

258 
uöt64_t
 
kmod_moduÀ_dïídícy_symbﬁ_gë_¸c
(c⁄° 
kmod_li°
 *
íåy
);

259 
kmod_moduÀ_dïídícy_symbﬁs_‰ì_li°
(
kmod_li°
 *
li°
);

261 #ifde‡
__˝lu•lus


	@/usr/include/libudev.h

20 #i‚de‡
_LIBUDEV_H_


21 
	#_LIBUDEV_H_


	)

23 
	~<°d¨g.h
>

24 
	~<sys/sysma¸os.h
>

25 
	~<sys/ty≥s.h
>

27 #ifde‡
__˝lu•lus


37 
udev
;

38 
udev
 *
udev_ªf
(udev *udev);

39 
udev
 *
udev_uƒef
(udev *udev);

40 
udev
 *
udev_√w
();

41 
udev_£t_log_‚
(
udev
 *udev,

42 (*
log_‚
)(
udev
 *udev,

43 
¥i‹ôy
, c⁄° *
fûe
, 
löe
, c⁄° *
‚
,

44 c⁄° *
f‹m©
, 
va_li°
 
¨gs
)Ë
__©åibuã__
 ((
dïªˇãd
));

45 
udev_gë_log_¥i‹ôy
(
udev
 *udevË
__©åibuã__
 ((
dïªˇãd
));

46 
udev_£t_log_¥i‹ôy
(
udev
 *udev, 
¥i‹ôy
Ë
__©åibuã__
 ((
dïªˇãd
));

47 *
udev_gë_u£rd©a
(
udev
 *udev);

48 
udev_£t_u£rd©a
(
udev
 *udev, *
u£rd©a
);

55 
udev_li°_íåy
;

56 
udev_li°_íåy
 *
udev_li°_íåy_gë_√xt
(udev_li°_íåy *
li°_íåy
);

57 
udev_li°_íåy
 *
udev_li°_íåy_gë_by_«me
(udev_li°_íåy *
li°_íåy
, c⁄° *
«me
);

58 c⁄° *
udev_li°_íåy_gë_«me
(
udev_li°_íåy
 *
li°_íåy
);

59 c⁄° *
udev_li°_íåy_gë_vÆue
(
udev_li°_íåy
 *
li°_íåy
);

67 
	#udev_li°_íåy_f‹óch
(
li°_íåy
, 
fú°_íåy
) \

68 
li°_íåy
 = 
fú°_íåy
; \

69 
li°_íåy
 !
NULL
; \

70 
li°_íåy
 = 
	`udev_li°_íåy_gë_√xt
÷i°_íåy))

	)

77 
udev_devi˚
;

78 
udev_devi˚
 *
udev_devi˚_ªf
(udev_device *udev_device);

79 
udev_devi˚
 *
udev_devi˚_uƒef
(udev_device *udev_device);

80 
udev
 *
udev_devi˚_gë_udev
(
udev_devi˚
 *udev_device);

81 
udev_devi˚
 *
udev_devi˚_√w_‰om_sy•©h
(
udev
 *udev, c⁄° *
sy•©h
);

82 
udev_devi˚
 *
udev_devi˚_√w_‰om_devnum
(
udev
 *udev, 
ty≥
, 
dev_t
 
devnum
);

83 
udev_devi˚
 *
udev_devi˚_√w_‰om_subsy°em_sy¢ame
(
udev
 *udev, c⁄° *
subsy°em
, c⁄° *
sy¢ame
);

84 
udev_devi˚
 *
udev_devi˚_√w_‰om_devi˚_id
(
udev
 *udev, c⁄° *
id
);

85 
udev_devi˚
 *
udev_devi˚_√w_‰om_ívú⁄mít
(
udev
 *udev);

87 
udev_devi˚
 *
udev_devi˚_gë_∑ª¡
(udev_device *udev_device);

88 
udev_devi˚
 *
udev_devi˚_gë_∑ª¡_wôh_subsy°em_devty≥
(udev_device *udev_device,

89 c⁄° *
subsy°em
, c⁄° *
devty≥
);

91 c⁄° *
udev_devi˚_gë_dev∑th
(
udev_devi˚
 *udev_device);

92 c⁄° *
udev_devi˚_gë_subsy°em
(
udev_devi˚
 *udev_device);

93 c⁄° *
udev_devi˚_gë_devty≥
(
udev_devi˚
 *udev_device);

94 c⁄° *
udev_devi˚_gë_sy•©h
(
udev_devi˚
 *udev_device);

95 c⁄° *
udev_devi˚_gë_sy¢ame
(
udev_devi˚
 *udev_device);

96 c⁄° *
udev_devi˚_gë_sy¢um
(
udev_devi˚
 *udev_device);

97 c⁄° *
udev_devi˚_gë_devnode
(
udev_devi˚
 *udev_device);

98 
udev_devi˚_gë_is_öôülized
(
udev_devi˚
 *udev_device);

99 
udev_li°_íåy
 *
udev_devi˚_gë_devlöks_li°_íåy
(
udev_devi˚
 *udev_device);

100 
udev_li°_íåy
 *
udev_devi˚_gë_¥›îtõs_li°_íåy
(
udev_devi˚
 *udev_device);

101 
udev_li°_íåy
 *
udev_devi˚_gë_ègs_li°_íåy
(
udev_devi˚
 *udev_device);

102 
udev_li°_íåy
 *
udev_devi˚_gë_syßâr_li°_íåy
(
udev_devi˚
 *udev_device);

103 c⁄° *
udev_devi˚_gë_¥›îty_vÆue
(
udev_devi˚
 *udev_devi˚, c⁄° *
key
);

104 c⁄° *
udev_devi˚_gë_drivî
(
udev_devi˚
 *udev_device);

105 
dev_t
 
udev_devi˚_gë_devnum
(
udev_devi˚
 *udev_device);

106 c⁄° *
udev_devi˚_gë_a˘i⁄
(
udev_devi˚
 *udev_device);

107 
udev_devi˚_gë_£qnum
(
udev_devi˚
 *udev_device);

108 
udev_devi˚_gë_u£c_sö˚_öôülized
(
udev_devi˚
 *udev_device);

109 c⁄° *
udev_devi˚_gë_syßâr_vÆue
(
udev_devi˚
 *udev_devi˚, c⁄° *
syßâr
);

110 
udev_devi˚_£t_syßâr_vÆue
(
udev_devi˚
 *udev_devi˚, c⁄° *
syßâr
, *
vÆue
);

111 
udev_devi˚_has_èg
(
udev_devi˚
 *udev_devi˚, c⁄° *
èg
);

118 
udev_m⁄ô‹
;

119 
udev_m⁄ô‹
 *
udev_m⁄ô‹_ªf
(udev_monitor *udev_monitor);

120 
udev_m⁄ô‹
 *
udev_m⁄ô‹_uƒef
(udev_monitor *udev_monitor);

121 
udev
 *
udev_m⁄ô‹_gë_udev
(
udev_m⁄ô‹
 *udev_monitor);

123 
udev_m⁄ô‹
 *
udev_m⁄ô‹_√w_‰om_√éök
(
udev
 *udev, c⁄° *
«me
);

125 
udev_m⁄ô‹_íabÀ_ª˚ivög
(
udev_m⁄ô‹
 *udev_monitor);

126 
udev_m⁄ô‹_£t_ª˚ive_buf„r_size
(
udev_m⁄ô‹
 *udev_m⁄ô‹, 
size
);

127 
udev_m⁄ô‹_gë_fd
(
udev_m⁄ô‹
 *udev_monitor);

128 
udev_devi˚
 *
udev_m⁄ô‹_ª˚ive_devi˚
(
udev_m⁄ô‹
 *udev_monitor);

130 
udev_m⁄ô‹_fûãr_add_m©ch_subsy°em_devty≥
(
udev_m⁄ô‹
 *udev_monitor,

131 c⁄° *
subsy°em
, c⁄° *
devty≥
);

132 
udev_m⁄ô‹_fûãr_add_m©ch_èg
(
udev_m⁄ô‹
 *udev_m⁄ô‹, c⁄° *
èg
);

133 
udev_m⁄ô‹_fûãr_upd©e
(
udev_m⁄ô‹
 *udev_monitor);

134 
udev_m⁄ô‹_fûãr_ªmove
(
udev_m⁄ô‹
 *udev_monitor);

141 
udev_íumî©e
;

142 
udev_íumî©e
 *
udev_íumî©e_ªf
(udev_enumerate *udev_enumerate);

143 
udev_íumî©e
 *
udev_íumî©e_uƒef
(udev_enumerate *udev_enumerate);

144 
udev
 *
udev_íumî©e_gë_udev
(
udev_íumî©e
 *udev_enumerate);

145 
udev_íumî©e
 *
udev_íumî©e_√w
(
udev
 *udev);

147 
udev_íumî©e_add_m©ch_subsy°em
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
subsy°em
);

148 
udev_íumî©e_add_nom©ch_subsy°em
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
subsy°em
);

149 
udev_íumî©e_add_m©ch_syßâr
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
syßâr
, c⁄° *
vÆue
);

150 
udev_íumî©e_add_nom©ch_syßâr
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
syßâr
, c⁄° *
vÆue
);

151 
udev_íumî©e_add_m©ch_¥›îty
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
¥›îty
, c⁄° *
vÆue
);

152 
udev_íumî©e_add_m©ch_sy¢ame
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
sy¢ame
);

153 
udev_íumî©e_add_m©ch_èg
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
èg
);

154 
udev_íumî©e_add_m©ch_∑ª¡
(
udev_íumî©e
 *udev_íumî©e, 
udev_devi˚
 *
∑ª¡
);

155 
udev_íumî©e_add_m©ch_is_öôülized
(
udev_íumî©e
 *udev_enumerate);

156 
udev_íumî©e_add_sy•©h
(
udev_íumî©e
 *udev_íumî©e, c⁄° *
sy•©h
);

158 
udev_íumî©e_sˇn_devi˚s
(
udev_íumî©e
 *udev_enumerate);

159 
udev_íumî©e_sˇn_subsy°ems
(
udev_íumî©e
 *udev_enumerate);

161 
udev_li°_íåy
 *
udev_íumî©e_gë_li°_íåy
(
udev_íumî©e
 *udev_enumerate);

168 
udev_queue
;

169 
udev_queue
 *
udev_queue_ªf
(udev_queue *udev_queue);

170 
udev_queue
 *
udev_queue_uƒef
(udev_queue *udev_queue);

171 
udev
 *
udev_queue_gë_udev
(
udev_queue
 *udev_queue);

172 
udev_queue
 *
udev_queue_√w
(
udev
 *udev);

173 
udev_queue_gë_kî√l_£qnum
(
udev_queue
 *udev_queueË
__©åibuã__
 ((
dïªˇãd
));

174 
udev_queue_gë_udev_£qnum
(
udev_queue
 *udev_queueË
__©åibuã__
 ((
dïªˇãd
));

175 
udev_queue_gë_udev_is_a˘ive
(
udev_queue
 *udev_queue);

176 
udev_queue_gë_queue_is_em±y
(
udev_queue
 *udev_queue);

177 
udev_queue_gë_£qnum_is_föished
(
udev_queue
 *udev_queue, 
£qnum
Ë
__©åibuã__
 ((
dïªˇãd
));

178 
udev_queue_gë_£qnum_£quí˚_is_föished
(
udev_queue
 *udev_queue,

179 
°¨t
, 
íd
Ë
__©åibuã__
 ((
dïªˇãd
));

180 
udev_queue_gë_fd
(
udev_queue
 *udev_queue);

181 
udev_queue_Êush
(
udev_queue
 *udev_queue);

182 
udev_li°_íåy
 *
udev_queue_gë_queued_li°_íåy
(
udev_queue
 *udev_queueË
__©åibuã__
 ((
dïªˇãd
));

189 
udev_hwdb
;

190 
udev_hwdb
 *
udev_hwdb_√w
(
udev
 *udev);

191 
udev_hwdb
 *
udev_hwdb_ªf
(udev_hwdb *
hwdb
);

192 
udev_hwdb
 *
udev_hwdb_uƒef
(udev_hwdb *
hwdb
);

193 
udev_li°_íåy
 *
udev_hwdb_gë_¥›îtõs_li°_íåy
(
udev_hwdb
 *
hwdb
, c⁄° *
modÆüs
, 
Êags
);

200 
udev_utû_ícode_°rög
(c⁄° *
°r
, *
°r_íc
, 
size_t
 
Àn
);

203 #ifde‡
__˝lu•lus


	@/usr/include/libunwind.h

4 #i‚de‡
UNW_REMOTE_ONLY


6 #i‡
deföed
 
__Ørch64__


7 
	~"libunwöd-Ørch64.h
"

8 #ñi‡
deföed
 
__¨m__


9 
	~"libunwöd-¨m.h
"

10 #ñi‡
deföed
 
__hµa__


11 
	~"libunwöd-hµa.h
"

12 #ñi‡
deföed
 
__ü64__


13 
	~"libunwöd-ü64.h
"

14 #ñi‡
deföed
 
__mùs__


15 
	~"libunwöd-mùs.h
"

16 #ñi‡
deföed
 
__powîpc__
 && !deföed 
__powîpc64__


17 
	~"libunwöd-µc32.h
"

18 #ñi‡
deföed
 
__powîpc64__


19 
	~"libunwöd-µc64.h
"

20 #ñi‡
deföed
 
__sh__


21 
	~"libunwöd-sh.h
"

22 #ñi‡
deföed
 
__i386__


23 
	~"libunwöd-x86.h
"

24 #ñi‡
deföed
 
__x86_64__


25 
	~"libunwöd-x86_64.h
"

32 
	~"libunwöd-x86_64.h
"

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/kd.h

1 #i‚de‡
_LINUX_KD_H


2 
	#_LINUX_KD_H


	)

3 
	~<löux/ty≥s.h
>

8 
	#GIO_FONT
 0x4B60

	)

9 
	#PIO_FONT
 0x4B61

	)

11 
	#GIO_FONTX
 0x4B6B

	)

12 
	#PIO_FONTX
 0x4B6C

	)

13 
	sc⁄sﬁef⁄tdesc
 {

14 
	mch¨cou¡
;

15 
	mch¨height
;

16 *
	mch¨d©a
;

19 
	#PIO_FONTRESET
 0x4B6D

	)

21 
	#GIO_CMAP
 0x4B70

	)

22 
	#PIO_CMAP
 0x4B71

	)

24 
	#KIOCSOUND
 0x4B2F

	)

25 
	#KDMKTONE
 0x4B30

	)

27 
	#KDGETLED
 0x4B31

	)

28 
	#KDSETLED
 0x4B32

	)

29 
	#LED_SCR
 0x01

	)

30 
	#LED_NUM
 0x02

	)

31 
	#LED_CAP
 0x04

	)

33 
	#KDGKBTYPE
 0x4B33

	)

34 
	#KB_84
 0x01

	)

35 
	#KB_101
 0x02

	)

36 
	#KB_OTHER
 0x03

	)

38 
	#KDADDIO
 0x4B34

	)

39 
	#KDDELIO
 0x4B35

	)

40 
	#KDENABIO
 0x4B36

	)

41 
	#KDDISABIO
 0x4B37

	)

43 
	#KDSETMODE
 0x4B3A

	)

44 
	#KD_TEXT
 0x00

	)

45 
	#KD_GRAPHICS
 0x01

	)

46 
	#KD_TEXT0
 0x02

	)

47 
	#KD_TEXT1
 0x03

	)

48 
	#KDGETMODE
 0x4B3B

	)

50 
	#KDMAPDISP
 0x4B3C

	)

51 
	#KDUNMAPDISP
 0x4B3D

	)

53 
	ts¸nm≠_t
;

54 
	#E_TABSZ
 256

	)

55 
	#GIO_SCRNMAP
 0x4B40

	)

56 
	#PIO_SCRNMAP
 0x4B41

	)

57 
	#GIO_UNISCRNMAP
 0x4B69

	)

58 
	#PIO_UNISCRNMAP
 0x4B6A

	)

60 
	#GIO_UNIMAP
 0x4B66

	)

61 
	sunùaú
 {

62 
	municode
;

63 
	mf⁄ços
;

65 
	sunim≠desc
 {

66 
	míåy_˘
;

67 
unùaú
 *
	míåõs
;

69 
	#PIO_UNIMAP
 0x4B67

	)

70 
	#PIO_UNIMAPCLR
 0x4B68

	)

71 
	sunim≠öô
 {

72 
	madvi£d_hashsize
;

73 
	madvi£d_hash°ï
;

74 
	madvi£d_hashÀvñ
;

77 
	#UNI_DIRECT_BASE
 0xF000

	)

78 
	#UNI_DIRECT_MASK
 0x01FF

	)

80 
	#K_RAW
 0x00

	)

81 
	#K_XLATE
 0x01

	)

82 
	#K_MEDIUMRAW
 0x02

	)

83 
	#K_UNICODE
 0x03

	)

84 
	#K_OFF
 0x04

	)

85 
	#KDGKBMODE
 0x4B44

	)

86 
	#KDSKBMODE
 0x4B45

	)

88 
	#K_METABIT
 0x03

	)

89 
	#K_ESCPREFIX
 0x04

	)

90 
	#KDGKBMETA
 0x4B62

	)

91 
	#KDSKBMETA
 0x4B63

	)

93 
	#K_SCROLLLOCK
 0x01

	)

94 
	#K_NUMLOCK
 0x02

	)

95 
	#K_CAPSLOCK
 0x04

	)

96 
	#KDGKBLED
 0x4B64

	)

97 
	#KDSKBLED
 0x4B65

	)

99 
	skbíåy
 {

100 
	mkb_èbÀ
;

101 
	mkb_ödex
;

102 
	mkb_vÆue
;

104 
	#K_NORMTAB
 0x00

	)

105 
	#K_SHIFTTAB
 0x01

	)

106 
	#K_ALTTAB
 0x02

	)

107 
	#K_ALTSHIFTTAB
 0x03

	)

109 
	#KDGKBENT
 0x4B46

	)

110 
	#KDSKBENT
 0x4B47

	)

112 
	skb£¡ry
 {

113 
	mkb_func
;

114 
	mkb_°rög
[512];

116 
	#KDGKBSENT
 0x4B48

	)

117 
	#KDSKBSENT
 0x4B49

	)

119 
	skbdü¸
 {

120 
	mdü¸
, 
	mba£
, 
	mªsu…
;

122 
	skbdü¸s
 {

123 
	mkb_˙t
;

124 
kbdü¸
 
	mkbdü¸
[256];

126 
	#KDGKBDIACR
 0x4B4A

	)

127 
	#KDSKBDIACR
 0x4B4B

	)

129 
	skbdü¸uc
 {

130 
	mdü¸
, 
	mba£
, 
	mªsu…
;

132 
	skbdü¸suc
 {

133 
	mkb_˙t
;

134 
kbdü¸uc
 
	mkbdü¸uc
[256];

136 
	#KDGKBDIACRUC
 0x4BFA

	)

137 
	#KDSKBDIACRUC
 0x4BFB

	)

139 
	skbkeycode
 {

140 
	msˇncode
, 
	mkeycode
;

142 
	#KDGETKEYCODE
 0x4B4C

	)

143 
	#KDSETKEYCODE
 0x4B4D

	)

145 
	#KDSIGACCEPT
 0x4B4E

	)

147 
	skbd_ª≥©
 {

148 
	mdñay
;

149 
	m≥riod
;

153 
	#KDKBDREP
 0x4B52

	)

156 
	#KDFONTOP
 0x4B72

	)

158 
	sc⁄sﬁe_f⁄t_›
 {

159 
	m›
;

160 
	mÊags
;

161 
	mwidth
, 
	mheight
;

162 
	mch¨cou¡
;

163 *
	md©a
;

166 
	sc⁄sﬁe_f⁄t
 {

167 
	mwidth
, 
	mheight
;

168 
	mch¨cou¡
;

169 *
	md©a
;

172 
	#KD_FONT_OP_SET
 0

	)

173 
	#KD_FONT_OP_GET
 1

	)

174 
	#KD_FONT_OP_SET_DEFAULT
 2

	)

175 
	#KD_FONT_OP_COPY
 3

	)

177 
	#KD_FONT_FLAG_DONT_RECALC
 1

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


32 
	~<bôs/ty≥s.h
>

35 
	~<bôs/m©h-ve˘‹.h
>

39 
	~<bôs/huge_vÆ.h
>

40 #ifde‡
__USE_ISOC99


41 
	~<bôs/huge_vÆf.h
>

42 
	~<bôs/huge_vÆl.h
>

45 
	~<bôs/öf.h
>

48 
	~<bôs/«n.h
>

51 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

53 #i‡
__GNUC_PREREQ
 (3, 3)

54 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

55 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

56 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

61 
	~<bôs/Êt-evÆ-mëhod.h
>

63 #ifde‡
__USE_ISOC99


71 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

72 
	tÊﬂt_t
;

73 
	tdoubÀ_t
;

74 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

75 
	tÊﬂt_t
;

76 
	tdoubÀ_t
;

77 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

78 
	tÊﬂt_t
;

79 
	tdoubÀ_t
;

80 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

81 
_Flﬂt32
 
	tÊﬂt_t
;

82 
	tdoubÀ_t
;

83 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

84 
_Flﬂt32x
 
	tÊﬂt_t
;

85 
_Flﬂt32x
 
	tdoubÀ_t
;

86 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

87 
_Flﬂt64
 
	tÊﬂt_t
;

88 
_Flﬂt64
 
	tdoubÀ_t
;

89 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

90 
_Flﬂt64x
 
	tÊﬂt_t
;

91 
_Flﬂt64x
 
	tdoubÀ_t
;

92 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

93 
_Flﬂt128
 
	tÊﬂt_t
;

94 
_Flﬂt128
 
	tdoubÀ_t
;

95 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

96 
_Flﬂt128x
 
	tÊﬂt_t
;

97 
_Flﬂt128x
 
	tdoubÀ_t
;

113 
	~<bôs/Â-logb.h
>

114 #ifde‡
__USE_ISOC99


115 #i‡
__FP_LOGB0_IS_MIN


116 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

118 
	#FP_ILOGB0
 (-2147483647)

	)

120 #i‡
__FP_LOGBNAN_IS_MIN


121 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

123 
	#FP_ILOGBNAN
 2147483647

	)

126 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

127 #i‡
__WORDSIZE
 == 32

128 
	#__FP_LONG_MAX
 0x7fffffffL

	)

130 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

132 #i‡
__FP_LOGB0_IS_MIN


133 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

135 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

137 #i‡
__FP_LOGBNAN_IS_MIN


138 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

140 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

156 
	~<bôs/Â-Á°.h
>

158 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

162 
	mFP_INT_UPWARD
 =

163 
	#FP_INT_UPWARD
 0

	)

164 
FP_INT_UPWARD
,

165 
	mFP_INT_DOWNWARD
 =

166 
	#FP_INT_DOWNWARD
 1

	)

167 
FP_INT_DOWNWARD
,

168 
	mFP_INT_TOWARDZERO
 =

169 
	#FP_INT_TOWARDZERO
 2

	)

170 
FP_INT_TOWARDZERO
,

171 
	mFP_INT_TONEARESTFROMZERO
 =

172 
	#FP_INT_TONEARESTFROMZERO
 3

	)

173 
FP_INT_TONEARESTFROMZERO
,

174 
	mFP_INT_TONEAREST
 =

175 
	#FP_INT_TONEAREST
 4

	)

176 
FP_INT_TONEAREST
,

185 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

187 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

188 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

189 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

191 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

192 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

193 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

195 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

196 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

197 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

198 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

199 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

200 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

201 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

202 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

203 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

204 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

205 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

206 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

208 
	#_MdoubÀ_
 

	)

209 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

210 
	#__MATH_DECLARING_DOUBLE
 1

	)

211 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

212 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

213 
	~<bôs/m©hˇŒs.h
>

214 #unde‡
_MdoubÀ_


215 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


216 #unde‡
_MdoubÀ_END_NAMESPACE


217 #unde‡
__MATH_PRECNAME


218 #unde‡
__MATH_DECLARING_DOUBLE


220 #ifde‡
__USE_ISOC99


226 #i‚de‡
_MÊﬂt_


227 
	#_MÊﬂt_
 

	)

229 
	#_MdoubÀ_
 
_MÊﬂt_


	)

230 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

231 
	#__MATH_DECLARING_DOUBLE
 0

	)

232 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

233 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

234 
	~<bôs/m©hˇŒs.h
>

235 #unde‡
_MdoubÀ_


236 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


237 #unde‡
_MdoubÀ_END_NAMESPACE


238 #unde‡
__MATH_PRECNAME


239 #unde‡
__MATH_DECLARING_DOUBLE


241 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

242 || 
deföed
 
__LDBL_COMPAT
 \

243 || 
deföed
 
_LIBC_TEST


244 #ifde‡
__LDBL_COMPAT


246 #ifde‡
__USE_ISOC99


247 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

248 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

249 #ifde‡
__REDIRECT_NTH


250 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

251 
__∆dbl_√xâow¨df
)

252 
	`__©åibuã__
 ((
__c⁄°__
));

253 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

254 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

255 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

256 (
__x
, 
__y
),

257 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

261 #unde‡
__MATHDECL_1


262 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

263 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

264 
¨gs
, 
Æüs
)

	)

265 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

266 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

272 #i‚de‡
_Ml⁄g_doubÀ_


273 
	#_Ml⁄g_doubÀ_
 

	)

275 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

276 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

277 
	#__MATH_DECLARING_DOUBLE
 0

	)

278 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

279 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

280 
	#__MATH_DECLARE_LDOUBLE
 1

	)

281 
	~<bôs/m©hˇŒs.h
>

282 #unde‡
_MdoubÀ_


283 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


284 #unde‡
_MdoubÀ_END_NAMESPACE


285 #unde‡
__MATH_PRECNAME


286 #unde‡
__MATH_DECLARING_DOUBLE


291 #unde‡
__MATHDECL_1


292 #unde‡
__MATHDECL


293 #unde‡
__MATHCALL


296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


298 
signgam
;

311 #ifde‡
__NO_LONG_DOUBLE_MATH


312 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

313 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

315 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

316 ( (
TG_ARG
) ==  () \

317 ? 
FUNC
 ## 
f
 
ARGS
 \

318 :  (
TG_ARG
) ==  () \

319 ? 
FUNC
 
ARGS
 \

320 : 
FUNC
 ## 
l
 
ARGS
)

	)

324 #ifde‡
__USE_ISOC99


329 
FP_NAN
 =

330 
	#FP_NAN
 0

	)

331 
FP_NAN
,

332 
FP_INFINITE
 =

333 
	#FP_INFINITE
 1

	)

334 
FP_INFINITE
,

335 
FP_ZERO
 =

336 
	#FP_ZERO
 2

	)

337 
FP_ZERO
,

338 
FP_SUBNORMAL
 =

339 
	#FP_SUBNORMAL
 3

	)

340 
FP_SUBNORMAL
,

341 
FP_NORMAL
 =

342 
	#FP_NORMAL
 4

	)

343 
FP_NORMAL


351 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

352 && !
deföed
 
__OPTIMIZE_SIZE__


353 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

354 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

356 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

360 #i‡
	`__GNUC_PREREQ
 (4,0)

361 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

363 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

367 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


368 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

370 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

374 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


375 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

377 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

382 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


383 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

385 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

389 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


390 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

392 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

396 
	#MATH_ERRNO
 1

	)

397 
	#MATH_ERREXCEPT
 2

	)

402 #i‚de‡
__FAST_MATH__


403 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

408 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

409 
	~<bôs/isˇn⁄iˇl.h
>

412 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

415 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

418 #i‚de‡
__˝lu•lus


419 #ifde‡
__SUPPORT_SNAN__


420 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

422 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

426 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


427 
	`iszîo
 (
__T
 
__vÆ
)

429 #ifde‡
__SUPPORT_SNAN__


430  
	`Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

432  
__vÆ
 == 0;

435 
	}
}

439 #ifdef 
__USE_MISC


443 
_IEEE_
 = -1,

444 
_SVID_
,

445 
_XOPEN_
,

446 
_POSIX_
,

447 
_ISOC_


448 } 
	t_LIB_VERSION_TYPE
;

453 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

457 #ifde‡
__USE_MISC


463 #ifde‡
__˝lu•lus


464 
	g__ex˚±i⁄


466 
	gex˚±i⁄


469 
	gty≥
;

470 *
	g«me
;

471 
	g¨g1
;

472 
	g¨g2
;

473 
	gªtvÆ
;

476 #ifde‡
__˝lu•lus


477 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

479 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

482 
	#X_TLOSS
 1.41484755040568800000e+16

	)

485 
	#DOMAIN
 1

	)

486 
	#SING
 2

	)

487 
	#OVERFLOW
 3

	)

488 
	#UNDERFLOW
 4

	)

489 
	#TLOSS
 5

	)

490 
	#PLOSS
 6

	)

493 
	#HUGE
 3.40282347e+38F

	)

497 #ifde‡
__USE_XOPEN


499 
	#MAXFLOAT
 3.40282347e+38F

	)

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


507 
	#M_E
 2.7182818284590452354

	)

508 
	#M_LOG2E
 1.4426950408889634074

	)

509 
	#M_LOG10E
 0.43429448190325182765

	)

510 
	#M_LN2
 0.69314718055994530942

	)

511 
	#M_LN10
 2.30258509299404568402

	)

512 
	#M_PI
 3.14159265358979323846

	)

513 
	#M_PI_2
 1.57079632679489661923

	)

514 
	#M_PI_4
 0.78539816339744830962

	)

515 
	#M_1_PI
 0.31830988618379067154

	)

516 
	#M_2_PI
 0.63661977236758134308

	)

517 
	#M_2_SQRTPI
 1.12837916709551257390

	)

518 
	#M_SQRT2
 1.41421356237309504880

	)

519 
	#M_SQRT1_2
 0.70710678118654752440

	)

525 #ifde‡
__USE_GNU


526 
	#M_El
 2.718281828459045235360287471352662498L

	)

527 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

528 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

529 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

530 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

531 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

532 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

533 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

534 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

535 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

536 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

537 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

538 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

545 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


546 
	#__NO_MATH_INLINES
 1

	)

549 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

556 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

557 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

558 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

559 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

560 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

561 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

565 #ifde‡
__USE_EXTERN_INLINES


566 
	~<bôs/m©hölöe.h
>

571 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

572 
	~<bôs/m©h-föôe.h
>

575 #ifde‡
__USE_ISOC99


579 #i‚de‡
isgª©î


580 
	#isgª©î
(
x
, 
y
) \

581 (
__exãnsi⁄__
 \

582 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

583 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

587 #i‚de‡
isgª©îequÆ


588 
	#isgª©îequÆ
(
x
, 
y
) \

589 (
__exãnsi⁄__
 \

590 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

591 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

595 #i‚de‡
i¶ess


596 
	#i¶ess
(
x
, 
y
) \

597 (
__exãnsi⁄__
 \

598 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

599 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

603 #i‚de‡
i¶es£quÆ


604 
	#i¶es£quÆ
(
x
, 
y
) \

605 (
__exãnsi⁄__
 \

606 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

607 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

611 #i‚de‡
i¶essgª©î


612 
	#i¶essgª©î
(
x
, 
y
) \

613 (
__exãnsi⁄__
 \

614 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

615 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

619 #i‚de‡
isun‹dîed


620 
	#isun‹dîed
(
u
, 
v
) \

621 (
__exãnsi⁄__
 \

622 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

623 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

628 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

631 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

632 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

633 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

634 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

636 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

641 
	#i£qsig
(
x
, 
y
) \

642 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

645 
	g__END_DECLS


	@/usr/include/pciaccess.h

57 #i‚de‡
PCIACCESS_H


58 
	#PCIACCESS_H


	)

60 
	~<öây≥s.h
>

62 #i‡(
__GNUC__
 >3Ë|| (
__SUNPRO_C
 >= 0x5130)

63 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

65 
	#__dïªˇãd


	)

68 
uöt64_t
 
	tpcüddr_t
;

70 
	gpci_devi˚
;

71 
	gpci_devi˚_ôî©‹
;

72 
	gpci_id_m©ch
;

73 
	gpci_¶Ÿ_m©ch
;

75 #ifde‡
__˝lu•lus


79 
pci_devi˚_has_kî√l_drivî
(
pci_devi˚
 *
dev
);

81 
pci_devi˚_is_boŸ_vga
(
pci_devi˚
 *
dev
);

83 
pci_devi˚_ªad_rom
(
pci_devi˚
 *
dev
, *
buf„r
);

85 
__dïªˇãd
 
pci_devi˚_m≠_ªgi⁄
(
pci_devi˚
 *
dev
,

86 
ªgi⁄
, 
wrôe_íabÀ
);

88 
__dïªˇãd
 
pci_devi˚_unm≠_ªgi⁄
(
pci_devi˚
 *
dev
,

89 
ªgi⁄
);

91 
pci_devi˚_m≠_ønge
(
pci_devi˚
 *
dev
, 
pcüddr_t
 
ba£
,

92 
pcüddr_t
 
size
, 
m≠_Êags
, **
addr
);

94 
pci_devi˚_unm≠_ønge
(
pci_devi˚
 *
dev
, *
mem‹y
,

95 
pcüddr_t
 
size
);

97 
__dïªˇãd
 
pci_devi˚_m≠_mem‹y_ønge
(
pci_devi˚
 *
dev
,

98 
pcüddr_t
 
ba£
,Öcüddr_à
size
, 
wrôe_íabÀ
, **
addr
);

100 
__dïªˇãd
 
pci_devi˚_unm≠_mem‹y_ønge
(
pci_devi˚
 *
dev
,

101 *
mem‹y
, 
pcüddr_t
 
size
);

103 
pci_devi˚_¥obe
(
pci_devi˚
 *
dev
);

105 c⁄° 
pci_agp_öfo
 *
pci_devi˚_gë_agp_öfo
(
pci_devi˚
 *
dev
);

107 c⁄° 
pci_bridge_öfo
 *
pci_devi˚_gë_bridge_öfo
(

108 
pci_devi˚
 *
dev
);

110 c⁄° 
pci_pcmcü_bridge_öfo
 *
pci_devi˚_gë_pcmcü_bridge_öfo
(

111 
pci_devi˚
 *
dev
);

113 
pci_devi˚_gë_bridge_bu£s
(
pci_devi˚
 *
dev
, *
¥im¨y_bus
,

114 *
£c⁄d¨y_bus
, *
sub‹dö©e_bus
);

116 
pci_sy°em_öô
();

118 
pci_sy°em_öô_dev_mem
(
fd
);

120 
pci_sy°em_˛ónup
();

122 
pci_devi˚_ôî©‹
 *
pci_¶Ÿ_m©ch_ôî©‹_¸óã
(

123 c⁄° 
pci_¶Ÿ_m©ch
 *
m©ch
);

125 
pci_devi˚_ôî©‹
 *
pci_id_m©ch_ôî©‹_¸óã
(

126 c⁄° 
pci_id_m©ch
 *
m©ch
);

128 
pci_ôî©‹_de°roy
(
pci_devi˚_ôî©‹
 *
ôî
);

130 
pci_devi˚
 *
pci_devi˚_√xt
(
pci_devi˚_ôî©‹
 *
ôî
);

132 
pci_devi˚
 *
pci_devi˚_föd_by_¶Ÿ
(
uöt32_t
 
domaö
, uöt32_à
bus
,

133 
uöt32_t
 
dev
, uöt32_à
func
);

135 
pci_devi˚
 *
pci_devi˚_gë_∑ª¡_bridge
(pci_devi˚ *
dev
);

137 
pci_gë_°rögs
(c⁄° 
pci_id_m©ch
 *
m
,

138 c⁄° **
devi˚_«me
, c⁄° **
víd‹_«me
,

139 c⁄° **
subdevi˚_«me
, c⁄° **
subvíd‹_«me
);

140 c⁄° *
pci_devi˚_gë_devi˚_«me
(c⁄° 
pci_devi˚
 *
dev
);

141 c⁄° *
pci_devi˚_gë_subdevi˚_«me
(c⁄° 
pci_devi˚
 *
dev
);

142 c⁄° *
pci_devi˚_gë_víd‹_«me
(c⁄° 
pci_devi˚
 *
dev
);

143 c⁄° *
pci_devi˚_gë_subvíd‹_«me
(c⁄° 
pci_devi˚
 *
dev
);

145 
pci_devi˚_íabÀ
(
pci_devi˚
 *
dev
);

147 
pci_devi˚_cfg_ªad
 (
pci_devi˚
 *
dev
, *
d©a
,

148 
pcüddr_t
 
off£t
,Öcüddr_à
size
,Öcüddr_à*
byãs_ªad
);

149 
pci_devi˚_cfg_ªad_u8
 (
pci_devi˚
 *
dev
, 
uöt8_t
 *
d©a
,

150 
pcüddr_t
 
off£t
);

151 
pci_devi˚_cfg_ªad_u16
(
pci_devi˚
 *
dev
, 
uöt16_t
 *
d©a
,

152 
pcüddr_t
 
off£t
);

153 
pci_devi˚_cfg_ªad_u32
(
pci_devi˚
 *
dev
, 
uöt32_t
 *
d©a
,

154 
pcüddr_t
 
off£t
);

156 
pci_devi˚_cfg_wrôe
 (
pci_devi˚
 *
dev
, c⁄° *
d©a
,

157 
pcüddr_t
 
off£t
,Öcüddr_à
size
,Öcüddr_à*
byãs_wrôãn
);

158 
pci_devi˚_cfg_wrôe_u8
 (
pci_devi˚
 *
dev
, 
uöt8_t
 
d©a
,

159 
pcüddr_t
 
off£t
);

160 
pci_devi˚_cfg_wrôe_u16
(
pci_devi˚
 *
dev
, 
uöt16_t
 
d©a
,

161 
pcüddr_t
 
off£t
);

162 
pci_devi˚_cfg_wrôe_u32
(
pci_devi˚
 *
dev
, 
uöt32_t
 
d©a
,

163 
pcüddr_t
 
off£t
);

164 
pci_devi˚_cfg_wrôe_bôs
(
pci_devi˚
 *
dev
, 
uöt32_t
 
mask
,

165 
uöt32_t
 
d©a
, 
pcüddr_t
 
off£t
);

167 #ifde‡
__˝lu•lus


175 
	#PCI_DEV_MAP_FLAG_WRITABLE
 (1U<<0)

	)

176 
	#PCI_DEV_MAP_FLAG_WRITE_COMBINE
 (1U<<1)

	)

177 
	#PCI_DEV_MAP_FLAG_CACHABLE
 (1U<<2)

	)

181 
	#PCI_MATCH_ANY
 (~0U)

	)

188 
	#PCI_ID_COMPARE
(
a
, 
b
) \

189 (((
a
Ë=
PCI_MATCH_ANY
Ë|| (◊Ë=(
b
)))

	)

193 
	spci_id_m©ch
 {

202 
uöt32_t
 
víd‹_id
;

203 
uöt32_t
 
devi˚_id
;

204 
uöt32_t
 
subvíd‹_id
;

205 
uöt32_t
 
subdevi˚_id
;

214 
uöt32_t
 
devi˚_˛ass
;

215 
uöt32_t
 
devi˚_˛ass_mask
;

218 
öçå_t
 
m©ch_d©a
;

224 
	spci_¶Ÿ_m©ch
 {

233 
uöt32_t
 
	mdomaö
;

234 
uöt32_t
 
	mbus
;

235 
uöt32_t
 
	mdev
;

236 
uöt32_t
 
	mfunc
;

239 
öçå_t
 
	mm©ch_d©a
;

245 
	spci_mem_ªgi⁄
 {

254 *
	mmem‹y
;

268 
pcüddr_t
 
	mbus_addr
;

277 
pcüddr_t
 
	mba£_addr
;

283 
pcüddr_t
 
	msize
;

289 
	mis_IO
:1;

297 
	mis_¥e„tchabÀ
:1;

306 
	mis_64
:1;

315 
	spci_devi˚
 {

324 
uöt16_t
 
	mdomaö
;

325 
uöt8_t
 
	mbus
;

326 
uöt8_t
 
	mdev
;

327 
uöt8_t
 
	mfunc
;

337 
uöt16_t
 
	mvíd‹_id
;

338 
uöt16_t
 
	mdevi˚_id
;

339 
uöt16_t
 
	msubvíd‹_id
;

340 
uöt16_t
 
	msubdevi˚_id
;

348 
uöt32_t
 
	mdevi˚_˛ass
;

354 
uöt8_t
 
	mªvisi⁄
;

360 
pci_mem_ªgi⁄
 
	mªgi⁄s
[6];

366 
pcüddr_t
 
	mrom_size
;

373 
	múq
;

382 
öçå_t
 
	mu£r_d©a
;

387 
	mvgØrb_r§c
;

396 
	spci_agp_öfo
 {

402 
	mc⁄fig_off£t
;

409 
uöt8_t
 
	mmaj‹_vîsi⁄
;

410 
uöt8_t
 
	mmö‹_vîsi⁄
;

418 
uöt8_t
 
	møãs
;

420 
	mÁ°_wrôes
:1;

421 
	maddr64
:1;

422 
	mhå™s
:1;

423 
	mg¨t64
:1;

424 
	mcohîít
:1;

425 
	msideb™d
:1;

426 
	misochr⁄us
:1;

428 
uöt8_t
 
	masync_ªq_size
;

429 
uöt8_t
 
	mˇlibøti⁄_cy˛e_timög
;

430 
uöt8_t
 
	mmax_ªque°s
;

438 
	spci_bridge_öfo
 {

439 
uöt8_t
 
	m¥im¨y_bus
;

440 
uöt8_t
 
	m£c⁄d¨y_bus
;

441 
uöt8_t
 
	msub‹dö©e_bus
;

442 
uöt8_t
 
	m£c⁄d¨y_œãncy_timî
;

444 
uöt8_t
 
	mio_ty≥
;

445 
uöt8_t
 
	mmem_ty≥
;

446 
uöt8_t
 
	m¥e„tch_mem_ty≥
;

448 
uöt16_t
 
	m£c⁄d¨y_°©us
;

449 
uöt16_t
 
	mbridge_c⁄åﬁ
;

451 
uöt32_t
 
	mio_ba£
;

452 
uöt32_t
 
	mio_limô
;

454 
uöt32_t
 
	mmem_ba£
;

455 
uöt32_t
 
	mmem_limô
;

457 
uöt64_t
 
	m¥e„tch_mem_ba£
;

458 
uöt64_t
 
	m¥e„tch_mem_limô
;

466 
	spci_pcmcü_bridge_öfo
 {

467 
uöt8_t
 
	m¥im¨y_bus
;

468 
uöt8_t
 
	mˇrd_bus
;

469 
uöt8_t
 
	msub‹dö©e_bus
;

470 
uöt8_t
 
	mˇrdbus_œãncy_timî
;

472 
uöt16_t
 
	m£c⁄d¨y_°©us
;

473 
uöt16_t
 
	mbridge_c⁄åﬁ
;

476 
uöt32_t
 
	mba£
;

477 
uöt32_t
 
	mlimô
;

478 } 
	mio
[2];

481 
uöt32_t
 
	mba£
;

482 
uöt32_t
 
	mlimô
;

483 } 
	mmem
[2];

493 
	#VGA_ARB_RSRC_NONE
 0x00

	)

494 
	#VGA_ARB_RSRC_LEGACY_IO
 0x01

	)

495 
	#VGA_ARB_RSRC_LEGACY_MEM
 0x02

	)

497 
	#VGA_ARB_RSRC_NORMAL_IO
 0x04

	)

498 
	#VGA_ARB_RSRC_NORMAL_MEM
 0x08

	)

500 
pci_devi˚_vgØrb_öô
 ();

501 
pci_devi˚_vgØrb_föi
 ();

502 
pci_devi˚_vgØrb_£t_èrgë
 (
pci_devi˚
 *
dev
);

504 
pci_devi˚_vgØrb_decodes
 (
√w_vga_r§c
);

505 
pci_devi˚_vgØrb_lock
 ();

506 
pci_devi˚_vgØrb_åylock
 ();

507 
pci_devi˚_vgØrb_u∆ock
 ();

509 
pci_devi˚_vgØrb_gë_öfo
 (
pci_devi˚
 *
dev
, *
vga_cou¡
, *
r§c_decodes
);

515 
	gpci_io_h™dÀ
;

517 
pci_io_h™dÀ
 *
pci_devi˚_›í_io
(
pci_devi˚
 *
dev
, 
pcüddr_t
 
ba£
,

518 
pcüddr_t
 
size
);

519 
pci_io_h™dÀ
 *
pci_Àgacy_›í_io
(
pci_devi˚
 *
dev
, 
pcüddr_t
 
ba£
,

520 
pcüddr_t
 
size
);

521 
pci_devi˚_˛o£_io
(
pci_devi˚
 *
dev
, 
pci_io_h™dÀ
 *
h™dÀ
);

522 
uöt32_t
 
pci_io_ªad32
(
pci_io_h™dÀ
 *
h™dÀ
, uöt32_à
ªg
);

523 
uöt16_t
 
pci_io_ªad16
(
pci_io_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
ªg
);

524 
uöt8_t
 
pci_io_ªad8
(
pci_io_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
ªg
);

525 
pci_io_wrôe32
(
pci_io_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
ªg
, uöt32_à
d©a
);

526 
pci_io_wrôe16
(
pci_io_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
ªg
, 
uöt16_t
 
d©a
);

527 
pci_io_wrôe8
(
pci_io_h™dÀ
 *
h™dÀ
, 
uöt32_t
 
ªg
, 
uöt8_t
 
d©a
);

533 
pci_devi˚_m≠_Àgacy
(
pci_devi˚
 *
dev
, 
pcüddr_t
 
ba£
,

534 
pcüddr_t
 
size
, 
m≠_Êags
, **
addr
);

535 
pci_devi˚_unm≠_Àgacy
(
pci_devi˚
 *
dev
, *
addr
, 
pcüddr_t
 
size
);

	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/proc/readproc.h

1 #i‚de‡
PROCPS_PROC_READPROC_H


2 
	#PROCPS_PROC_READPROC_H


	)

13 
	~"¥o˝s.h
"

14 
	~"pwˇche.h
"

16 
	#SIGNAL_STRING


	)

19 
	gEXTERN_C_BEGIN


32 
	#XXXID
 
tid


	)

34 
	ens_ty≥
 {

35 
	mIPCNS
 = 0,

36 
	mMNTNS
,

37 
	mNETNS
,

38 
	mPIDNS
,

39 
	mUSERNS
,

40 
	mUTSNS
,

41 
	mNUM_NS


43 c⁄° *
gë_ns_«me
(
id
);

44 
gë_ns_id
(c⁄° *
«me
);

51 
	s¥oc_t
 {

54 
	mtid
,

55 
	mµid
;

57 
	mmaj_dñè
,

58 
	mmö_dñè
;

60 
	mp˝u
;

62 
	m°©e
,

63 #ifde‡
QUICK_THREADS


64 
	m∑d_1
,

66 
	m∑d_1
,

68 
	m∑d_2
,

69 
	m∑d_3
;

72 
	mutime
,

73 
	m°ime
,

75 
	mcutime
,

76 
	mc°ime
,

77 
	m°¨t_time
;

78 #ifde‡
SIGNAL_STRING


81 
	msig«l
[18],

82 
	mblocked
[18],

83 
	msigign‹e
[18],

84 
	msigˇtch
[18],

85 
	m_sig≤d
[18];

89 
	msig«l
,

90 
	mblocked
,

91 
	msigign‹e
,

92 
	msigˇtch
,

93 
	m_sig≤d
;

95 
KLONG


96 
	m°¨t_code
,

97 
	míd_code
,

98 
	m°¨t_°ack
,

99 
	mk°k_e•
,

100 
	mk°k_eù
,

101 
	mwch™
;

103 
	m¥i‹ôy
,

104 
	mni˚
,

105 
	mrss
,

106 
	mÆ¨m
,

108 
	msize
,

109 
	mªsidít
,

110 
	msh¨e
,

111 
	mås
,

112 
	mÃs
,

113 
	mdrs
,

114 
	mdt
;

116 
	mvm_size
,

117 
	mvm_lock
,

118 
	mvm_rss
,

119 
	mvm_rss_™⁄
,

120 
	mvm_rss_fûe
,

121 
	mvm_rss_sh¨ed
,

122 
	mvm_d©a
,

123 
	mvm_°ack
,

124 
	mvm_sw≠
,

125 
	mvm_exe
,

126 
	mvm_lib
,

127 
	mπ¥io
,

128 
	msched
,

129 
	mvsize
,

130 
	mrss_æim
,

131 
	mÊags
,

132 
	mmö_Êt
,

133 
	mmaj_Êt
,

134 
	mcmö_Êt
,

135 
	mcmaj_Êt
;

137 **
	mívú⁄
,

138 **
	mcmdlöe
,

139 **
	mcgroup
,

140 *
	mcg«me
,

141 *
	msupgid
,

142 *
	msupgΩ
;

145 
	meu£r
[
P_G_SZ
],

146 
	mru£r
[
P_G_SZ
],

147 
	msu£r
[
P_G_SZ
],

148 
	mfu£r
[
P_G_SZ
],

149 
	mrgroup
[
P_G_SZ
],

150 
	megroup
[
P_G_SZ
],

151 
	msgroup
[
P_G_SZ
],

152 
	mfgroup
[
P_G_SZ
],

153 
	mcmd
[16];

154 
¥oc_t


155 *
	mrög
,

156 *
	m√xt
;

158 
	mpgΩ
,

159 
	m£ssi⁄
,

160 
	m∆wp
,

161 
	mtgid
,

162 
	mây
,

164 
	meuid
, 
	megid
,

165 
	mruid
, 
	mrgid
,

166 
	msuid
, 
	msgid
,

167 
	mfuid
, 
	mfgid
,

168 
	mçgid
,

169 
	mexô_sig«l
,

170 
	m¥o˚ss‹
;

172 
	moom_sc‹e
,

173 
	moom_adj
;

175 
	mns
[
NUM_NS
];

177 *
	msd_mach
,

178 *
	msd_ouid
,

179 *
	msd_£©
,

180 *
	msd_£ss
,

181 *
	msd_¶i˚
,

182 *
	msd_unô
,

183 *
	msd_uunô
;

185 *
	mlx˙ame
;

186 } 
	t¥oc_t
;

192 
	~<sys/ty≥s.h
>

193 
	~<dúít.h
>

194 
	~<uni°d.h
>

196 
	#PROCPATHLEN
 64

197 

	)

198 
	sPROCTAB
 {

199 
DIR
* 
	m¥ocfs
;

201 
DIR
* 
	mèskdú
;

203 
pid_t
 
	mèskdú_u£r
;

204 
	mdid_Áke
;

205 (*
	mfödî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, 
¥oc_t
 *__restrict const);

206 
	m¥oc_t
*(*
	mªadî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, 
¥oc_t
 *__restrict const);

207 (*
	mèskfödî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, c⁄° 
¥oc_t
 *__restrict const,Öroc_t *__restrict const, *__restrict const);

208 
	m¥oc_t
*(*
	mèskªadî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, c⁄° 
¥oc_t
 *__restrict const,Öroc_t *__restrict const, *__restrict const);

209 
pid_t
* 
	mpids
;

210 
uid_t
* 
	muids
;

211 
	mnuid
;

212 
	mi
;

213 
	mÊags
;

214 
	mu
;

215 * 
	mvp
;

216 
	m∑th
[
PROCPATHLEN
];

217 
	m∑thÀn
;

218 } 
	tPROCTAB
;

221 
PROCTAB
* 
›í¥oc
(
Êags
, ... );

223 
	s¥oc_d©a_t
 {

224 
¥oc_t
 **
	mèb
;

225 
¥oc_t
 **
	m¥oc
;

226 
¥oc_t
 **
	mèsk
;

227 
	mn
;

228 
	m≈roc
;

229 
	m¡ask
;

230 } 
	t¥oc_d©a_t
;

232 
¥oc_d©a_t
 *
ªad¥o˘ab2
((*
w™t_¥oc
)(
¥oc_t
 *
buf
), (*
w™t_èsk
)’roc_à*buf), 
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
);

233 
¥oc_d©a_t
 *
	`ªad¥o˘ab3
((*
w™t_èsk
)(
¥oc_t
 *
buf
), 
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
);

239 
¥oc_t
** 
	`ªad¥o˘ab
(
Êags
, ... );

242 
	`˛o£¥oc
(
PROCTAB
* 
PT
);

254 
¥oc_t
* 
	`ªad¥oc
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
,Öroc_à*__ª°ri˘ 
p
);

255 
¥oc_t
* 
	`ªadèsk
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
, c⁄°Öroc_à*__ª°ri˘ c⁄° 
p
,Öroc_à*__ª°ri˘ 
t
);

256 
¥oc_t
* 
	`ªadeôhî
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
,Öroc_à*__ª°ri˘ 
x
);

259 
	`ªad_cmdlöe
(*
__ª°ri˘
 c⁄° 
d°
, 
sz
, 
pid
);

261 
	`look_up_our_£lf
(
¥oc_t
 *
p
);

264 
	`‰ì¥oc
(
¥oc_t
* 
p
);

267 
¥oc_t
 * 
	`gë_¥oc_°©s
(
pid_t
 
pid
,Öroc_à*
p
);

283 
	#PROC_FILLMEM
 0x0001

284 
	#PROC_FILLCOM
 0x0002

285 
	#PROC_FILLENV
 0x0004

286 
	#PROC_FILLUSR
 0x0008

287 
	#PROC_FILLGRP
 0x0010

288 
	#PROC_FILLSTATUS
 0x0020

289 
	#PROC_FILLSTAT
 0x0040

290 
	#PROC_FILLARG
 0x0100

291 
	#PROC_FILLCGROUP
 0x0200

292 
	#PROC_FILLSUPGRP
 0x0400

293 
	#PROC_FILLOOM
 0x0800

294 
	#PROC_FILLNS
 0x8000

295 
	#PROC_FILLSYSTEMD
 0x80000

296 
	#PROC_FILL_LXC
 0x800000

297 

	)

298 
	#PROC_LOOSE_TASKS
 0x2000

299 

	)

301 
	#PROC_PID
 0x1000

302 
	#PROC_UID
 0x4000

303 

	)

304 
	#PROC_EDITCGRPCVT
 0x10000

305 
	#PROC_EDITCMDLCVT
 0x20000

306 
	#PROC_EDITENVRCVT
 0x40000

307 

	)

309 
	#PROC_SPARE_1
 0x01000000

	)

310 
	#PROC_SPARE_2
 0x02000000

	)

311 
	#PROC_SPARE_3
 0x04000000

	)

312 
	#PROC_SPARE_4
 0x08000000

	)

314 
EXTERN_C_END


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_MISC


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_MISC


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #ifde‡
__USE_XOPEN2K8


150 
	`psig«l
 (
__sig
, c⁄° *
__s
);

153 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

165 #ifde‡
__USE_XOPEN


166 #ifde‡
__GNUC__


167 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

176 #ifde‡
__USE_MISC


183 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

186 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

189 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

196 #ifde‡
__USE_MISC


197 
	#NSIG
 
_NSIG


	)

200 #ifde‡
__USE_GNU


201 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

205 #ifde‡
__USE_MISC


206 
__sigh™dÀr_t
 
	tsig_t
;

209 #ifde‡
__USE_POSIX


212 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

215 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

225 
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #ifde‡
__USE_GNU


229 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

233 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

236 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

237 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

242 
	~<bôs/siga˘i⁄.h
>

245 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

246 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

253 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

256 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

257 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

260 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

267 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

268 
	`__n⁄nuŒ
 ((1, 2));

270 #ifde‡
__USE_POSIX199309


275 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

276 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

283 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

284 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

285 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

286 
	`__n⁄nuŒ
 ((1));

290 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

291 
__THROW
;

296 #ifde‡
__USE_MISC


300 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

301 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

305 
	~<bôs/sigc⁄ãxt.h
>

308 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

313 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


314 
	#__√ed_size_t


	)

315 
	~<°ddef.h
>

320 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

322 
	~<bôs/sig°ack.h
>

323 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


325 
	~<sys/uc⁄ãxt.h
>

331 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

332 
__THROW
 
__©åibuã_dïªˇãd__
;

336 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

337 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

341 #ifde‡
__USE_XOPEN_EXTENDED


345 
	$sighﬁd
 (
__sig
Ë
__THROW
;

348 
	$sigªl£
 (
__sig
Ë
__THROW
;

351 
	$sigign‹e
 (
__sig
Ë
__THROW
;

354 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

357 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


360 
	~<bôs/±hªadty≥s.h
>

361 
	~<bôs/sigthªad.h
>

368 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

370 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

374 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

36 #i‚de‡
__öt8_t_deföed


37 
	#__öt8_t_deföed


	)

38 sig√d 
	töt8_t
;

39 
	töt16_t
;

40 
	töt32_t
;

41 #i‡
__WORDSIZE
 == 64

42 
	töt64_t
;

44 
__exãnsi⁄__


45 
	töt64_t
;

50 
	tuöt8_t
;

51 
	tuöt16_t
;

52 #i‚de‡
__uöt32_t_deföed


53 
	tuöt32_t
;

54 
	#__uöt32_t_deföed


	)

56 #i‡
__WORDSIZE
 == 64

57 
	tuöt64_t
;

59 
__exãnsi⁄__


60 
	tuöt64_t
;

67 sig√d 
	töt_Àa°8_t
;

68 
	töt_Àa°16_t
;

69 
	töt_Àa°32_t
;

70 #i‡
__WORDSIZE
 == 64

71 
	töt_Àa°64_t
;

73 
__exãnsi⁄__


74 
	töt_Àa°64_t
;

78 
	tuöt_Àa°8_t
;

79 
	tuöt_Àa°16_t
;

80 
	tuöt_Àa°32_t
;

81 #i‡
__WORDSIZE
 == 64

82 
	tuöt_Àa°64_t
;

84 
__exãnsi⁄__


85 
	tuöt_Àa°64_t
;

92 sig√d 
	töt_Á°8_t
;

93 #i‡
__WORDSIZE
 == 64

94 
	töt_Á°16_t
;

95 
	töt_Á°32_t
;

96 
	töt_Á°64_t
;

98 
	töt_Á°16_t
;

99 
	töt_Á°32_t
;

100 
__exãnsi⁄__


101 
	töt_Á°64_t
;

105 
	tuöt_Á°8_t
;

106 #i‡
__WORDSIZE
 == 64

107 
	tuöt_Á°16_t
;

108 
	tuöt_Á°32_t
;

109 
	tuöt_Á°64_t
;

111 
	tuöt_Á°16_t
;

112 
	tuöt_Á°32_t
;

113 
__exãnsi⁄__


114 
	tuöt_Á°64_t
;

119 #i‡
__WORDSIZE
 == 64

120 #i‚de‡
__öçå_t_deföed


121 
	töçå_t
;

122 
	#__öçå_t_deföed


	)

124 
	tuöçå_t
;

126 #i‚de‡
__öçå_t_deföed


127 
	töçå_t
;

128 
	#__öçå_t_deföed


	)

130 
	tuöçå_t
;

135 
__ötmax_t
 
	tötmax_t
;

136 
__uötmax_t
 
	tuötmax_t
;

139 #i‡
__WORDSIZE
 == 64

140 
	#__INT64_C
(
c
Ë¯## 
L


	)

141 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

143 
	#__INT64_C
(
c
Ë¯## 
LL


	)

144 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

150 
	#INT8_MIN
 (-128)

	)

151 
	#INT16_MIN
 (-32767-1)

	)

152 
	#INT32_MIN
 (-2147483647-1)

	)

153 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

155 
	#INT8_MAX
 (127)

	)

156 
	#INT16_MAX
 (32767)

	)

157 
	#INT32_MAX
 (2147483647)

	)

158 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

161 
	#UINT8_MAX
 (255)

	)

162 
	#UINT16_MAX
 (65535)

	)

163 
	#UINT32_MAX
 (4294967295U)

	)

164 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

168 
	#INT_LEAST8_MIN
 (-128)

	)

169 
	#INT_LEAST16_MIN
 (-32767-1)

	)

170 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

171 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

173 
	#INT_LEAST8_MAX
 (127)

	)

174 
	#INT_LEAST16_MAX
 (32767)

	)

175 
	#INT_LEAST32_MAX
 (2147483647)

	)

176 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

179 
	#UINT_LEAST8_MAX
 (255)

	)

180 
	#UINT_LEAST16_MAX
 (65535)

	)

181 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

182 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

186 
	#INT_FAST8_MIN
 (-128)

	)

187 #i‡
__WORDSIZE
 == 64

188 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

189 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

191 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

192 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

194 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

196 
	#INT_FAST8_MAX
 (127)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

199 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

201 
	#INT_FAST16_MAX
 (2147483647)

	)

202 
	#INT_FAST32_MAX
 (2147483647)

	)

204 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

207 
	#UINT_FAST8_MAX
 (255)

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

210 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

212 
	#UINT_FAST16_MAX
 (4294967295U)

	)

213 
	#UINT_FAST32_MAX
 (4294967295U)

	)

215 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

219 #i‡
__WORDSIZE
 == 64

220 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

221 
	#INTPTR_MAX
 (9223372036854775807L)

	)

222 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

224 
	#INTPTR_MIN
 (-2147483647-1)

	)

225 
	#INTPTR_MAX
 (2147483647)

	)

226 
	#UINTPTR_MAX
 (4294967295U)

	)

231 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

233 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

236 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

242 #i‡
__WORDSIZE
 == 64

243 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

244 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

246 #i‡
__WORDSIZE32_PTRDIFF_LONG


247 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

248 
	#PTRDIFF_MAX
 (2147483647L)

	)

250 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

251 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #i‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

312 
	#INT8_WIDTH
 8

	)

313 
	#UINT8_WIDTH
 8

	)

314 
	#INT16_WIDTH
 16

	)

315 
	#UINT16_WIDTH
 16

	)

316 
	#INT32_WIDTH
 32

	)

317 
	#UINT32_WIDTH
 32

	)

318 
	#INT64_WIDTH
 64

	)

319 
	#UINT64_WIDTH
 64

	)

321 
	#INT_LEAST8_WIDTH
 8

	)

322 
	#UINT_LEAST8_WIDTH
 8

	)

323 
	#INT_LEAST16_WIDTH
 16

	)

324 
	#UINT_LEAST16_WIDTH
 16

	)

325 
	#INT_LEAST32_WIDTH
 32

	)

326 
	#UINT_LEAST32_WIDTH
 32

	)

327 
	#INT_LEAST64_WIDTH
 64

	)

328 
	#UINT_LEAST64_WIDTH
 64

	)

330 
	#INT_FAST8_WIDTH
 8

	)

331 
	#UINT_FAST8_WIDTH
 8

	)

332 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

333 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

334 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

335 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

336 
	#INT_FAST64_WIDTH
 64

	)

337 
	#UINT_FAST64_WIDTH
 64

	)

339 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

340 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

342 
	#INTMAX_WIDTH
 64

	)

343 
	#UINTMAX_WIDTH
 64

	)

345 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

346 
	#SIG_ATOMIC_WIDTH
 32

	)

347 
	#SIZE_WIDTH
 
__WORDSIZE


	)

348 
	#WCHAR_WIDTH
 32

	)

349 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

28 
	~<bôs/libc-hódî-°¨t.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

103 #ifde‡
__USE_XOPEN2K8


104 #i‚de‡
__ssize_t_deföed


105 
__ssize_t
 
	tssize_t
;

106 
	#__ssize_t_deföed


	)

111 
__BEGIN_NAMESPACE_STD


112 #i‚de‡
__USE_FILE_OFFSET64


113 
_G_Âos_t
 
	tÂos_t
;

115 
_G_Âos64_t
 
	tÂos_t
;

117 
__END_NAMESPACE_STD


118 #ifde‡
__USE_LARGEFILE64


119 
_G_Âos64_t
 
	tÂos64_t
;

123 
	#_IOFBF
 0

	)

124 
	#_IOLBF
 1

	)

125 
	#_IONBF
 2

	)

129 #i‚de‡
BUFSIZ


130 
	#BUFSIZ
 
_IO_BUFSIZ


	)

136 #i‚de‡
EOF


137 
	#EOF
 (-1)

	)

143 
	#SEEK_SET
 0

	)

144 
	#SEEK_CUR
 1

	)

145 
	#SEEK_END
 2

	)

146 #ifde‡
__USE_GNU


147 
	#SEEK_DATA
 3

	)

148 
	#SEEK_HOLE
 4

	)

152 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


154 
	#P_tmpdú
 "/tmp"

	)

167 
	~<bôs/°dio_lim.h
>

171 
_IO_FILE
 *
°dö
;

172 
_IO_FILE
 *
°dout
;

173 
_IO_FILE
 *
°dîr
;

175 
	#°dö
 
°dö


	)

176 
	#°dout
 
°dout


	)

177 
	#°dîr
 
°dîr


	)

179 
__BEGIN_NAMESPACE_STD


181 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

183 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

184 
__END_NAMESPACE_STD


186 #ifde‡
__USE_ATFILE


188 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

189 c⁄° *
__√w
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


197 #i‚de‡
__USE_FILE_OFFSET64


198 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

200 #ifde‡
__REDIRECT


201 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

203 
	#tmpfûe
 
tmpfûe64


	)

207 #ifde‡
__USE_LARGEFILE64


208 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

212 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

213 
__END_NAMESPACE_STD


215 #ifde‡
__USE_MISC


218 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

222 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


230 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

231 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

235 
__BEGIN_NAMESPACE_STD


240 
	`f˛o£
 (
FILE
 *
__°ªam
);

245 
	`fÊush
 (
FILE
 *
__°ªam
);

246 
__END_NAMESPACE_STD


248 #ifde‡
__USE_MISC


255 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

258 #ifde‡
__USE_GNU


265 
	`f˛o£Æl
 ();

269 
__BEGIN_NAMESPACE_STD


270 #i‚de‡
__USE_FILE_OFFSET64


275 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

276 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

281 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

282 c⁄° *
__ª°ri˘
 
__modes
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

285 #ifde‡
__REDIRECT


286 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

288 
__wur
;

289 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

290 c⁄° *
__ª°ri˘
 
__modes
,

291 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

292 
__wur
;

294 
	#f›í
 
f›í64


	)

295 
	#‰e›í
 
‰e›í64


	)

298 
__END_NAMESPACE_STD


299 #ifde‡
__USE_LARGEFILE64


300 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

301 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

302 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

303 c⁄° *
__ª°ri˘
 
__modes
,

304 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

307 #ifdef 
__USE_POSIX


309 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

312 #ifdef 
__USE_GNU


315 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

316 c⁄° *
__ª°ri˘
 
__modes
,

317 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

320 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

322 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

323 
__THROW
 
__wur
;

328 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

332 
__BEGIN_NAMESPACE_STD


335 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

339 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

340 
__modes
, 
size_t
 
__n
Ë
__THROW
;

341 
__END_NAMESPACE_STD


343 #ifdef 
__USE_MISC


346 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

347 
size_t
 
__size
Ë
__THROW
;

350 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

354 
__BEGIN_NAMESPACE_STD


359 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

360 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

365 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

367 
	$•rötf
 (*
__ª°ri˘
 
__s
,

368 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

374 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

375 
_G_va_li°
 
__¨g
);

380 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

382 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

383 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

384 
__END_NAMESPACE_STD


386 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


387 
__BEGIN_NAMESPACE_C99


389 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

391 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

393 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

394 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

395 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

396 
__END_NAMESPACE_C99


399 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

402 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

403 
_G_va_li°
 
__¨g
)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

405 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

408 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

409 c⁄° *
__ª°ri˘
 
__fmt
, ...)

410 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

413 #ifde‡
__USE_XOPEN2K8


415 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

416 
_G_va_li°
 
__¨g
)

417 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

418 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

419 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

423 
__BEGIN_NAMESPACE_STD


428 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

429 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

434 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

437 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

440 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

441 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

442 #ifde‡
__REDIRECT


446 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

448 
__isoc99_fsˇnf
Ë
__wur
;

449 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_sˇnf
Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

452 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_ssˇnf
);

455 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

459 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

460 
	#fsˇnf
 
__isoc99_fsˇnf


	)

461 
	#sˇnf
 
__isoc99_sˇnf


	)

462 
	#ssˇnf
 
__isoc99_ssˇnf


	)

466 
__END_NAMESPACE_STD


468 #ifdef 
__USE_ISOC99


469 
__BEGIN_NAMESPACE_C99


474 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

475 
_G_va_li°
 
__¨g
)

476 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

482 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

486 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

487 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 #i‡!
deföed
 
__USE_GNU
 \

491 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

492 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

493 #ifde‡
__REDIRECT


497 
	`__REDIRECT
 (
vfsˇnf
,

498 (
FILE
 *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

500 
__isoc99_vfsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

502 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

503 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

505 
	`__REDIRECT_NTH
 (
vssˇnf
,

506 (c⁄° *
__ª°ri˘
 
__s
,

507 c⁄° *
__ª°ri˘
 
__f‹m©
,

508 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

509 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

511 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

512 c⁄° *
__ª°ri˘
 
__f‹m©
,

513 
_G_va_li°
 
__¨g
Ë
__wur
;

514 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__wur
;

516 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

517 c⁄° *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__THROW
;

519 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

520 
	#vsˇnf
 
__isoc99_vsˇnf


	)

521 
	#vssˇnf
 
__isoc99_vssˇnf


	)

525 
__END_NAMESPACE_C99


529 
__BEGIN_NAMESPACE_STD


534 
	`fgëc
 (
FILE
 *
__°ªam
);

535 
	`gëc
 (
FILE
 *
__°ªam
);

541 
	`gëch¨
 ();

542 
__END_NAMESPACE_STD


546 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

548 #ifde‡
__USE_POSIX199506


553 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

554 
	`gëch¨_u∆ocked
 ();

557 #ifde‡
__USE_MISC


564 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

568 
__BEGIN_NAMESPACE_STD


576 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

577 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

583 
	`putch¨
 (
__c
);

584 
__END_NAMESPACE_STD


588 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

590 #ifde‡
__USE_MISC


597 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

600 #ifde‡
__USE_POSIX199506


605 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

606 
	`putch¨_u∆ocked
 (
__c
);

610 #i‡
deföed
 
__USE_MISC
 \

611 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

613 
	`gëw
 (
FILE
 *
__°ªam
);

616 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

620 
__BEGIN_NAMESPACE_STD


625 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

626 
__wur
;

628 #i‡!
deföed
 
__USE_ISOC11
 \

629 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

641 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

643 
__END_NAMESPACE_STD


645 #ifde‡
__USE_GNU


652 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

668 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

682 
size_t
 *
__ª°ri˘
 
__n
,

683 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

687 
__BEGIN_NAMESPACE_STD


692 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

698 
	`puts
 (c⁄° *
__s
);

705 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

712 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

718 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

719 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

720 
__END_NAMESPACE_STD


722 #ifde‡
__USE_GNU


729 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

730 
FILE
 *
__ª°ri˘
 
__°ªam
);

733 #ifde‡
__USE_MISC


740 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

741 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

742 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

743 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

747 
__BEGIN_NAMESPACE_STD


752 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

757 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

762 
	`ªwöd
 (
FILE
 *
__°ªam
);

763 
__END_NAMESPACE_STD


770 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


771 #i‚de‡
__USE_FILE_OFFSET64


776 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

781 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

783 #ifde‡
__REDIRECT


784 
	`__REDIRECT
 (
f£eko
,

785 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

786 
f£eko64
);

787 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

789 
	#f£eko
 
f£eko64


	)

790 
	#·ñlo
 
·ñlo64


	)

795 
__BEGIN_NAMESPACE_STD


796 #i‚de‡
__USE_FILE_OFFSET64


801 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

806 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

808 #ifde‡
__REDIRECT


809 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

810 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

811 
	`__REDIRECT
 (
f£ços
,

812 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

814 
	#fgëpos
 
fgëpos64


	)

815 
	#f£ços
 
f£ços64


	)

818 
__END_NAMESPACE_STD


820 #ifde‡
__USE_LARGEFILE64


821 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

822 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

823 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

824 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

827 
__BEGIN_NAMESPACE_STD


829 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__END_NAMESPACE_STD


836 #ifde‡
__USE_MISC


838 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

839 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

844 
__BEGIN_NAMESPACE_STD


849 
	`≥º‹
 (c⁄° *
__s
);

850 
__END_NAMESPACE_STD


856 
	~<bôs/sys_îæi°.h
>

859 #ifdef 
__USE_POSIX


861 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #ifde‡
__USE_MISC


866 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

870 #ifde‡
__USE_POSIX2


875 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

881 
	`p˛o£
 (
FILE
 *
__°ªam
);

885 #ifdef 
__USE_POSIX


887 *
	$˘îmid
 (*
__s
Ë
__THROW
;

891 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


893 *
	`cu£rid
 (*
__s
);

897 #ifdef 
__USE_GNU


898 
ob°ack
;

901 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

903 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

904 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

905 c⁄° *
__ª°ri˘
 
__f‹m©
,

906 
_G_va_li°
 
__¨gs
)

907 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

911 #ifde‡
__USE_POSIX199506


915 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

919 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

922 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

925 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


929 
	#__√ed_gë›t


	)

930 
	~<gë›t.h
>

935 #ifde‡
__USE_EXTERN_INLINES


936 
	~<bôs/°dio.h
>

938 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


939 
	~<bôs/°dio2.h
>

941 #ifde‡
__LDBL_COMPAT


942 
	~<bôs/°dio-ldbl.h
>

945 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

46 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

47 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

48 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

49 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

50 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

51 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

52 #ifde‡
__WIFCONTINUED


53 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

57 
__BEGIN_NAMESPACE_STD


61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

74 
	g__END_NAMESPACE_STD


76 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__BEGIN_NAMESPACE_C99


79 
__exãnsi⁄__
 struct

81 
	mquŸ
;

82 
	mªm
;

83 } 
	tŒdiv_t
;

84 
	#__Œdiv_t_deföed
 1

	)

85 
	g__END_NAMESPACE_C99


90 
	#RAND_MAX
 2147483647

	)

95 
	#EXIT_FAILURE
 1

	)

96 
	#EXIT_SUCCESS
 0

	)

100 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

101 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

104 
__BEGIN_NAMESPACE_STD


106 
	$©of
 (c⁄° *
__≈å
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

109 
	$©oi
 (c⁄° *
__≈å
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

112 
	$©ﬁ
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_ISOC99


117 
__BEGIN_NAMESPACE_C99


119 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

121 
__END_NAMESPACE_C99


124 
__BEGIN_NAMESPACE_STD


126 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

129 
__END_NAMESPACE_STD


131 #ifdef 
__USE_ISOC99


132 
__BEGIN_NAMESPACE_C99


134 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

137 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

138 **
__ª°ri˘
 
__íd±r
)

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 
__END_NAMESPACE_C99


143 
__BEGIN_NAMESPACE_STD


145 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

146 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

147 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

150 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

151 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_MISC


156 
__exãnsi⁄__


157 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

158 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1));

161 
__exãnsi⁄__


162 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

163 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

164 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__exãnsi⁄__


171 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
__exãnsi⁄__


176 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

179 
__END_NAMESPACE_C99


183 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

184 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

185 
__f
)

186 
__THROW
 
	`__n⁄nuŒ
 ((3));

188 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

189 
__f
)

190 
__THROW
 
	`__n⁄nuŒ
 ((3));

192 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

193 
__f
)

194 
__THROW
 
	`__n⁄nuŒ
 ((3));

198 #ifde‡
__USE_GNU


212 
	~<xloˇÀ.h
>

216 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

220 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

221 **
__ª°ri˘
 
__íd±r
,

222 
__ba£
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

225 
__exãnsi⁄__


226 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

227 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

228 
__loˇÀ_t
 
__loc
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

231 
__exãnsi⁄__


232 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

233 **
__ª°ri˘
 
__íd±r
,

234 
__ba£
, 
__loˇÀ_t
 
__loc
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

237 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

238 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

239 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

241 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

242 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

243 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

245 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

246 **
__ª°ri˘
 
__íd±r
,

247 
__loˇÀ_t
 
__loc
)

248 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

252 #ifde‡
__USE_EXTERN_INLINES


253 
__BEGIN_NAMESPACE_STD


254 
__exã∫_ölöe
 

255 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

257  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

258 
	}
}

259 
__exã∫_ölöe
 

260 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

262  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

263 
	}
}

264 
	g__END_NAMESPACE_STD


266 #ifde‡
__USE_ISOC99


267 
__BEGIN_NAMESPACE_C99


268 
__exãnsi⁄__
 
__exã∫_ölöe
 

269 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

271  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

272 
	}
}

273 
	g__END_NAMESPACE_C99


278 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


282 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

285 
	$a64l
 (c⁄° *
__s
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


291 
	~<sys/ty≥s.h
>

298 
	$øndom
 (Ë
__THROW
;

301 
	$§™dom
 (
__£ed
Ë
__THROW
;

307 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

308 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

312 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

315 #ifde‡
__USE_MISC


320 
	søndom_d©a


322 
öt32_t
 *
Âå
;

323 
öt32_t
 *
Ωå
;

324 
öt32_t
 *
°©e
;

325 
ønd_ty≥
;

326 
ønd_deg
;

327 
ønd_£p
;

328 
öt32_t
 *
íd_±r
;

331 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

332 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

335 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

338 
size_t
 
__°©ñí
,

339 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

340 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

342 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

343 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

349 
__BEGIN_NAMESPACE_STD


351 
	$ønd
 (Ë
__THROW
;

353 
	$§™d
 (
__£ed
Ë
__THROW
;

354 
__END_NAMESPACE_STD


356 #ifde‡
__USE_POSIX199506


358 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


366 
	$dønd48
 (Ë
__THROW
;

367 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

370 
	$Ã™d48
 (Ë
__THROW
;

371 
	$ƒ™d48
 (
__xsubi
[3])

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

375 
	$mønd48
 (Ë
__THROW
;

376 
	$jønd48
 (
__xsubi
[3])

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

381 *
	$£ed48
 (
__£ed16v
[3])

382 
__THROW
 
	`__n⁄nuŒ
 ((1));

383 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_MISC


389 
	sdønd48_d©a


391 
__x
[3];

392 
__ﬁd_x
[3];

393 
__c
;

394 
__öô
;

395 
__exãnsi⁄__
 
__a
;

400 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

402 
	$î™d48_r
 (
__xsubi
[3],

403 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

404 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

408 *
__ª°ri˘
 
__ªsu…
)

409 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

410 
	$ƒ™d48_r
 (
__xsubi
[3],

411 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

412 *
__ª°ri˘
 
__ªsu…
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

416 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

417 *
__ª°ri˘
 
__ªsu…
)

418 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

419 
	$jønd48_r
 (
__xsubi
[3],

420 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

421 *
__ª°ri˘
 
__ªsu…
)

422 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

426 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	$£ed48_r
 (
__£ed16v
[3],

429 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

431 
	$lc⁄g48_r
 (
__∑øm
[7],

432 
dønd48_d©a
 *
__buf„r
)

433 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


440 
	#__mÆloc_™d_ˇŒoc_deföed


	)

441 
__BEGIN_NAMESPACE_STD


443 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

445 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

446 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

447 
__END_NAMESPACE_STD


450 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


451 
__BEGIN_NAMESPACE_STD


457 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

458 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

460 
	$‰ì
 (*
__±r
Ë
__THROW
;

461 
__END_NAMESPACE_STD


463 #ifdef 
__USE_MISC


465 
	$c‰ì
 (*
__±r
Ë
__THROW
;

468 #ifde‡
__USE_MISC


469 
	~<Æloˇ.h
>

472 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

473 || 
deföed
 
__USE_MISC


475 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

478 #ifde‡
__USE_XOPEN2K


480 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ISOC11


486 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

487 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

490 
__BEGIN_NAMESPACE_STD


492 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

496 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


500 #ifde‡
__˝lu•lus


501 "C++" 
	$©_quick_exô
 ((*
__func
) ())

502 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

504 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

507 
__END_NAMESPACE_STD


509 #ifdef 
__USE_MISC


512 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

513 
__THROW
 
	`__n⁄nuŒ
 ((1));

516 
__BEGIN_NAMESPACE_STD


520 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

522 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


526 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

528 
__END_NAMESPACE_STD


530 #ifde‡
__USE_ISOC99


531 
__BEGIN_NAMESPACE_C99


534 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

535 
__END_NAMESPACE_C99


539 
__BEGIN_NAMESPACE_STD


541 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

542 
__END_NAMESPACE_STD


544 #ifde‡
__USE_GNU


547 *
	$£cuª_gëív
 (c⁄° *
__«me
)

548 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

551 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


555 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

558 #ifde‡
__USE_XOPEN2K


561 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

562 
__THROW
 
	`__n⁄nuŒ
 ((2));

565 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

568 #ifdef 
__USE_MISC


572 
	$˛óªnv
 (Ë
__THROW
;

576 #i‡
deföed
 
__USE_MISC
 \

577 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

583 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


595 #i‚de‡
__USE_FILE_OFFSET64


596 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

598 #ifde‡
__REDIRECT


599 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

600 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

602 
	#mk°emp
 
mk°emp64


	)

605 #ifde‡
__USE_LARGEFILE64


606 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

610 #ifde‡
__USE_MISC


617 #i‚de‡
__USE_FILE_OFFSET64


618 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

620 #ifde‡
__REDIRECT


621 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

622 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

624 
	#mk°emps
 
mk°emps64


	)

627 #ifde‡
__USE_LARGEFILE64


628 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

629 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_XOPEN2K8


639 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

642 #ifde‡
__USE_GNU


649 #i‚de‡
__USE_FILE_OFFSET64


650 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

654 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 
	#mko°emp
 
mko°emp64


	)

659 #ifde‡
__USE_LARGEFILE64


660 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

669 #i‚de‡
__USE_FILE_OFFSET64


670 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

671 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

673 #ifde‡
__REDIRECT


674 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

675 
__Êags
), 
mko°emps64
)

676 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

678 
	#mko°emps
 
mko°emps64


	)

681 #ifde‡
__USE_LARGEFILE64


682 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

683 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 
__BEGIN_NAMESPACE_STD


693 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

694 
__END_NAMESPACE_STD


697 #ifdef 
__USE_GNU


700 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

701 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

704 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


710 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

711 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

716 #i‚de‡
__COMPAR_FN_T


717 
	#__COMPAR_FN_T


	)

718 (*
	t__com∑r_‚_t
) (const *, const *);

720 #ifdef 
__USE_GNU


721 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

724 #ifde‡
__USE_GNU


725 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

728 
__BEGIN_NAMESPACE_STD


731 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

732 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

733 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

735 #ifde‡
__USE_EXTERN_INLINES


736 
	~<bôs/°dlib-b£¨ch.h
>

741 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

742 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

743 #ifde‡
__USE_GNU


744 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

745 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

746 
	`__n⁄nuŒ
 ((1, 4));

751 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

752 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

757 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

761 
__BEGIN_NAMESPACE_STD


765 
div_t
 
	$div
 (
__numî
, 
__díom
)

766 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

768 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

769 
__END_NAMESPACE_STD


771 #ifde‡
__USE_ISOC99


772 
__BEGIN_NAMESPACE_C99


773 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

774 
__díom
)

775 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_C99


780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


788 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

789 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

794 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

795 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

800 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

801 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

804 #ifde‡
__USE_MISC


806 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

807 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

808 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

809 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

811 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

812 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

813 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

820 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

821 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

822 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

823 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

825 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

827 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

829 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

831 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

836 
__BEGIN_NAMESPACE_STD


839 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

842 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

843 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

846 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

850 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

851 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

853 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

854 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

855 
__THROW
;

856 
__END_NAMESPACE_STD


859 #ifde‡
__USE_MISC


864 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

868 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


875 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

876 *c⁄° *
__ª°ri˘
 
__tokís
,

877 **
__ª°ri˘
 
__vÆuï
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

882 #ifde‡
__USE_XOPEN


884 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

890 #ifde‡
__USE_XOPEN2KXSI


892 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

895 #ifde‡
__USE_XOPEN_EXTENDED


900 
	$gø¡±
 (
__fd
Ë
__THROW
;

904 
	$u∆ock±
 (
__fd
Ë
__THROW
;

909 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

912 #ifde‡
__USE_GNU


916 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

917 
__THROW
 
	`__n⁄nuŒ
 ((2));

920 
	`gë±
 ();

923 #ifde‡
__USE_MISC


927 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

928 
__THROW
 
	`__n⁄nuŒ
 ((1));

931 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


934 
	$ây¶Ÿ
 (Ë
__THROW
;

937 
	~<bôs/°dlib-Êﬂt.h
>

940 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


941 
	~<bôs/°dlib.h
>

943 #ifde‡
__LDBL_COMPAT


944 
	~<bôs/°dlib-ldbl.h
>

948 #unde‡
__√ed_mÆloc_™d_ˇŒoc


950 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 
__END_NAMESPACE_STD


54 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


55 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

56 
__c
, 
size_t
 
__n
)

57 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 
__BEGIN_NAMESPACE_STD


63 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

66 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

70 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


73 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 #ifde‡
__OPTIMIZE__


79 
__exã∫_Æways_ölöe
 *

80 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


82  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

85 
__exã∫_Æways_ölöe
 const *

86 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


88  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

91 
	}
}

93 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

94 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

96 
__END_NAMESPACE_STD


98 #ifde‡
__USE_GNU


101 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


102 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

103 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


113 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

114 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

124 
__BEGIN_NAMESPACE_STD


126 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

130 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

134 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

135 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

138 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

141 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

142 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

148 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

152 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

154 
__END_NAMESPACE_STD


156 #ifde‡
__USE_XOPEN2K8


157 
	~<xloˇÀ.h
>

160 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

161 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

164 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

165 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

168 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

169 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

461 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

462 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


468 *
	`ödex
 (*
__s
, 
__c
)

469 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

471 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

473 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


474 
__exã∫_Æways_ölöe
 *

475 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


477  
	`__buûtö_ödex
 (
__s
, 
__c
);

480 
__exã∫_Æways_ölöe
 const *

481 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


483  
	`__buûtö_ödex
 (
__s
, 
__c
);

486 
	}
}

488 *
	$ödex
 (c⁄° *
__s
, 
__c
)

489 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

493 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


496 *
	`rödex
 (*
__s
, 
__c
)

497 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

499 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

501 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


502 
__exã∫_Æways_ölöe
 *

503 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


505  
	`__buûtö_rödex
 (
__s
, 
__c
);

508 
__exã∫_Æways_ölöe
 const *

509 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


511  
	`__buûtö_rödex
 (
__s
, 
__c
);

514 
	}
}

516 *
	$rödex
 (c⁄° *
__s
, 
__c
)

517 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

522 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

526 #ifdef 
__USE_GNU


527 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

533 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

538 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

541 #ifdef 
__USE_GNU


544 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

548 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

549 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

553 #ifdef 
__USE_MISC


556 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

557 c⁄° *
__ª°ri˘
 
__dñim
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

561 #ifdef 
__USE_XOPEN2K8


563 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

566 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 #ifdef 
__USE_GNU


583 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

584 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

587 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #i‚de‡
ba£«me


597 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


598 "C++" *
	$ba£«me
 (*
__fûíame
)

599 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

601 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
	`__GNUC_PREREQ
 (3,4)

610 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

611 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


631 
	~<bôs/°rög.h
>

634 
	~<bôs/°rög2.h
>

637 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


639 
	~<bôs/°rög3.h
>

643 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

644 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

645 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


647 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

650 
__exã∫_Æways_ölöe
 *

651 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

652 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

654  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

655 
	}
}

660 
	g__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_MISC


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

31 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

32 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

35 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


39 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

49 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


52 *
	`ödex
 (*
__s
, 
__c
)

53 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

54 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

55 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

57 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


58 
__exã∫_Æways_ölöe
 *

59 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


61  
	`__buûtö_ödex
 (
__s
, 
__c
);

64 
__exã∫_Æways_ölöe
 const *

65 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


67  
	`__buûtö_ödex
 (
__s
, 
__c
);

70 
	}
}

72 *
	$ödex
 (c⁄° *
__s
, 
__c
)

73 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


80 *
	`rödex
 (*
__s
, 
__c
)

81 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

83 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

85 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


86 
__exã∫_Æways_ölöe
 *

87 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


89  
	`__buûtö_rödex
 (
__s
, 
__c
);

92 
__exã∫_Æways_ölöe
 const *

93 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


95  
	`__buûtö_rödex
 (
__s
, 
__c
);

98 
	}
}

100 *
	$rödex
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


108 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

112 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

113 
__THROW
 
__©åibuã_puª__
;

116 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

117 
__THROW
 
__©åibuã_puª__
;

119 #ifdef 
__USE_XOPEN2K8


123 
	~<xloˇÀ.h
>

127 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

128 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

130 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

131 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

135 
__END_DECLS


139 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

140 && 
deföed
 
__f‹tify_fun˘i⁄


142 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


143 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/kd.h

18 #i‚de‡
_SYS_KD_H


19 
	#_SYS_KD_H
 1

	)

22 #i‚de‡
_LINUX_TYPES_H


23 
	#_LINUX_TYPES_H
 1

	)

24 
	#__undef_LINUX_TYPES_H


	)

27 
	~<löux/kd.h
>

29 #ifde‡
__undef_LINUX_TYPES_H


30 #unde‡
_LINUX_TYPES_H


31 #unde‡
__undef_LINUX_TYPES_H


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/mount.h

21 #i‚de‡
_SYS_MOUNT_H


22 
	#_SYS_MOUNT_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/io˘l.h
>

27 
	#BLOCK_SIZE
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

35 
	mMS_RDONLY
 = 1,

36 
	#MS_RDONLY
 
MS_RDONLY


	)

37 
	mMS_NOSUID
 = 2,

38 
	#MS_NOSUID
 
MS_NOSUID


	)

39 
	mMS_NODEV
 = 4,

40 
	#MS_NODEV
 
MS_NODEV


	)

41 
	mMS_NOEXEC
 = 8,

42 
	#MS_NOEXEC
 
MS_NOEXEC


	)

43 
	mMS_SYNCHRONOUS
 = 16,

44 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

45 
	mMS_REMOUNT
 = 32,

46 
	#MS_REMOUNT
 
MS_REMOUNT


	)

47 
	mMS_MANDLOCK
 = 64,

48 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

49 
	mMS_DIRSYNC
 = 128,

50 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

51 
	mMS_NOATIME
 = 1024,

52 
	#MS_NOATIME
 
MS_NOATIME


	)

53 
	mMS_NODIRATIME
 = 2048,

54 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

55 
	mMS_BIND
 = 4096,

56 
	#MS_BIND
 
MS_BIND


	)

57 
	mMS_MOVE
 = 8192,

58 
	#MS_MOVE
 
MS_MOVE


	)

59 
	mMS_REC
 = 16384,

60 
	#MS_REC
 
MS_REC


	)

61 
	mMS_SILENT
 = 32768,

62 
	#MS_SILENT
 
MS_SILENT


	)

63 
	mMS_POSIXACL
 = 1 << 16,

64 
	#MS_POSIXACL
 
MS_POSIXACL


	)

65 
	mMS_UNBINDABLE
 = 1 << 17,

66 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

67 
	mMS_PRIVATE
 = 1 << 18,

68 
	#MS_PRIVATE
 
MS_PRIVATE


	)

69 
	mMS_SLAVE
 = 1 << 19,

70 
	#MS_SLAVE
 
MS_SLAVE


	)

71 
	mMS_SHARED
 = 1 << 20,

72 
	#MS_SHARED
 
MS_SHARED


	)

73 
	mMS_RELATIME
 = 1 << 21,

74 
	#MS_RELATIME
 
MS_RELATIME


	)

75 
	mMS_KERNMOUNT
 = 1 << 22,

76 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

77 
	mMS_I_VERSION
 = 1 << 23,

78 
	#MS_I_VERSION
 
MS_I_VERSION


	)

79 
	mMS_STRICTATIME
 = 1 << 24,

80 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

81 
	mMS_LAZYTIME
 = 1 << 25,

82 
	#MS_LAZYTIME
 
MS_LAZYTIME


	)

83 
	mMS_ACTIVE
 = 1 << 30,

84 
	#MS_ACTIVE
 
MS_ACTIVE


	)

85 
	mMS_NOUSER
 = 1 << 31

86 
	#MS_NOUSER
 
MS_NOUSER


	)

90 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
 \

91 |
MS_LAZYTIME
)

	)

96 
	#MS_MGC_VAL
 0xc0ed0000

	)

97 
	#MS_MGC_MSK
 0xffff0000

	)

104 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

105 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

106 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

107 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

108 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

109 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

110 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

111 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

112 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

113 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

114 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

115 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

116 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

117 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

118 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

124 
	mMNT_FORCE
 = 1,

125 
	#MNT_FORCE
 
MNT_FORCE


	)

126 
	mMNT_DETACH
 = 2,

127 
	#MNT_DETACH
 
MNT_DETACH


	)

128 
	mMNT_EXPIRE
 = 4,

129 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

130 
	mUMOUNT_NOFOLLOW
 = 8

131 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

135 
__BEGIN_DECLS


138 
	$mou¡
 (c⁄° *
__•ecül_fûe
, c⁄° *
__dú
,

139 c⁄° *
__f°y≥
, 
__rwÊag
,

140 c⁄° *
__d©a
Ë
__THROW
;

143 
	$umou¡
 (c⁄° *
__•ecül_fûe
Ë
__THROW
;

146 
	$umou¡2
 (c⁄° *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

148 
__END_DECLS


	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	tnfds_t
;

38 
	spﬁlfd


40 
	mfd
;

41 
	mevíts
;

42 
	mªvíts
;

46 
__BEGIN_DECLS


56 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

58 #ifde‡
__USE_GNU


65 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

66 c⁄° 
time•ec
 *
__timeout
,

67 c⁄° 
__sig£t_t
 *
__ss
);

70 
	g__END_DECLS


74 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


75 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_ATFILE


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__REDIRECT_NTH


213 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

214 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

215 
	`__n⁄nuŒ
 ((1, 2));

216 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

217 
	`__n⁄nuŒ
 ((2));

219 
	#°©
 
°©64


	)

220 
	#f°©
 
f°©64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

225 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

226 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

229 #ifde‡
__USE_ATFILE


233 #i‚de‡
__USE_FILE_OFFSET64


234 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

235 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

236 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
,

241 
__Êag
),

242 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

244 
	#f°©©
 
f°©©64


	)

248 #ifde‡
__USE_LARGEFILE64


249 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

250 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

251 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

255 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


256 #i‚de‡
__USE_FILE_OFFSET64


259 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

260 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT_NTH


263 
	`__REDIRECT_NTH
 (
l°©
,

264 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

266 
	`__n⁄nuŒ
 ((1, 2));

268 
	#l°©
 
l°©64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

273 
°©64
 *
__ª°ri˘
 
__buf
)

274 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

280 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 #ifde‡
__USE_MISC


287 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


293 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

296 #ifde‡
__USE_ATFILE


299 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

300 
__Êag
)

301 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

308 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

310 #ifdef 
__USE_GNU


313 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

317 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

320 #ifde‡
__USE_ATFILE


324 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

325 
__THROW
 
	`__n⁄nuŒ
 ((2));

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


332 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 #ifde‡
__USE_ATFILE


339 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

340 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 #ifde‡
__USE_ATFILE


353 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

354 
__THROW
 
	`__n⁄nuŒ
 ((2));

357 #ifde‡
__USE_ATFILE


360 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

361 c⁄° 
time•ec
 
__times
[2],

362 
__Êags
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 #ifde‡
__USE_XOPEN2K8


368 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

386 #i‚de‡
_STAT_VER


387 
	#_STAT_VER
 0

	)

389 #i‚de‡
_MKNOD_VER


390 
	#_MKNOD_VER
 0

	)

394 #i‚de‡
__USE_FILE_OFFSET64


395 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

396 
__THROW
 
	`__n⁄nuŒ
 ((3));

397 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

398 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

399 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
, 
__Êag
)

403 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

405 #ifde‡
__REDIRECT_NTH


406 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

407 
°©
 *
__°©_buf
), 
__fx°©64
)

408 
	`__n⁄nuŒ
 ((3));

409 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

410 
°©
 *
__°©_buf
), 
__x°©64
)

411 
	`__n⁄nuŒ
 ((2, 3));

412 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__lx°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

416 c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
, 
__Êag
),

418 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

421 
	#__fx°©
 
__fx°©64


	)

422 
	#__x°©
 
__x°©64


	)

423 
	#__lx°©
 
__lx°©64


	)

427 #ifde‡
__USE_LARGEFILE64


428 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

429 
__THROW
 
	`__n⁄nuŒ
 ((3));

430 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

431 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

432 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
, 
__Êag
)

436 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

438 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

439 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

441 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

442 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

445 #ifde‡
__USE_EXTERN_INLINES


448 
__exã∫_ölöe
 

449 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

451  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

452 
	}
}

454 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


455 
__exã∫_ölöe
 

456 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

458  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

459 
	}
}

462 
__exã∫_ölöe
 

463 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

465  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

466 
	}
}

468 #ifde‡
__USE_ATFILE


469 
__exã∫_ölöe
 

470 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

471 
__Êag
))

473  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

474 
	}
}

477 #ifde‡
__USE_MISC


478 
__exã∫_ölöe
 

479 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

481  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

482 
	}
}

485 #ifde‡
__USE_ATFILE


486 
__exã∫_ölöe
 

487 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

488 
__dev_t
 
__dev
))

490  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

491 
	}
}

494 #i‡
deföed
 
__USE_LARGEFILE64
 \

495 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

496 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

497 
__exã∫_ölöe
 

498 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

500  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

501 
	}
}

503 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


504 
__exã∫_ölöe
 

505 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

507  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

508 
	}
}

511 
__exã∫_ölöe
 

512 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

514  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

515 
	}
}

517 #ifde‡
__USE_ATFILE


518 
__exã∫_ölöe
 

519 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

520 
__Êag
))

522  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

523 
	}
}

530 
	g__END_DECLS


	@/usr/include/sys/swap.h

19 #i‚de‡
_SYS_SWAP_H


21 
	#_SYS_SWAP_H
 1

	)

22 
	~<„©uªs.h
>

27 
	#SWAP_FLAG_PREFER
 0x8000

	)

28 
	#SWAP_FLAG_PRIO_MASK
 0x7fff

	)

29 
	#SWAP_FLAG_PRIO_SHIFT
 0

	)

30 
	#SWAP_FLAG_DISCARD
 0x10000

	)

32 
__BEGIN_DECLS


36 
	$sw≠⁄
 (c⁄° *
__∑th
, 
__Êags
Ë
__THROW
;

39 
	$sw≠off
 (c⁄° *
__∑th
Ë
__THROW
;

41 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysinfo.h

18 #i‚de‡
_SYS_SYSINFO_H


19 
	#_SYS_SYSINFO_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<löux/kî√l.h
>

26 
__BEGIN_DECLS


29 
	$sysöfo
 (
sysöfo
 *
__öfo
Ë
__THROW
;

33 
	$gë_≈rocs_c⁄f
 (Ë
__THROW
;

36 
	$gë_≈rocs
 (Ë
__THROW
;

40 
	$gë_phys_∑ges
 (Ë
__THROW
;

43 
	$gë_avphys_∑ges
 (Ë
__THROW
;

45 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H_OUTER


21 #i‚de‡
__SYSMACROS_DEPRECATED_INCLUSION


22 
	#_SYS_SYSMACROS_H_OUTER
 1

	)

30 #unde‡
maj‹


31 #unde‡
mö‹


32 #unde‡
makedev


36 #i‚de‡
_SYS_SYSMACROS_H


37 
	#_SYS_SYSMACROS_H
 1

	)

39 
	~<„©uªs.h
>

40 
	~<bôs/ty≥s.h
>

41 
	~<bôs/sysma¸os.h
>

52 
	#__SYSMACROS_DM
(
symbﬁ
Ë
__SYSMACROS_DM1
 \

53 (
In
 
the
 
GNU
 
C
 
Libøry
, #symbﬁ 
is
 
deföed
\
n
\

54 
by
 <
sys
/
sysma¸os
.
h
>. 
F‹
 
hi°‹iˇl
 
com∑tibûôy
, 
ô
 
is
\
n
\

55 
cuºíéy
 
deföed
 
by
 <
sys
/
ty≥s
.
h
> 
as
 
wñl
, 
but
 
we
 
∂™
 
to
\
n
\

56 
ªmove
 
this
 
so⁄
. 
To
 
u£
 #symbﬁ, 
ö˛ude
 <
sys
/
sysma¸os
.
h
>\
n
\

57 
dúe˘ly
. 
If
 
you
 
did
 
nŸ
 
öãnd
 
to
 
u£
 
a
 
sy°em
-
deföed
 
ma¸o
\
n
\

58 #symbﬁ, 
you
 
should
 
undeföe
 
ô
 
a·î
 
ö˛udög
 <
sys
/
ty≥s
.
h
>.)

	)

62 
	#__SYSMACROS_DM1
(...Ë
	`__glibc_ma¸o_w¨nög
 (#__VA_ARGS__)

	)

64 
	#__SYSMACROS_DECL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

65 
πy≥
 
gnu_dev_
##
«me
 
¥Ÿo
 
__THROW
 
__©åibuã_c⁄°__
;

	)

67 
	#__SYSMACROS_IMPL_TEMPL
(
πy≥
, 
«me
, 
¥Ÿo
) \

68 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 
πy≥
 \

69 
	`__NTH
 (
gnu_dev_
##
«me
 
¥Ÿo
)

	)

71 
__BEGIN_DECLS


73 
	$__SYSMACROS_DECLARE_MAJOR
 (
__SYSMACROS_DECL_TEMPL
)

74 
	$__SYSMACROS_DECLARE_MINOR
 (
__SYSMACROS_DECL_TEMPL
)

75 
	$__SYSMACROS_DECLARE_MAKEDEV
 (
__SYSMACROS_DECL_TEMPL
)

77 #ifde‡
__USE_EXTERN_INLINES


79 
	$__SYSMACROS_DEFINE_MAJOR
 (
__SYSMACROS_IMPL_TEMPL
)

80 
	$__SYSMACROS_DEFINE_MINOR
 (
__SYSMACROS_IMPL_TEMPL
)

81 
	$__SYSMACROS_DEFINE_MAKEDEV
 (
__SYSMACROS_IMPL_TEMPL
)

85 
__END_DECLS


89 #i‚de‡
__SYSMACROS_NEED_IMPLEMENTATION


90 #unde‡
__SYSMACROS_DECL_TEMPL


91 #unde‡
__SYSMACROS_IMPL_TEMPL


92 #unde‡
__SYSMACROS_DECLARE_MAJOR


93 #unde‡
__SYSMACROS_DECLARE_MINOR


94 #unde‡
__SYSMACROS_DECLARE_MAKEDEV


95 #unde‡
__SYSMACROS_DEFINE_MAJOR


96 #unde‡
__SYSMACROS_DEFINE_MINOR


97 #unde‡
__SYSMACROS_DEFINE_MAKEDEV


100 #ifde‡
__SYSMACROS_DEPRECATED_INCLUSION


101 
	#maj‹
(
dev
Ë
	`__SYSMACROS_DM
 (
maj‹
Ë
	`gnu_dev_maj‹
 (dev)

	)

102 
	#mö‹
(
dev
Ë
	`__SYSMACROS_DM
 (
mö‹
Ë
	`gnu_dev_mö‹
 (dev)

	)

103 
	#makedev
(
maj
, 
mö
Ë
	`__SYSMACROS_DM
 (
makedev
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

105 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

106 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

107 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/time_t.h
>

25 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

27 #i‚de‡
__su£c⁄ds_t_deföed


28 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

29 
	#__su£c⁄ds_t_deföed


	)

32 
	~<sys/£À˘.h
>

34 
	g__BEGIN_DECLS


36 #ifde‡
__USE_GNU


38 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

39 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

40 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

41 }

	)

42 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

43 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

44 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

45 }

	)

49 #ifde‡
__USE_MISC


52 
	stimez⁄e


54 
	mtz_möuãswe°
;

55 
	mtz_d°time
;

58 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

60 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

68 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

69 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

71 #ifde‡
__USE_MISC


74 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

75 c⁄° 
timez⁄e
 *
__tz
)

76 
__THROW
;

82 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

83 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

88 
	e__ôimî_which


91 
ITIMER_REAL
 = 0,

92 
	#ITIMER_REAL
 
ITIMER_REAL


	)

94 
ITIMER_VIRTUAL
 = 1,

95 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

98 
ITIMER_PROF
 = 2

99 
	#ITIMER_PROF
 
ITIMER_PROF


	)

104 
	sôimîvÆ


107 
timevÆ
 
ô_öãrvÆ
;

109 
timevÆ
 
ô_vÆue
;

112 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


115 
__ôimî_which
 
	t__ôimî_which_t
;

117 
	t__ôimî_which_t
;

122 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

123 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

128 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

129 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

130 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

135 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_MISC


140 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

144 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

147 #ifde‡
__USE_GNU


151 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

152 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

156 #ifde‡
__USE_MISC


159 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

160 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

161 
	#timîcmp
(
a
, 
b
, 
CMP
) \

162 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

163 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

164 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

165 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

167 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

168 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

169 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

171 ++(
ªsu…
)->
tv_£c
; \

172 (
ªsu…
)->
tv_u£c
 -= 1000000; \

174 
	}
} 0)

	)

175 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

177 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

178 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

179 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

180 --(
ªsu…
)->
tv_£c
; \

181 (
ªsu…
)->
tv_u£c
 += 1000000; \

183 } 0)

	)

186 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	~<bôs/ty≥s/˛ock_t.h
>

129 
	~<bôs/ty≥s/˛ockid_t.h
>

130 
	~<bôs/ty≥s/time_t.h
>

131 
	~<bôs/ty≥s/timî_t.h
>

133 #ifde‡
__USE_XOPEN


134 #i‚de‡
__u£c⁄ds_t_deföed


135 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

136 
	#__u£c⁄ds_t_deföed


	)

138 #i‚de‡
__su£c⁄ds_t_deföed


139 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

140 
	#__su£c⁄ds_t_deföed


	)

144 
	#__√ed_size_t


	)

145 
	~<°ddef.h
>

147 #ifde‡
__USE_MISC


149 
	tul⁄g
;

150 
	tush‹t
;

151 
	tuöt
;

156 #i‡!
__GNUC_PREREQ
 (2, 7)

159 #i‚de‡
__öt8_t_deföed


160 
	#__öt8_t_deföed


	)

161 
	töt8_t
;

162 
	töt16_t
;

163 
	töt32_t
;

164 #i‡
__WORDSIZE
 == 64

165 
	töt64_t
;

167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__WORDSIZE
 == 64

176 
	tu_öt64_t
;

178 
__exãnsi⁄__
 
	tu_öt64_t
;

181 
	tªgi°î_t
;

186 
	#__ötN_t
(
N
, 
MODE
) \

187 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

188 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

189 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

191 #i‚de‡
	t__öt8_t_deföed


192 
	t__öt8_t_deföed


	)

193 
	t__ötN_t
 (8, 
	t__QI__
);

194 
__ötN_t
 (16, 
__HI__
);

195 
__ötN_t
 (32, 
__SI__
);

196 
__ötN_t
 (64, 
__DI__
);

199 
__u_ötN_t
 (8, 
__QI__
);

200 
__u_ötN_t
 (16, 
__HI__
);

201 
__u_ötN_t
 (32, 
__SI__
);

202 
__u_ötN_t
 (64, 
__DI__
);

204 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

210 
	#__BIT_TYPES_DEFINED__
 1

	)

213 #ifdef 
__USE_MISC


215 
	~<ídün.h
>

218 
	~<sys/£À˘.h
>

225 
	#__SYSMACROS_DEPRECATED_INCLUSION


	)

226 
	~<sys/sysma¸os.h
>

227 #unde‡
__SYSMACROS_DEPRECATED_INCLUSION


231 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

232 && !
deföed
 
__blksize_t_deföed


233 
__blksize_t
 
	tblksize_t
;

234 
	#__blksize_t_deföed


	)

238 #i‚de‡
__USE_FILE_OFFSET64


239 #i‚de‡
__blk˙t_t_deföed


240 
__blk˙t_t
 
	tblk˙t_t
;

241 
	#__blk˙t_t_deföed


	)

243 #i‚de‡
__fsblk˙t_t_deföed


244 
__fsblk˙t_t
 
	tfsblk˙t_t
;

245 
	#__fsblk˙t_t_deföed


	)

247 #i‚de‡
__fsfû˙t_t_deföed


248 
__fsfû˙t_t
 
	tfsfû˙t_t
;

249 
	#__fsfû˙t_t_deföed


	)

252 #i‚de‡
__blk˙t_t_deföed


253 
__blk˙t64_t
 
	tblk˙t_t
;

254 
	#__blk˙t_t_deföed


	)

256 #i‚de‡
__fsblk˙t_t_deföed


257 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

258 
	#__fsblk˙t_t_deföed


	)

260 #i‚de‡
__fsfû˙t_t_deföed


261 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

262 
	#__fsfû˙t_t_deföed


	)

266 #ifde‡
__USE_LARGEFILE64


267 
__blk˙t64_t
 
	tblk˙t64_t
;

268 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

269 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

274 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


275 
	~<bôs/±hªadty≥s.h
>

278 
	g__END_DECLS


	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_MISC


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

38 
	~<bôs/waô°©us.h
>

40 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

41 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

42 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

43 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

44 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

45 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

46 #ifde‡
__WIFCONTINUED


47 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

51 #ifdef 
__USE_MISC


52 
	#WCOREFLAG
 
__WCOREFLAG


	)

53 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (°©us)

	)

54 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

55 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

63 
__pid_t
 
waô
 (*
__°©_loc
);

65 #ifdef 
__USE_MISC


67 
	#WAIT_ANY
 (-1Ë

	)

68 
	#WAIT_MYPGRP
 0

	)

86 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

88 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


89 #i‚de‡
__id_t_deföed


90 
	~<bôs/ty≥s.h
>

91 
__id_t
 
	tid_t
;

92 
	#__id_t_deföed


	)

95 
	#__√ed_sigöfo_t


	)

96 
	~<bôs/sigöfo.h
>

109 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

110 
__›ti⁄s
);

113 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


116 
	grußge
;

123 
__pid_t
 
	$waô3
 (*
__°©_loc
, 
__›ti⁄s
,

124 
rußge
 * 
__ußge
Ë
__THROWNL
;

127 #ifde‡
__USE_MISC


129 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, *
__°©_loc
, 
__›ti⁄s
,

130 
rußge
 *
__ußge
Ë
__THROWNL
;

134 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<xloˇÀ.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


70 
__BEGIN_NAMESPACE_STD


73 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

89 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

90 c⁄° *
__ª°ri˘
 
__f‹m©
,

91 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 
__END_NAMESPACE_STD


94 #ifde‡
__USE_XOPEN


97 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

98 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

99 
__THROW
;

102 #ifde‡
__USE_XOPEN2K8


106 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

107 c⁄° *
__ª°ri˘
 
__f‹m©
,

108 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

109 
__loˇÀ_t
 
__loc
Ë
__THROW
;

112 #ifde‡
__USE_GNU


113 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

114 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

115 
__loˇÀ_t
 
__loc
Ë
__THROW
;

119 
__BEGIN_NAMESPACE_STD


122 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

126 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

127 
__END_NAMESPACE_STD


129 #ifde‡
__USE_POSIX


132 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

133 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

137 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

138 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

141 
__BEGIN_NAMESPACE_STD


144 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

147 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

148 
__END_NAMESPACE_STD


150 #ifde‡
__USE_POSIX


155 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

156 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 *
__ª°ri˘
 
__buf
Ë
__THROW
;

165 *
__tz«me
[2];

166 
__daylight
;

167 
__timez⁄e
;

170 #ifdef 
__USE_POSIX


172 *
tz«me
[2];

176 
	$tz£t
 (Ë
__THROW
;

179 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


180 
daylight
;

181 
timez⁄e
;

184 #ifde‡
__USE_MISC


187 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

193 
	#__i¶óp
(
yór
) \

194 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

197 #ifde‡
__USE_MISC


202 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

205 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

208 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

212 #ifde‡
__USE_POSIX199309


217 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

218 
time•ec
 *
__ªmaöög
);

222 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

225 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

228 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

229 
__THROW
;

231 #ifde‡
__USE_XOPEN2K


236 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

237 c⁄° 
time•ec
 *
__ªq
,

238 
time•ec
 *
__ªm
);

241 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

246 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

247 
sigevít
 *
__ª°ri˘
 
__evp
,

248 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

251 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

254 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

255 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

256 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

259 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

260 
__THROW
;

263 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

267 #ifde‡
__USE_ISOC11


269 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

270 
__THROW
 
	`__n⁄nuŒ
 ((1));

274 #ifde‡
__USE_XOPEN_EXTENDED


286 
gëd©e_îr
;

295 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

298 #ifde‡
__USE_GNU


309 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

310 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

313 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1160 #ifde‡
__USE_MISC


1163 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1167 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1168 
	~<bôs/uni°d.h
>

1171 
__END_DECLS


	@/usr/include/valgrind/memcheck.h

60 #i‚de‡
__MEMCHECK_H


61 
	#__MEMCHECK_H


	)

72 
	~"vÆgröd.h
"

80 
	mVG_USERREQ__MAKE_MEM_NOACCESS
 = 
VG_USERREQ_TOOL_BASE
('M','C'),

81 
	mVG_USERREQ__MAKE_MEM_UNDEFINED
,

82 
	mVG_USERREQ__MAKE_MEM_DEFINED
,

83 
	mVG_USERREQ__DISCARD
,

84 
	mVG_USERREQ__CHECK_MEM_IS_ADDRESSABLE
,

85 
	mVG_USERREQ__CHECK_MEM_IS_DEFINED
,

86 
	mVG_USERREQ__DO_LEAK_CHECK
,

87 
	mVG_USERREQ__COUNT_LEAKS
,

89 
	mVG_USERREQ__GET_VBITS
,

90 
	mVG_USERREQ__SET_VBITS
,

92 
	mVG_USERREQ__CREATE_BLOCK
,

94 
	mVG_USERREQ__MAKE_MEM_DEFINED_IF_ADDRESSABLE
,

97 
	mVG_USERREQ__COUNT_LEAK_BLOCKS
,

99 
	mVG_USERREQ__ENABLE_ADDR_ERROR_REPORTING_IN_RANGE
,

100 
	mVG_USERREQ__DISABLE_ADDR_ERROR_REPORTING_IN_RANGE
,

103 
	m_VG_USERREQ__MEMCHECK_RECORD_OVERLAP_ERROR


104 
VG_USERREQ_TOOL_BASE
('M','C') + 256

105 } 
	tVg_MemCheckClõ¡Reque°
;

112 
	#VALGRIND_MAKE_MEM_NOACCESS
(
_qzz_addr
,
_qzz_Àn
) \

113 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

114 
VG_USERREQ__MAKE_MEM_NOACCESS
, \

115 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

119 
	#VALGRIND_MAKE_MEM_UNDEFINED
(
_qzz_addr
,
_qzz_Àn
) \

120 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

121 
VG_USERREQ__MAKE_MEM_UNDEFINED
, \

122 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

126 
	#VALGRIND_MAKE_MEM_DEFINED
(
_qzz_addr
,
_qzz_Àn
) \

127 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

128 
VG_USERREQ__MAKE_MEM_DEFINED
, \

129 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

134 
	#VALGRIND_MAKE_MEM_DEFINED_IF_ADDRESSABLE
(
_qzz_addr
,
_qzz_Àn
) \

135 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

136 
VG_USERREQ__MAKE_MEM_DEFINED_IF_ADDRESSABLE
, \

137 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

143 
	#VALGRIND_CREATE_BLOCK
(
_qzz_addr
,
_qzz_Àn
, 
_qzz_desc
) \

144 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

145 
VG_USERREQ__CREATE_BLOCK
, \

146 (
_qzz_addr
), (
_qzz_Àn
), (
_qzz_desc
), \

147 0, 0)

	)

151 
	#VALGRIND_DISCARD
(
_qzz_blködex
) \

152 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

153 
VG_USERREQ__DISCARD
, \

154 0, (
_qzz_blködex
), 0, 0, 0)

	)

163 
	#VALGRIND_CHECK_MEM_IS_ADDRESSABLE
(
_qzz_addr
,
_qzz_Àn
) \

164 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

165 
VG_USERREQ__CHECK_MEM_IS_ADDRESSABLE
, \

166 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

172 
	#VALGRIND_CHECK_MEM_IS_DEFINED
(
_qzz_addr
,
_qzz_Àn
) \

173 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

174 
VG_USERREQ__CHECK_MEM_IS_DEFINED
, \

175 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

182 
	#VALGRIND_CHECK_VALUE_IS_DEFINED
(
__lvÆue
) \

183 
	`VALGRIND_CHECK_MEM_IS_DEFINED
( \

184 (vﬁ©ûê*)&(
__lvÆue
), \

185 ()( (
__lvÆue
)))

	)

189 
	#VALGRIND_DO_LEAK_CHECK
 \

190 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DO_LEAK_CHECK
, \

191 0, 0, 0, 0, 0)

	)

196 
	#VALGRIND_DO_ADDED_LEAK_CHECK
 \

197 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DO_LEAK_CHECK
, \

198 0, 1, 0, 0, 0)

	)

203 
	#VALGRIND_DO_CHANGED_LEAK_CHECK
 \

204 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DO_LEAK_CHECK
, \

205 0, 2, 0, 0, 0)

	)

208 
	#VALGRIND_DO_QUICK_LEAK_CHECK
 \

209 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DO_LEAK_CHECK
, \

210 1, 0, 0, 0, 0)

	)

214 
	#VALGRIND_COUNT_LEAKS
(
Àaked
, 
dubious
, 
ªachabÀ
, 
suµªs£d
) \

222 
_qzz_Àaked
 = 0, 
_qzz_dubious
 = 0; \

223 
_qzz_ªachabÀ
 = 0, 
_qzz_suµªs£d
 = 0; \

224 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
( \

225 
VG_USERREQ__COUNT_LEAKS
, \

226 &
_qzz_Àaked
, &
_qzz_dubious
, \

227 &
_qzz_ªachabÀ
, &
_qzz_suµªs£d
, 0); \

228 
Àaked
 = 
_qzz_Àaked
; \

229 
dubious
 = 
_qzz_dubious
; \

230 
ªachabÀ
 = 
_qzz_ªachabÀ
; \

231 
suµªs£d
 = 
_qzz_suµªs£d
; \

232 }

	)

236 
	#VALGRIND_COUNT_LEAK_BLOCKS
(
Àaked
, 
dubious
, 
ªachabÀ
, 
suµªs£d
) \

244 
_qzz_Àaked
 = 0, 
_qzz_dubious
 = 0; \

245 
_qzz_ªachabÀ
 = 0, 
_qzz_suµªs£d
 = 0; \

246 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
( \

247 
VG_USERREQ__COUNT_LEAK_BLOCKS
, \

248 &
_qzz_Àaked
, &
_qzz_dubious
, \

249 &
_qzz_ªachabÀ
, &
_qzz_suµªs£d
, 0); \

250 
Àaked
 = 
_qzz_Àaked
; \

251 
dubious
 = 
_qzz_dubious
; \

252 
ªachabÀ
 = 
_qzz_ªachabÀ
; \

253 
suµªs£d
 = 
_qzz_suµªs£d
; \

254 }

	)

266 
	#VALGRIND_GET_VBITS
(
zza
,
zzvbôs
,
zznbyãs
) \

267 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

268 
VG_USERREQ__GET_VBITS
, \

269 (c⁄° *)(
zza
), \

270 (*)(
zzvbôs
), \

271 (
zznbyãs
), 0, 0)

	)

282 
	#VALGRIND_SET_VBITS
(
zza
,
zzvbôs
,
zznbyãs
) \

283 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

284 
VG_USERREQ__SET_VBITS
, \

285 (c⁄° *)(
zza
), \

286 (c⁄° *)(
zzvbôs
), \

287 (
zznbyãs
), 0, 0 )

	)

291 
	#VALGRIND_DISABLE_ADDR_ERROR_REPORTING_IN_RANGE
(
_qzz_addr
,
_qzz_Àn
) \

292 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

293 
VG_USERREQ__DISABLE_ADDR_ERROR_REPORTING_IN_RANGE
, \

294 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

296 
	#VALGRIND_ENABLE_ADDR_ERROR_REPORTING_IN_RANGE
(
_qzz_addr
,
_qzz_Àn
) \

297 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

298 
VG_USERREQ__ENABLE_ADDR_ERROR_REPORTING_IN_RANGE
, \

299 (
_qzz_addr
), (
_qzz_Àn
), 0, 0, 0)

	)

	@/usr/include/valgrind/valgrind.h

73 #i‚de‡
__VALGRIND_H


74 
	#__VALGRIND_H


	)

91 
	#__VALGRIND_MAJOR__
 3

	)

92 
	#__VALGRIND_MINOR__
 13

	)

95 
	~<°d¨g.h
>

111 #unde‡
PLAT_x86_d¨wö


112 #unde‡
PLAT_amd64_d¨wö


113 #unde‡
PLAT_x86_wö32


114 #unde‡
PLAT_amd64_wö64


115 #unde‡
PLAT_x86_löux


116 #unde‡
PLAT_amd64_löux


117 #unde‡
PLAT_µc32_löux


118 #unde‡
PLAT_µc64be_löux


119 #unde‡
PLAT_µc64À_löux


120 #unde‡
PLAT_¨m_löux


121 #unde‡
PLAT_¨m64_löux


122 #unde‡
PLAT_s390x_löux


123 #unde‡
PLAT_mùs32_löux


124 #unde‡
PLAT_mùs64_löux


125 #unde‡
PLAT_x86_sﬁ¨is


126 #unde‡
PLAT_amd64_sﬁ¨is


129 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__i386__
)

130 
	#PLAT_x86_d¨wö
 1

	)

131 #ñi‡
deföed
(
__APPLE__
Ë&& deföed(
__x86_64__
)

132 
	#PLAT_amd64_d¨wö
 1

	)

133 #ñi‡(
deföed
(
__MINGW32__
Ë&& !deföed(
__MINGW64__
)) \

134 || 
deföed
(
__CYGWIN32__
) \

135 || (
deföed
(
_WIN32
Ë&& 
	$deföed
(
_M_IX86
))

136 
	#PLAT_x86_wö32
 1

	)

137 #ñi‡
	`deföed
(
__MINGW64__
) \

138 || (
	`deföed
(
_WIN64
Ë&& 
	$deföed
(
_M_X64
))

139 
	#PLAT_amd64_wö64
 1

	)

140 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__i386__
)

141 
	#PLAT_x86_löux
 1

	)

142 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__x86_64__
Ë&& !deföed(
__ILP32__
)

143 
	#PLAT_amd64_löux
 1

	)

144 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__powîpc__
Ë&& !deföed(
__powîpc64__
)

145 
	#PLAT_µc32_löux
 1

	)

146 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__powîpc__
Ë&& deföed(
__powîpc64__
Ë&& 
_CALL_ELF
 != 2

148 
	#PLAT_µc64be_löux
 1

	)

149 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__powîpc__
Ë&& deföed(
__powîpc64__
Ë&& 
_CALL_ELF
 == 2

151 
	#PLAT_µc64À_löux
 1

	)

152 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__¨m__
Ë&& !deföed(
__Ørch64__
)

153 
	#PLAT_¨m_löux
 1

	)

154 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__Ørch64__
Ë&& !deföed(
__¨m__
)

155 
	#PLAT_¨m64_löux
 1

	)

156 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__s390__
Ë&& deföed(
__s390x__
)

157 
	#PLAT_s390x_löux
 1

	)

158 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__mùs__
Ë&& (
__mùs
==64)

159 
	#PLAT_mùs64_löux
 1

	)

160 #ñi‡
	`deföed
(
__löux__
Ë&& deföed(
__mùs__
Ë&& (
__mùs
!=64)

161 
	#PLAT_mùs32_löux
 1

	)

162 #ñi‡
	`deföed
(
__sun
Ë&& deföed(
__i386__
)

163 
	#PLAT_x86_sﬁ¨is
 1

	)

164 #ñi‡
	`deföed
(
__sun
Ë&& deföed(
__x86_64__
)

165 
	#PLAT_amd64_sﬁ¨is
 1

	)

169 #i‡!
	`deföed
(
NVALGRIND
)

170 
	#NVALGRIND
 1

	)

193 
	#VALGRIND_DO_CLIENT_REQUEST
(
_zzq_ævÆ
, 
_zzq_deÁu…
, \

194 
_zzq_ªque°
, 
_zzq_¨g1
, 
_zzq_¨g2
, \

195 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

196 dÿ{ (
_zzq_ævÆ
Ë
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
((
_zzq_deÁu…
), \

197 (
_zzq_ªque°
), (
_zzq_¨g1
), (
_zzq_¨g2
), \

198 (
_zzq_¨g3
), (
_zzq_¨g4
), (
_zzq_¨g5
)); 
	}
} 0)

	)

200 
	#VALGRIND_DO_CLIENT_REQUEST_STMT
(
_zzq_ªque°
, 
_zzq_¨g1
, \

201 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

202 dÿ{ (Ë
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

203 (
_zzq_ªque°
), (
_zzq_¨g1
), (
_zzq_¨g2
), \

204 (
_zzq_¨g3
), (
_zzq_¨g4
), (
_zzq_¨g5
)); } 0)

	)

206 #i‡
deföed
(
NVALGRIND
)

211 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

212 
_zzq_deÁu…
, 
_zzq_ªque°
, \

213 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

214 (
_zzq_deÁu…
)

	)

255 #i‡
deföed
(
PLAT_x86_löux
Ë|| deföed(
PLAT_x86_d¨wö
) \

256 || (
deföed
(
PLAT_x86_wö32
Ë&& deföed(
__GNUC__
)) \

257 || 
	$deföed
(
PLAT_x86_sﬁ¨is
)

261 
ƒaddr
;

263 
	tOrigFn
;

265 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

267 "rﬁ»$29, %%edò;Ñﬁ»$19, %%edi\n\t"

	)

269 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

270 
_zzq_deÁu…
, 
_zzq_ªque°
, \

271 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

272 
__exãnsi⁄__
 \

273 ({vﬁ©ûê
_zzq_¨gs
[6]; \

274 vﬁ©ûê
_zzq_ªsu…
; \

275 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

276 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

277 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

278 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

279 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

280 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

281 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

284 : "=d" (
_zzq_ªsu…
) \

285 : "a" (&
_zzq_¨gs
[0]), "0" (
_zzq_deÁu…
) \

288 
_zzq_ªsu…
; \

289 
	}
})

	)

291 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

292 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

293 vﬁ©ûê
__addr
; \

294 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

297 : "˜" (
__addr
) \

301 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

302 }

	)

304 
	#VALGRIND_CALL_NOREDIR_EAX
 \

305 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

307 "xchg»%%edx,%%edx\n\t"

	)

309 
	#VALGRIND_VEX_INJECT_IR
() \

311 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

315 } 0)

	)

318 || 
	gPLAT_x86_sﬁ¨is
 */

322 #i‡
deföed
(
PLAT_x86_wö32
Ë&& !deföed(
__GNUC__
)

326 
	mƒaddr
;

328 
	tOrigFn
;

330 #i‡
deföed
(
_MSC_VER
)

332 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

333 
__asm
 
rﬁ
 
edi
, 3 __asmÑolÉdi, 13 \

334 
__asm
 
rﬁ
 
edi
, 29 __asmÑﬁÉdi, 19

	)

336 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

337 
_zzq_deÁu…
, 
_zzq_ªque°
, \

338 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

339 
	`vÆgröd_do_˛õ¡_ªque°_ex¥
((
uöçå_t
)(
_zzq_deÁu…
), \

340 (
uöçå_t
)(
_zzq_ªque°
), (uöçå_t)(
_zzq_¨g1
), \

341 (
uöçå_t
)(
_zzq_¨g2
), (uöçå_t)(
_zzq_¨g3
), \

342 (
uöçå_t
)(
_zzq_¨g4
), (uöçå_t)(
_zzq_¨g5
))

	)

344 
__ölöe
 
uöçå_t


345 
	$vÆgröd_do_˛õ¡_ªque°_ex¥
(
uöçå_t
 
_zzq_deÁu…
, uöçå_à
_zzq_ªque°
,

346 
uöçå_t
 
_zzq_¨g1
, uöçå_à
_zzq_¨g2
,

347 
uöçå_t
 
_zzq_¨g3
, uöçå_à
_zzq_¨g4
,

348 
uöçå_t
 
_zzq_¨g5
)

350 vﬁ©ûê
uöçå_t
 
_zzq_¨gs
[6];

351 vﬁ©ûê
_zzq_ªsu…
;

352 
_zzq_¨gs
[0] = (
uöçå_t
)(
_zzq_ªque°
);

353 
_zzq_¨gs
[1] = (
uöçå_t
)(
_zzq_¨g1
);

354 
_zzq_¨gs
[2] = (
uöçå_t
)(
_zzq_¨g2
);

355 
_zzq_¨gs
[3] = (
uöçå_t
)(
_zzq_¨g3
);

356 
_zzq_¨gs
[4] = (
uöçå_t
)(
_zzq_¨g4
);

357 
_zzq_¨gs
[5] = (
uöçå_t
)(
_zzq_¨g5
);

358 
__asm
 { __asm 
Àa
 
óx
, 
_zzq_¨gs
 __asm 
mov
 
edx
, 
_zzq_deÁu…


359 
__SPECIAL_INSTRUCTION_PREAMBLE


361 
__asm
 
xchg
 
ebx
,ebx

362 
__asm
 
mov
 
_zzq_ªsu…
, 
edx


364  
_zzq_ªsu…
;

365 
	}
}

367 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

368 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

369 vﬁ©ûê
__addr
; \

370 
__asm
 { 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

372 
__asm
 
xchg
 
ecx
,ecx \

373 
__asm
 
mov
 
__addr
, 
óx
 \

375 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

376 }

	)

378 
	#VALGRIND_CALL_NOREDIR_EAX
 
ERROR


	)

380 
	#VALGRIND_VEX_INJECT_IR
() \

382 
__asm
 { 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

383 
__asm
 
xchg
 
edi
,edi \

385 } 0)

	)

388 #îr‹ 
Unsuµ‹ãd
 
compûî
.

395 #i‡
deföed
(
PLAT_amd64_löux
Ë|| deföed(
PLAT_amd64_d¨wö
) \

396 || 
deföed
(
PLAT_amd64_sﬁ¨is
) \

397 || (
deföed
(
PLAT_amd64_wö64
Ë&& 
	$deföed
(
__GNUC__
))

401 
ƒaddr
;

403 
	tOrigFn
;

405 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

407 "rﬁq $61, %%rdò;Ñﬁq $51, %%rdi\n\t"

	)

409 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

410 
_zzq_deÁu…
, 
_zzq_ªque°
, \

411 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

412 
__exãnsi⁄__
 \

413 ({ vﬁ©ûê
_zzq_¨gs
[6]; \

414 vﬁ©ûê
_zzq_ªsu…
; \

415 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

416 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

417 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

418 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

419 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

420 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

421 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

424 : "=d" (
_zzq_ªsu…
) \

425 : "a" (&
_zzq_¨gs
[0]), "0" (
_zzq_deÁu…
) \

428 
_zzq_ªsu…
; \

429 
	}
})

	)

431 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

432 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

433 vﬁ©ûê
__addr
; \

434 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

437 : "˜" (
__addr
) \

441 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

442 }

	)

444 
	#VALGRIND_CALL_NOREDIR_RAX
 \

445 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

447 "xchgq %%rdx,%%rdx\n\t"

	)

449 
	#VALGRIND_VEX_INJECT_IR
() \

451 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

455 } 0)

	)

461 #i‡
deföed
(
PLAT_amd64_wö64
Ë&& !deföed(
__GNUC__
)

463 #îr‹ 
Unsuµ‹ãd
 
compûî
.

469 #i‡
deföed
(
PLAT_µc32_löux
)

473 
	mƒaddr
;

475 
	tOrigFn
;

477 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

479 "æwöm 0,0,29,0,31 ;Ñlwöm 0,0,19,0,31\n\t"

	)

481 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

482 
_zzq_deÁu…
, 
_zzq_ªque°
, \

483 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

485 
__exãnsi⁄__
 \

486 ({ 
_zzq_¨gs
[6]; \

487 
_zzq_ªsu…
; \

488 * 
_zzq_±r
; \

489 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

490 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

491 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

492 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

493 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

494 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

495 
_zzq_±r
 = 
_zzq_¨gs
; \

496 
__asm__
 volatile("mr 3,%1\n\t" \

498 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

502 : "=b" (
_zzq_ªsu…
) \

503 : "b" (
_zzq_deÁu…
), "b" (
_zzq_±r
) \

505 
_zzq_ªsu…
; \

506 })

	)

508 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

509 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

510 
__addr
; \

511 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

515 : "=b" (
__addr
) \

519 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

520 }

	)

522 
	#VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

523 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

525 "‹ 3,3,3\n\t"

	)

527 
	#VALGRIND_VEX_INJECT_IR
() \

529 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

532 } 0)

	)

538 #i‡
deföed
(
PLAT_µc64be_löux
)

542 
	mƒaddr
;

543 
	mr2
;

545 
	tOrigFn
;

547 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

549 "rŸldò0,0,61 ;ÑŸldò0,0,51\n\t"

	)

551 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

552 
_zzq_deÁu…
, 
_zzq_ªque°
, \

553 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

555 
__exãnsi⁄__
 \

556 ({ 
_zzq_¨gs
[6]; \

557 
_zzq_ªsu…
; \

558 * 
_zzq_±r
; \

559 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

560 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

561 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

562 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

563 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

564 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

565 
_zzq_±r
 = 
_zzq_¨gs
; \

566 
__asm__
 volatile("mr 3,%1\n\t" \

568 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

572 : "=b" (
_zzq_ªsu…
) \

573 : "b" (
_zzq_deÁu…
), "b" (
_zzq_±r
) \

575 
_zzq_ªsu…
; \

576 })

	)

578 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

579 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

580 
__addr
; \

581 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

585 : "=b" (
__addr
) \

589 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

590 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

594 : "=b" (
__addr
) \

598 
_zzq_‹ig
->
r2
 = 
__addr
; \

599 }

	)

601 
	#VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

602 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

604 "‹ 3,3,3\n\t"

	)

606 
	#VALGRIND_VEX_INJECT_IR
() \

608 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

611 } 0)

	)

615 #i‡
deföed
(
PLAT_µc64À_löux
)

619 
	mƒaddr
;

620 
	mr2
;

622 
	tOrigFn
;

624 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

626 "rŸldò0,0,61 ;ÑŸldò0,0,51\n\t"

	)

628 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

629 
_zzq_deÁu…
, 
_zzq_ªque°
, \

630 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

632 
__exãnsi⁄__
 \

633 ({ 
_zzq_¨gs
[6]; \

634 
_zzq_ªsu…
; \

635 * 
_zzq_±r
; \

636 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

637 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

638 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

639 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

640 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

641 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

642 
_zzq_±r
 = 
_zzq_¨gs
; \

643 
__asm__
 volatile("mr 3,%1\n\t" \

645 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

649 : "=b" (
_zzq_ªsu…
) \

650 : "b" (
_zzq_deÁu…
), "b" (
_zzq_±r
) \

652 
_zzq_ªsu…
; \

653 })

	)

655 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

656 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

657 
__addr
; \

658 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

662 : "=b" (
__addr
) \

666 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

667 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

671 : "=b" (
__addr
) \

675 
_zzq_‹ig
->
r2
 = 
__addr
; \

676 }

	)

678 
	#VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

679 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

681 "‹ 3,3,3\n\t"

	)

683 
	#VALGRIND_VEX_INJECT_IR
() \

685 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

688 } 0)

	)

694 #i‡
deföed
(
PLAT_¨m_löux
)

698 
	mƒaddr
;

700 
	tOrigFn
;

702 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

704 "movÑ12,Ñ12,Ñ‹ #29 ; movÑ12,Ñ12,Ñ‹ #19 \n\t"

	)

706 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

707 
_zzq_deÁu…
, 
_zzq_ªque°
, \

708 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

710 
__exãnsi⁄__
 \

711 ({vﬁ©ûê
_zzq_¨gs
[6]; \

712 vﬁ©ûê
_zzq_ªsu…
; \

713 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

714 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

715 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

716 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

717 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

718 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

719 
__asm__
 volatile("movÑ3, %1\n\t" \

721 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

725 : "Ù" (
_zzq_ªsu…
) \

726 : "r" (
_zzq_deÁu…
), "r" (&
_zzq_¨gs
[0]) \

728 
_zzq_ªsu…
; \

729 })

	)

731 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

732 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

733 
__addr
; \

734 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

738 : "Ù" (
__addr
) \

742 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

743 }

	)

745 
	#VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

746 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

748 "‹∏r12,Ñ12,Ñ12\n\t"

	)

750 
	#VALGRIND_VEX_INJECT_IR
() \

752 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

756 } 0)

	)

762 #i‡
deföed
(
PLAT_¨m64_löux
)

766 
	mƒaddr
;

768 
	tOrigFn
;

770 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

772 "r‹ x12, x12, #51 ;Ñ‹ x12, x12, #61 \n\t"

	)

774 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

775 
_zzq_deÁu…
, 
_zzq_ªque°
, \

776 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

778 
__exãnsi⁄__
 \

779 ({vﬁ©ûê
_zzq_¨gs
[6]; \

780 vﬁ©ûê
_zzq_ªsu…
; \

781 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

782 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

783 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

784 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

785 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

786 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

787 
__asm__
 volatile("mov x3, %1\n\t" \

789 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

793 : "Ù" (
_zzq_ªsu…
) \

794 : "r" (()(
_zzq_deÁu…
)), \

795 "r" (&
_zzq_¨gs
[0]) \

797 
_zzq_ªsu…
; \

798 })

	)

800 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

801 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

802 
__addr
; \

803 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

807 : "Ù" (
__addr
) \

811 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

812 }

	)

814 
	#VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

815 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

817 "‹∏x12, x12, x12\n\t"

	)

819 
	#VALGRIND_VEX_INJECT_IR
() \

821 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

825 } 0)

	)

831 #i‡
deföed
(
PLAT_s390x_löux
)

835 
	mƒaddr
;

837 
	tOrigFn
;

843 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

847 "Ã 3,3\n\t"

	)

849 
	#__CLIENT_REQUEST_CODE
 "Ã 2,2\n\t"

	)

850 
	#__GET_NR_CONTEXT_CODE
 "Ã 3,3\n\t"

	)

851 
	#__CALL_NO_REDIR_CODE
 "Ã 4,4\n\t"

	)

852 
	#__VEX_INJECT_IR_CODE
 "Ã 5,5\n\t"

	)

854 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

855 
_zzq_deÁu…
, 
_zzq_ªque°
, \

856 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

857 
__exãnsi⁄__
 \

858 ({vﬁ©ûê
_zzq_¨gs
[6]; \

859 vﬁ©ûê
_zzq_ªsu…
; \

860 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

861 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

862 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

863 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

864 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

865 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

866 
__asm__
 volatile( \

870 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

871 
__CLIENT_REQUEST_CODE
 \

874 : "=d" (
_zzq_ªsu…
) \

875 : "a" (&
_zzq_¨gs
[0]), "0" (
_zzq_deÁu…
) \

878 
_zzq_ªsu…
; \

879 })

	)

881 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

882 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

883 vﬁ©ûê
__addr
; \

884 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

885 
__GET_NR_CONTEXT_CODE
 \

887 : "˜" (
__addr
) \

891 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

892 }

	)

894 
	#VALGRIND_CALL_NOREDIR_R1
 \

895 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

896 
__CALL_NO_REDIR_CODE


	)

898 
	#VALGRIND_VEX_INJECT_IR
() \

900 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

901 
__VEX_INJECT_IR_CODE
); \

902 } 0)

	)

908 #i‡
deföed
(
PLAT_mùs32_löux
)

912 
	mƒaddr
;

914 
	tOrigFn
;

920 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

924 "§»$0, $0, 19\n\t"

	)

926 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

927 
_zzq_deÁu…
, 
_zzq_ªque°
, \

928 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

929 
__exãnsi⁄__
 \

930 ({ vﬁ©ûê
_zzq_¨gs
[6]; \

931 vﬁ©ûê
_zzq_ªsu…
; \

932 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

933 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

934 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

935 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

936 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

937 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

938 
__asm__
 volatile("move $11, %1\n\t" \

940 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

944 : "Ù" (
_zzq_ªsu…
) \

945 : "r" (
_zzq_deÁu…
), "r" (&
_zzq_¨gs
[0]) \

947 
_zzq_ªsu…
; \

948 })

	)

950 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

951 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

952 vﬁ©ûê
__addr
; \

953 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

957 : "Ù" (
__addr
) \

961 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

962 }

	)

964 
	#VALGRIND_CALL_NOREDIR_T9
 \

965 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

967 "‹ $15, $15, $15\n\t"

	)

969 
	#VALGRIND_VEX_INJECT_IR
() \

971 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

974 } 0)

	)

981 #i‡
deföed
(
PLAT_mùs64_löux
)

985 
	mƒaddr
;

987 
	tOrigFn
;

993 
	#__SPECIAL_INSTRUCTION_PREAMBLE
 \

995 "d¶»$0,$0,29 ; d¶»$0,$0,19\n\t"

	)

997 
	#VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

998 
_zzq_deÁu…
, 
_zzq_ªque°
, \

999 
_zzq_¨g1
, 
_zzq_¨g2
, 
_zzq_¨g3
, 
_zzq_¨g4
, 
_zzq_¨g5
) \

1000 
__exãnsi⁄__
 \

1001 ({ vﬁ©ûê
_zzq_¨gs
[6]; \

1002 vﬁ©ûê
_zzq_ªsu…
; \

1003 
_zzq_¨gs
[0] = ()(
_zzq_ªque°
); \

1004 
_zzq_¨gs
[1] = ()(
_zzq_¨g1
); \

1005 
_zzq_¨gs
[2] = ()(
_zzq_¨g2
); \

1006 
_zzq_¨gs
[3] = ()(
_zzq_¨g3
); \

1007 
_zzq_¨gs
[4] = ()(
_zzq_¨g4
); \

1008 
_zzq_¨gs
[5] = ()(
_zzq_¨g5
); \

1009 
__asm__
 volatile("move $11, %1\n\t" \

1011 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

1015 : "Ù" (
_zzq_ªsu…
) \

1016 : "r" (
_zzq_deÁu…
), "r" (&
_zzq_¨gs
[0]) \

1018 
_zzq_ªsu…
; \

1019 })

	)

1021 
	#VALGRIND_GET_NR_CONTEXT
(
_zzq_ævÆ
) \

1022 { vﬁ©ûê
OrigFn
* 
_zzq_‹ig
 = &(
_zzq_ævÆ
); \

1023 vﬁ©ûê
__addr
; \

1024 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

1028 : "Ù" (
__addr
) \

1031 
_zzq_‹ig
->
ƒaddr
 = 
__addr
; \

1032 }

	)

1034 
	#VALGRIND_CALL_NOREDIR_T9
 \

1035 
__SPECIAL_INSTRUCTION_PREAMBLE
 \

1037 "‹ $15, $15, $15\n\t"

	)

1039 
	#VALGRIND_VEX_INJECT_IR
() \

1041 
__asm__
 vﬁ©ûe(
__SPECIAL_INSTRUCTION_PREAMBLE
 \

1044 } 0)

	)

1084 
	#VG_CONCAT4
(
_Ø
,
_bb
,
_cc
,
_dd
Ë_Ø##_bb##_cc##
	)
_dd

1086 
	#I_WRAP_SONAME_FNNAME_ZU
(
s⁄ame
,
‚«me
) \

1087 
	`VG_CONCAT4
(
_vgw00000ZU_
,
s⁄ame
,
_
,
‚«me
)

	)

1089 
	#I_WRAP_SONAME_FNNAME_ZZ
(
s⁄ame
,
‚«me
) \

1090 
	`VG_CONCAT4
(
_vgw00000ZZ_
,
s⁄ame
,
_
,
‚«me
)

	)

1096 
	#VALGRIND_GET_ORIG_FN
(
_lvÆ
Ë
	`VALGRIND_GET_NR_CONTEXT
(_lvÆ)

	)

1104 
	#I_REPLACE_SONAME_FNNAME_ZU
(
s⁄ame
,
‚«me
) \

1105 
	`VG_CONCAT4
(
_vgr00000ZU_
,
s⁄ame
,
_
,
‚«me
)

	)

1107 
	#I_REPLACE_SONAME_FNNAME_ZZ
(
s⁄ame
,
‚«me
) \

1108 
	`VG_CONCAT4
(
_vgr00000ZZ_
,
s⁄ame
,
_
,
‚«me
)

	)

1113 
	#CALL_FN_v_v
(
‚±r
) \

1114 dÿ{ vﬁ©ûê
_junk
; \

1115 
	`CALL_FN_W_v
(
_junk
,
‚±r
); } 0)

	)

1117 
	#CALL_FN_v_W
(
‚±r
, 
¨g1
) \

1118 dÿ{ vﬁ©ûê
_junk
; \

1119 
	`CALL_FN_W_W
(
_junk
,
‚±r
,
¨g1
); } 0)

	)

1121 
	#CALL_FN_v_WW
(
‚±r
, 
¨g1
,
¨g2
) \

1122 dÿ{ vﬁ©ûê
_junk
; \

1123 
	`CALL_FN_W_WW
(
_junk
,
‚±r
,
¨g1
,
¨g2
); } 0)

	)

1125 
	#CALL_FN_v_WWW
(
‚±r
, 
¨g1
,
¨g2
,
¨g3
) \

1126 dÿ{ vﬁ©ûê
_junk
; \

1127 
	`CALL_FN_W_WWW
(
_junk
,
‚±r
,
¨g1
,
¨g2
,
¨g3
); } 0)

	)

1129 
	#CALL_FN_v_WWWW
(
‚±r
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

1130 dÿ{ vﬁ©ûê
_junk
; \

1131 
	`CALL_FN_W_WWWW
(
_junk
,
‚±r
,
¨g1
,
¨g2
,
¨g3
,
¨g4
); } 0)

	)

1133 
	#CALL_FN_v_5W
(
‚±r
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

1134 dÿ{ vﬁ©ûê
_junk
; \

1135 
	`CALL_FN_W_5W
(
_junk
,
‚±r
,
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
); } 0)

	)

1137 
	#CALL_FN_v_6W
(
‚±r
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

1138 dÿ{ vﬁ©ûê
_junk
; \

1139 
	`CALL_FN_W_6W
(
_junk
,
‚±r
,
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
); } 0)

	)

1141 
	#CALL_FN_v_7W
(
‚±r
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
,
¨g7
) \

1142 dÿ{ vﬁ©ûê
_junk
; \

1143 
	`CALL_FN_W_7W
(
_junk
,
‚±r
,
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
,
¨g7
); } 0)

	)

1147 #i‡
deföed
(
PLAT_x86_löux
Ë|| deföed(
PLAT_x86_d¨wö
) \

1148 || 
	$deföed
(
PLAT_x86_sﬁ¨is
)

1152 
	#__CALLER_SAVED_REGS
 "ecx", "edx"

	)

1159 
	#VALGRIND_ALIGN_STACK
 \

1161 "™d»$0xfffffff0,%%e•\n\t"

	)

1162 
	#VALGRIND_RESTORE_STACK
 \

1163 "mov»%%edi,%%e•\n\t"

	)

1168 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

1170 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1171 vﬁ©ûê
_¨gvec
[1]; \

1172 vﬁ©ûê
_ªs
; \

1173 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1174 
__asm__
 volatile( \

1175 
VALGRIND_ALIGN_STACK
 \

1177 
VALGRIND_CALL_NOREDIR_EAX
 \

1178 
VALGRIND_RESTORE_STACK
 \

1179 : "˜" (
_ªs
) \

1180 : "a" (&
_¨gvec
[0]) \

1181 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1183 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1184 
	}
} 0)

	)

1186 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

1188 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1189 vﬁ©ûê
_¨gvec
[2]; \

1190 vﬁ©ûê
_ªs
; \

1191 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1192 
_¨gvec
[1] = ()(
¨g1
); \

1193 
__asm__
 volatile( \

1194 
VALGRIND_ALIGN_STACK
 \

1198 
VALGRIND_CALL_NOREDIR_EAX
 \

1199 
VALGRIND_RESTORE_STACK
 \

1200 : "˜" (
_ªs
) \

1201 : "a" (&
_¨gvec
[0]) \

1202 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1204 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1205 } 0)

	)

1207 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

1209 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1210 vﬁ©ûê
_¨gvec
[3]; \

1211 vﬁ©ûê
_ªs
; \

1212 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1213 
_¨gvec
[1] = ()(
¨g1
); \

1214 
_¨gvec
[2] = ()(
¨g2
); \

1215 
__asm__
 volatile( \

1216 
VALGRIND_ALIGN_STACK
 \

1221 
VALGRIND_CALL_NOREDIR_EAX
 \

1222 
VALGRIND_RESTORE_STACK
 \

1223 : "˜" (
_ªs
) \

1224 : "a" (&
_¨gvec
[0]) \

1225 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1227 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1228 } 0)

	)

1230 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

1232 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1233 vﬁ©ûê
_¨gvec
[4]; \

1234 vﬁ©ûê
_ªs
; \

1235 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1236 
_¨gvec
[1] = ()(
¨g1
); \

1237 
_¨gvec
[2] = ()(
¨g2
); \

1238 
_¨gvec
[3] = ()(
¨g3
); \

1239 
__asm__
 volatile( \

1240 
VALGRIND_ALIGN_STACK
 \

1246 
VALGRIND_CALL_NOREDIR_EAX
 \

1247 
VALGRIND_RESTORE_STACK
 \

1248 : "˜" (
_ªs
) \

1249 : "a" (&
_¨gvec
[0]) \

1250 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1252 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1253 } 0)

	)

1255 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

1257 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1258 vﬁ©ûê
_¨gvec
[5]; \

1259 vﬁ©ûê
_ªs
; \

1260 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1261 
_¨gvec
[1] = ()(
¨g1
); \

1262 
_¨gvec
[2] = ()(
¨g2
); \

1263 
_¨gvec
[3] = ()(
¨g3
); \

1264 
_¨gvec
[4] = ()(
¨g4
); \

1265 
__asm__
 volatile( \

1266 
VALGRIND_ALIGN_STACK
 \

1272 
VALGRIND_CALL_NOREDIR_EAX
 \

1273 
VALGRIND_RESTORE_STACK
 \

1274 : "˜" (
_ªs
) \

1275 : "a" (&
_¨gvec
[0]) \

1276 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1278 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1279 } 0)

	)

1281 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

1283 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1284 vﬁ©ûê
_¨gvec
[6]; \

1285 vﬁ©ûê
_ªs
; \

1286 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1287 
_¨gvec
[1] = ()(
¨g1
); \

1288 
_¨gvec
[2] = ()(
¨g2
); \

1289 
_¨gvec
[3] = ()(
¨g3
); \

1290 
_¨gvec
[4] = ()(
¨g4
); \

1291 
_¨gvec
[5] = ()(
¨g5
); \

1292 
__asm__
 volatile( \

1293 
VALGRIND_ALIGN_STACK
 \

1301 
VALGRIND_CALL_NOREDIR_EAX
 \

1302 
VALGRIND_RESTORE_STACK
 \

1303 : "˜" (
_ªs
) \

1304 : "a" (&
_¨gvec
[0]) \

1305 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1307 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1308 } 0)

	)

1310 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

1312 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1313 vﬁ©ûê
_¨gvec
[7]; \

1314 vﬁ©ûê
_ªs
; \

1315 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1316 
_¨gvec
[1] = ()(
¨g1
); \

1317 
_¨gvec
[2] = ()(
¨g2
); \

1318 
_¨gvec
[3] = ()(
¨g3
); \

1319 
_¨gvec
[4] = ()(
¨g4
); \

1320 
_¨gvec
[5] = ()(
¨g5
); \

1321 
_¨gvec
[6] = ()(
¨g6
); \

1322 
__asm__
 volatile( \

1323 
VALGRIND_ALIGN_STACK
 \

1332 
VALGRIND_CALL_NOREDIR_EAX
 \

1333 
VALGRIND_RESTORE_STACK
 \

1334 : "˜" (
_ªs
) \

1335 : "a" (&
_¨gvec
[0]) \

1336 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1338 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1339 } 0)

	)

1341 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1342 
¨g7
) \

1344 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1345 vﬁ©ûê
_¨gvec
[8]; \

1346 vﬁ©ûê
_ªs
; \

1347 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1348 
_¨gvec
[1] = ()(
¨g1
); \

1349 
_¨gvec
[2] = ()(
¨g2
); \

1350 
_¨gvec
[3] = ()(
¨g3
); \

1351 
_¨gvec
[4] = ()(
¨g4
); \

1352 
_¨gvec
[5] = ()(
¨g5
); \

1353 
_¨gvec
[6] = ()(
¨g6
); \

1354 
_¨gvec
[7] = ()(
¨g7
); \

1355 
__asm__
 volatile( \

1356 
VALGRIND_ALIGN_STACK
 \

1366 
VALGRIND_CALL_NOREDIR_EAX
 \

1367 
VALGRIND_RESTORE_STACK
 \

1368 : "˜" (
_ªs
) \

1369 : "a" (&
_¨gvec
[0]) \

1370 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1372 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1373 } 0)

	)

1375 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1376 
¨g7
,
¨g8
) \

1378 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1379 vﬁ©ûê
_¨gvec
[9]; \

1380 vﬁ©ûê
_ªs
; \

1381 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1382 
_¨gvec
[1] = ()(
¨g1
); \

1383 
_¨gvec
[2] = ()(
¨g2
); \

1384 
_¨gvec
[3] = ()(
¨g3
); \

1385 
_¨gvec
[4] = ()(
¨g4
); \

1386 
_¨gvec
[5] = ()(
¨g5
); \

1387 
_¨gvec
[6] = ()(
¨g6
); \

1388 
_¨gvec
[7] = ()(
¨g7
); \

1389 
_¨gvec
[8] = ()(
¨g8
); \

1390 
__asm__
 volatile( \

1391 
VALGRIND_ALIGN_STACK
 \

1401 
VALGRIND_CALL_NOREDIR_EAX
 \

1402 
VALGRIND_RESTORE_STACK
 \

1403 : "˜" (
_ªs
) \

1404 : "a" (&
_¨gvec
[0]) \

1405 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1407 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1408 } 0)

	)

1410 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1411 
¨g7
,
¨g8
,
¨g9
) \

1413 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1414 vﬁ©ûê
_¨gvec
[10]; \

1415 vﬁ©ûê
_ªs
; \

1416 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1417 
_¨gvec
[1] = ()(
¨g1
); \

1418 
_¨gvec
[2] = ()(
¨g2
); \

1419 
_¨gvec
[3] = ()(
¨g3
); \

1420 
_¨gvec
[4] = ()(
¨g4
); \

1421 
_¨gvec
[5] = ()(
¨g5
); \

1422 
_¨gvec
[6] = ()(
¨g6
); \

1423 
_¨gvec
[7] = ()(
¨g7
); \

1424 
_¨gvec
[8] = ()(
¨g8
); \

1425 
_¨gvec
[9] = ()(
¨g9
); \

1426 
__asm__
 volatile( \

1427 
VALGRIND_ALIGN_STACK
 \

1439 
VALGRIND_CALL_NOREDIR_EAX
 \

1440 
VALGRIND_RESTORE_STACK
 \

1441 : "˜" (
_ªs
) \

1442 : "a" (&
_¨gvec
[0]) \

1443 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1445 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1446 } 0)

	)

1448 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1449 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

1451 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1452 vﬁ©ûê
_¨gvec
[11]; \

1453 vﬁ©ûê
_ªs
; \

1454 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1455 
_¨gvec
[1] = ()(
¨g1
); \

1456 
_¨gvec
[2] = ()(
¨g2
); \

1457 
_¨gvec
[3] = ()(
¨g3
); \

1458 
_¨gvec
[4] = ()(
¨g4
); \

1459 
_¨gvec
[5] = ()(
¨g5
); \

1460 
_¨gvec
[6] = ()(
¨g6
); \

1461 
_¨gvec
[7] = ()(
¨g7
); \

1462 
_¨gvec
[8] = ()(
¨g8
); \

1463 
_¨gvec
[9] = ()(
¨g9
); \

1464 
_¨gvec
[10] = ()(
¨g10
); \

1465 
__asm__
 volatile( \

1466 
VALGRIND_ALIGN_STACK
 \

1479 
VALGRIND_CALL_NOREDIR_EAX
 \

1480 
VALGRIND_RESTORE_STACK
 \

1481 : "˜" (
_ªs
) \

1482 : "a" (&
_¨gvec
[0]) \

1483 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1485 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1486 } 0)

	)

1488 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

1489 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

1490 
¨g11
) \

1492 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1493 vﬁ©ûê
_¨gvec
[12]; \

1494 vﬁ©ûê
_ªs
; \

1495 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1496 
_¨gvec
[1] = ()(
¨g1
); \

1497 
_¨gvec
[2] = ()(
¨g2
); \

1498 
_¨gvec
[3] = ()(
¨g3
); \

1499 
_¨gvec
[4] = ()(
¨g4
); \

1500 
_¨gvec
[5] = ()(
¨g5
); \

1501 
_¨gvec
[6] = ()(
¨g6
); \

1502 
_¨gvec
[7] = ()(
¨g7
); \

1503 
_¨gvec
[8] = ()(
¨g8
); \

1504 
_¨gvec
[9] = ()(
¨g9
); \

1505 
_¨gvec
[10] = ()(
¨g10
); \

1506 
_¨gvec
[11] = ()(
¨g11
); \

1507 
__asm__
 volatile( \

1508 
VALGRIND_ALIGN_STACK
 \

1522 
VALGRIND_CALL_NOREDIR_EAX
 \

1523 
VALGRIND_RESTORE_STACK
 \

1524 : "˜" (
_ªs
) \

1525 : "a" (&
_¨gvec
[0]) \

1526 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1528 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1529 } 0)

	)

1531 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

1532 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

1533 
¨g11
,
¨g12
) \

1535 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1536 vﬁ©ûê
_¨gvec
[13]; \

1537 vﬁ©ûê
_ªs
; \

1538 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1539 
_¨gvec
[1] = ()(
¨g1
); \

1540 
_¨gvec
[2] = ()(
¨g2
); \

1541 
_¨gvec
[3] = ()(
¨g3
); \

1542 
_¨gvec
[4] = ()(
¨g4
); \

1543 
_¨gvec
[5] = ()(
¨g5
); \

1544 
_¨gvec
[6] = ()(
¨g6
); \

1545 
_¨gvec
[7] = ()(
¨g7
); \

1546 
_¨gvec
[8] = ()(
¨g8
); \

1547 
_¨gvec
[9] = ()(
¨g9
); \

1548 
_¨gvec
[10] = ()(
¨g10
); \

1549 
_¨gvec
[11] = ()(
¨g11
); \

1550 
_¨gvec
[12] = ()(
¨g12
); \

1551 
__asm__
 volatile( \

1552 
VALGRIND_ALIGN_STACK
 \

1566 
VALGRIND_CALL_NOREDIR_EAX
 \

1567 
VALGRIND_RESTORE_STACK
 \

1568 : "˜" (
_ªs
) \

1569 : "a" (&
_¨gvec
[0]) \

1570 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "edi" \

1572 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1573 } 0)

	)

1579 #i‡
deföed
(
PLAT_amd64_löux
Ë|| deföed(
PLAT_amd64_d¨wö
) \

1580 || 
	$deföed
(
PLAT_amd64_sﬁ¨is
)

1585 
	#__CALLER_SAVED_REGS
 "rcx", "rdx", "rsi", \

1586 "rdi", "r8", "r9", "r10", "r11"

	)

1642 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__GCC_HAVE_DWARF2_CFI_ASM
)

1643 
	#__FRAME_POINTER
 \

1644 ,"r"(
	`__buûtö_dw¨f_cÁ
())

	)

1645 
	#VALGRIND_CFI_PROLOGUE
 \

1649 ".cfi_def_cÁÑbp, 0\n\t"

	)

1650 
	#VALGRIND_CFI_EPILOGUE
 \

1652 ".cfi_ª°‹e_°©e\n\t"

	)

1654 
	#__FRAME_POINTER


	)

1655 
	#VALGRIND_CFI_PROLOGUE


	)

1656 
	#VALGRIND_CFI_EPILOGUE


	)

1664 
	#VALGRIND_ALIGN_STACK
 \

1666 "™dq $0xfffffffffffffff0,%%r•\n\t"

	)

1667 
	#VALGRIND_RESTORE_STACK
 \

1668 "movq %%r14,%%r•\n\t"

	)

1694 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

1696 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1697 vﬁ©ûê
_¨gvec
[1]; \

1698 vﬁ©ûê
_ªs
; \

1699 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1700 
__asm__
 volatile( \

1701 
VALGRIND_CFI_PROLOGUE
 \

1702 
VALGRIND_ALIGN_STACK
 \

1705 
VALGRIND_CALL_NOREDIR_RAX
 \

1706 
VALGRIND_RESTORE_STACK
 \

1707 
VALGRIND_CFI_EPILOGUE
 \

1708 : "˜" (
_ªs
) \

1709 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1710 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1712 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1713 
	}
} 0)

	)

1715 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

1717 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1718 vﬁ©ûê
_¨gvec
[2]; \

1719 vﬁ©ûê
_ªs
; \

1720 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1721 
_¨gvec
[1] = ()(
¨g1
); \

1722 
__asm__
 volatile( \

1723 
VALGRIND_CFI_PROLOGUE
 \

1724 
VALGRIND_ALIGN_STACK
 \

1728 
VALGRIND_CALL_NOREDIR_RAX
 \

1729 
VALGRIND_RESTORE_STACK
 \

1730 
VALGRIND_CFI_EPILOGUE
 \

1731 : "˜" (
_ªs
) \

1732 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1733 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1735 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1736 } 0)

	)

1738 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

1740 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1741 vﬁ©ûê
_¨gvec
[3]; \

1742 vﬁ©ûê
_ªs
; \

1743 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1744 
_¨gvec
[1] = ()(
¨g1
); \

1745 
_¨gvec
[2] = ()(
¨g2
); \

1746 
__asm__
 volatile( \

1747 
VALGRIND_CFI_PROLOGUE
 \

1748 
VALGRIND_ALIGN_STACK
 \

1753 
VALGRIND_CALL_NOREDIR_RAX
 \

1754 
VALGRIND_RESTORE_STACK
 \

1755 
VALGRIND_CFI_EPILOGUE
 \

1756 : "˜" (
_ªs
) \

1757 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1758 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1760 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1761 } 0)

	)

1763 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

1765 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1766 vﬁ©ûê
_¨gvec
[4]; \

1767 vﬁ©ûê
_ªs
; \

1768 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1769 
_¨gvec
[1] = ()(
¨g1
); \

1770 
_¨gvec
[2] = ()(
¨g2
); \

1771 
_¨gvec
[3] = ()(
¨g3
); \

1772 
__asm__
 volatile( \

1773 
VALGRIND_CFI_PROLOGUE
 \

1774 
VALGRIND_ALIGN_STACK
 \

1780 
VALGRIND_CALL_NOREDIR_RAX
 \

1781 
VALGRIND_RESTORE_STACK
 \

1782 
VALGRIND_CFI_EPILOGUE
 \

1783 : "˜" (
_ªs
) \

1784 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1785 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1787 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1788 } 0)

	)

1790 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

1792 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1793 vﬁ©ûê
_¨gvec
[5]; \

1794 vﬁ©ûê
_ªs
; \

1795 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1796 
_¨gvec
[1] = ()(
¨g1
); \

1797 
_¨gvec
[2] = ()(
¨g2
); \

1798 
_¨gvec
[3] = ()(
¨g3
); \

1799 
_¨gvec
[4] = ()(
¨g4
); \

1800 
__asm__
 volatile( \

1801 
VALGRIND_CFI_PROLOGUE
 \

1802 
VALGRIND_ALIGN_STACK
 \

1809 
VALGRIND_CALL_NOREDIR_RAX
 \

1810 
VALGRIND_RESTORE_STACK
 \

1811 
VALGRIND_CFI_EPILOGUE
 \

1812 : "˜" (
_ªs
) \

1813 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1814 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1816 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1817 } 0)

	)

1819 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

1821 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1822 vﬁ©ûê
_¨gvec
[6]; \

1823 vﬁ©ûê
_ªs
; \

1824 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1825 
_¨gvec
[1] = ()(
¨g1
); \

1826 
_¨gvec
[2] = ()(
¨g2
); \

1827 
_¨gvec
[3] = ()(
¨g3
); \

1828 
_¨gvec
[4] = ()(
¨g4
); \

1829 
_¨gvec
[5] = ()(
¨g5
); \

1830 
__asm__
 volatile( \

1831 
VALGRIND_CFI_PROLOGUE
 \

1832 
VALGRIND_ALIGN_STACK
 \

1840 
VALGRIND_CALL_NOREDIR_RAX
 \

1841 
VALGRIND_RESTORE_STACK
 \

1842 
VALGRIND_CFI_EPILOGUE
 \

1843 : "˜" (
_ªs
) \

1844 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1845 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1847 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1848 } 0)

	)

1850 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

1852 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1853 vﬁ©ûê
_¨gvec
[7]; \

1854 vﬁ©ûê
_ªs
; \

1855 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1856 
_¨gvec
[1] = ()(
¨g1
); \

1857 
_¨gvec
[2] = ()(
¨g2
); \

1858 
_¨gvec
[3] = ()(
¨g3
); \

1859 
_¨gvec
[4] = ()(
¨g4
); \

1860 
_¨gvec
[5] = ()(
¨g5
); \

1861 
_¨gvec
[6] = ()(
¨g6
); \

1862 
__asm__
 volatile( \

1863 
VALGRIND_CFI_PROLOGUE
 \

1864 
VALGRIND_ALIGN_STACK
 \

1873 
VALGRIND_CALL_NOREDIR_RAX
 \

1874 
VALGRIND_RESTORE_STACK
 \

1875 
VALGRIND_CFI_EPILOGUE
 \

1876 : "˜" (
_ªs
) \

1877 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1878 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1880 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1881 } 0)

	)

1883 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1884 
¨g7
) \

1886 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1887 vﬁ©ûê
_¨gvec
[8]; \

1888 vﬁ©ûê
_ªs
; \

1889 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1890 
_¨gvec
[1] = ()(
¨g1
); \

1891 
_¨gvec
[2] = ()(
¨g2
); \

1892 
_¨gvec
[3] = ()(
¨g3
); \

1893 
_¨gvec
[4] = ()(
¨g4
); \

1894 
_¨gvec
[5] = ()(
¨g5
); \

1895 
_¨gvec
[6] = ()(
¨g6
); \

1896 
_¨gvec
[7] = ()(
¨g7
); \

1897 
__asm__
 volatile( \

1898 
VALGRIND_CFI_PROLOGUE
 \

1899 
VALGRIND_ALIGN_STACK
 \

1909 
VALGRIND_CALL_NOREDIR_RAX
 \

1910 
VALGRIND_RESTORE_STACK
 \

1911 
VALGRIND_CFI_EPILOGUE
 \

1912 : "˜" (
_ªs
) \

1913 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1914 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1916 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1917 } 0)

	)

1919 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1920 
¨g7
,
¨g8
) \

1922 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1923 vﬁ©ûê
_¨gvec
[9]; \

1924 vﬁ©ûê
_ªs
; \

1925 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1926 
_¨gvec
[1] = ()(
¨g1
); \

1927 
_¨gvec
[2] = ()(
¨g2
); \

1928 
_¨gvec
[3] = ()(
¨g3
); \

1929 
_¨gvec
[4] = ()(
¨g4
); \

1930 
_¨gvec
[5] = ()(
¨g5
); \

1931 
_¨gvec
[6] = ()(
¨g6
); \

1932 
_¨gvec
[7] = ()(
¨g7
); \

1933 
_¨gvec
[8] = ()(
¨g8
); \

1934 
__asm__
 volatile( \

1935 
VALGRIND_CFI_PROLOGUE
 \

1936 
VALGRIND_ALIGN_STACK
 \

1947 
VALGRIND_CALL_NOREDIR_RAX
 \

1948 
VALGRIND_RESTORE_STACK
 \

1949 
VALGRIND_CFI_EPILOGUE
 \

1950 : "˜" (
_ªs
) \

1951 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1952 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1954 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1955 } 0)

	)

1957 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1958 
¨g7
,
¨g8
,
¨g9
) \

1960 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

1961 vﬁ©ûê
_¨gvec
[10]; \

1962 vﬁ©ûê
_ªs
; \

1963 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

1964 
_¨gvec
[1] = ()(
¨g1
); \

1965 
_¨gvec
[2] = ()(
¨g2
); \

1966 
_¨gvec
[3] = ()(
¨g3
); \

1967 
_¨gvec
[4] = ()(
¨g4
); \

1968 
_¨gvec
[5] = ()(
¨g5
); \

1969 
_¨gvec
[6] = ()(
¨g6
); \

1970 
_¨gvec
[7] = ()(
¨g7
); \

1971 
_¨gvec
[8] = ()(
¨g8
); \

1972 
_¨gvec
[9] = ()(
¨g9
); \

1973 
__asm__
 volatile( \

1974 
VALGRIND_CFI_PROLOGUE
 \

1975 
VALGRIND_ALIGN_STACK
 \

1987 
VALGRIND_CALL_NOREDIR_RAX
 \

1988 
VALGRIND_RESTORE_STACK
 \

1989 
VALGRIND_CFI_EPILOGUE
 \

1990 : "˜" (
_ªs
) \

1991 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

1992 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

1994 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

1995 } 0)

	)

1997 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

1998 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

2000 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2001 vﬁ©ûê
_¨gvec
[11]; \

2002 vﬁ©ûê
_ªs
; \

2003 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2004 
_¨gvec
[1] = ()(
¨g1
); \

2005 
_¨gvec
[2] = ()(
¨g2
); \

2006 
_¨gvec
[3] = ()(
¨g3
); \

2007 
_¨gvec
[4] = ()(
¨g4
); \

2008 
_¨gvec
[5] = ()(
¨g5
); \

2009 
_¨gvec
[6] = ()(
¨g6
); \

2010 
_¨gvec
[7] = ()(
¨g7
); \

2011 
_¨gvec
[8] = ()(
¨g8
); \

2012 
_¨gvec
[9] = ()(
¨g9
); \

2013 
_¨gvec
[10] = ()(
¨g10
); \

2014 
__asm__
 volatile( \

2015 
VALGRIND_CFI_PROLOGUE
 \

2016 
VALGRIND_ALIGN_STACK
 \

2029 
VALGRIND_CALL_NOREDIR_RAX
 \

2030 
VALGRIND_RESTORE_STACK
 \

2031 
VALGRIND_CFI_EPILOGUE
 \

2032 : "˜" (
_ªs
) \

2033 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

2034 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

2036 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2037 } 0)

	)

2039 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2040 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
) \

2042 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2043 vﬁ©ûê
_¨gvec
[12]; \

2044 vﬁ©ûê
_ªs
; \

2045 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2046 
_¨gvec
[1] = ()(
¨g1
); \

2047 
_¨gvec
[2] = ()(
¨g2
); \

2048 
_¨gvec
[3] = ()(
¨g3
); \

2049 
_¨gvec
[4] = ()(
¨g4
); \

2050 
_¨gvec
[5] = ()(
¨g5
); \

2051 
_¨gvec
[6] = ()(
¨g6
); \

2052 
_¨gvec
[7] = ()(
¨g7
); \

2053 
_¨gvec
[8] = ()(
¨g8
); \

2054 
_¨gvec
[9] = ()(
¨g9
); \

2055 
_¨gvec
[10] = ()(
¨g10
); \

2056 
_¨gvec
[11] = ()(
¨g11
); \

2057 
__asm__
 volatile( \

2058 
VALGRIND_CFI_PROLOGUE
 \

2059 
VALGRIND_ALIGN_STACK
 \

2073 
VALGRIND_CALL_NOREDIR_RAX
 \

2074 
VALGRIND_RESTORE_STACK
 \

2075 
VALGRIND_CFI_EPILOGUE
 \

2076 : "˜" (
_ªs
) \

2077 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

2078 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

2080 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2081 } 0)

	)

2083 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2084 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
,
¨g12
) \

2086 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2087 vﬁ©ûê
_¨gvec
[13]; \

2088 vﬁ©ûê
_ªs
; \

2089 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2090 
_¨gvec
[1] = ()(
¨g1
); \

2091 
_¨gvec
[2] = ()(
¨g2
); \

2092 
_¨gvec
[3] = ()(
¨g3
); \

2093 
_¨gvec
[4] = ()(
¨g4
); \

2094 
_¨gvec
[5] = ()(
¨g5
); \

2095 
_¨gvec
[6] = ()(
¨g6
); \

2096 
_¨gvec
[7] = ()(
¨g7
); \

2097 
_¨gvec
[8] = ()(
¨g8
); \

2098 
_¨gvec
[9] = ()(
¨g9
); \

2099 
_¨gvec
[10] = ()(
¨g10
); \

2100 
_¨gvec
[11] = ()(
¨g11
); \

2101 
_¨gvec
[12] = ()(
¨g12
); \

2102 
__asm__
 volatile( \

2103 
VALGRIND_CFI_PROLOGUE
 \

2104 
VALGRIND_ALIGN_STACK
 \

2119 
VALGRIND_CALL_NOREDIR_RAX
 \

2120 
VALGRIND_RESTORE_STACK
 \

2121 
VALGRIND_CFI_EPILOGUE
 \

2122 : "˜" (
_ªs
) \

2123 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

2124 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r14", "r15" \

2126 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2127 } 0)

	)

2133 #i‡
deföed
(
PLAT_µc32_löux
)

2159 
	#__CALLER_SAVED_REGS
 \

2163 "r11", "r12", "r13"

	)

2170 
	#VALGRIND_ALIGN_STACK
 \

2172 "æwöm 1,1,0,0,27\n\t"

	)

2173 
	#VALGRIND_RESTORE_STACK
 \

2174 "m∏1,28\n\t"

	)

2179 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

2181 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2182 vﬁ©ûê
_¨gvec
[1]; \

2183 vﬁ©ûê
_ªs
; \

2184 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2185 
__asm__
 volatile( \

2186 
VALGRIND_ALIGN_STACK
 \

2189 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2190 
VALGRIND_RESTORE_STACK
 \

2192 : "Ù" (
_ªs
) \

2193 : "r" (&
_¨gvec
[0]) \

2194 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2196 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2197 } 0)

	)

2199 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

2201 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2202 vﬁ©ûê
_¨gvec
[2]; \

2203 vﬁ©ûê
_ªs
; \

2204 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2205 
_¨gvec
[1] = ()
¨g1
; \

2206 
__asm__
 volatile( \

2207 
VALGRIND_ALIGN_STACK
 \

2211 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2212 
VALGRIND_RESTORE_STACK
 \

2214 : "Ù" (
_ªs
) \

2215 : "r" (&
_¨gvec
[0]) \

2216 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2218 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2219 } 0)

	)

2221 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

2223 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2224 vﬁ©ûê
_¨gvec
[3]; \

2225 vﬁ©ûê
_ªs
; \

2226 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2227 
_¨gvec
[1] = ()
¨g1
; \

2228 
_¨gvec
[2] = ()
¨g2
; \

2229 
__asm__
 volatile( \

2230 
VALGRIND_ALIGN_STACK
 \

2235 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2236 
VALGRIND_RESTORE_STACK
 \

2238 : "Ù" (
_ªs
) \

2239 : "r" (&
_¨gvec
[0]) \

2240 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2242 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2243 } 0)

	)

2245 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

2247 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2248 vﬁ©ûê
_¨gvec
[4]; \

2249 vﬁ©ûê
_ªs
; \

2250 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2251 
_¨gvec
[1] = ()
¨g1
; \

2252 
_¨gvec
[2] = ()
¨g2
; \

2253 
_¨gvec
[3] = ()
¨g3
; \

2254 
__asm__
 volatile( \

2255 
VALGRIND_ALIGN_STACK
 \

2261 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2262 
VALGRIND_RESTORE_STACK
 \

2264 : "Ù" (
_ªs
) \

2265 : "r" (&
_¨gvec
[0]) \

2266 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2268 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2269 } 0)

	)

2271 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

2273 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2274 vﬁ©ûê
_¨gvec
[5]; \

2275 vﬁ©ûê
_ªs
; \

2276 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2277 
_¨gvec
[1] = ()
¨g1
; \

2278 
_¨gvec
[2] = ()
¨g2
; \

2279 
_¨gvec
[3] = ()
¨g3
; \

2280 
_¨gvec
[4] = ()
¨g4
; \

2281 
__asm__
 volatile( \

2282 
VALGRIND_ALIGN_STACK
 \

2289 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2290 
VALGRIND_RESTORE_STACK
 \

2292 : "Ù" (
_ªs
) \

2293 : "r" (&
_¨gvec
[0]) \

2294 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2296 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2297 } 0)

	)

2299 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

2301 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2302 vﬁ©ûê
_¨gvec
[6]; \

2303 vﬁ©ûê
_ªs
; \

2304 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2305 
_¨gvec
[1] = ()
¨g1
; \

2306 
_¨gvec
[2] = ()
¨g2
; \

2307 
_¨gvec
[3] = ()
¨g3
; \

2308 
_¨gvec
[4] = ()
¨g4
; \

2309 
_¨gvec
[5] = ()
¨g5
; \

2310 
__asm__
 volatile( \

2311 
VALGRIND_ALIGN_STACK
 \

2319 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2320 
VALGRIND_RESTORE_STACK
 \

2322 : "Ù" (
_ªs
) \

2323 : "r" (&
_¨gvec
[0]) \

2324 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2326 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2327 } 0)

	)

2329 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

2331 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2332 vﬁ©ûê
_¨gvec
[7]; \

2333 vﬁ©ûê
_ªs
; \

2334 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2335 
_¨gvec
[1] = ()
¨g1
; \

2336 
_¨gvec
[2] = ()
¨g2
; \

2337 
_¨gvec
[3] = ()
¨g3
; \

2338 
_¨gvec
[4] = ()
¨g4
; \

2339 
_¨gvec
[5] = ()
¨g5
; \

2340 
_¨gvec
[6] = ()
¨g6
; \

2341 
__asm__
 volatile( \

2342 
VALGRIND_ALIGN_STACK
 \

2351 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2352 
VALGRIND_RESTORE_STACK
 \

2354 : "Ù" (
_ªs
) \

2355 : "r" (&
_¨gvec
[0]) \

2356 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2358 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2359 } 0)

	)

2361 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2362 
¨g7
) \

2364 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2365 vﬁ©ûê
_¨gvec
[8]; \

2366 vﬁ©ûê
_ªs
; \

2367 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2368 
_¨gvec
[1] = ()
¨g1
; \

2369 
_¨gvec
[2] = ()
¨g2
; \

2370 
_¨gvec
[3] = ()
¨g3
; \

2371 
_¨gvec
[4] = ()
¨g4
; \

2372 
_¨gvec
[5] = ()
¨g5
; \

2373 
_¨gvec
[6] = ()
¨g6
; \

2374 
_¨gvec
[7] = ()
¨g7
; \

2375 
__asm__
 volatile( \

2376 
VALGRIND_ALIGN_STACK
 \

2386 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2387 
VALGRIND_RESTORE_STACK
 \

2389 : "Ù" (
_ªs
) \

2390 : "r" (&
_¨gvec
[0]) \

2391 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2393 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2394 } 0)

	)

2396 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2397 
¨g7
,
¨g8
) \

2399 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2400 vﬁ©ûê
_¨gvec
[9]; \

2401 vﬁ©ûê
_ªs
; \

2402 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2403 
_¨gvec
[1] = ()
¨g1
; \

2404 
_¨gvec
[2] = ()
¨g2
; \

2405 
_¨gvec
[3] = ()
¨g3
; \

2406 
_¨gvec
[4] = ()
¨g4
; \

2407 
_¨gvec
[5] = ()
¨g5
; \

2408 
_¨gvec
[6] = ()
¨g6
; \

2409 
_¨gvec
[7] = ()
¨g7
; \

2410 
_¨gvec
[8] = ()
¨g8
; \

2411 
__asm__
 volatile( \

2412 
VALGRIND_ALIGN_STACK
 \

2423 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2424 
VALGRIND_RESTORE_STACK
 \

2426 : "Ù" (
_ªs
) \

2427 : "r" (&
_¨gvec
[0]) \

2428 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2430 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2431 } 0)

	)

2433 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2434 
¨g7
,
¨g8
,
¨g9
) \

2436 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2437 vﬁ©ûê
_¨gvec
[10]; \

2438 vﬁ©ûê
_ªs
; \

2439 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2440 
_¨gvec
[1] = ()
¨g1
; \

2441 
_¨gvec
[2] = ()
¨g2
; \

2442 
_¨gvec
[3] = ()
¨g3
; \

2443 
_¨gvec
[4] = ()
¨g4
; \

2444 
_¨gvec
[5] = ()
¨g5
; \

2445 
_¨gvec
[6] = ()
¨g6
; \

2446 
_¨gvec
[7] = ()
¨g7
; \

2447 
_¨gvec
[8] = ()
¨g8
; \

2448 
_¨gvec
[9] = ()
¨g9
; \

2449 
__asm__
 volatile( \

2450 
VALGRIND_ALIGN_STACK
 \

2466 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2467 
VALGRIND_RESTORE_STACK
 \

2469 : "Ù" (
_ªs
) \

2470 : "r" (&
_¨gvec
[0]) \

2471 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2473 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2474 } 0)

	)

2476 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2477 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

2479 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2480 vﬁ©ûê
_¨gvec
[11]; \

2481 vﬁ©ûê
_ªs
; \

2482 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2483 
_¨gvec
[1] = ()
¨g1
; \

2484 
_¨gvec
[2] = ()
¨g2
; \

2485 
_¨gvec
[3] = ()
¨g3
; \

2486 
_¨gvec
[4] = ()
¨g4
; \

2487 
_¨gvec
[5] = ()
¨g5
; \

2488 
_¨gvec
[6] = ()
¨g6
; \

2489 
_¨gvec
[7] = ()
¨g7
; \

2490 
_¨gvec
[8] = ()
¨g8
; \

2491 
_¨gvec
[9] = ()
¨g9
; \

2492 
_¨gvec
[10] = ()
¨g10
; \

2493 
__asm__
 volatile( \

2494 
VALGRIND_ALIGN_STACK
 \

2513 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2514 
VALGRIND_RESTORE_STACK
 \

2516 : "Ù" (
_ªs
) \

2517 : "r" (&
_¨gvec
[0]) \

2518 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2520 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2521 } 0)

	)

2523 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2524 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
) \

2526 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2527 vﬁ©ûê
_¨gvec
[12]; \

2528 vﬁ©ûê
_ªs
; \

2529 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2530 
_¨gvec
[1] = ()
¨g1
; \

2531 
_¨gvec
[2] = ()
¨g2
; \

2532 
_¨gvec
[3] = ()
¨g3
; \

2533 
_¨gvec
[4] = ()
¨g4
; \

2534 
_¨gvec
[5] = ()
¨g5
; \

2535 
_¨gvec
[6] = ()
¨g6
; \

2536 
_¨gvec
[7] = ()
¨g7
; \

2537 
_¨gvec
[8] = ()
¨g8
; \

2538 
_¨gvec
[9] = ()
¨g9
; \

2539 
_¨gvec
[10] = ()
¨g10
; \

2540 
_¨gvec
[11] = ()
¨g11
; \

2541 
__asm__
 volatile( \

2542 
VALGRIND_ALIGN_STACK
 \

2564 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2565 
VALGRIND_RESTORE_STACK
 \

2567 : "Ù" (
_ªs
) \

2568 : "r" (&
_¨gvec
[0]) \

2569 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2571 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2572 } 0)

	)

2574 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2575 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
,
¨g12
) \

2577 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2578 vﬁ©ûê
_¨gvec
[13]; \

2579 vﬁ©ûê
_ªs
; \

2580 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

2581 
_¨gvec
[1] = ()
¨g1
; \

2582 
_¨gvec
[2] = ()
¨g2
; \

2583 
_¨gvec
[3] = ()
¨g3
; \

2584 
_¨gvec
[4] = ()
¨g4
; \

2585 
_¨gvec
[5] = ()
¨g5
; \

2586 
_¨gvec
[6] = ()
¨g6
; \

2587 
_¨gvec
[7] = ()
¨g7
; \

2588 
_¨gvec
[8] = ()
¨g8
; \

2589 
_¨gvec
[9] = ()
¨g9
; \

2590 
_¨gvec
[10] = ()
¨g10
; \

2591 
_¨gvec
[11] = ()
¨g11
; \

2592 
_¨gvec
[12] = ()
¨g12
; \

2593 
__asm__
 volatile( \

2594 
VALGRIND_ALIGN_STACK
 \

2619 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2620 
VALGRIND_RESTORE_STACK
 \

2622 : "Ù" (
_ªs
) \

2623 : "r" (&
_¨gvec
[0]) \

2624 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2626 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2627 } 0)

	)

2633 #i‡
deföed
(
PLAT_µc64be_löux
)

2638 
	#__CALLER_SAVED_REGS
 \

2642 "r11", "r12", "r13"

	)

2649 
	#VALGRIND_ALIGN_STACK
 \

2651 "ædi¸ 1,1,0,59\n\t"

	)

2652 
	#VALGRIND_RESTORE_STACK
 \

2653 "m∏1,28\n\t"

	)

2658 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

2660 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2661 vﬁ©ûê
_¨gvec
[3+0]; \

2662 vﬁ©ûê
_ªs
; \

2664 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2665 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2666 
__asm__
 volatile( \

2667 
VALGRIND_ALIGN_STACK
 \

2672 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2676 
VALGRIND_RESTORE_STACK
 \

2677 : "Ù" (
_ªs
) \

2678 : "r" (&
_¨gvec
[2]) \

2679 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2681 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2682 } 0)

	)

2684 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

2686 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2687 vﬁ©ûê
_¨gvec
[3+1]; \

2688 vﬁ©ûê
_ªs
; \

2690 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2691 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2692 
_¨gvec
[2+1] = ()
¨g1
; \

2693 
__asm__
 volatile( \

2694 
VALGRIND_ALIGN_STACK
 \

2700 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2704 
VALGRIND_RESTORE_STACK
 \

2705 : "Ù" (
_ªs
) \

2706 : "r" (&
_¨gvec
[2]) \

2707 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2709 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2710 } 0)

	)

2712 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

2714 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2715 vﬁ©ûê
_¨gvec
[3+2]; \

2716 vﬁ©ûê
_ªs
; \

2718 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2719 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2720 
_¨gvec
[2+1] = ()
¨g1
; \

2721 
_¨gvec
[2+2] = ()
¨g2
; \

2722 
__asm__
 volatile( \

2723 
VALGRIND_ALIGN_STACK
 \

2730 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2734 
VALGRIND_RESTORE_STACK
 \

2735 : "Ù" (
_ªs
) \

2736 : "r" (&
_¨gvec
[2]) \

2737 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2739 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2740 } 0)

	)

2742 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

2744 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2745 vﬁ©ûê
_¨gvec
[3+3]; \

2746 vﬁ©ûê
_ªs
; \

2748 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2749 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2750 
_¨gvec
[2+1] = ()
¨g1
; \

2751 
_¨gvec
[2+2] = ()
¨g2
; \

2752 
_¨gvec
[2+3] = ()
¨g3
; \

2753 
__asm__
 volatile( \

2754 
VALGRIND_ALIGN_STACK
 \

2762 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2766 
VALGRIND_RESTORE_STACK
 \

2767 : "Ù" (
_ªs
) \

2768 : "r" (&
_¨gvec
[2]) \

2769 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2771 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2772 } 0)

	)

2774 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

2776 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2777 vﬁ©ûê
_¨gvec
[3+4]; \

2778 vﬁ©ûê
_ªs
; \

2780 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2781 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2782 
_¨gvec
[2+1] = ()
¨g1
; \

2783 
_¨gvec
[2+2] = ()
¨g2
; \

2784 
_¨gvec
[2+3] = ()
¨g3
; \

2785 
_¨gvec
[2+4] = ()
¨g4
; \

2786 
__asm__
 volatile( \

2787 
VALGRIND_ALIGN_STACK
 \

2796 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2800 
VALGRIND_RESTORE_STACK
 \

2801 : "Ù" (
_ªs
) \

2802 : "r" (&
_¨gvec
[2]) \

2803 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2805 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2806 } 0)

	)

2808 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

2810 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2811 vﬁ©ûê
_¨gvec
[3+5]; \

2812 vﬁ©ûê
_ªs
; \

2814 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2815 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2816 
_¨gvec
[2+1] = ()
¨g1
; \

2817 
_¨gvec
[2+2] = ()
¨g2
; \

2818 
_¨gvec
[2+3] = ()
¨g3
; \

2819 
_¨gvec
[2+4] = ()
¨g4
; \

2820 
_¨gvec
[2+5] = ()
¨g5
; \

2821 
__asm__
 volatile( \

2822 
VALGRIND_ALIGN_STACK
 \

2832 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2836 
VALGRIND_RESTORE_STACK
 \

2837 : "Ù" (
_ªs
) \

2838 : "r" (&
_¨gvec
[2]) \

2839 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2841 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2842 } 0)

	)

2844 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

2846 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2847 vﬁ©ûê
_¨gvec
[3+6]; \

2848 vﬁ©ûê
_ªs
; \

2850 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2851 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2852 
_¨gvec
[2+1] = ()
¨g1
; \

2853 
_¨gvec
[2+2] = ()
¨g2
; \

2854 
_¨gvec
[2+3] = ()
¨g3
; \

2855 
_¨gvec
[2+4] = ()
¨g4
; \

2856 
_¨gvec
[2+5] = ()
¨g5
; \

2857 
_¨gvec
[2+6] = ()
¨g6
; \

2858 
__asm__
 volatile( \

2859 
VALGRIND_ALIGN_STACK
 \

2870 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2874 
VALGRIND_RESTORE_STACK
 \

2875 : "Ù" (
_ªs
) \

2876 : "r" (&
_¨gvec
[2]) \

2877 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2879 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2880 } 0)

	)

2882 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2883 
¨g7
) \

2885 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2886 vﬁ©ûê
_¨gvec
[3+7]; \

2887 vﬁ©ûê
_ªs
; \

2889 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2890 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2891 
_¨gvec
[2+1] = ()
¨g1
; \

2892 
_¨gvec
[2+2] = ()
¨g2
; \

2893 
_¨gvec
[2+3] = ()
¨g3
; \

2894 
_¨gvec
[2+4] = ()
¨g4
; \

2895 
_¨gvec
[2+5] = ()
¨g5
; \

2896 
_¨gvec
[2+6] = ()
¨g6
; \

2897 
_¨gvec
[2+7] = ()
¨g7
; \

2898 
__asm__
 volatile( \

2899 
VALGRIND_ALIGN_STACK
 \

2911 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2915 
VALGRIND_RESTORE_STACK
 \

2916 : "Ù" (
_ªs
) \

2917 : "r" (&
_¨gvec
[2]) \

2918 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2920 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2921 } 0)

	)

2923 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2924 
¨g7
,
¨g8
) \

2926 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2927 vﬁ©ûê
_¨gvec
[3+8]; \

2928 vﬁ©ûê
_ªs
; \

2930 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2931 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2932 
_¨gvec
[2+1] = ()
¨g1
; \

2933 
_¨gvec
[2+2] = ()
¨g2
; \

2934 
_¨gvec
[2+3] = ()
¨g3
; \

2935 
_¨gvec
[2+4] = ()
¨g4
; \

2936 
_¨gvec
[2+5] = ()
¨g5
; \

2937 
_¨gvec
[2+6] = ()
¨g6
; \

2938 
_¨gvec
[2+7] = ()
¨g7
; \

2939 
_¨gvec
[2+8] = ()
¨g8
; \

2940 
__asm__
 volatile( \

2941 
VALGRIND_ALIGN_STACK
 \

2954 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

2958 
VALGRIND_RESTORE_STACK
 \

2959 : "Ù" (
_ªs
) \

2960 : "r" (&
_¨gvec
[2]) \

2961 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

2963 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

2964 } 0)

	)

2966 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

2967 
¨g7
,
¨g8
,
¨g9
) \

2969 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

2970 vﬁ©ûê
_¨gvec
[3+9]; \

2971 vﬁ©ûê
_ªs
; \

2973 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

2974 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

2975 
_¨gvec
[2+1] = ()
¨g1
; \

2976 
_¨gvec
[2+2] = ()
¨g2
; \

2977 
_¨gvec
[2+3] = ()
¨g3
; \

2978 
_¨gvec
[2+4] = ()
¨g4
; \

2979 
_¨gvec
[2+5] = ()
¨g5
; \

2980 
_¨gvec
[2+6] = ()
¨g6
; \

2981 
_¨gvec
[2+7] = ()
¨g7
; \

2982 
_¨gvec
[2+8] = ()
¨g8
; \

2983 
_¨gvec
[2+9] = ()
¨g9
; \

2984 
__asm__
 volatile( \

2985 
VALGRIND_ALIGN_STACK
 \

3003 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

3007 
VALGRIND_RESTORE_STACK
 \

3008 : "Ù" (
_ªs
) \

3009 : "r" (&
_¨gvec
[2]) \

3010 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3012 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3013 } 0)

	)

3015 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3016 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

3018 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3019 vﬁ©ûê
_¨gvec
[3+10]; \

3020 vﬁ©ûê
_ªs
; \

3022 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3023 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3024 
_¨gvec
[2+1] = ()
¨g1
; \

3025 
_¨gvec
[2+2] = ()
¨g2
; \

3026 
_¨gvec
[2+3] = ()
¨g3
; \

3027 
_¨gvec
[2+4] = ()
¨g4
; \

3028 
_¨gvec
[2+5] = ()
¨g5
; \

3029 
_¨gvec
[2+6] = ()
¨g6
; \

3030 
_¨gvec
[2+7] = ()
¨g7
; \

3031 
_¨gvec
[2+8] = ()
¨g8
; \

3032 
_¨gvec
[2+9] = ()
¨g9
; \

3033 
_¨gvec
[2+10] = ()
¨g10
; \

3034 
__asm__
 volatile( \

3035 
VALGRIND_ALIGN_STACK
 \

3056 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

3060 
VALGRIND_RESTORE_STACK
 \

3061 : "Ù" (
_ªs
) \

3062 : "r" (&
_¨gvec
[2]) \

3063 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3065 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3066 } 0)

	)

3068 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3069 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
) \

3071 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3072 vﬁ©ûê
_¨gvec
[3+11]; \

3073 vﬁ©ûê
_ªs
; \

3075 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3076 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3077 
_¨gvec
[2+1] = ()
¨g1
; \

3078 
_¨gvec
[2+2] = ()
¨g2
; \

3079 
_¨gvec
[2+3] = ()
¨g3
; \

3080 
_¨gvec
[2+4] = ()
¨g4
; \

3081 
_¨gvec
[2+5] = ()
¨g5
; \

3082 
_¨gvec
[2+6] = ()
¨g6
; \

3083 
_¨gvec
[2+7] = ()
¨g7
; \

3084 
_¨gvec
[2+8] = ()
¨g8
; \

3085 
_¨gvec
[2+9] = ()
¨g9
; \

3086 
_¨gvec
[2+10] = ()
¨g10
; \

3087 
_¨gvec
[2+11] = ()
¨g11
; \

3088 
__asm__
 volatile( \

3089 
VALGRIND_ALIGN_STACK
 \

3113 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

3117 
VALGRIND_RESTORE_STACK
 \

3118 : "Ù" (
_ªs
) \

3119 : "r" (&
_¨gvec
[2]) \

3120 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3122 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3123 } 0)

	)

3125 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3126 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
,
¨g12
) \

3128 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3129 vﬁ©ûê
_¨gvec
[3+12]; \

3130 vﬁ©ûê
_ªs
; \

3132 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3133 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3134 
_¨gvec
[2+1] = ()
¨g1
; \

3135 
_¨gvec
[2+2] = ()
¨g2
; \

3136 
_¨gvec
[2+3] = ()
¨g3
; \

3137 
_¨gvec
[2+4] = ()
¨g4
; \

3138 
_¨gvec
[2+5] = ()
¨g5
; \

3139 
_¨gvec
[2+6] = ()
¨g6
; \

3140 
_¨gvec
[2+7] = ()
¨g7
; \

3141 
_¨gvec
[2+8] = ()
¨g8
; \

3142 
_¨gvec
[2+9] = ()
¨g9
; \

3143 
_¨gvec
[2+10] = ()
¨g10
; \

3144 
_¨gvec
[2+11] = ()
¨g11
; \

3145 
_¨gvec
[2+12] = ()
¨g12
; \

3146 
__asm__
 volatile( \

3147 
VALGRIND_ALIGN_STACK
 \

3174 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11
 \

3178 
VALGRIND_RESTORE_STACK
 \

3179 : "Ù" (
_ªs
) \

3180 : "r" (&
_¨gvec
[2]) \

3181 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3183 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3184 } 0)

	)

3189 #i‡
deföed
(
PLAT_µc64À_löux
)

3194 
	#__CALLER_SAVED_REGS
 \

3198 "r11", "r12", "r13"

	)

3205 
	#VALGRIND_ALIGN_STACK
 \

3207 "ædi¸ 1,1,0,59\n\t"

	)

3208 
	#VALGRIND_RESTORE_STACK
 \

3209 "m∏1,28\n\t"

	)

3214 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

3216 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3217 vﬁ©ûê
_¨gvec
[3+0]; \

3218 vﬁ©ûê
_ªs
; \

3220 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3221 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3222 
__asm__
 volatile( \

3223 
VALGRIND_ALIGN_STACK
 \

3228 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3232 
VALGRIND_RESTORE_STACK
 \

3233 : "Ù" (
_ªs
) \

3234 : "r" (&
_¨gvec
[2]) \

3235 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3237 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3238 } 0)

	)

3240 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

3242 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3243 vﬁ©ûê
_¨gvec
[3+1]; \

3244 vﬁ©ûê
_ªs
; \

3246 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3247 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3248 
_¨gvec
[2+1] = ()
¨g1
; \

3249 
__asm__
 volatile( \

3250 
VALGRIND_ALIGN_STACK
 \

3256 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3260 
VALGRIND_RESTORE_STACK
 \

3261 : "Ù" (
_ªs
) \

3262 : "r" (&
_¨gvec
[2]) \

3263 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3265 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3266 } 0)

	)

3268 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

3270 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3271 vﬁ©ûê
_¨gvec
[3+2]; \

3272 vﬁ©ûê
_ªs
; \

3274 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3275 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3276 
_¨gvec
[2+1] = ()
¨g1
; \

3277 
_¨gvec
[2+2] = ()
¨g2
; \

3278 
__asm__
 volatile( \

3279 
VALGRIND_ALIGN_STACK
 \

3286 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3290 
VALGRIND_RESTORE_STACK
 \

3291 : "Ù" (
_ªs
) \

3292 : "r" (&
_¨gvec
[2]) \

3293 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3295 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3296 } 0)

	)

3298 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

3300 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3301 vﬁ©ûê
_¨gvec
[3+3]; \

3302 vﬁ©ûê
_ªs
; \

3304 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3305 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3306 
_¨gvec
[2+1] = ()
¨g1
; \

3307 
_¨gvec
[2+2] = ()
¨g2
; \

3308 
_¨gvec
[2+3] = ()
¨g3
; \

3309 
__asm__
 volatile( \

3310 
VALGRIND_ALIGN_STACK
 \

3318 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3322 
VALGRIND_RESTORE_STACK
 \

3323 : "Ù" (
_ªs
) \

3324 : "r" (&
_¨gvec
[2]) \

3325 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3327 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3328 } 0)

	)

3330 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

3332 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3333 vﬁ©ûê
_¨gvec
[3+4]; \

3334 vﬁ©ûê
_ªs
; \

3336 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3337 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3338 
_¨gvec
[2+1] = ()
¨g1
; \

3339 
_¨gvec
[2+2] = ()
¨g2
; \

3340 
_¨gvec
[2+3] = ()
¨g3
; \

3341 
_¨gvec
[2+4] = ()
¨g4
; \

3342 
__asm__
 volatile( \

3343 
VALGRIND_ALIGN_STACK
 \

3352 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3356 
VALGRIND_RESTORE_STACK
 \

3357 : "Ù" (
_ªs
) \

3358 : "r" (&
_¨gvec
[2]) \

3359 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3361 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3362 } 0)

	)

3364 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

3366 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3367 vﬁ©ûê
_¨gvec
[3+5]; \

3368 vﬁ©ûê
_ªs
; \

3370 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3371 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3372 
_¨gvec
[2+1] = ()
¨g1
; \

3373 
_¨gvec
[2+2] = ()
¨g2
; \

3374 
_¨gvec
[2+3] = ()
¨g3
; \

3375 
_¨gvec
[2+4] = ()
¨g4
; \

3376 
_¨gvec
[2+5] = ()
¨g5
; \

3377 
__asm__
 volatile( \

3378 
VALGRIND_ALIGN_STACK
 \

3388 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3392 
VALGRIND_RESTORE_STACK
 \

3393 : "Ù" (
_ªs
) \

3394 : "r" (&
_¨gvec
[2]) \

3395 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3397 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3398 } 0)

	)

3400 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

3402 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3403 vﬁ©ûê
_¨gvec
[3+6]; \

3404 vﬁ©ûê
_ªs
; \

3406 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3407 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3408 
_¨gvec
[2+1] = ()
¨g1
; \

3409 
_¨gvec
[2+2] = ()
¨g2
; \

3410 
_¨gvec
[2+3] = ()
¨g3
; \

3411 
_¨gvec
[2+4] = ()
¨g4
; \

3412 
_¨gvec
[2+5] = ()
¨g5
; \

3413 
_¨gvec
[2+6] = ()
¨g6
; \

3414 
__asm__
 volatile( \

3415 
VALGRIND_ALIGN_STACK
 \

3426 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3430 
VALGRIND_RESTORE_STACK
 \

3431 : "Ù" (
_ªs
) \

3432 : "r" (&
_¨gvec
[2]) \

3433 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3435 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3436 } 0)

	)

3438 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3439 
¨g7
) \

3441 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3442 vﬁ©ûê
_¨gvec
[3+7]; \

3443 vﬁ©ûê
_ªs
; \

3445 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3446 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3447 
_¨gvec
[2+1] = ()
¨g1
; \

3448 
_¨gvec
[2+2] = ()
¨g2
; \

3449 
_¨gvec
[2+3] = ()
¨g3
; \

3450 
_¨gvec
[2+4] = ()
¨g4
; \

3451 
_¨gvec
[2+5] = ()
¨g5
; \

3452 
_¨gvec
[2+6] = ()
¨g6
; \

3453 
_¨gvec
[2+7] = ()
¨g7
; \

3454 
__asm__
 volatile( \

3455 
VALGRIND_ALIGN_STACK
 \

3467 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3471 
VALGRIND_RESTORE_STACK
 \

3472 : "Ù" (
_ªs
) \

3473 : "r" (&
_¨gvec
[2]) \

3474 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3476 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3477 } 0)

	)

3479 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3480 
¨g7
,
¨g8
) \

3482 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3483 vﬁ©ûê
_¨gvec
[3+8]; \

3484 vﬁ©ûê
_ªs
; \

3486 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3487 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3488 
_¨gvec
[2+1] = ()
¨g1
; \

3489 
_¨gvec
[2+2] = ()
¨g2
; \

3490 
_¨gvec
[2+3] = ()
¨g3
; \

3491 
_¨gvec
[2+4] = ()
¨g4
; \

3492 
_¨gvec
[2+5] = ()
¨g5
; \

3493 
_¨gvec
[2+6] = ()
¨g6
; \

3494 
_¨gvec
[2+7] = ()
¨g7
; \

3495 
_¨gvec
[2+8] = ()
¨g8
; \

3496 
__asm__
 volatile( \

3497 
VALGRIND_ALIGN_STACK
 \

3510 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3514 
VALGRIND_RESTORE_STACK
 \

3515 : "Ù" (
_ªs
) \

3516 : "r" (&
_¨gvec
[2]) \

3517 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3519 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3520 } 0)

	)

3522 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3523 
¨g7
,
¨g8
,
¨g9
) \

3525 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3526 vﬁ©ûê
_¨gvec
[3+9]; \

3527 vﬁ©ûê
_ªs
; \

3529 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3530 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3531 
_¨gvec
[2+1] = ()
¨g1
; \

3532 
_¨gvec
[2+2] = ()
¨g2
; \

3533 
_¨gvec
[2+3] = ()
¨g3
; \

3534 
_¨gvec
[2+4] = ()
¨g4
; \

3535 
_¨gvec
[2+5] = ()
¨g5
; \

3536 
_¨gvec
[2+6] = ()
¨g6
; \

3537 
_¨gvec
[2+7] = ()
¨g7
; \

3538 
_¨gvec
[2+8] = ()
¨g8
; \

3539 
_¨gvec
[2+9] = ()
¨g9
; \

3540 
__asm__
 volatile( \

3541 
VALGRIND_ALIGN_STACK
 \

3559 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3563 
VALGRIND_RESTORE_STACK
 \

3564 : "Ù" (
_ªs
) \

3565 : "r" (&
_¨gvec
[2]) \

3566 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3568 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3569 } 0)

	)

3571 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3572 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

3574 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3575 vﬁ©ûê
_¨gvec
[3+10]; \

3576 vﬁ©ûê
_ªs
; \

3578 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3579 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3580 
_¨gvec
[2+1] = ()
¨g1
; \

3581 
_¨gvec
[2+2] = ()
¨g2
; \

3582 
_¨gvec
[2+3] = ()
¨g3
; \

3583 
_¨gvec
[2+4] = ()
¨g4
; \

3584 
_¨gvec
[2+5] = ()
¨g5
; \

3585 
_¨gvec
[2+6] = ()
¨g6
; \

3586 
_¨gvec
[2+7] = ()
¨g7
; \

3587 
_¨gvec
[2+8] = ()
¨g8
; \

3588 
_¨gvec
[2+9] = ()
¨g9
; \

3589 
_¨gvec
[2+10] = ()
¨g10
; \

3590 
__asm__
 volatile( \

3591 
VALGRIND_ALIGN_STACK
 \

3612 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3616 
VALGRIND_RESTORE_STACK
 \

3617 : "Ù" (
_ªs
) \

3618 : "r" (&
_¨gvec
[2]) \

3619 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3621 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3622 } 0)

	)

3624 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3625 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
) \

3627 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3628 vﬁ©ûê
_¨gvec
[3+11]; \

3629 vﬁ©ûê
_ªs
; \

3631 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3632 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3633 
_¨gvec
[2+1] = ()
¨g1
; \

3634 
_¨gvec
[2+2] = ()
¨g2
; \

3635 
_¨gvec
[2+3] = ()
¨g3
; \

3636 
_¨gvec
[2+4] = ()
¨g4
; \

3637 
_¨gvec
[2+5] = ()
¨g5
; \

3638 
_¨gvec
[2+6] = ()
¨g6
; \

3639 
_¨gvec
[2+7] = ()
¨g7
; \

3640 
_¨gvec
[2+8] = ()
¨g8
; \

3641 
_¨gvec
[2+9] = ()
¨g9
; \

3642 
_¨gvec
[2+10] = ()
¨g10
; \

3643 
_¨gvec
[2+11] = ()
¨g11
; \

3644 
__asm__
 volatile( \

3645 
VALGRIND_ALIGN_STACK
 \

3669 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3673 
VALGRIND_RESTORE_STACK
 \

3674 : "Ù" (
_ªs
) \

3675 : "r" (&
_¨gvec
[2]) \

3676 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3678 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3679 } 0)

	)

3681 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3682 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
,
¨g12
) \

3684 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3685 vﬁ©ûê
_¨gvec
[3+12]; \

3686 vﬁ©ûê
_ªs
; \

3688 
_¨gvec
[1] = ()
_‹ig
.
r2
; \

3689 
_¨gvec
[2] = ()
_‹ig
.
ƒaddr
; \

3690 
_¨gvec
[2+1] = ()
¨g1
; \

3691 
_¨gvec
[2+2] = ()
¨g2
; \

3692 
_¨gvec
[2+3] = ()
¨g3
; \

3693 
_¨gvec
[2+4] = ()
¨g4
; \

3694 
_¨gvec
[2+5] = ()
¨g5
; \

3695 
_¨gvec
[2+6] = ()
¨g6
; \

3696 
_¨gvec
[2+7] = ()
¨g7
; \

3697 
_¨gvec
[2+8] = ()
¨g8
; \

3698 
_¨gvec
[2+9] = ()
¨g9
; \

3699 
_¨gvec
[2+10] = ()
¨g10
; \

3700 
_¨gvec
[2+11] = ()
¨g11
; \

3701 
_¨gvec
[2+12] = ()
¨g12
; \

3702 
__asm__
 volatile( \

3703 
VALGRIND_ALIGN_STACK
 \

3730 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R12
 \

3734 
VALGRIND_RESTORE_STACK
 \

3735 : "Ù" (
_ªs
) \

3736 : "r" (&
_¨gvec
[2]) \

3737 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r28" \

3739 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3740 } 0)

	)

3746 #i‡
deföed
(
PLAT_¨m_löux
)

3749 
	#__CALLER_SAVED_REGS
 "r0", "r1", "r2", "r3","r4", "r12", "r14"

	)

3764 
	#VALGRIND_ALIGN_STACK
 \

3768 "mov sp,Ñ4\n\t"

	)

3769 
	#VALGRIND_RESTORE_STACK
 \

3770 "mov sp,Ñ10\n\t"

	)

3775 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

3777 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3778 vﬁ©ûê
_¨gvec
[1]; \

3779 vﬁ©ûê
_ªs
; \

3780 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3781 
__asm__
 volatile( \

3782 
VALGRIND_ALIGN_STACK
 \

3784 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3785 
VALGRIND_RESTORE_STACK
 \

3787 : "Ù" (
_ªs
) \

3788 : "0" (&
_¨gvec
[0]) \

3789 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3791 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3792 } 0)

	)

3794 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

3796 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3797 vﬁ©ûê
_¨gvec
[2]; \

3798 vﬁ©ûê
_ªs
; \

3799 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3800 
_¨gvec
[1] = ()(
¨g1
); \

3801 
__asm__
 volatile( \

3802 
VALGRIND_ALIGN_STACK
 \

3805 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3806 
VALGRIND_RESTORE_STACK
 \

3808 : "Ù" (
_ªs
) \

3809 : "0" (&
_¨gvec
[0]) \

3810 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3812 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3813 } 0)

	)

3815 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

3817 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3818 vﬁ©ûê
_¨gvec
[3]; \

3819 vﬁ©ûê
_ªs
; \

3820 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3821 
_¨gvec
[1] = ()(
¨g1
); \

3822 
_¨gvec
[2] = ()(
¨g2
); \

3823 
__asm__
 volatile( \

3824 
VALGRIND_ALIGN_STACK
 \

3828 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3829 
VALGRIND_RESTORE_STACK
 \

3831 : "Ù" (
_ªs
) \

3832 : "0" (&
_¨gvec
[0]) \

3833 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3835 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3836 } 0)

	)

3838 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

3840 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3841 vﬁ©ûê
_¨gvec
[4]; \

3842 vﬁ©ûê
_ªs
; \

3843 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3844 
_¨gvec
[1] = ()(
¨g1
); \

3845 
_¨gvec
[2] = ()(
¨g2
); \

3846 
_¨gvec
[3] = ()(
¨g3
); \

3847 
__asm__
 volatile( \

3848 
VALGRIND_ALIGN_STACK
 \

3853 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3854 
VALGRIND_RESTORE_STACK
 \

3856 : "Ù" (
_ªs
) \

3857 : "0" (&
_¨gvec
[0]) \

3858 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3860 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3861 } 0)

	)

3863 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

3865 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3866 vﬁ©ûê
_¨gvec
[5]; \

3867 vﬁ©ûê
_ªs
; \

3868 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3869 
_¨gvec
[1] = ()(
¨g1
); \

3870 
_¨gvec
[2] = ()(
¨g2
); \

3871 
_¨gvec
[3] = ()(
¨g3
); \

3872 
_¨gvec
[4] = ()(
¨g4
); \

3873 
__asm__
 volatile( \

3874 
VALGRIND_ALIGN_STACK
 \

3880 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3881 
VALGRIND_RESTORE_STACK
 \

3883 : "Ù" (
_ªs
) \

3884 : "0" (&
_¨gvec
[0]) \

3885 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3887 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3888 } 0)

	)

3890 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

3892 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3893 vﬁ©ûê
_¨gvec
[6]; \

3894 vﬁ©ûê
_ªs
; \

3895 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3896 
_¨gvec
[1] = ()(
¨g1
); \

3897 
_¨gvec
[2] = ()(
¨g2
); \

3898 
_¨gvec
[3] = ()(
¨g3
); \

3899 
_¨gvec
[4] = ()(
¨g4
); \

3900 
_¨gvec
[5] = ()(
¨g5
); \

3901 
__asm__
 volatile( \

3902 
VALGRIND_ALIGN_STACK
 \

3911 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3912 
VALGRIND_RESTORE_STACK
 \

3914 : "Ù" (
_ªs
) \

3915 : "0" (&
_¨gvec
[0]) \

3916 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3918 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3919 } 0)

	)

3921 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

3923 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3924 vﬁ©ûê
_¨gvec
[7]; \

3925 vﬁ©ûê
_ªs
; \

3926 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3927 
_¨gvec
[1] = ()(
¨g1
); \

3928 
_¨gvec
[2] = ()(
¨g2
); \

3929 
_¨gvec
[3] = ()(
¨g3
); \

3930 
_¨gvec
[4] = ()(
¨g4
); \

3931 
_¨gvec
[5] = ()(
¨g5
); \

3932 
_¨gvec
[6] = ()(
¨g6
); \

3933 
__asm__
 volatile( \

3934 
VALGRIND_ALIGN_STACK
 \

3943 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3944 
VALGRIND_RESTORE_STACK
 \

3946 : "Ù" (
_ªs
) \

3947 : "0" (&
_¨gvec
[0]) \

3948 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3950 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3951 } 0)

	)

3953 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3954 
¨g7
) \

3956 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3957 vﬁ©ûê
_¨gvec
[8]; \

3958 vﬁ©ûê
_ªs
; \

3959 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3960 
_¨gvec
[1] = ()(
¨g1
); \

3961 
_¨gvec
[2] = ()(
¨g2
); \

3962 
_¨gvec
[3] = ()(
¨g3
); \

3963 
_¨gvec
[4] = ()(
¨g4
); \

3964 
_¨gvec
[5] = ()(
¨g5
); \

3965 
_¨gvec
[6] = ()(
¨g6
); \

3966 
_¨gvec
[7] = ()(
¨g7
); \

3967 
__asm__
 volatile( \

3968 
VALGRIND_ALIGN_STACK
 \

3979 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

3980 
VALGRIND_RESTORE_STACK
 \

3982 : "Ù" (
_ªs
) \

3983 : "0" (&
_¨gvec
[0]) \

3984 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

3986 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

3987 } 0)

	)

3989 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

3990 
¨g7
,
¨g8
) \

3992 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

3993 vﬁ©ûê
_¨gvec
[9]; \

3994 vﬁ©ûê
_ªs
; \

3995 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

3996 
_¨gvec
[1] = ()(
¨g1
); \

3997 
_¨gvec
[2] = ()(
¨g2
); \

3998 
_¨gvec
[3] = ()(
¨g3
); \

3999 
_¨gvec
[4] = ()(
¨g4
); \

4000 
_¨gvec
[5] = ()(
¨g5
); \

4001 
_¨gvec
[6] = ()(
¨g6
); \

4002 
_¨gvec
[7] = ()(
¨g7
); \

4003 
_¨gvec
[8] = ()(
¨g8
); \

4004 
__asm__
 volatile( \

4005 
VALGRIND_ALIGN_STACK
 \

4016 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

4017 
VALGRIND_RESTORE_STACK
 \

4019 : "Ù" (
_ªs
) \

4020 : "0" (&
_¨gvec
[0]) \

4021 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

4023 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4024 } 0)

	)

4026 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4027 
¨g7
,
¨g8
,
¨g9
) \

4029 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4030 vﬁ©ûê
_¨gvec
[10]; \

4031 vﬁ©ûê
_ªs
; \

4032 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4033 
_¨gvec
[1] = ()(
¨g1
); \

4034 
_¨gvec
[2] = ()(
¨g2
); \

4035 
_¨gvec
[3] = ()(
¨g3
); \

4036 
_¨gvec
[4] = ()(
¨g4
); \

4037 
_¨gvec
[5] = ()(
¨g5
); \

4038 
_¨gvec
[6] = ()(
¨g6
); \

4039 
_¨gvec
[7] = ()(
¨g7
); \

4040 
_¨gvec
[8] = ()(
¨g8
); \

4041 
_¨gvec
[9] = ()(
¨g9
); \

4042 
__asm__
 volatile( \

4043 
VALGRIND_ALIGN_STACK
 \

4056 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

4057 
VALGRIND_RESTORE_STACK
 \

4059 : "Ù" (
_ªs
) \

4060 : "0" (&
_¨gvec
[0]) \

4061 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

4063 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4064 } 0)

	)

4066 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4067 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

4069 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4070 vﬁ©ûê
_¨gvec
[11]; \

4071 vﬁ©ûê
_ªs
; \

4072 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4073 
_¨gvec
[1] = ()(
¨g1
); \

4074 
_¨gvec
[2] = ()(
¨g2
); \

4075 
_¨gvec
[3] = ()(
¨g3
); \

4076 
_¨gvec
[4] = ()(
¨g4
); \

4077 
_¨gvec
[5] = ()(
¨g5
); \

4078 
_¨gvec
[6] = ()(
¨g6
); \

4079 
_¨gvec
[7] = ()(
¨g7
); \

4080 
_¨gvec
[8] = ()(
¨g8
); \

4081 
_¨gvec
[9] = ()(
¨g9
); \

4082 
_¨gvec
[10] = ()(
¨g10
); \

4083 
__asm__
 volatile( \

4084 
VALGRIND_ALIGN_STACK
 \

4098 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

4099 
VALGRIND_RESTORE_STACK
 \

4101 : "Ù" (
_ªs
) \

4102 : "0" (&
_¨gvec
[0]) \

4103 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

4105 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4106 } 0)

	)

4108 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

4109 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

4110 
¨g11
) \

4112 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4113 vﬁ©ûê
_¨gvec
[12]; \

4114 vﬁ©ûê
_ªs
; \

4115 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4116 
_¨gvec
[1] = ()(
¨g1
); \

4117 
_¨gvec
[2] = ()(
¨g2
); \

4118 
_¨gvec
[3] = ()(
¨g3
); \

4119 
_¨gvec
[4] = ()(
¨g4
); \

4120 
_¨gvec
[5] = ()(
¨g5
); \

4121 
_¨gvec
[6] = ()(
¨g6
); \

4122 
_¨gvec
[7] = ()(
¨g7
); \

4123 
_¨gvec
[8] = ()(
¨g8
); \

4124 
_¨gvec
[9] = ()(
¨g9
); \

4125 
_¨gvec
[10] = ()(
¨g10
); \

4126 
_¨gvec
[11] = ()(
¨g11
); \

4127 
__asm__
 volatile( \

4128 
VALGRIND_ALIGN_STACK
 \

4144 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

4145 
VALGRIND_RESTORE_STACK
 \

4147 : "Ù" (
_ªs
) \

4148 : "0" (&
_¨gvec
[0]) \

4149 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

4151 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4152 } 0)

	)

4154 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

4155 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

4156 
¨g11
,
¨g12
) \

4158 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4159 vﬁ©ûê
_¨gvec
[13]; \

4160 vﬁ©ûê
_ªs
; \

4161 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4162 
_¨gvec
[1] = ()(
¨g1
); \

4163 
_¨gvec
[2] = ()(
¨g2
); \

4164 
_¨gvec
[3] = ()(
¨g3
); \

4165 
_¨gvec
[4] = ()(
¨g4
); \

4166 
_¨gvec
[5] = ()(
¨g5
); \

4167 
_¨gvec
[6] = ()(
¨g6
); \

4168 
_¨gvec
[7] = ()(
¨g7
); \

4169 
_¨gvec
[8] = ()(
¨g8
); \

4170 
_¨gvec
[9] = ()(
¨g9
); \

4171 
_¨gvec
[10] = ()(
¨g10
); \

4172 
_¨gvec
[11] = ()(
¨g11
); \

4173 
_¨gvec
[12] = ()(
¨g12
); \

4174 
__asm__
 volatile( \

4175 
VALGRIND_ALIGN_STACK
 \

4191 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4
 \

4192 
VALGRIND_RESTORE_STACK
 \

4194 : "Ù" (
_ªs
) \

4195 : "0" (&
_¨gvec
[0]) \

4196 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "r10" \

4198 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4199 } 0)

	)

4205 #i‡
deföed
(
PLAT_¨m64_löux
)

4208 
	#__CALLER_SAVED_REGS
 \

4215 "v26", "v27", "v28", "v29", "v30", "v31"

	)

4219 
	#VALGRIND_ALIGN_STACK
 \

4221 "bi¯•, x21, #15\n\t"

	)

4222 
	#VALGRIND_RESTORE_STACK
 \

4223 "mov sp, x21\n\t"

	)

4228 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

4230 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4231 vﬁ©ûê
_¨gvec
[1]; \

4232 vﬁ©ûê
_ªs
; \

4233 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4234 
__asm__
 volatile( \

4235 
VALGRIND_ALIGN_STACK
 \

4237 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4238 
VALGRIND_RESTORE_STACK
 \

4240 : "Ù" (
_ªs
) \

4241 : "0" (&
_¨gvec
[0]) \

4242 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4244 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4245 } 0)

	)

4247 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

4249 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4250 vﬁ©ûê
_¨gvec
[2]; \

4251 vﬁ©ûê
_ªs
; \

4252 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4253 
_¨gvec
[1] = ()(
¨g1
); \

4254 
__asm__
 volatile( \

4255 
VALGRIND_ALIGN_STACK
 \

4258 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4259 
VALGRIND_RESTORE_STACK
 \

4261 : "Ù" (
_ªs
) \

4262 : "0" (&
_¨gvec
[0]) \

4263 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4265 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4266 } 0)

	)

4268 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

4270 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4271 vﬁ©ûê
_¨gvec
[3]; \

4272 vﬁ©ûê
_ªs
; \

4273 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4274 
_¨gvec
[1] = ()(
¨g1
); \

4275 
_¨gvec
[2] = ()(
¨g2
); \

4276 
__asm__
 volatile( \

4277 
VALGRIND_ALIGN_STACK
 \

4281 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4282 
VALGRIND_RESTORE_STACK
 \

4284 : "Ù" (
_ªs
) \

4285 : "0" (&
_¨gvec
[0]) \

4286 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4288 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4289 } 0)

	)

4291 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

4293 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4294 vﬁ©ûê
_¨gvec
[4]; \

4295 vﬁ©ûê
_ªs
; \

4296 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4297 
_¨gvec
[1] = ()(
¨g1
); \

4298 
_¨gvec
[2] = ()(
¨g2
); \

4299 
_¨gvec
[3] = ()(
¨g3
); \

4300 
__asm__
 volatile( \

4301 
VALGRIND_ALIGN_STACK
 \

4306 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4307 
VALGRIND_RESTORE_STACK
 \

4309 : "Ù" (
_ªs
) \

4310 : "0" (&
_¨gvec
[0]) \

4311 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4313 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4314 } 0)

	)

4316 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

4318 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4319 vﬁ©ûê
_¨gvec
[5]; \

4320 vﬁ©ûê
_ªs
; \

4321 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4322 
_¨gvec
[1] = ()(
¨g1
); \

4323 
_¨gvec
[2] = ()(
¨g2
); \

4324 
_¨gvec
[3] = ()(
¨g3
); \

4325 
_¨gvec
[4] = ()(
¨g4
); \

4326 
__asm__
 volatile( \

4327 
VALGRIND_ALIGN_STACK
 \

4333 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4334 
VALGRIND_RESTORE_STACK
 \

4336 : "Ù" (
_ªs
) \

4337 : "0" (&
_¨gvec
[0]) \

4338 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4340 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4341 } 0)

	)

4343 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

4345 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4346 vﬁ©ûê
_¨gvec
[6]; \

4347 vﬁ©ûê
_ªs
; \

4348 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4349 
_¨gvec
[1] = ()(
¨g1
); \

4350 
_¨gvec
[2] = ()(
¨g2
); \

4351 
_¨gvec
[3] = ()(
¨g3
); \

4352 
_¨gvec
[4] = ()(
¨g4
); \

4353 
_¨gvec
[5] = ()(
¨g5
); \

4354 
__asm__
 volatile( \

4355 
VALGRIND_ALIGN_STACK
 \

4362 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4363 
VALGRIND_RESTORE_STACK
 \

4365 : "Ù" (
_ªs
) \

4366 : "0" (&
_¨gvec
[0]) \

4367 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4369 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4370 } 0)

	)

4372 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

4374 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4375 vﬁ©ûê
_¨gvec
[7]; \

4376 vﬁ©ûê
_ªs
; \

4377 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4378 
_¨gvec
[1] = ()(
¨g1
); \

4379 
_¨gvec
[2] = ()(
¨g2
); \

4380 
_¨gvec
[3] = ()(
¨g3
); \

4381 
_¨gvec
[4] = ()(
¨g4
); \

4382 
_¨gvec
[5] = ()(
¨g5
); \

4383 
_¨gvec
[6] = ()(
¨g6
); \

4384 
__asm__
 volatile( \

4385 
VALGRIND_ALIGN_STACK
 \

4393 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4394 
VALGRIND_RESTORE_STACK
 \

4396 : "Ù" (
_ªs
) \

4397 : "0" (&
_¨gvec
[0]) \

4398 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4400 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4401 } 0)

	)

4403 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4404 
¨g7
) \

4406 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4407 vﬁ©ûê
_¨gvec
[8]; \

4408 vﬁ©ûê
_ªs
; \

4409 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4410 
_¨gvec
[1] = ()(
¨g1
); \

4411 
_¨gvec
[2] = ()(
¨g2
); \

4412 
_¨gvec
[3] = ()(
¨g3
); \

4413 
_¨gvec
[4] = ()(
¨g4
); \

4414 
_¨gvec
[5] = ()(
¨g5
); \

4415 
_¨gvec
[6] = ()(
¨g6
); \

4416 
_¨gvec
[7] = ()(
¨g7
); \

4417 
__asm__
 volatile( \

4418 
VALGRIND_ALIGN_STACK
 \

4427 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4428 
VALGRIND_RESTORE_STACK
 \

4430 : "Ù" (
_ªs
) \

4431 : "0" (&
_¨gvec
[0]) \

4432 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4434 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4435 } 0)

	)

4437 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4438 
¨g7
,
¨g8
) \

4440 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4441 vﬁ©ûê
_¨gvec
[9]; \

4442 vﬁ©ûê
_ªs
; \

4443 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4444 
_¨gvec
[1] = ()(
¨g1
); \

4445 
_¨gvec
[2] = ()(
¨g2
); \

4446 
_¨gvec
[3] = ()(
¨g3
); \

4447 
_¨gvec
[4] = ()(
¨g4
); \

4448 
_¨gvec
[5] = ()(
¨g5
); \

4449 
_¨gvec
[6] = ()(
¨g6
); \

4450 
_¨gvec
[7] = ()(
¨g7
); \

4451 
_¨gvec
[8] = ()(
¨g8
); \

4452 
__asm__
 volatile( \

4453 
VALGRIND_ALIGN_STACK
 \

4463 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4464 
VALGRIND_RESTORE_STACK
 \

4466 : "Ù" (
_ªs
) \

4467 : "0" (&
_¨gvec
[0]) \

4468 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4470 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4471 } 0)

	)

4473 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4474 
¨g7
,
¨g8
,
¨g9
) \

4476 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4477 vﬁ©ûê
_¨gvec
[10]; \

4478 vﬁ©ûê
_ªs
; \

4479 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4480 
_¨gvec
[1] = ()(
¨g1
); \

4481 
_¨gvec
[2] = ()(
¨g2
); \

4482 
_¨gvec
[3] = ()(
¨g3
); \

4483 
_¨gvec
[4] = ()(
¨g4
); \

4484 
_¨gvec
[5] = ()(
¨g5
); \

4485 
_¨gvec
[6] = ()(
¨g6
); \

4486 
_¨gvec
[7] = ()(
¨g7
); \

4487 
_¨gvec
[8] = ()(
¨g8
); \

4488 
_¨gvec
[9] = ()(
¨g9
); \

4489 
__asm__
 volatile( \

4490 
VALGRIND_ALIGN_STACK
 \

4503 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4504 
VALGRIND_RESTORE_STACK
 \

4506 : "Ù" (
_ªs
) \

4507 : "0" (&
_¨gvec
[0]) \

4508 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4510 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4511 } 0)

	)

4513 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4514 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

4516 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4517 vﬁ©ûê
_¨gvec
[11]; \

4518 vﬁ©ûê
_ªs
; \

4519 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4520 
_¨gvec
[1] = ()(
¨g1
); \

4521 
_¨gvec
[2] = ()(
¨g2
); \

4522 
_¨gvec
[3] = ()(
¨g3
); \

4523 
_¨gvec
[4] = ()(
¨g4
); \

4524 
_¨gvec
[5] = ()(
¨g5
); \

4525 
_¨gvec
[6] = ()(
¨g6
); \

4526 
_¨gvec
[7] = ()(
¨g7
); \

4527 
_¨gvec
[8] = ()(
¨g8
); \

4528 
_¨gvec
[9] = ()(
¨g9
); \

4529 
_¨gvec
[10] = ()(
¨g10
); \

4530 
__asm__
 volatile( \

4531 
VALGRIND_ALIGN_STACK
 \

4546 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4547 
VALGRIND_RESTORE_STACK
 \

4549 : "Ù" (
_ªs
) \

4550 : "0" (&
_¨gvec
[0]) \

4551 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4553 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4554 } 0)

	)

4556 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4557 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
) \

4559 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4560 vﬁ©ûê
_¨gvec
[12]; \

4561 vﬁ©ûê
_ªs
; \

4562 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4563 
_¨gvec
[1] = ()(
¨g1
); \

4564 
_¨gvec
[2] = ()(
¨g2
); \

4565 
_¨gvec
[3] = ()(
¨g3
); \

4566 
_¨gvec
[4] = ()(
¨g4
); \

4567 
_¨gvec
[5] = ()(
¨g5
); \

4568 
_¨gvec
[6] = ()(
¨g6
); \

4569 
_¨gvec
[7] = ()(
¨g7
); \

4570 
_¨gvec
[8] = ()(
¨g8
); \

4571 
_¨gvec
[9] = ()(
¨g9
); \

4572 
_¨gvec
[10] = ()(
¨g10
); \

4573 
_¨gvec
[11] = ()(
¨g11
); \

4574 
__asm__
 volatile( \

4575 
VALGRIND_ALIGN_STACK
 \

4592 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4593 
VALGRIND_RESTORE_STACK
 \

4595 : "Ù" (
_ªs
) \

4596 : "0" (&
_¨gvec
[0]) \

4597 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4599 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4600 } 0)

	)

4602 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

4603 
¨g7
,
¨g8
,
¨g9
,
¨g10
,
¨g11
, \

4604 
¨g12
) \

4606 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4607 vﬁ©ûê
_¨gvec
[13]; \

4608 vﬁ©ûê
_ªs
; \

4609 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4610 
_¨gvec
[1] = ()(
¨g1
); \

4611 
_¨gvec
[2] = ()(
¨g2
); \

4612 
_¨gvec
[3] = ()(
¨g3
); \

4613 
_¨gvec
[4] = ()(
¨g4
); \

4614 
_¨gvec
[5] = ()(
¨g5
); \

4615 
_¨gvec
[6] = ()(
¨g6
); \

4616 
_¨gvec
[7] = ()(
¨g7
); \

4617 
_¨gvec
[8] = ()(
¨g8
); \

4618 
_¨gvec
[9] = ()(
¨g9
); \

4619 
_¨gvec
[10] = ()(
¨g10
); \

4620 
_¨gvec
[11] = ()(
¨g11
); \

4621 
_¨gvec
[12] = ()(
¨g12
); \

4622 
__asm__
 volatile( \

4623 
VALGRIND_ALIGN_STACK
 \

4642 
VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_X8
 \

4643 
VALGRIND_RESTORE_STACK
 \

4645 : "Ù" (
_ªs
) \

4646 : "0" (&
_¨gvec
[0]) \

4647 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
, "x21" \

4649 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4650 } 0)

	)

4656 #i‡
deföed
(
PLAT_s390x_löux
)

4662 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__GCC_HAVE_DWARF2_CFI_ASM
)

4663 
	#__FRAME_POINTER
 \

4664 ,"d"(
	`__buûtö_dw¨f_cÁ
())

	)

4665 
	#VALGRIND_CFI_PROLOGUE
 \

4670 ".cfi_def_cÁÑ11, 0\n\t"

	)

4671 
	#VALGRIND_CFI_EPILOGUE
 \

4673 ".cfi_ª°‹e_°©e\n\t"

	)

4675 
	#__FRAME_POINTER


	)

4676 
	#VALGRIND_CFI_PROLOGUE
 \

4677 "lg∏1,%1\n\t"

	)

4678 
	#VALGRIND_CFI_EPILOGUE


	)

4690 
	#__CALLER_SAVED_REGS
 "0","1","2","3","4","5","14", \

4691 "f0","f1","f2","f3","f4","f5","f6","f7"

	)

4702 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

4704 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4705 vﬁ©ûê
_¨gvec
[1]; \

4706 vﬁ©ûê
_ªs
; \

4707 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4708 
__asm__
 volatile( \

4709 
VALGRIND_CFI_PROLOGUE
 \

4712 
VALGRIND_CALL_NOREDIR_R1
 \

4715 
VALGRIND_CFI_EPILOGUE
 \

4716 : "=d" (
_ªs
) \

4717 : "d" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4718 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"7" \

4720 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4721 } 0)

	)

4724 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

4726 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4727 vﬁ©ûê
_¨gvec
[2]; \

4728 vﬁ©ûê
_ªs
; \

4729 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4730 
_¨gvec
[1] = ()
¨g1
; \

4731 
__asm__
 volatile( \

4732 
VALGRIND_CFI_PROLOGUE
 \

4736 
VALGRIND_CALL_NOREDIR_R1
 \

4739 
VALGRIND_CFI_EPILOGUE
 \

4740 : "=d" (
_ªs
) \

4741 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4742 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"7" \

4744 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4745 } 0)

	)

4747 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
) \

4749 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4750 vﬁ©ûê
_¨gvec
[3]; \

4751 vﬁ©ûê
_ªs
; \

4752 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4753 
_¨gvec
[1] = ()
¨g1
; \

4754 
_¨gvec
[2] = ()
¨g2
; \

4755 
__asm__
 volatile( \

4756 
VALGRIND_CFI_PROLOGUE
 \

4761 
VALGRIND_CALL_NOREDIR_R1
 \

4764 
VALGRIND_CFI_EPILOGUE
 \

4765 : "=d" (
_ªs
) \

4766 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4767 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"7" \

4769 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4770 } 0)

	)

4772 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
) \

4774 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4775 vﬁ©ûê
_¨gvec
[4]; \

4776 vﬁ©ûê
_ªs
; \

4777 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4778 
_¨gvec
[1] = ()
¨g1
; \

4779 
_¨gvec
[2] = ()
¨g2
; \

4780 
_¨gvec
[3] = ()
¨g3
; \

4781 
__asm__
 volatile( \

4782 
VALGRIND_CFI_PROLOGUE
 \

4788 
VALGRIND_CALL_NOREDIR_R1
 \

4791 
VALGRIND_CFI_EPILOGUE
 \

4792 : "=d" (
_ªs
) \

4793 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4794 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"7" \

4796 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4797 } 0)

	)

4799 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

4801 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4802 vﬁ©ûê
_¨gvec
[5]; \

4803 vﬁ©ûê
_ªs
; \

4804 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4805 
_¨gvec
[1] = ()
¨g1
; \

4806 
_¨gvec
[2] = ()
¨g2
; \

4807 
_¨gvec
[3] = ()
¨g3
; \

4808 
_¨gvec
[4] = ()
¨g4
; \

4809 
__asm__
 volatile( \

4810 
VALGRIND_CFI_PROLOGUE
 \

4817 
VALGRIND_CALL_NOREDIR_R1
 \

4820 
VALGRIND_CFI_EPILOGUE
 \

4821 : "=d" (
_ªs
) \

4822 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4823 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"7" \

4825 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4826 } 0)

	)

4828 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

4830 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4831 vﬁ©ûê
_¨gvec
[6]; \

4832 vﬁ©ûê
_ªs
; \

4833 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4834 
_¨gvec
[1] = ()
¨g1
; \

4835 
_¨gvec
[2] = ()
¨g2
; \

4836 
_¨gvec
[3] = ()
¨g3
; \

4837 
_¨gvec
[4] = ()
¨g4
; \

4838 
_¨gvec
[5] = ()
¨g5
; \

4839 
__asm__
 volatile( \

4840 
VALGRIND_CFI_PROLOGUE
 \

4848 
VALGRIND_CALL_NOREDIR_R1
 \

4851 
VALGRIND_CFI_EPILOGUE
 \

4852 : "=d" (
_ªs
) \

4853 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4854 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

4856 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4857 } 0)

	)

4859 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

4860 
¨g6
) \

4862 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4863 vﬁ©ûê
_¨gvec
[7]; \

4864 vﬁ©ûê
_ªs
; \

4865 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4866 
_¨gvec
[1] = ()
¨g1
; \

4867 
_¨gvec
[2] = ()
¨g2
; \

4868 
_¨gvec
[3] = ()
¨g3
; \

4869 
_¨gvec
[4] = ()
¨g4
; \

4870 
_¨gvec
[5] = ()
¨g5
; \

4871 
_¨gvec
[6] = ()
¨g6
; \

4872 
__asm__
 volatile( \

4873 
VALGRIND_CFI_PROLOGUE
 \

4882 
VALGRIND_CALL_NOREDIR_R1
 \

4885 
VALGRIND_CFI_EPILOGUE
 \

4886 : "=d" (
_ªs
) \

4887 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4888 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

4890 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4891 } 0)

	)

4893 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

4894 
¨g6
, 
¨g7
) \

4896 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4897 vﬁ©ûê
_¨gvec
[8]; \

4898 vﬁ©ûê
_ªs
; \

4899 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4900 
_¨gvec
[1] = ()
¨g1
; \

4901 
_¨gvec
[2] = ()
¨g2
; \

4902 
_¨gvec
[3] = ()
¨g3
; \

4903 
_¨gvec
[4] = ()
¨g4
; \

4904 
_¨gvec
[5] = ()
¨g5
; \

4905 
_¨gvec
[6] = ()
¨g6
; \

4906 
_¨gvec
[7] = ()
¨g7
; \

4907 
__asm__
 volatile( \

4908 
VALGRIND_CFI_PROLOGUE
 \

4918 
VALGRIND_CALL_NOREDIR_R1
 \

4921 
VALGRIND_CFI_EPILOGUE
 \

4922 : "=d" (
_ªs
) \

4923 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4924 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

4926 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4927 } 0)

	)

4929 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

4930 
¨g6
, 
¨g7
 ,
¨g8
) \

4932 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4933 vﬁ©ûê
_¨gvec
[9]; \

4934 vﬁ©ûê
_ªs
; \

4935 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4936 
_¨gvec
[1] = ()
¨g1
; \

4937 
_¨gvec
[2] = ()
¨g2
; \

4938 
_¨gvec
[3] = ()
¨g3
; \

4939 
_¨gvec
[4] = ()
¨g4
; \

4940 
_¨gvec
[5] = ()
¨g5
; \

4941 
_¨gvec
[6] = ()
¨g6
; \

4942 
_¨gvec
[7] = ()
¨g7
; \

4943 
_¨gvec
[8] = ()
¨g8
; \

4944 
__asm__
 volatile( \

4945 
VALGRIND_CFI_PROLOGUE
 \

4956 
VALGRIND_CALL_NOREDIR_R1
 \

4959 
VALGRIND_CFI_EPILOGUE
 \

4960 : "=d" (
_ªs
) \

4961 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

4962 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

4964 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

4965 } 0)

	)

4967 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

4968 
¨g6
, 
¨g7
 ,
¨g8
, 
¨g9
) \

4970 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

4971 vﬁ©ûê
_¨gvec
[10]; \

4972 vﬁ©ûê
_ªs
; \

4973 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

4974 
_¨gvec
[1] = ()
¨g1
; \

4975 
_¨gvec
[2] = ()
¨g2
; \

4976 
_¨gvec
[3] = ()
¨g3
; \

4977 
_¨gvec
[4] = ()
¨g4
; \

4978 
_¨gvec
[5] = ()
¨g5
; \

4979 
_¨gvec
[6] = ()
¨g6
; \

4980 
_¨gvec
[7] = ()
¨g7
; \

4981 
_¨gvec
[8] = ()
¨g8
; \

4982 
_¨gvec
[9] = ()
¨g9
; \

4983 
__asm__
 volatile( \

4984 
VALGRIND_CFI_PROLOGUE
 \

4996 
VALGRIND_CALL_NOREDIR_R1
 \

4999 
VALGRIND_CFI_EPILOGUE
 \

5000 : "=d" (
_ªs
) \

5001 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

5002 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

5004 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5005 } 0)

	)

5007 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

5008 
¨g6
, 
¨g7
 ,
¨g8
, 
¨g9
, 
¨g10
) \

5010 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5011 vﬁ©ûê
_¨gvec
[11]; \

5012 vﬁ©ûê
_ªs
; \

5013 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5014 
_¨gvec
[1] = ()
¨g1
; \

5015 
_¨gvec
[2] = ()
¨g2
; \

5016 
_¨gvec
[3] = ()
¨g3
; \

5017 
_¨gvec
[4] = ()
¨g4
; \

5018 
_¨gvec
[5] = ()
¨g5
; \

5019 
_¨gvec
[6] = ()
¨g6
; \

5020 
_¨gvec
[7] = ()
¨g7
; \

5021 
_¨gvec
[8] = ()
¨g8
; \

5022 
_¨gvec
[9] = ()
¨g9
; \

5023 
_¨gvec
[10] = ()
¨g10
; \

5024 
__asm__
 volatile( \

5025 
VALGRIND_CFI_PROLOGUE
 \

5038 
VALGRIND_CALL_NOREDIR_R1
 \

5041 
VALGRIND_CFI_EPILOGUE
 \

5042 : "=d" (
_ªs
) \

5043 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

5044 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

5046 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5047 } 0)

	)

5049 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

5050 
¨g6
, 
¨g7
 ,
¨g8
, 
¨g9
, 
¨g10
, 
¨g11
) \

5052 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5053 vﬁ©ûê
_¨gvec
[12]; \

5054 vﬁ©ûê
_ªs
; \

5055 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5056 
_¨gvec
[1] = ()
¨g1
; \

5057 
_¨gvec
[2] = ()
¨g2
; \

5058 
_¨gvec
[3] = ()
¨g3
; \

5059 
_¨gvec
[4] = ()
¨g4
; \

5060 
_¨gvec
[5] = ()
¨g5
; \

5061 
_¨gvec
[6] = ()
¨g6
; \

5062 
_¨gvec
[7] = ()
¨g7
; \

5063 
_¨gvec
[8] = ()
¨g8
; \

5064 
_¨gvec
[9] = ()
¨g9
; \

5065 
_¨gvec
[10] = ()
¨g10
; \

5066 
_¨gvec
[11] = ()
¨g11
; \

5067 
__asm__
 volatile( \

5068 
VALGRIND_CFI_PROLOGUE
 \

5082 
VALGRIND_CALL_NOREDIR_R1
 \

5085 
VALGRIND_CFI_EPILOGUE
 \

5086 : "=d" (
_ªs
) \

5087 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

5088 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

5090 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5091 } 0)

	)

5093 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

5094 
¨g6
, 
¨g7
 ,
¨g8
, 
¨g9
, 
¨g10
, 
¨g11
, 
¨g12
)\

5096 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5097 vﬁ©ûê
_¨gvec
[13]; \

5098 vﬁ©ûê
_ªs
; \

5099 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5100 
_¨gvec
[1] = ()
¨g1
; \

5101 
_¨gvec
[2] = ()
¨g2
; \

5102 
_¨gvec
[3] = ()
¨g3
; \

5103 
_¨gvec
[4] = ()
¨g4
; \

5104 
_¨gvec
[5] = ()
¨g5
; \

5105 
_¨gvec
[6] = ()
¨g6
; \

5106 
_¨gvec
[7] = ()
¨g7
; \

5107 
_¨gvec
[8] = ()
¨g8
; \

5108 
_¨gvec
[9] = ()
¨g9
; \

5109 
_¨gvec
[10] = ()
¨g10
; \

5110 
_¨gvec
[11] = ()
¨g11
; \

5111 
_¨gvec
[12] = ()
¨g12
; \

5112 
__asm__
 volatile( \

5113 
VALGRIND_CFI_PROLOGUE
 \

5128 
VALGRIND_CALL_NOREDIR_R1
 \

5131 
VALGRIND_CFI_EPILOGUE
 \

5132 : "=d" (
_ªs
) \

5133 : "a" (&
_¨gvec
[0]Ë
__FRAME_POINTER
 \

5134 : "cc", "mem‹y", 
__CALLER_SAVED_REGS
,"6","7" \

5136 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5137 } 0)

	)

5144 #i‡
deföed
(
PLAT_mùs32_löux
)

5147 
	#__CALLER_SAVED_REGS
 "$2", "$3", "$4", "$5", "$6", \

5149 "$25", "$31"

	)

5154 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

5156 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5157 vﬁ©ûê
_¨gvec
[1]; \

5158 vﬁ©ûê
_ªs
; \

5159 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5160 
__asm__
 volatile( \

5166 
VALGRIND_CALL_NOREDIR_T9
 \

5172 : "Ù" (
_ªs
) \

5173 : "0" (&
_¨gvec
[0]) \

5174 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5176 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5177 } 0)

	)

5179 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

5181 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5182 vﬁ©ûê
_¨gvec
[2]; \

5183 vﬁ©ûê
_ªs
; \

5184 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5185 
_¨gvec
[1] = ()(
¨g1
); \

5186 
__asm__
 volatile( \

5193 
VALGRIND_CALL_NOREDIR_T9
 \

5199 : "Ù" (
_ªs
) \

5200 : "0" (&
_¨gvec
[0]) \

5201 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5203 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5204 } 0)

	)

5206 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

5208 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5209 vﬁ©ûê
_¨gvec
[3]; \

5210 vﬁ©ûê
_ªs
; \

5211 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5212 
_¨gvec
[1] = ()(
¨g1
); \

5213 
_¨gvec
[2] = ()(
¨g2
); \

5214 
__asm__
 volatile( \

5222 
VALGRIND_CALL_NOREDIR_T9
 \

5228 : "Ù" (
_ªs
) \

5229 : "0" (&
_¨gvec
[0]) \

5230 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5232 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5233 } 0)

	)

5235 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

5237 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5238 vﬁ©ûê
_¨gvec
[4]; \

5239 vﬁ©ûê
_ªs
; \

5240 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5241 
_¨gvec
[1] = ()(
¨g1
); \

5242 
_¨gvec
[2] = ()(
¨g2
); \

5243 
_¨gvec
[3] = ()(
¨g3
); \

5244 
__asm__
 volatile( \

5253 
VALGRIND_CALL_NOREDIR_T9
 \

5259 : "Ù" (
_ªs
) \

5260 : "0" (&
_¨gvec
[0]) \

5261 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5263 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5264 } 0)

	)

5266 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

5268 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5269 vﬁ©ûê
_¨gvec
[5]; \

5270 vﬁ©ûê
_ªs
; \

5271 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5272 
_¨gvec
[1] = ()(
¨g1
); \

5273 
_¨gvec
[2] = ()(
¨g2
); \

5274 
_¨gvec
[3] = ()(
¨g3
); \

5275 
_¨gvec
[4] = ()(
¨g4
); \

5276 
__asm__
 volatile( \

5286 
VALGRIND_CALL_NOREDIR_T9
 \

5292 : "Ù" (
_ªs
) \

5293 : "0" (&
_¨gvec
[0]) \

5294 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5296 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5297 } 0)

	)

5299 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

5301 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5302 vﬁ©ûê
_¨gvec
[6]; \

5303 vﬁ©ûê
_ªs
; \

5304 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5305 
_¨gvec
[1] = ()(
¨g1
); \

5306 
_¨gvec
[2] = ()(
¨g2
); \

5307 
_¨gvec
[3] = ()(
¨g3
); \

5308 
_¨gvec
[4] = ()(
¨g4
); \

5309 
_¨gvec
[5] = ()(
¨g5
); \

5310 
__asm__
 volatile( \

5322 
VALGRIND_CALL_NOREDIR_T9
 \

5328 : "Ù" (
_ªs
) \

5329 : "0" (&
_¨gvec
[0]) \

5330 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5332 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5333 } 0)

	)

5334 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

5336 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5337 vﬁ©ûê
_¨gvec
[7]; \

5338 vﬁ©ûê
_ªs
; \

5339 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5340 
_¨gvec
[1] = ()(
¨g1
); \

5341 
_¨gvec
[2] = ()(
¨g2
); \

5342 
_¨gvec
[3] = ()(
¨g3
); \

5343 
_¨gvec
[4] = ()(
¨g4
); \

5344 
_¨gvec
[5] = ()(
¨g5
); \

5345 
_¨gvec
[6] = ()(
¨g6
); \

5346 
__asm__
 volatile( \

5361 
VALGRIND_CALL_NOREDIR_T9
 \

5367 : "Ù" (
_ªs
) \

5368 : "0" (&
_¨gvec
[0]) \

5369 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5371 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5372 } 0)

	)

5374 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5375 
¨g7
) \

5377 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5378 vﬁ©ûê
_¨gvec
[8]; \

5379 vﬁ©ûê
_ªs
; \

5380 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5381 
_¨gvec
[1] = ()(
¨g1
); \

5382 
_¨gvec
[2] = ()(
¨g2
); \

5383 
_¨gvec
[3] = ()(
¨g3
); \

5384 
_¨gvec
[4] = ()(
¨g4
); \

5385 
_¨gvec
[5] = ()(
¨g5
); \

5386 
_¨gvec
[6] = ()(
¨g6
); \

5387 
_¨gvec
[7] = ()(
¨g7
); \

5388 
__asm__
 volatile( \

5404 
VALGRIND_CALL_NOREDIR_T9
 \

5410 : "Ù" (
_ªs
) \

5411 : "0" (&
_¨gvec
[0]) \

5412 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5414 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5415 } 0)

	)

5417 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5418 
¨g7
,
¨g8
) \

5420 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5421 vﬁ©ûê
_¨gvec
[9]; \

5422 vﬁ©ûê
_ªs
; \

5423 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5424 
_¨gvec
[1] = ()(
¨g1
); \

5425 
_¨gvec
[2] = ()(
¨g2
); \

5426 
_¨gvec
[3] = ()(
¨g3
); \

5427 
_¨gvec
[4] = ()(
¨g4
); \

5428 
_¨gvec
[5] = ()(
¨g5
); \

5429 
_¨gvec
[6] = ()(
¨g6
); \

5430 
_¨gvec
[7] = ()(
¨g7
); \

5431 
_¨gvec
[8] = ()(
¨g8
); \

5432 
__asm__
 volatile( \

5450 
VALGRIND_CALL_NOREDIR_T9
 \

5456 : "Ù" (
_ªs
) \

5457 : "0" (&
_¨gvec
[0]) \

5458 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5460 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5461 } 0)

	)

5463 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5464 
¨g7
,
¨g8
,
¨g9
) \

5466 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5467 vﬁ©ûê
_¨gvec
[10]; \

5468 vﬁ©ûê
_ªs
; \

5469 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5470 
_¨gvec
[1] = ()(
¨g1
); \

5471 
_¨gvec
[2] = ()(
¨g2
); \

5472 
_¨gvec
[3] = ()(
¨g3
); \

5473 
_¨gvec
[4] = ()(
¨g4
); \

5474 
_¨gvec
[5] = ()(
¨g5
); \

5475 
_¨gvec
[6] = ()(
¨g6
); \

5476 
_¨gvec
[7] = ()(
¨g7
); \

5477 
_¨gvec
[8] = ()(
¨g8
); \

5478 
_¨gvec
[9] = ()(
¨g9
); \

5479 
__asm__
 volatile( \

5499 
VALGRIND_CALL_NOREDIR_T9
 \

5505 : "Ù" (
_ªs
) \

5506 : "0" (&
_¨gvec
[0]) \

5507 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5509 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5510 } 0)

	)

5512 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5513 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

5515 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5516 vﬁ©ûê
_¨gvec
[11]; \

5517 vﬁ©ûê
_ªs
; \

5518 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5519 
_¨gvec
[1] = ()(
¨g1
); \

5520 
_¨gvec
[2] = ()(
¨g2
); \

5521 
_¨gvec
[3] = ()(
¨g3
); \

5522 
_¨gvec
[4] = ()(
¨g4
); \

5523 
_¨gvec
[5] = ()(
¨g5
); \

5524 
_¨gvec
[6] = ()(
¨g6
); \

5525 
_¨gvec
[7] = ()(
¨g7
); \

5526 
_¨gvec
[8] = ()(
¨g8
); \

5527 
_¨gvec
[9] = ()(
¨g9
); \

5528 
_¨gvec
[10] = ()(
¨g10
); \

5529 
__asm__
 volatile( \

5551 
VALGRIND_CALL_NOREDIR_T9
 \

5557 : "Ù" (
_ªs
) \

5558 : "0" (&
_¨gvec
[0]) \

5559 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5561 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5562 } 0)

	)

5564 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

5565 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

5566 
¨g11
) \

5568 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5569 vﬁ©ûê
_¨gvec
[12]; \

5570 vﬁ©ûê
_ªs
; \

5571 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5572 
_¨gvec
[1] = ()(
¨g1
); \

5573 
_¨gvec
[2] = ()(
¨g2
); \

5574 
_¨gvec
[3] = ()(
¨g3
); \

5575 
_¨gvec
[4] = ()(
¨g4
); \

5576 
_¨gvec
[5] = ()(
¨g5
); \

5577 
_¨gvec
[6] = ()(
¨g6
); \

5578 
_¨gvec
[7] = ()(
¨g7
); \

5579 
_¨gvec
[8] = ()(
¨g8
); \

5580 
_¨gvec
[9] = ()(
¨g9
); \

5581 
_¨gvec
[10] = ()(
¨g10
); \

5582 
_¨gvec
[11] = ()(
¨g11
); \

5583 
__asm__
 volatile( \

5607 
VALGRIND_CALL_NOREDIR_T9
 \

5613 : "Ù" (
_ªs
) \

5614 : "0" (&
_¨gvec
[0]) \

5615 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5617 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5618 } 0)

	)

5620 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

5621 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

5622 
¨g11
,
¨g12
) \

5624 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5625 vﬁ©ûê
_¨gvec
[13]; \

5626 vﬁ©ûê
_ªs
; \

5627 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5628 
_¨gvec
[1] = ()(
¨g1
); \

5629 
_¨gvec
[2] = ()(
¨g2
); \

5630 
_¨gvec
[3] = ()(
¨g3
); \

5631 
_¨gvec
[4] = ()(
¨g4
); \

5632 
_¨gvec
[5] = ()(
¨g5
); \

5633 
_¨gvec
[6] = ()(
¨g6
); \

5634 
_¨gvec
[7] = ()(
¨g7
); \

5635 
_¨gvec
[8] = ()(
¨g8
); \

5636 
_¨gvec
[9] = ()(
¨g9
); \

5637 
_¨gvec
[10] = ()(
¨g10
); \

5638 
_¨gvec
[11] = ()(
¨g11
); \

5639 
_¨gvec
[12] = ()(
¨g12
); \

5640 
__asm__
 volatile( \

5666 
VALGRIND_CALL_NOREDIR_T9
 \

5672 : "Ù" (
_ªs
) \

5673 : "r" (&
_¨gvec
[0]) \

5674 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5676 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5677 } 0)

	)

5683 #i‡
deföed
(
PLAT_mùs64_löux
)

5686 
	#__CALLER_SAVED_REGS
 "$2", "$3", "$4", "$5", "$6", \

5688 "$25", "$31"

	)

5693 
	#CALL_FN_W_v
(
lvÆ
, 
‹ig
) \

5695 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5696 vﬁ©ûê
_¨gvec
[1]; \

5697 vﬁ©ûê
_ªs
; \

5698 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5699 
__asm__
 volatile( \

5701 
VALGRIND_CALL_NOREDIR_T9
 \

5703 : "Ù" (
_ªs
) \

5704 : "0" (&
_¨gvec
[0]) \

5705 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5707 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5708 } 0)

	)

5710 
	#CALL_FN_W_W
(
lvÆ
, 
‹ig
, 
¨g1
) \

5712 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5713 vﬁ©ûê
_¨gvec
[2]; \

5714 vﬁ©ûê
_ªs
; \

5715 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5716 
_¨gvec
[1] = ()(
¨g1
); \

5717 
__asm__
 volatile( \

5720 
VALGRIND_CALL_NOREDIR_T9
 \

5722 : "Ù" (
_ªs
) \

5723 : "r" (&
_¨gvec
[0]) \

5724 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5726 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5727 } 0)

	)

5729 
	#CALL_FN_W_WW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
) \

5731 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5732 vﬁ©ûê
_¨gvec
[3]; \

5733 vﬁ©ûê
_ªs
; \

5734 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5735 
_¨gvec
[1] = ()(
¨g1
); \

5736 
_¨gvec
[2] = ()(
¨g2
); \

5737 
__asm__
 volatile( \

5741 
VALGRIND_CALL_NOREDIR_T9
 \

5743 : "Ù" (
_ªs
) \

5744 : "r" (&
_¨gvec
[0]) \

5745 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5747 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5748 } 0)

	)

5750 
	#CALL_FN_W_WWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
) \

5752 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5753 vﬁ©ûê
_¨gvec
[4]; \

5754 vﬁ©ûê
_ªs
; \

5755 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5756 
_¨gvec
[1] = ()(
¨g1
); \

5757 
_¨gvec
[2] = ()(
¨g2
); \

5758 
_¨gvec
[3] = ()(
¨g3
); \

5759 
__asm__
 volatile( \

5764 
VALGRIND_CALL_NOREDIR_T9
 \

5766 : "Ù" (
_ªs
) \

5767 : "r" (&
_¨gvec
[0]) \

5768 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5770 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5771 } 0)

	)

5773 
	#CALL_FN_W_WWWW
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
) \

5775 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5776 vﬁ©ûê
_¨gvec
[5]; \

5777 vﬁ©ûê
_ªs
; \

5778 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5779 
_¨gvec
[1] = ()(
¨g1
); \

5780 
_¨gvec
[2] = ()(
¨g2
); \

5781 
_¨gvec
[3] = ()(
¨g3
); \

5782 
_¨gvec
[4] = ()(
¨g4
); \

5783 
__asm__
 volatile( \

5789 
VALGRIND_CALL_NOREDIR_T9
 \

5791 : "Ù" (
_ªs
) \

5792 : "r" (&
_¨gvec
[0]) \

5793 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5795 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5796 } 0)

	)

5798 
	#CALL_FN_W_5W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
) \

5800 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5801 vﬁ©ûê
_¨gvec
[6]; \

5802 vﬁ©ûê
_ªs
; \

5803 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5804 
_¨gvec
[1] = ()(
¨g1
); \

5805 
_¨gvec
[2] = ()(
¨g2
); \

5806 
_¨gvec
[3] = ()(
¨g3
); \

5807 
_¨gvec
[4] = ()(
¨g4
); \

5808 
_¨gvec
[5] = ()(
¨g5
); \

5809 
__asm__
 volatile( \

5816 
VALGRIND_CALL_NOREDIR_T9
 \

5818 : "Ù" (
_ªs
) \

5819 : "r" (&
_¨gvec
[0]) \

5820 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5822 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5823 } 0)

	)

5825 
	#CALL_FN_W_6W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
) \

5827 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5828 vﬁ©ûê
_¨gvec
[7]; \

5829 vﬁ©ûê
_ªs
; \

5830 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5831 
_¨gvec
[1] = ()(
¨g1
); \

5832 
_¨gvec
[2] = ()(
¨g2
); \

5833 
_¨gvec
[3] = ()(
¨g3
); \

5834 
_¨gvec
[4] = ()(
¨g4
); \

5835 
_¨gvec
[5] = ()(
¨g5
); \

5836 
_¨gvec
[6] = ()(
¨g6
); \

5837 
__asm__
 volatile( \

5845 
VALGRIND_CALL_NOREDIR_T9
 \

5847 : "Ù" (
_ªs
) \

5848 : "r" (&
_¨gvec
[0]) \

5849 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5851 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5852 } 0)

	)

5854 
	#CALL_FN_W_7W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5855 
¨g7
) \

5857 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5858 vﬁ©ûê
_¨gvec
[8]; \

5859 vﬁ©ûê
_ªs
; \

5860 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5861 
_¨gvec
[1] = ()(
¨g1
); \

5862 
_¨gvec
[2] = ()(
¨g2
); \

5863 
_¨gvec
[3] = ()(
¨g3
); \

5864 
_¨gvec
[4] = ()(
¨g4
); \

5865 
_¨gvec
[5] = ()(
¨g5
); \

5866 
_¨gvec
[6] = ()(
¨g6
); \

5867 
_¨gvec
[7] = ()(
¨g7
); \

5868 
__asm__
 volatile( \

5877 
VALGRIND_CALL_NOREDIR_T9
 \

5879 : "Ù" (
_ªs
) \

5880 : "r" (&
_¨gvec
[0]) \

5881 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5883 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5884 } 0)

	)

5886 
	#CALL_FN_W_8W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5887 
¨g7
,
¨g8
) \

5889 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5890 vﬁ©ûê
_¨gvec
[9]; \

5891 vﬁ©ûê
_ªs
; \

5892 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5893 
_¨gvec
[1] = ()(
¨g1
); \

5894 
_¨gvec
[2] = ()(
¨g2
); \

5895 
_¨gvec
[3] = ()(
¨g3
); \

5896 
_¨gvec
[4] = ()(
¨g4
); \

5897 
_¨gvec
[5] = ()(
¨g5
); \

5898 
_¨gvec
[6] = ()(
¨g6
); \

5899 
_¨gvec
[7] = ()(
¨g7
); \

5900 
_¨gvec
[8] = ()(
¨g8
); \

5901 
__asm__
 volatile( \

5911 
VALGRIND_CALL_NOREDIR_T9
 \

5913 : "Ù" (
_ªs
) \

5914 : "r" (&
_¨gvec
[0]) \

5915 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5917 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5918 } 0)

	)

5920 
	#CALL_FN_W_9W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5921 
¨g7
,
¨g8
,
¨g9
) \

5923 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5924 vﬁ©ûê
_¨gvec
[10]; \

5925 vﬁ©ûê
_ªs
; \

5926 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5927 
_¨gvec
[1] = ()(
¨g1
); \

5928 
_¨gvec
[2] = ()(
¨g2
); \

5929 
_¨gvec
[3] = ()(
¨g3
); \

5930 
_¨gvec
[4] = ()(
¨g4
); \

5931 
_¨gvec
[5] = ()(
¨g5
); \

5932 
_¨gvec
[6] = ()(
¨g6
); \

5933 
_¨gvec
[7] = ()(
¨g7
); \

5934 
_¨gvec
[8] = ()(
¨g8
); \

5935 
_¨gvec
[9] = ()(
¨g9
); \

5936 
__asm__
 volatile( \

5949 
VALGRIND_CALL_NOREDIR_T9
 \

5952 : "Ù" (
_ªs
) \

5953 : "r" (&
_¨gvec
[0]) \

5954 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5956 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5957 } 0)

	)

5959 
	#CALL_FN_W_10W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
,
¨g6
, \

5960 
¨g7
,
¨g8
,
¨g9
,
¨g10
) \

5962 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

5963 vﬁ©ûê
_¨gvec
[11]; \

5964 vﬁ©ûê
_ªs
; \

5965 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

5966 
_¨gvec
[1] = ()(
¨g1
); \

5967 
_¨gvec
[2] = ()(
¨g2
); \

5968 
_¨gvec
[3] = ()(
¨g3
); \

5969 
_¨gvec
[4] = ()(
¨g4
); \

5970 
_¨gvec
[5] = ()(
¨g5
); \

5971 
_¨gvec
[6] = ()(
¨g6
); \

5972 
_¨gvec
[7] = ()(
¨g7
); \

5973 
_¨gvec
[8] = ()(
¨g8
); \

5974 
_¨gvec
[9] = ()(
¨g9
); \

5975 
_¨gvec
[10] = ()(
¨g10
); \

5976 
__asm__
 volatile( \

5991 
VALGRIND_CALL_NOREDIR_T9
 \

5994 : "Ù" (
_ªs
) \

5995 : "r" (&
_¨gvec
[0]) \

5996 : "mem‹y", 
__CALLER_SAVED_REGS
 \

5998 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

5999 } 0)

	)

6001 
	#CALL_FN_W_11W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

6002 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

6003 
¨g11
) \

6005 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

6006 vﬁ©ûê
_¨gvec
[12]; \

6007 vﬁ©ûê
_ªs
; \

6008 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

6009 
_¨gvec
[1] = ()(
¨g1
); \

6010 
_¨gvec
[2] = ()(
¨g2
); \

6011 
_¨gvec
[3] = ()(
¨g3
); \

6012 
_¨gvec
[4] = ()(
¨g4
); \

6013 
_¨gvec
[5] = ()(
¨g5
); \

6014 
_¨gvec
[6] = ()(
¨g6
); \

6015 
_¨gvec
[7] = ()(
¨g7
); \

6016 
_¨gvec
[8] = ()(
¨g8
); \

6017 
_¨gvec
[9] = ()(
¨g9
); \

6018 
_¨gvec
[10] = ()(
¨g10
); \

6019 
_¨gvec
[11] = ()(
¨g11
); \

6020 
__asm__
 volatile( \

6037 
VALGRIND_CALL_NOREDIR_T9
 \

6040 : "Ù" (
_ªs
) \

6041 : "r" (&
_¨gvec
[0]) \

6042 : "mem‹y", 
__CALLER_SAVED_REGS
 \

6044 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

6045 } 0)

	)

6047 
	#CALL_FN_W_12W
(
lvÆ
, 
‹ig
, 
¨g1
,
¨g2
,
¨g3
,
¨g4
,
¨g5
, \

6048 
¨g6
,
¨g7
,
¨g8
,
¨g9
,
¨g10
, \

6049 
¨g11
,
¨g12
) \

6051 vﬁ©ûê
OrigFn
 
_‹ig
 = (
‹ig
); \

6052 vﬁ©ûê
_¨gvec
[13]; \

6053 vﬁ©ûê
_ªs
; \

6054 
_¨gvec
[0] = ()
_‹ig
.
ƒaddr
; \

6055 
_¨gvec
[1] = ()(
¨g1
); \

6056 
_¨gvec
[2] = ()(
¨g2
); \

6057 
_¨gvec
[3] = ()(
¨g3
); \

6058 
_¨gvec
[4] = ()(
¨g4
); \

6059 
_¨gvec
[5] = ()(
¨g5
); \

6060 
_¨gvec
[6] = ()(
¨g6
); \

6061 
_¨gvec
[7] = ()(
¨g7
); \

6062 
_¨gvec
[8] = ()(
¨g8
); \

6063 
_¨gvec
[9] = ()(
¨g9
); \

6064 
_¨gvec
[10] = ()(
¨g10
); \

6065 
_¨gvec
[11] = ()(
¨g11
); \

6066 
_¨gvec
[12] = ()(
¨g12
); \

6067 
__asm__
 volatile( \

6086 
VALGRIND_CALL_NOREDIR_T9
 \

6089 : "Ù" (
_ªs
) \

6090 : "r" (&
_¨gvec
[0]) \

6091 : "mem‹y", 
__CALLER_SAVED_REGS
 \

6093 
lvÆ
 = (
	`__ty≥of__
÷vÆ)Ë
_ªs
; \

6094 } 0)

	)

6113 
	#VG_USERREQ_TOOL_BASE
(
a
,
b
) \

6114 (()(((
a
)&0xffË<< 24 | ((
b
)&0xffË<< 16))

	)

6115 
	#VG_IS_TOOL_USERREQ
(
a
, 
b
, 
v
) \

6116 (
	`VG_USERREQ_TOOL_BASE
(
a
,
b
Ë=((
v
Ë& 0xffff0000))

	)

6124 íum { 
	mVG_USERREQ__RUNNING_ON_VALGRIND
 = 0x1001,

6125 
	mVG_USERREQ__DISCARD_TRANSLATIONS
 = 0x1002,

6132 
	mVG_USERREQ__CLIENT_CALL0
 = 0x1101,

6133 
	mVG_USERREQ__CLIENT_CALL1
 = 0x1102,

6134 
	mVG_USERREQ__CLIENT_CALL2
 = 0x1103,

6135 
	mVG_USERREQ__CLIENT_CALL3
 = 0x1104,

6140 
	mVG_USERREQ__COUNT_ERRORS
 = 0x1201,

6144 
	mVG_USERREQ__GDB_MONITOR_COMMAND
 = 0x1202,

6148 
	mVG_USERREQ__MALLOCLIKE_BLOCK
 = 0x1301,

6149 
	mVG_USERREQ__RESIZEINPLACE_BLOCK
 = 0x130b,

6150 
	mVG_USERREQ__FREELIKE_BLOCK
 = 0x1302,

6152 
	mVG_USERREQ__CREATE_MEMPOOL
 = 0x1303,

6153 
	mVG_USERREQ__DESTROY_MEMPOOL
 = 0x1304,

6154 
	mVG_USERREQ__MEMPOOL_ALLOC
 = 0x1305,

6155 
	mVG_USERREQ__MEMPOOL_FREE
 = 0x1306,

6156 
	mVG_USERREQ__MEMPOOL_TRIM
 = 0x1307,

6157 
	mVG_USERREQ__MOVE_MEMPOOL
 = 0x1308,

6158 
	mVG_USERREQ__MEMPOOL_CHANGE
 = 0x1309,

6159 
	mVG_USERREQ__MEMPOOL_EXISTS
 = 0x130a,

6168 
	mVG_USERREQ__PRINTF
 = 0x1401,

6169 
	mVG_USERREQ__PRINTF_BACKTRACE
 = 0x1402,

6171 
	mVG_USERREQ__PRINTF_VALIST_BY_REF
 = 0x1403,

6172 
	mVG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF
 = 0x1404,

6175 
	mVG_USERREQ__STACK_REGISTER
 = 0x1501,

6176 
	mVG_USERREQ__STACK_DEREGISTER
 = 0x1502,

6177 
	mVG_USERREQ__STACK_CHANGE
 = 0x1503,

6180 
	mVG_USERREQ__LOAD_PDB_DEBUGINFO
 = 0x1601,

6183 
	mVG_USERREQ__MAP_IP_TO_SRCLOC
 = 0x1701,

6190 
	mVG_USERREQ__CHANGE_ERR_DISABLEMENT
 = 0x1801,

6195 
	mVG_USERREQ__VEX_INIT_FOR_IRI
 = 0x1901,

6198 
	mVG_USERREQ__INNER_THREADS
 = 0x1902

6199 } 
	tVg_Clõ¡Reque°
;

6201 #i‡!
deföed
(
__GNUC__
)

6202 
	#__exãnsi⁄__


	)

6210 
	#RUNNING_ON_VALGRIND
 \

6211 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

6212 
VG_USERREQ__RUNNING_ON_VALGRIND
, \

6214 

	)

6220 
	#VALGRIND_DISCARD_TRANSLATIONS
(
_qzz_addr
,
_qzz_Àn
) \

6221 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DISCARD_TRANSLATIONS
, \

6222 
_qzz_addr
, 
_qzz_Àn
, 0, 0, 0)

	)

6224 
	#VALGRIND_INNER_THREADS
(
_qzz_addr
) \

6225 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__INNER_THREADS
, \

6226 
_qzz_addr
, 0, 0, 0, 0)

	)

6234 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
Ë&& !deföed(
_MSC_VER
)

6237 
	$VALGRIND_PRINTF
(c⁄° *
f‹m©
, ...)

6238 
	`__©åibuã__
((
	`f‹m©
(
__¥ötf__
, 1, 2), 
__unu£d__
));

6241 #i‡
	`deföed
(
_MSC_VER
)

6242 
__ölöe


6244 
	$VALGRIND_PRINTF
(c⁄° *
f‹m©
, ...)

6246 #i‡
	`deföed
(
NVALGRIND
)

6247 ()
f‹m©
;

6250 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__MINGW64__
)

6251 
uöçå_t
 
_qzz_ªs
;

6253 
_qzz_ªs
;

6255 
va_li°
 
v¨gs
;

6256 
	`va_°¨t
(
v¨gs
, 
f‹m©
);

6257 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__MINGW64__
)

6258 
_qzz_ªs
 = 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0,

6259 
VG_USERREQ__PRINTF_VALIST_BY_REF
,

6260 (
uöçå_t
)
f‹m©
,

6261 (
uöçå_t
)&
v¨gs
,

6264 
_qzz_ªs
 = 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0,

6265 
VG_USERREQ__PRINTF_VALIST_BY_REF
,

6266 ()
f‹m©
,

6267 ()&
v¨gs
,

6270 
	`va_íd
(
v¨gs
);

6271  ()
_qzz_ªs
;

6273 
	}
}

6275 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
Ë&& !deföed(
_MSC_VER
)

6276 
	$VALGRIND_PRINTF_BACKTRACE
(c⁄° *
f‹m©
, ...)

6277 
	`__©åibuã__
((
	`f‹m©
(
__¥ötf__
, 1, 2), 
__unu£d__
));

6280 #i‡
	`deföed
(
_MSC_VER
)

6281 
__ölöe


6283 
	$VALGRIND_PRINTF_BACKTRACE
(c⁄° *
f‹m©
, ...)

6285 #i‡
	`deföed
(
NVALGRIND
)

6286 ()
f‹m©
;

6289 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__MINGW64__
)

6290 
uöçå_t
 
_qzz_ªs
;

6292 
_qzz_ªs
;

6294 
va_li°
 
v¨gs
;

6295 
	`va_°¨t
(
v¨gs
, 
f‹m©
);

6296 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__MINGW64__
)

6297 
_qzz_ªs
 = 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0,

6298 
VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF
,

6299 (
uöçå_t
)
f‹m©
,

6300 (
uöçå_t
)&
v¨gs
,

6303 
_qzz_ªs
 = 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0,

6304 
VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF
,

6305 ()
f‹m©
,

6306 ()&
v¨gs
,

6309 
	`va_íd
(
v¨gs
);

6310  ()
_qzz_ªs
;

6312 
	}
}

6338 
	#VALGRIND_NON_SIMD_CALL0
(
_qyy_‚
) \

6339 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

6340 
VG_USERREQ__CLIENT_CALL0
, \

6341 
_qyy_‚
, \

6342 0, 0, 0, 0)

	)

6344 
	#VALGRIND_NON_SIMD_CALL1
(
_qyy_‚
, 
_qyy_¨g1
) \

6345 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

6346 
VG_USERREQ__CLIENT_CALL1
, \

6347 
_qyy_‚
, \

6348 
_qyy_¨g1
, 0, 0, 0)

	)

6350 
	#VALGRIND_NON_SIMD_CALL2
(
_qyy_‚
, 
_qyy_¨g1
, 
_qyy_¨g2
) \

6351 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

6352 
VG_USERREQ__CLIENT_CALL2
, \

6353 
_qyy_‚
, \

6354 
_qyy_¨g1
, 
_qyy_¨g2
, 0, 0)

	)

6356 
	#VALGRIND_NON_SIMD_CALL3
(
_qyy_‚
, 
_qyy_¨g1
, 
_qyy_¨g2
, 
_qyy_¨g3
) \

6357 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0 , \

6358 
VG_USERREQ__CLIENT_CALL3
, \

6359 
_qyy_‚
, \

6360 
_qyy_¨g1
, 
_qyy_¨g2
, \

6361 
_qyy_¨g3
, 0)

	)

6367 
	#VALGRIND_COUNT_ERRORS
 \

6368 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
( \

6370 
VG_USERREQ__COUNT_ERRORS
, \

6371 0, 0, 0, 0, 0)

	)

6474 
	#VALGRIND_MALLOCLIKE_BLOCK
(
addr
, 
sizeB
, 
rzB
, 
is_zî€d
) \

6475 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MALLOCLIKE_BLOCK
, \

6476 
addr
, 
sizeB
, 
rzB
, 
is_zî€d
, 0)

	)

6481 
	#VALGRIND_RESIZEINPLACE_BLOCK
(
addr
, 
ﬁdSizeB
, 
√wSizeB
, 
rzB
) \

6482 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__RESIZEINPLACE_BLOCK
, \

6483 
addr
, 
ﬁdSizeB
, 
√wSizeB
, 
rzB
, 0)

	)

6488 
	#VALGRIND_FREELIKE_BLOCK
(
addr
, 
rzB
) \

6489 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__FREELIKE_BLOCK
, \

6490 
addr
, 
rzB
, 0, 0, 0)

	)

6493 
	#VALGRIND_CREATE_MEMPOOL
(
poﬁ
, 
rzB
, 
is_zî€d
) \

6494 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__CREATE_MEMPOOL
, \

6495 
poﬁ
, 
rzB
, 
is_zî€d
, 0, 0)

	)

6523 
	#VALGRIND_MEMPOOL_AUTO_FREE
 1

	)

6524 
	#VALGRIND_MEMPOOL_METAPOOL
 2

	)

6525 
	#VALGRIND_CREATE_MEMPOOL_EXT
(
poﬁ
, 
rzB
, 
is_zî€d
, 
Êags
) \

6526 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__CREATE_MEMPOOL
, \

6527 
poﬁ
, 
rzB
, 
is_zî€d
, 
Êags
, 0)

	)

6530 
	#VALGRIND_DESTROY_MEMPOOL
(
poﬁ
) \

6531 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__DESTROY_MEMPOOL
, \

6532 
poﬁ
, 0, 0, 0, 0)

	)

6535 
	#VALGRIND_MEMPOOL_ALLOC
(
poﬁ
, 
addr
, 
size
) \

6536 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MEMPOOL_ALLOC
, \

6537 
poﬁ
, 
addr
, 
size
, 0, 0)

	)

6540 
	#VALGRIND_MEMPOOL_FREE
(
poﬁ
, 
addr
) \

6541 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MEMPOOL_FREE
, \

6542 
poﬁ
, 
addr
, 0, 0, 0)

	)

6545 
	#VALGRIND_MEMPOOL_TRIM
(
poﬁ
, 
addr
, 
size
) \

6546 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MEMPOOL_TRIM
, \

6547 
poﬁ
, 
addr
, 
size
, 0, 0)

	)

6550 
	#VALGRIND_MOVE_MEMPOOL
(
poﬁA
, 
poﬁB
) \

6551 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MOVE_MEMPOOL
, \

6552 
poﬁA
, 
poﬁB
, 0, 0, 0)

	)

6555 
	#VALGRIND_MEMPOOL_CHANGE
(
poﬁ
, 
addrA
, 
addrB
, 
size
) \

6556 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__MEMPOOL_CHANGE
, \

6557 
poﬁ
, 
addrA
, 
addrB
, 
size
, 0)

	)

6560 
	#VALGRIND_MEMPOOL_EXISTS
(
poﬁ
) \

6561 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

6562 
VG_USERREQ__MEMPOOL_EXISTS
, \

6563 
poﬁ
, 0, 0, 0, 0)

	)

6568 
	#VALGRIND_STACK_REGISTER
(
°¨t
, 
íd
) \

6569 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

6570 
VG_USERREQ__STACK_REGISTER
, \

6571 
°¨t
, 
íd
, 0, 0, 0)

	)

6575 
	#VALGRIND_STACK_DEREGISTER
(
id
) \

6576 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__STACK_DEREGISTER
, \

6577 
id
, 0, 0, 0, 0)

	)

6582 
	#VALGRIND_STACK_CHANGE
(
id
, 
°¨t
, 
íd
) \

6583 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__STACK_CHANGE
, \

6584 
id
, 
°¨t
, 
íd
, 0, 0)

	)

6587 
	#VALGRIND_LOAD_PDB_DEBUGINFO
(
fd
, 
±r
, 
tŸÆ_size
, 
dñè
) \

6588 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__LOAD_PDB_DEBUGINFO
, \

6589 
fd
, 
±r
, 
tŸÆ_size
, 
dñè
, 0)

	)

6595 
	#VALGRIND_MAP_IP_TO_SRCLOC
(
addr
, 
buf64
) \

6596 ()
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, \

6597 
VG_USERREQ__MAP_IP_TO_SRCLOC
, \

6598 
addr
, 
buf64
, 0, 0, 0)

	)

6608 
	#VALGRIND_DISABLE_ERROR_REPORTING
 \

6609 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__CHANGE_ERR_DISABLEMENT
, \

6610 1, 0, 0, 0, 0)

	)

6614 
	#VALGRIND_ENABLE_ERROR_REPORTING
 \

6615 
	`VALGRIND_DO_CLIENT_REQUEST_STMT
(
VG_USERREQ__CHANGE_ERR_DISABLEMENT
, \

6616 -1, 0, 0, 0, 0)

	)

6623 
	#VALGRIND_MONITOR_COMMAND
(
comm™d
) \

6624 
	`VALGRIND_DO_CLIENT_REQUEST_EXPR
(0, 
VG_USERREQ__GDB_MONITOR_COMMAND
, \

6625 
comm™d
, 0, 0, 0, 0)

	)

6628 #unde‡
PLAT_x86_d¨wö


6629 #unde‡
PLAT_amd64_d¨wö


6630 #unde‡
PLAT_x86_wö32


6631 #unde‡
PLAT_amd64_wö64


6632 #unde‡
PLAT_x86_löux


6633 #unde‡
PLAT_amd64_löux


6634 #unde‡
PLAT_µc32_löux


6635 #unde‡
PLAT_µc64be_löux


6636 #unde‡
PLAT_µc64À_löux


6637 #unde‡
PLAT_¨m_löux


6638 #unde‡
PLAT_s390x_löux


6639 #unde‡
PLAT_mùs32_löux


6640 #unde‡
PLAT_mùs64_löux


6641 #unde‡
PLAT_x86_sﬁ¨is


6642 #unde‡
PLAT_amd64_sﬁ¨is


	@/usr/include/xf86drm.h

34 #i‚de‡
_XF86DRM_H_


35 
	#_XF86DRM_H_


	)

37 
	~<°d¨g.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<°döt.h
>

40 
	~<drm.h
>

42 #i‡
deföed
(
__˝lu•lus
)

46 #i‚de‡
DRM_MAX_MINOR


47 
	#DRM_MAX_MINOR
 16

	)

50 #i‡
deföed
(
__löux__
)

52 
	#DRM_IOCTL_NR
(
n
Ë
	`_IOC_NR
“)

	)

53 
	#DRM_IOC_VOID
 
_IOC_NONE


	)

54 
	#DRM_IOC_READ
 
_IOC_READ


	)

55 
	#DRM_IOC_WRITE
 
_IOC_WRITE


	)

56 
	#DRM_IOC_READWRITE
 
_IOC_READ
|
_IOC_WRITE


	)

57 
	#DRM_IOC
(
dú
, 
group
, 
ƒ
, 
size
Ë
	`_IOC
(dú, group,Çr, size)

	)

61 
	~<sys/ioccom.h
>

62 
	#DRM_IOCTL_NR
(
n
Ë(“Ë& 0xff)

	)

63 
	#DRM_IOC_VOID
 
IOC_VOID


	)

64 
	#DRM_IOC_READ
 
IOC_OUT


	)

65 
	#DRM_IOC_WRITE
 
IOC_IN


	)

66 
	#DRM_IOC_READWRITE
 
IOC_INOUT


	)

67 
	#DRM_IOC
(
dú
, 
group
, 
ƒ
, 
size
Ë
	`_IOC
(dú, group,Çr, size)

	)

72 
	#DRM_DEV_UID
 0

	)

73 
	#DRM_DEV_GID
 0

	)

75 
	#DRM_DEV_DIRMODE
 \

76 (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
|
S_IRGRP
|
S_IXGRP
|
S_IROTH
|
S_IXOTH
)

	)

77 
	#DRM_DEV_MODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

79 #ifde‡
__O≥nBSD__


80 
	#DRM_DIR_NAME
 "/dev"

	)

81 
	#DRM_DEV_NAME
 "%s/drm%d"

	)

82 
	#DRM_CONTROL_DEV_NAME
 "%s/drmC%d"

	)

83 
	#DRM_RENDER_DEV_NAME
 "%s/drmR%d"

	)

85 
	#DRM_DIR_NAME
 "/dev/dri"

	)

86 
	#DRM_DEV_NAME
 "%s/ˇrd%d"

	)

87 
	#DRM_CONTROL_DEV_NAME
 "%s/c⁄åﬁD%d"

	)

88 
	#DRM_RENDER_DEV_NAME
 "%s/ªndîD%d"

	)

89 
	#DRM_PROC_NAME
 "/¥oc/dri/"

	)

92 
	#DRM_ERR_NO_DEVICE
 (-1001)

	)

93 
	#DRM_ERR_NO_ACCESS
 (-1002)

	)

94 
	#DRM_ERR_NOT_ROOT
 (-1003)

	)

95 
	#DRM_ERR_INVALID
 (-1004)

	)

96 
	#DRM_ERR_NO_FD
 (-1005)

	)

98 
	#DRM_AGP_NO_HANDLE
 0

	)

100 
	tdrmSize
, *
	tdrmSizePå
;

101 *
	tdrmAddªss
, **
	tdrmAddªssPå
;

103 #i‡(
__GNUC__
 >= 3)

104 
	#DRM_PRINTFLIKE
(
f
, 
a
Ë
	`__©åibuã__
 ((
	`f‹m©
(
__¥ötf__
, f,á)))

	)

106 
	#DRM_PRINTFLIKE
(
f
, 
a
)

	)

109 
	s_drmSîvîInfo
 {

110 (*
debug_¥öt
)(c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
DRM_PRINTFLIKE
(1,0);

111 (*
lﬂd_moduÀ
)(c⁄° *
«me
);

112 (*
gë_≥rms
)(
gid_t
 *, 
mode_t
 *);

113 } 
	tdrmSîvîInfo
, *
	tdrmSîvîInfoPå
;

115 
	sdrmHashE¡ry
 {

116 
fd
;

117 (*
f
)(, *, *);

118 *
ègTabÀ
;

119 } 
	tdrmHashE¡ry
;

121 
drmIo˘l
(
fd
, 
ªque°
, *
¨g
);

122 *
drmGëHashTabÀ
();

123 
drmHashE¡ry
 *
drmGëE¡ry
(
fd
);

130 
	s_drmVîsi⁄
 {

131 
	gvîsi⁄_maj‹
;

132 
	gvîsi⁄_mö‹
;

133 
	gvîsi⁄_∑tchÀvñ
;

134 
	g«me_Àn
;

135 *
	g«me
;

136 
	gd©e_Àn
;

137 *
	gd©e
;

138 
	gdesc_Àn
;

139 *
	gdesc
;

140 } 
	tdrmVîsi⁄
, *
	tdrmVîsi⁄På
;

142 
	s_drmSèts
 {

143 
	gcou¡
;

145 
	gvÆue
;

146 c⁄° *
	gl⁄g_f‹m©
;

147 c⁄° *
	gl⁄g_«me
;

148 c⁄° *
	gøã_f‹m©
;

149 c⁄° *
	gøã_«me
;

150 
	gisvÆue
;

151 c⁄° *
	gmu…_«mes
;

152 
	gmu…
;

153 
	gvîbo£
;

154 } 
	gd©a
[15];

155 } 
	tdrmSètsT
;

164 
	gDRM_FRAME_BUFFER
 = 0,

165 
	gDRM_REGISTERS
 = 1,

166 
	gDRM_SHM
 = 2,

167 
	gDRM_AGP
 = 3,

168 
	gDRM_SCATTER_GATHER
 = 4,

169 
	gDRM_CONSISTENT
 = 5

170 } 
	tdrmM≠Ty≥
;

173 
	gDRM_RESTRICTED
 = 0x0001,

174 
	gDRM_READ_ONLY
 = 0x0002,

175 
	gDRM_LOCKED
 = 0x0004,

176 
	gDRM_KERNEL
 = 0x0008,

177 
	gDRM_WRITE_COMBINING
 = 0x0010,

178 
	gDRM_CONTAINS_LOCK
 = 0x0020,

179 
	gDRM_REMOVABLE
 = 0x0040

180 } 
	tdrmM≠Fœgs
;

188 
	gDRM_DMA_BLOCK
 = 0x01,

197 
	gDRM_DMA_WHILE_LOCKED
 = 0x02,

198 
	gDRM_DMA_PRIORITY
 = 0x04,

203 
	gDRM_DMA_WAIT
 = 0x10,

204 
	gDRM_DMA_SMALLER_OK
 = 0x20,

205 
	gDRM_DMA_LARGER_OK
 = 0x40

207 } 
	tdrmDMAFœgs
;

210 
	gDRM_PAGE_ALIGN
 = 0x01,

211 
	gDRM_AGP_BUFFER
 = 0x02,

212 
	gDRM_SG_BUFFER
 = 0x04,

213 
	gDRM_FB_BUFFER
 = 0x08,

214 
	gDRM_PCI_BUFFER_RO
 = 0x10

215 } 
	tdrmBufDescFœgs
;

218 
	gDRM_LOCK_READY
 = 0x01,

219 
	gDRM_LOCK_QUIESCENT
 = 0x02,

220 
	gDRM_LOCK_FLUSH
 = 0x04,

221 
	gDRM_LOCK_FLUSH_ALL
 = 0x08,

225 
	gDRM_HALT_ALL_QUEUES
 = 0x10,

226 
	gDRM_HALT_CUR_QUEUES
 = 0x20

227 } 
	tdrmLockFœgs
;

230 
	gDRM_CONTEXT_PRESERVED
 = 0x01,

232 
	gDRM_CONTEXT_2DONLY
 = 0x02

233 } 
	tdrm_c⁄ãxt_tFœgs
, *
	tdrm_c⁄ãxt_tFœgsPå
;

235 
	s_drmBufDesc
 {

236 
	gcou¡
;

237 
	gsize
;

238 
	glow_m¨k
;

239 
	ghigh_m¨k
;

240 } 
	tdrmBufDesc
, *
	tdrmBufDescPå
;

242 
	s_drmBufInfo
 {

243 
	gcou¡
;

244 
drmBufDescPå
 
	gli°
;

245 } 
	tdrmBufInfo
, *
	tdrmBufInfoPå
;

247 
	s_drmBuf
 {

248 
	gidx
;

249 
	gtŸÆ
;

250 
	gu£d
;

251 
drmAddªss
 
	gaddªss
;

252 } 
	tdrmBuf
, *
	tdrmBufPå
;

260 
	s_drmBufM≠
 {

261 
	gcou¡
;

262 
drmBufPå
 
	gli°
;

263 } 
	tdrmBufM≠
, *
	tdrmBufM≠På
;

265 
	s_drmLock
 {

266 vﬁ©ûê
	glock
;

267 
	g∑ddög
[60];

279 } 
	tdrmLock
, *
	tdrmLockPå
;

285 
	s_drmDMAReq
 {

286 
drm_c⁄ãxt_t
 
	gc⁄ãxt
;

287 
	g£nd_cou¡
;

288 *
	g£nd_li°
;

289 *
	g£nd_sizes
;

290 
drmDMAFœgs
 
	gÊags
;

291 
	gªque°_cou¡
;

292 
	gªque°_size
;

293 *
	gªque°_li°
;

294 *
	gªque°_sizes
;

295 
	ggø¡ed_cou¡
;

296 } 
	tdrmDMAReq
, *
	tdrmDMAReqPå
;

298 
	s_drmRegi⁄
 {

299 
drm_h™dÀ_t
 
	gh™dÀ
;

300 
	goff£t
;

301 
drmSize
 
	gsize
;

302 
drmAddªss
 
	gm≠
;

303 } 
	tdrmRegi⁄
, *
	tdrmRegi⁄På
;

305 
	s_drmTextuªRegi⁄
 {

306 
	g√xt
;

307 
	g¥ev
;

308 
	gö_u£
;

309 
	g∑ddög
;

310 
	gage
;

311 } 
	tdrmTextuªRegi⁄
, *
	tdrmTextuªRegi⁄På
;

315 
	gDRM_VBLANK_ABSOLUTE
 = 0x0,

316 
	gDRM_VBLANK_RELATIVE
 = 0x1,

318 
	gDRM_VBLANK_HIGH_CRTC_MASK
 = 0x0000003e,

319 
	gDRM_VBLANK_EVENT
 = 0x4000000,

320 
	gDRM_VBLANK_FLIP
 = 0x8000000,

321 
	gDRM_VBLANK_NEXTONMISS
 = 0x10000000,

322 
	gDRM_VBLANK_SECONDARY
 = 0x20000000,

323 
	gDRM_VBLANK_SIGNAL
 = 0x40000000

324 } 
	tdrmVBœnkSeqTy≥
;

325 
	#DRM_VBLANK_HIGH_CRTC_SHIFT
 1

	)

327 
	s_drmVBœnkReq
 {

328 
drmVBœnkSeqTy≥
 
	gty≥
;

329 
	g£quí˚
;

330 
	gsig«l
;

331 } 
	tdrmVBœnkReq
, *
	tdrmVBœnkReqPå
;

333 
	s_drmVBœnkRïly
 {

334 
drmVBœnkSeqTy≥
 
	gty≥
;

335 
	g£quí˚
;

336 
	gtvÆ_£c
;

337 
	gtvÆ_u£c
;

338 } 
	tdrmVBœnkRïly
, *
	tdrmVBœnkRïlyPå
;

340 
	u_drmVBœnk
 {

341 
drmVBœnkReq
 
	gªque°
;

342 
drmVBœnkRïly
 
	gª∂y
;

343 } 
	tdrmVBœnk
, *
	tdrmVBœnkPå
;

345 
	s_drmSëVîsi⁄
 {

346 
	gdrm_di_maj‹
;

347 
	gdrm_di_mö‹
;

348 
	gdrm_dd_maj‹
;

349 
	gdrm_dd_mö‹
;

350 } 
	tdrmSëVîsi⁄
, *
	tdrmSëVîsi⁄På
;

352 
	#__drm_dummy_lock
(
lock
Ë(*(
__vﬁ©ûe__
 *Óock)

	)

354 
	#DRM_LOCK_HELD
 0x80000000U

	)

355 
	#DRM_LOCK_CONT
 0x40000000U

	)

357 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 2)

358 #i‡
deföed
(
__i386
Ë|| deföed(
__AMD64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__amd64__
)

360 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
__ªt
) \

362 
__dummy
; \

363 
__asm__
 
	`__vﬁ©ûe__
( \

366 : "=d" (
__ªt
), \

367 "=m" (
	`__drm_dummy_lock
(
lock
)), \

368 "˜" (
__dummy
) \

369 : "2" (
ﬁd
), \

370 "r" (
√w
)); \

371 } 0)

	)

373 #ñi‡
deföed
(
__Æpha__
)

375 
	#DRM_CAS
(
lock
, 
ﬁd
, 
√w
, 
ªt
) \

377 
tmp
, 
ﬁd32
; \

378 
__asm__
 
	`__vﬁ©ûe__
( \

391 : "=&r"(
tmp
), "=&r"(
ªt
), \

392 "=m"(
	`__drm_dummy_lock
(
lock
)), \

393 "=&r"(
ﬁd32
) \

394 : "r"(
√w
), "r"(
ﬁd
) \

396 } 0)

	)

398 #ñi‡
deföed
(
__•¨c__
)

400 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
__ªt
) \

401 dÿ{ 
__ﬁd
 
	`__asm
("o0"); \

402 
__√w
 
	`__asm
("o1"); \

403 vﬁ©ûê*
__lock
 
	`__asm
("o2"); \

404 
__ﬁd
 = 
ﬁd
; \

405 
__√w
 = 
√w
; \

406 
__lock
 = (vﬁ©ûê*)
lock
; \

407 
__asm__
 
	`__vﬁ©ûe__
( \

412 : "=&r" (
__√w
) \

413 : "0" (
__√w
), \

414 "r" (
__lock
), \

415 "r" (
__ﬁd
) \

417 
__ªt
 = (
__√w
 !
__ﬁd
); \

418 } 0)

	)

420 #ñi‡
deföed
(
__ü64__
)

422 #ifde‡
__INTEL_COMPILER


424 
	~<ü64öåö.h
>

426 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
__ªt
) \

428 
__ªsu…
, 
__ﬁd
 = (
ﬁd
) & 0xffffffff; \

429 
	`__mf
(); \

430 
__ªsu…
 = 
	`_I¡îlockedCom∑ªExch™ge_acq
(&
	`__drm_dummy_lock
(
lock
), (
√w
), 
__ﬁd
);\

431 
__ªt
 = (
__ªsu…
Ë!(
__ﬁd
); \

435 } 0)

	)

438 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
__ªt
) \

440 
__ªsu…
, 
__ﬁd
 = (
ﬁd
); \

441 
__asm__
 
	`__vﬁ©ûe__
( \

446 : "Ù" (
__ªsu…
), "=m" (
	`__drm_dummy_lock
(
lock
)) \

447 : "r" (()
__ﬁd
), "r" (
√w
) \

449 
__ªt
 = (
__ªsu…
Ë!(
__ﬁd
); \

450 } 0)

	)

454 #ñi‡
deföed
(
__powîpc__
)

456 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
__ªt
) \

458 
__asm__
 
	`__vﬁ©ûe__
( \

467 : "=&r"(
__ªt
) \

468 : "r"(
lock
), "r"(
√w
), "r"(
ﬁd
) \

470 } 0)

	)

475 #i‚de‡
DRM_CAS


476 
	#DRM_CAS
(
lock
,
ﬁd
,
√w
,
ªt
Ëdÿ{Ñë=1; } 0Ë

	)

479 #i‡
deföed
(
__Æpha__
)

480 
	#DRM_CAS_RESULT
(
_ªsu…
Ë
	)
_result

481 #ñi‡
deföed
(
__powîpc__
)

482 
	#DRM_CAS_RESULT
(
_ªsu…
Ë
	)
_result

484 
	#DRM_CAS_RESULT
(
_ªsu…
Ë
	)
_result

487 
	#DRM_LIGHT_LOCK
(
fd
,
lock
,
c⁄ãxt
) \

489 
	`DRM_CAS_RESULT
(
__ªt
); \

490 
	`DRM_CAS
(
lock
,
c⁄ãxt
,
DRM_LOCK_HELD
|c⁄ãxt,
__ªt
); \

491 i‡(
__ªt
Ë
	`drmGëLock
(
fd
,
c⁄ãxt
,0); \

492 } 0)

	)

496 
	#DRM_LIGHT_LOCK_COUNT
(
fd
,
lock
,
c⁄ãxt
,
cou¡
) \

498 
	`DRM_CAS_RESULT
(
__ªt
); \

499 
	`DRM_CAS
(
lock
,
c⁄ãxt
,
DRM_LOCK_HELD
|c⁄ãxt,
__ªt
); \

500 i‡(
__ªt
Ë
	`drmGëLock
(
fd
,
c⁄ãxt
,0); \

501 ++
cou¡
; \

502 } 0)

	)

504 
	#DRM_LOCK
(
fd
,
lock
,
c⁄ãxt
,
Êags
) \

506 i‡(
Êags
Ë
	`drmGëLock
(
fd
,
c⁄ãxt
,flags); \

507 
	`DRM_LIGHT_LOCK
(
fd
,
lock
,
c⁄ãxt
); \

508 } 0)

	)

510 
	#DRM_UNLOCK
(
fd
,
lock
,
c⁄ãxt
) \

512 
	`DRM_CAS_RESULT
(
__ªt
); \

513 
	`DRM_CAS
(
lock
,
DRM_LOCK_HELD
|
c⁄ãxt
,c⁄ãxt,
__ªt
); \

514 i‡(
__ªt
Ë
	`drmU∆ock
(
fd
,
c⁄ãxt
); \

515 } 0)

	)

518 
	#DRM_SPINLOCK
(
•ö
,
vÆ
) \

520 
	`DRM_CAS_RESULT
(
__ªt
); \

522 
	`DRM_CAS
(
•ö
,0,
vÆ
,
__ªt
); \

523 i‡(
__ªt
Ë(
•ö
)->
lock
); \

524 } 
__ªt
); \

525 } 0)

	)

527 
	#DRM_SPINLOCK_TAKE
(
•ö
,
vÆ
) \

529 
	`DRM_CAS_RESULT
(
__ªt
); \

530 
cur
; \

532 
cur
 = (*
•ö
).
lock
; \

533 
	`DRM_CAS
(
•ö
,
cur
,
vÆ
,
__ªt
); \

534 } 
__ªt
); \

535 } 0)

	)

537 
	#DRM_SPINLOCK_COUNT
(
•ö
,
vÆ
,
cou¡
,
__ªt
) \

539 
__i
; \

540 
__ªt
 = 1; \

541 
__i
 = 0; 
__ªt
 && __ò< 
cou¡
; __i++) { \

542 
	`DRM_CAS
(
•ö
,0,
vÆ
,
__ªt
); \

543 i‡(
__ªt
Ë;
__i
 < 
cou¡
 && (
•ö
)->
lock
; __i++); \

545 } 0)

	)

547 
	#DRM_SPINUNLOCK
(
•ö
,
vÆ
) \

549 
	`DRM_CAS_RESULT
(
__ªt
); \

550 i‡((*
•ö
).
lock
 =
vÆ
) { \

552 
	`DRM_CAS
(
•ö
,
vÆ
,0,
__ªt
); \

553 } 
__ªt
); \

555 } 0)

	)

560 
drmAvaûabÀ
();

561 
drmO≥n
(c⁄° *
«me
, c⁄° *
busid
);

563 
	#DRM_NODE_PRIMARY
 0

	)

564 
	#DRM_NODE_CONTROL
 1

	)

565 
	#DRM_NODE_RENDER
 2

	)

566 
	#DRM_NODE_MAX
 3

	)

568 
drmO≥nWôhTy≥
(c⁄° *
«me
, c⁄° *
busid
,

569 
ty≥
);

571 
drmO≥nC⁄åﬁ
(
mö‹
);

572 
drmO≥nRídî
(
mö‹
);

573 
drmClo£
(
fd
);

574 
drmVîsi⁄På
 
drmGëVîsi⁄
(
fd
);

575 
drmVîsi⁄På
 
drmGëLibVîsi⁄
(
fd
);

576 
drmGëC≠
(
fd
, 
uöt64_t
 
ˇ∑bûôy
, uöt64_à*
vÆue
);

577 
drmFªeVîsi⁄
(
drmVîsi⁄På
);

578 
drmGëMagic
(
fd
, 
drm_magic_t
 * 
magic
);

579 *
drmGëBusid
(
fd
);

580 
drmGëI¡îru±FromBusID
(
fd
, 
bu¢um
, 
devnum
,

581 
fun˙um
);

582 
drmGëM≠
(
fd
, 
idx
, 
drm_h™dÀ_t
 *
off£t
,

583 
drmSize
 *
size
, 
drmM≠Ty≥
 *
ty≥
,

584 
drmM≠Fœgs
 *
Êags
, 
drm_h™dÀ_t
 *
h™dÀ
,

585 *
mår
);

586 
drmGëClõ¡
(
fd
, 
idx
, *
auth
, *
pid
,

587 *
uid
, *
magic
,

588 *
iocs
);

589 
drmGëSèts
(
fd
, 
drmSètsT
 *
°©s
);

590 
drmSëI¡îÁ˚Vîsi⁄
(
fd
, 
drmSëVîsi⁄
 *
vîsi⁄
);

591 
drmComm™dN⁄e
(
fd
, 
drmComm™dIndex
);

592 
drmComm™dRód
(
fd
, 
drmComm™dIndex
,

593 *
d©a
, 
size
);

594 
drmComm™dWrôe
(
fd
, 
drmComm™dIndex
,

595 *
d©a
, 
size
);

596 
drmComm™dWrôeRód
(
fd
, 
drmComm™dIndex
,

597 *
d©a
, 
size
);

600 
drmFªeBusid
(c⁄° *
busid
);

601 
drmSëBusid
(
fd
, c⁄° *
busid
);

602 
drmAuthMagic
(
fd
, 
drm_magic_t
 
magic
);

603 
drmAddM≠
(
fd
,

604 
drm_h™dÀ_t
 
off£t
,

605 
drmSize
 
size
,

606 
drmM≠Ty≥
 
ty≥
,

607 
drmM≠Fœgs
 
Êags
,

608 
drm_h™dÀ_t
 * 
h™dÀ
);

609 
drmRmM≠
(
fd
, 
drm_h™dÀ_t
 
h™dÀ
);

610 
drmAddC⁄ãxtPriv©eM≠pög
(
fd
, 
drm_c⁄ãxt_t
 
˘x_id
,

611 
drm_h™dÀ_t
 
h™dÀ
);

613 
drmAddBufs
(
fd
, 
cou¡
, 
size
,

614 
drmBufDescFœgs
 
Êags
,

615 
agp_off£t
);

616 
drmM¨kBufs
(
fd
, 
low
, 
high
);

617 
drmCª©eC⁄ãxt
(
fd
, 
drm_c⁄ãxt_t
 * 
h™dÀ
);

618 
drmSëC⁄ãxtFœgs
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
,

619 
drm_c⁄ãxt_tFœgs
 
Êags
);

620 
drmGëC⁄ãxtFœgs
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
,

621 
drm_c⁄ãxt_tFœgsPå
 
Êags
);

622 
drmAddC⁄ãxtTag
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
, *
èg
);

623 
drmDñC⁄ãxtTag
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
);

624 *
drmGëC⁄ãxtTag
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
);

625 
drm_c⁄ãxt_t
 * 
drmGëRe£rvedC⁄ãxtLi°
(
fd
, *
cou¡
);

626 
drmFªeRe£rvedC⁄ãxtLi°
(
drm_c⁄ãxt_t
 *);

627 
drmSwôchToC⁄ãxt
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
);

628 
drmDe°royC⁄ãxt
(
fd
, 
drm_c⁄ãxt_t
 
h™dÀ
);

629 
drmCª©eDøwabÀ
(
fd
, 
drm_døwabÀ_t
 * 
h™dÀ
);

630 
drmDe°royDøwabÀ
(
fd
, 
drm_døwabÀ_t
 
h™dÀ
);

631 
drmUpd©eDøwabÀInfo
(
fd
, 
drm_døwabÀ_t
 
h™dÀ
,

632 
drm_døwabÀ_öfo_ty≥_t
 
ty≥
,

633 
num
, *
d©a
);

634 
drmCéIn°H™dÀr
(
fd
, 
úq
);

635 
drmCéUnö°H™dÀr
(
fd
);

636 
drmSëClõ¡C≠
(
fd
, 
uöt64_t
 
ˇ∑bûôy
,

637 
uöt64_t
 
vÆue
);

640 
drmM≠
(
fd
,

641 
drm_h™dÀ_t
 
h™dÀ
,

642 
drmSize
 
size
,

643 
drmAddªssPå
 
addªss
);

644 
drmUnm≠
(
drmAddªss
 
addªss
, 
drmSize
 
size
);

645 
drmBufInfoPå
 
drmGëBufInfo
(
fd
);

646 
drmBufM≠På
 
drmM≠Bufs
(
fd
);

647 
drmUnm≠Bufs
(
drmBufM≠På
 
bufs
);

648 
drmDMA
(
fd
, 
drmDMAReqPå
 
ªque°
);

649 
drmFªeBufs
(
fd
, 
cou¡
, *
li°
);

650 
drmGëLock
(
fd
,

651 
drm_c⁄ãxt_t
 
c⁄ãxt
,

652 
drmLockFœgs
 
Êags
);

653 
drmU∆ock
(
fd
, 
drm_c⁄ãxt_t
 
c⁄ãxt
);

654 
drmFöish
(
fd
, 
c⁄ãxt
, 
drmLockFœgs
 
Êags
);

655 
drmGëC⁄ãxtPriv©eM≠pög
(
fd
, 
drm_c⁄ãxt_t
 
˘x_id
,

656 
drm_h™dÀ_t
 * 
h™dÀ
);

659 
drmAgpAcquúe
(
fd
);

660 
drmAgpRñó£
(
fd
);

661 
drmAgpE«bÀ
(
fd
, 
mode
);

662 
drmAgpAŒoc
(
fd
, 
size
,

663 
ty≥
, *
addªss
,

664 
drm_h™dÀ_t
 *
h™dÀ
);

665 
drmAgpFªe
(
fd
, 
drm_h™dÀ_t
 
h™dÀ
);

666 
drmAgpBöd
(
fd
, 
drm_h™dÀ_t
 
h™dÀ
,

667 
off£t
);

668 
drmAgpUnböd
(
fd
, 
drm_h™dÀ_t
 
h™dÀ
);

671 
drmAgpVîsi⁄Maj‹
(
fd
);

672 
drmAgpVîsi⁄Mö‹
(
fd
);

673 
drmAgpGëMode
(
fd
);

674 
drmAgpBa£
(
fd
);

675 
drmAgpSize
(
fd
);

676 
drmAgpMem‹yU£d
(
fd
);

677 
drmAgpMem‹yAvaû
(
fd
);

678 
drmAgpVíd‹Id
(
fd
);

679 
drmAgpDevi˚Id
(
fd
);

682 
drmSˇâîG©hîAŒoc
(
fd
, 
size
,

683 
drm_h™dÀ_t
 *
h™dÀ
);

684 
drmSˇâîG©hîFªe
(
fd
, 
drm_h™dÀ_t
 
h™dÀ
);

686 
drmWaôVBœnk
(
fd
, 
drmVBœnkPå
 
vbl
);

689 
drmSëSîvîInfo
(
drmSîvîInfoPå
 
öfo
);

690 
drmEº‹
(
îr
, c⁄° *
œbñ
);

691 *
drmMÆloc
(
size
);

692 
drmFªe
(*
±
);

695 *
drmHashCª©e
();

696 
drmHashDe°roy
(*
t
);

697 
drmHashLookup
(*
t
, 
key
, **
vÆue
);

698 
drmHashIn£π
(*
t
, 
key
, *
vÆue
);

699 
drmHashDñëe
(*
t
, 
key
);

700 
drmHashFú°
(*
t
, *
key
, **
vÆue
);

701 
drmHashNext
(*
t
, *
key
, **
vÆue
);

704 *
drmR™domCª©e
(
£ed
);

705 
drmR™domDe°roy
(*
°©e
);

706 
drmR™dom
(*
°©e
);

707 
drmR™domDoubÀ
(*
°©e
);

711 *
drmSLCª©e
();

712 
drmSLDe°roy
(*
l
);

713 
drmSLLookup
(*
l
, 
key
, **
vÆue
);

714 
drmSLIn£π
(*
l
, 
key
, *
vÆue
);

715 
drmSLDñëe
(*
l
, 
key
);

716 
drmSLNext
(*
l
, *
key
, **
vÆue
);

717 
drmSLFú°
(*
l
, *
key
, **
vÆue
);

718 
drmSLDump
(*
l
);

719 
drmSLLookupNeighb‹s
(*
l
, 
key
,

720 *
¥ev_key
, **
¥ev_vÆue
,

721 *
√xt_key
, **
√xt_vÆue
);

723 
drmO≥nOn˚
(*
unu£d
, c⁄° *
BusID
, *
√wly›íed
);

724 
drmO≥nOn˚WôhTy≥
(c⁄° *
BusID
, *
√wly›íed
, 
ty≥
);

725 
drmClo£On˚
(
fd
);

726 
drmMsg
(c⁄° *
f‹m©
, ...Ë
DRM_PRINTFLIKE
(1, 2);

728 
drmSëMa°î
(
fd
);

729 
drmDr›Ma°î
(
fd
);

731 
	#DRM_EVENT_CONTEXT_VERSION
 3

	)

733 
	s_drmEvítC⁄ãxt
 {

737 
	gvîsi⁄
;

739 (*
	gvbœnk_h™dÀr
)(
	gfd
,

740 
	g£quí˚
,

741 
	gtv_£c
,

742 
	gtv_u£c
,

743 *
	gu£r_d©a
);

745 (*
	g∑ge_Êù_h™dÀr
)(
	gfd
,

746 
	g£quí˚
,

747 
	gtv_£c
,

748 
	gtv_u£c
,

749 *
	gu£r_d©a
);

751 (*
	g∑ge_Êù_h™dÀr2
)(
	gfd
,

752 
	g£quí˚
,

753 
	gtv_£c
,

754 
	gtv_u£c
,

755 
	g¸tc_id
,

756 *
	gu£r_d©a
);

758 } 
	tdrmEvítC⁄ãxt
, *
	tdrmEvítC⁄ãxtPå
;

760 
drmH™dÀEvít
(
fd
, 
drmEvítC⁄ãxtPå
 
ev˘x
);

762 *
drmGëDevi˚NameFromFd
(
fd
);

767 *
drmGëDevi˚NameFromFd2
(
fd
);

768 
drmGëNodeTy≥FromFd
(
fd
);

770 
drmPrimeH™dÀToFD
(
fd
, 
uöt32_t
 
h™dÀ
, uöt32_à
Êags
, *
¥ime_fd
);

771 
drmPrimeFDToH™dÀ
(
fd
, 
¥ime_fd
, 
uöt32_t
 *
h™dÀ
);

773 *
drmGëPrim¨yDevi˚NameFromFd
(
fd
);

774 *
drmGëRídîDevi˚NameFromFd
(
fd
);

776 
	#DRM_BUS_PCI
 0

	)

777 
	#DRM_BUS_USB
 1

	)

778 
	#DRM_BUS_PLATFORM
 2

	)

779 
	#DRM_BUS_HOST1X
 3

	)

781 
	s_drmPciBusInfo
 {

782 
uöt16_t
 
	gdomaö
;

783 
uöt8_t
 
	gbus
;

784 
uöt8_t
 
	gdev
;

785 
uöt8_t
 
	gfunc
;

786 } 
	tdrmPciBusInfo
, *
	tdrmPciBusInfoPå
;

788 
	s_drmPciDevi˚Info
 {

789 
uöt16_t
 
	gvíd‹_id
;

790 
uöt16_t
 
	gdevi˚_id
;

791 
uöt16_t
 
	gsubvíd‹_id
;

792 
uöt16_t
 
	gsubdevi˚_id
;

793 
uöt8_t
 
	gªvisi⁄_id
;

794 } 
	tdrmPciDevi˚Info
, *
	tdrmPciDevi˚InfoPå
;

796 
	s_drmUsbBusInfo
 {

797 
uöt8_t
 
	gbus
;

798 
uöt8_t
 
	gdev
;

799 } 
	tdrmUsbBusInfo
, *
	tdrmUsbBusInfoPå
;

801 
	s_drmUsbDevi˚Info
 {

802 
uöt16_t
 
	gvíd‹
;

803 
uöt16_t
 
	g¥odu˘
;

804 } 
	tdrmUsbDevi˚Info
, *
	tdrmUsbDevi˚InfoPå
;

806 
	#DRM_PLATFORM_DEVICE_NAME_LEN
 512

	)

808 
	s_drmPœtf‹mBusInfo
 {

809 
	gfuŒ«me
[
DRM_PLATFORM_DEVICE_NAME_LEN
];

810 } 
	tdrmPœtf‹mBusInfo
, *
	tdrmPœtf‹mBusInfoPå
;

812 
	s_drmPœtf‹mDevi˚Info
 {

813 **
	gcom∑tibÀ
;

814 } 
	tdrmPœtf‹mDevi˚Info
, *
	tdrmPœtf‹mDevi˚InfoPå
;

816 
	#DRM_HOST1X_DEVICE_NAME_LEN
 512

	)

818 
	s_drmHo°1xBusInfo
 {

819 
	gfuŒ«me
[
DRM_HOST1X_DEVICE_NAME_LEN
];

820 } 
	tdrmHo°1xBusInfo
, *
	tdrmHo°1xBusInfoPå
;

822 
	s_drmHo°1xDevi˚Info
 {

823 **
	gcom∑tibÀ
;

824 } 
	tdrmHo°1xDevi˚Info
, *
	tdrmHo°1xDevi˚InfoPå
;

826 
	s_drmDevi˚
 {

827 **
	gnodes
;

828 
	gavaûabÀ_nodes
;

829 
	gbu°y≥
;

831 
drmPciBusInfoPå
 
	gpci
;

832 
drmUsbBusInfoPå
 
	gusb
;

833 
drmPœtf‹mBusInfoPå
 
	g∂©f‹m
;

834 
drmHo°1xBusInfoPå
 
	gho°1x
;

835 } 
	gbusöfo
;

837 
drmPciDevi˚InfoPå
 
	gpci
;

838 
drmUsbDevi˚InfoPå
 
	gusb
;

839 
drmPœtf‹mDevi˚InfoPå
 
	g∂©f‹m
;

840 
drmHo°1xDevi˚InfoPå
 
	gho°1x
;

841 } 
	gdevi˚öfo
;

842 } 
	tdrmDevi˚
, *
	tdrmDevi˚På
;

844 
drmGëDevi˚
(
fd
, 
drmDevi˚På
 *
devi˚
);

845 
drmFªeDevi˚
(
drmDevi˚På
 *
devi˚
);

847 
drmGëDevi˚s
(
drmDevi˚På
 
devi˚s
[], 
max_devi˚s
);

848 
drmFªeDevi˚s
(
drmDevi˚På
 
devi˚s
[], 
cou¡
);

850 
	#DRM_DEVICE_GET_PCI_REVISION
 (1 << 0)

	)

851 
drmGëDevi˚2
(
fd
, 
uöt32_t
 
Êags
, 
drmDevi˚På
 *
devi˚
);

852 
drmGëDevi˚s2
(
uöt32_t
 
Êags
, 
drmDevi˚På
 
devi˚s
[], 
max_devi˚s
);

854 
drmDevi˚sEquÆ
(
drmDevi˚På
 
a
, drmDevi˚På 
b
);

856 
drmSyncobjCª©e
(
fd
, 
uöt32_t
 
Êags
, uöt32_à*
h™dÀ
);

857 
drmSyncobjDe°roy
(
fd
, 
uöt32_t
 
h™dÀ
);

858 
drmSyncobjH™dÀToFD
(
fd
, 
uöt32_t
 
h™dÀ
, *
obj_fd
);

859 
drmSyncobjFDToH™dÀ
(
fd
, 
obj_fd
, 
uöt32_t
 *
h™dÀ
);

861 
drmSyncobjImp‹tSyncFûe
(
fd
, 
uöt32_t
 
h™dÀ
, 
sync_fûe_fd
);

862 
drmSyncobjExp‹tSyncFûe
(
fd
, 
uöt32_t
 
h™dÀ
, *
sync_fûe_fd
);

863 
drmSyncobjWaô
(
fd
, 
uöt32_t
 *
h™dÀs
, 
num_h™dÀs
,

864 
öt64_t
 
timeout_n£c
, 
Êags
,

865 
uöt32_t
 *
fú°_sig«Àd
);

867 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/xf86drmMode.h

36 #i‚de‡
_XF86DRMMODE_H_


37 
	#_XF86DRMMODE_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

43 
	~<drm.h
>

67 #i‚de‡
_DRM_MODE_H


69 
	#DRM_DISPLAY_INFO_LEN
 32

	)

70 
	#DRM_CONNECTOR_NAME_LEN
 32

	)

71 
	#DRM_DISPLAY_MODE_LEN
 32

	)

72 
	#DRM_PROP_NAME_LEN
 32

	)

74 
	#DRM_MODE_TYPE_BUILTIN
 (1<<0)

	)

75 
	#DRM_MODE_TYPE_CLOCK_C
 ((1<<1Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

76 
	#DRM_MODE_TYPE_CRTC_C
 ((1<<2Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

77 
	#DRM_MODE_TYPE_PREFERRED
 (1<<3)

	)

78 
	#DRM_MODE_TYPE_DEFAULT
 (1<<4)

	)

79 
	#DRM_MODE_TYPE_USERDEF
 (1<<5)

	)

80 
	#DRM_MODE_TYPE_DRIVER
 (1<<6)

	)

84 
	#DRM_MODE_FLAG_PHSYNC
 (1<<0)

	)

85 
	#DRM_MODE_FLAG_NHSYNC
 (1<<1)

	)

86 
	#DRM_MODE_FLAG_PVSYNC
 (1<<2)

	)

87 
	#DRM_MODE_FLAG_NVSYNC
 (1<<3)

	)

88 
	#DRM_MODE_FLAG_INTERLACE
 (1<<4)

	)

89 
	#DRM_MODE_FLAG_DBLSCAN
 (1<<5)

	)

90 
	#DRM_MODE_FLAG_CSYNC
 (1<<6)

	)

91 
	#DRM_MODE_FLAG_PCSYNC
 (1<<7)

	)

92 
	#DRM_MODE_FLAG_NCSYNC
 (1<<8)

	)

93 
	#DRM_MODE_FLAG_HSKEW
 (1<<9Ë

	)

94 
	#DRM_MODE_FLAG_BCAST
 (1<<10)

	)

95 
	#DRM_MODE_FLAG_PIXMUX
 (1<<11)

	)

96 
	#DRM_MODE_FLAG_DBLCLK
 (1<<12)

	)

97 
	#DRM_MODE_FLAG_CLKDIV2
 (1<<13)

	)

98 
	#DRM_MODE_FLAG_3D_MASK
 (0x1f<<14)

	)

99 
	#DRM_MODE_FLAG_3D_NONE
 (0<<14)

	)

100 
	#DRM_MODE_FLAG_3D_FRAME_PACKING
 (1<<14)

	)

101 
	#DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE
 (2<<14)

	)

102 
	#DRM_MODE_FLAG_3D_LINE_ALTERNATIVE
 (3<<14)

	)

103 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL
 (4<<14)

	)

104 
	#DRM_MODE_FLAG_3D_L_DEPTH
 (5<<14)

	)

105 
	#DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH
 (6<<14)

	)

106 
	#DRM_MODE_FLAG_3D_TOP_AND_BOTTOM
 (7<<14)

	)

107 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF
 (8<<14)

	)

111 
	#DRM_MODE_DPMS_ON
 0

	)

112 
	#DRM_MODE_DPMS_STANDBY
 1

	)

113 
	#DRM_MODE_DPMS_SUSPEND
 2

	)

114 
	#DRM_MODE_DPMS_OFF
 3

	)

117 
	#DRM_MODE_SCALE_NON_GPU
 0

	)

118 
	#DRM_MODE_SCALE_FULLSCREEN
 1

	)

119 
	#DRM_MODE_SCALE_NO_SCALE
 2

	)

120 
	#DRM_MODE_SCALE_ASPECT
 3

	)

123 
	#DRM_MODE_DITHERING_OFF
 0

	)

124 
	#DRM_MODE_DITHERING_ON
 1

	)

126 
	#DRM_MODE_ENCODER_NONE
 0

	)

127 
	#DRM_MODE_ENCODER_DAC
 1

	)

128 
	#DRM_MODE_ENCODER_TMDS
 2

	)

129 
	#DRM_MODE_ENCODER_LVDS
 3

	)

130 
	#DRM_MODE_ENCODER_TVDAC
 4

	)

131 
	#DRM_MODE_ENCODER_VIRTUAL
 5

	)

132 
	#DRM_MODE_ENCODER_DSI
 6

	)

133 
	#DRM_MODE_ENCODER_DPMST
 7

	)

134 
	#DRM_MODE_ENCODER_DPI
 8

	)

136 
	#DRM_MODE_SUBCONNECTOR_Autom©ic
 0

	)

137 
	#DRM_MODE_SUBCONNECTOR_Unknown
 0

	)

138 
	#DRM_MODE_SUBCONNECTOR_DVID
 3

	)

139 
	#DRM_MODE_SUBCONNECTOR_DVIA
 4

	)

140 
	#DRM_MODE_SUBCONNECTOR_Composôe
 5

	)

141 
	#DRM_MODE_SUBCONNECTOR_SVIDEO
 6

	)

142 
	#DRM_MODE_SUBCONNECTOR_Comp⁄ít
 8

	)

143 
	#DRM_MODE_SUBCONNECTOR_SCART
 9

	)

145 
	#DRM_MODE_CONNECTOR_Unknown
 0

	)

146 
	#DRM_MODE_CONNECTOR_VGA
 1

	)

147 
	#DRM_MODE_CONNECTOR_DVII
 2

	)

148 
	#DRM_MODE_CONNECTOR_DVID
 3

	)

149 
	#DRM_MODE_CONNECTOR_DVIA
 4

	)

150 
	#DRM_MODE_CONNECTOR_Composôe
 5

	)

151 
	#DRM_MODE_CONNECTOR_SVIDEO
 6

	)

152 
	#DRM_MODE_CONNECTOR_LVDS
 7

	)

153 
	#DRM_MODE_CONNECTOR_Comp⁄ít
 8

	)

154 
	#DRM_MODE_CONNECTOR_9PöDIN
 9

	)

155 
	#DRM_MODE_CONNECTOR_Di•œyP‹t
 10

	)

156 
	#DRM_MODE_CONNECTOR_HDMIA
 11

	)

157 
	#DRM_MODE_CONNECTOR_HDMIB
 12

	)

158 
	#DRM_MODE_CONNECTOR_TV
 13

	)

159 
	#DRM_MODE_CONNECTOR_eDP
 14

	)

160 
	#DRM_MODE_CONNECTOR_VIRTUAL
 15

	)

161 
	#DRM_MODE_CONNECTOR_DSI
 16

	)

162 
	#DRM_MODE_CONNECTOR_DPI
 17

	)

164 
	#DRM_MODE_PROP_PENDING
 (1<<0)

	)

165 
	#DRM_MODE_PROP_RANGE
 (1<<1)

	)

166 
	#DRM_MODE_PROP_IMMUTABLE
 (1<<2)

	)

167 
	#DRM_MODE_PROP_ENUM
 (1<<3Ë

	)

168 
	#DRM_MODE_PROP_BLOB
 (1<<4)

	)

170 
	#DRM_MODE_CURSOR_BO
 (1<<0)

	)

171 
	#DRM_MODE_CURSOR_MOVE
 (1<<1)

	)

182 
	#DRM_MODE_FEATURE_KMS
 1

	)

183 
	#DRM_MODE_FEATURE_DIRTYFB
 1

	)

186 
	s_drmModeRes
 {

188 
cou¡_fbs
;

189 
uöt32_t
 *
fbs
;

191 
cou¡_¸tcs
;

192 
uöt32_t
 *
¸tcs
;

194 
cou¡_c⁄√˘‹s
;

195 
uöt32_t
 *
c⁄√˘‹s
;

197 
cou¡_ícodîs
;

198 
uöt32_t
 *
ícodîs
;

200 
uöt32_t
 
mö_width
, 
max_width
;

201 
uöt32_t
 
mö_height
, 
max_height
;

202 } 
	tdrmModeRes
, *
	tdrmModeResPå
;

204 
	s_drmModeModeInfo
 {

205 
uöt32_t
 
˛ock
;

206 
uöt16_t
 
hdi•œy
, 
hsync_°¨t
, 
hsync_íd
, 
htŸÆ
, 
hskew
;

207 
uöt16_t
 
vdi•œy
, 
vsync_°¨t
, 
vsync_íd
, 
vtŸÆ
, 
vsˇn
;

209 
uöt32_t
 
vª‰esh
;

211 
uöt32_t
 
Êags
;

212 
uöt32_t
 
ty≥
;

213 
«me
[
DRM_DISPLAY_MODE_LEN
];

214 } 
	tdrmModeModeInfo
, *
	tdrmModeModeInfoPå
;

216 
	s_drmModeFB
 {

217 
uöt32_t
 
fb_id
;

218 
uöt32_t
 
width
, 
height
;

219 
uöt32_t
 
pôch
;

220 
uöt32_t
 
bµ
;

221 
uöt32_t
 
dïth
;

223 
uöt32_t
 
h™dÀ
;

224 } 
	tdrmModeFB
, *
	tdrmModeFBPå
;

226 
drm_˛ù_ª˘
 
	tdrmModeClù
, *
	tdrmModeClùPå
;

228 
	s_drmModePr›îtyBlob
 {

229 
uöt32_t
 
id
;

230 
uöt32_t
 
Àngth
;

231 *
d©a
;

232 } 
	tdrmModePr›îtyBlobRes
, *
	tdrmModePr›îtyBlobPå
;

234 
	s_drmModePr›îty
 {

235 
uöt32_t
 
¥›_id
;

236 
uöt32_t
 
Êags
;

237 
«me
[
DRM_PROP_NAME_LEN
];

238 
cou¡_vÆues
;

239 
uöt64_t
 *
vÆues
;

240 
cou¡_íums
;

241 
drm_mode_¥›îty_íum
 *
íums
;

242 
cou¡_blobs
;

243 
uöt32_t
 *
blob_ids
;

244 } 
	tdrmModePr›îtyRes
, *
	tdrmModePr›îtyPå
;

246 
__ölöe
 
drm_¥›îty_ty≥_is
(
drmModePr›îtyPå
 
¥›îty
,

247 
uöt32_t
 
ty≥
)

250 i‡(
¥›îty
->
Êags
 & 
DRM_MODE_PROP_EXTENDED_TYPE
)

251  (
¥›îty
->
Êags
 & 
DRM_MODE_PROP_EXTENDED_TYPE
Ë=
ty≥
;

252  
¥›îty
->
Êags
 & 
ty≥
;

255 
	s_drmModeCπc
 {

256 
uöt32_t
 
¸tc_id
;

257 
uöt32_t
 
buf„r_id
;

259 
uöt32_t
 
x
, 
y
;

260 
uöt32_t
 
width
, 
height
;

261 
mode_vÆid
;

262 
drmModeModeInfo
 
mode
;

264 
gamma_size
;

266 } 
	tdrmModeCπc
, *
	tdrmModeCπcPå
;

268 
	s_drmModeEncodî
 {

269 
uöt32_t
 
ícodî_id
;

270 
uöt32_t
 
ícodî_ty≥
;

271 
uöt32_t
 
¸tc_id
;

272 
uöt32_t
 
possibÀ_¸tcs
;

273 
uöt32_t
 
possibÀ_˛⁄es
;

274 } 
	tdrmModeEncodî
, *
	tdrmModeEncodîPå
;

277 
DRM_MODE_CONNECTED
 = 1,

278 
DRM_MODE_DISCONNECTED
 = 2,

279 
DRM_MODE_UNKNOWNCONNECTION
 = 3

280 } 
	tdrmModeC⁄√˘i⁄
;

283 
DRM_MODE_SUBPIXEL_UNKNOWN
 = 1,

284 
DRM_MODE_SUBPIXEL_HORIZONTAL_RGB
 = 2,

285 
DRM_MODE_SUBPIXEL_HORIZONTAL_BGR
 = 3,

286 
DRM_MODE_SUBPIXEL_VERTICAL_RGB
 = 4,

287 
DRM_MODE_SUBPIXEL_VERTICAL_BGR
 = 5,

288 
DRM_MODE_SUBPIXEL_NONE
 = 6

289 } 
	tdrmModeSubPixñ
;

291 
	s_drmModeC⁄√˘‹
 {

292 
uöt32_t
 
c⁄√˘‹_id
;

293 
uöt32_t
 
ícodî_id
;

294 
uöt32_t
 
c⁄√˘‹_ty≥
;

295 
uöt32_t
 
c⁄√˘‹_ty≥_id
;

296 
drmModeC⁄√˘i⁄
 
c⁄√˘i⁄
;

297 
uöt32_t
 
mmWidth
, 
mmHeight
;

298 
drmModeSubPixñ
 
subpixñ
;

300 
cou¡_modes
;

301 
drmModeModeInfoPå
 
modes
;

303 
cou¡_¥›s
;

304 
uöt32_t
 *
¥›s
;

305 
uöt64_t
 *
¥›_vÆues
;

307 
cou¡_ícodîs
;

308 
uöt32_t
 *
ícodîs
;

309 } 
	tdrmModeC⁄√˘‹
, *
	tdrmModeC⁄√˘‹På
;

311 
	#DRM_PLANE_TYPE_OVERLAY
 0

	)

312 
	#DRM_PLANE_TYPE_PRIMARY
 1

	)

313 
	#DRM_PLANE_TYPE_CURSOR
 2

	)

315 
	s_drmModeObje˘Pr›îtõs
 {

316 
uöt32_t
 
cou¡_¥›s
;

317 
uöt32_t
 *
¥›s
;

318 
uöt64_t
 *
¥›_vÆues
;

319 } 
	tdrmModeObje˘Pr›îtõs
, *
	tdrmModeObje˘Pr›îtõsPå
;

321 
	s_drmModePœ√
 {

322 
uöt32_t
 
cou¡_f‹m©s
;

323 
uöt32_t
 *
f‹m©s
;

324 
uöt32_t
 
∂™e_id
;

326 
uöt32_t
 
¸tc_id
;

327 
uöt32_t
 
fb_id
;

329 
uöt32_t
 
¸tc_x
, 
¸tc_y
;

330 
uöt32_t
 
x
, 
y
;

332 
uöt32_t
 
possibÀ_¸tcs
;

333 
uöt32_t
 
gamma_size
;

334 } 
	tdrmModePœ√
, *
	tdrmModePœ√På
;

336 
	s_drmModePœ√Res
 {

337 
uöt32_t
 
cou¡_∂™es
;

338 
uöt32_t
 *
∂™es
;

339 } 
	tdrmModePœ√Res
, *
	tdrmModePœ√ResPå
;

341 
drmModeFªeModeInfo
–
drmModeModeInfoPå
 
±r
 );

342 
drmModeFªeResour˚s
–
drmModeResPå
 
±r
 );

343 
drmModeFªeFB
–
drmModeFBPå
 
±r
 );

344 
drmModeFªeCπc
–
drmModeCπcPå
 
±r
 );

345 
drmModeFªeC⁄√˘‹
–
drmModeC⁄√˘‹På
 
±r
 );

346 
drmModeFªeEncodî
–
drmModeEncodîPå
 
±r
 );

347 
drmModeFªePœ√
–
drmModePœ√På
 
±r
 );

348 
drmModeFªePœ√Resour˚s
(
drmModePœ√ResPå
 
±r
);

353 
drmModeResPå
 
drmModeGëResour˚s
(
fd
);

362 
drmModeFBPå
 
drmModeGëFB
(
fd
, 
uöt32_t
 
buf„rId
);

367 
drmModeAddFB
(
fd
, 
uöt32_t
 
width
, uöt32_à
height
, 
uöt8_t
 
dïth
,

368 
uöt8_t
 
bµ
, 
uöt32_t
 
pôch
, uöt32_à
bo_h™dÀ
,

369 
uöt32_t
 *
buf_id
);

371 
drmModeAddFB2
(
fd
, 
uöt32_t
 
width
, uöt32_à
height
,

372 
uöt32_t
 
pixñ_f‹m©
, c⁄° uöt32_à
bo_h™dÀs
[4],

373 c⁄° 
uöt32_t
 
pôches
[4], c⁄° uöt32_à
off£ts
[4],

374 
uöt32_t
 *
buf_id
, uöt32_à
Êags
);

377 
drmModeAddFB2WôhModifõrs
(
fd
, 
uöt32_t
 
width
, uöt32_à
height
,

378 
uöt32_t
 
pixñ_f‹m©
, c⁄° uöt32_à
bo_h™dÀs
[4],

379 c⁄° 
uöt32_t
 
pôches
[4], c⁄° uöt32_à
off£ts
[4],

380 c⁄° 
uöt64_t
 
modifõr
[4], 
uöt32_t
 *
buf_id
,

381 
uöt32_t
 
Êags
);

386 
drmModeRmFB
(
fd
, 
uöt32_t
 
buf„rId
);

391 
drmModeDútyFB
(
fd
, 
uöt32_t
 
buf„rId
,

392 
drmModeClùPå
 
˛ùs
, 
uöt32_t
 
num_˛ùs
);

402 
drmModeCπcPå
 
drmModeGëCπc
(
fd
, 
uöt32_t
 
¸tcId
);

407 
drmModeSëCπc
(
fd
, 
uöt32_t
 
¸tcId
, uöt32_à
buf„rId
,

408 
uöt32_t
 
x
, uöt32_à
y
, uöt32_à*
c⁄√˘‹s
, 
cou¡
,

409 
drmModeModeInfoPå
 
mode
);

418 
drmModeSëCurs‹
(
fd
, 
uöt32_t
 
¸tcId
, uöt32_à
bo_h™dÀ
, uöt32_à
width
, uöt32_à
height
);

420 
drmModeSëCurs‹2
(
fd
, 
uöt32_t
 
¸tcId
, uöt32_à
bo_h™dÀ
, uöt32_à
width
, uöt32_à
height
, 
öt32_t
 
hŸ_x
, i¡32_à
hŸ_y
);

424 
drmModeMoveCurs‹
(
fd
, 
uöt32_t
 
¸tcId
, 
x
, 
y
);

429 
drmModeEncodîPå
 
drmModeGëEncodî
(
fd
, 
uöt32_t
 
ícodî_id
);

440 
drmModeC⁄√˘‹På
 
drmModeGëC⁄√˘‹
(
fd
,

441 
uöt32_t
 
c⁄√˘‹Id
);

451 
drmModeC⁄√˘‹På
 
drmModeGëC⁄√˘‹Cuºít
(
fd
,

452 
uöt32_t
 
c⁄√˘‹_id
);

457 
drmModeAâachMode
(
fd
, 
uöt32_t
 
c⁄√˘‹Id
, 
drmModeModeInfoPå
 
mode_öfo
);

463 
drmModeDëachMode
(
fd
, 
uöt32_t
 
c⁄√˘‹Id
, 
drmModeModeInfoPå
 
mode_öfo
);

465 
drmModePr›îtyPå
 
drmModeGëPr›îty
(
fd
, 
uöt32_t
 
¥›îtyId
);

466 
drmModeFªePr›îty
(
drmModePr›îtyPå
 
±r
);

468 
drmModePr›îtyBlobPå
 
drmModeGëPr›îtyBlob
(
fd
, 
uöt32_t
 
blob_id
);

469 
drmModeFªePr›îtyBlob
(
drmModePr›îtyBlobPå
 
±r
);

470 
drmModeC⁄√˘‹SëPr›îty
(
fd
, 
uöt32_t
 
c⁄√˘‹_id
, uöt32_à
¥›îty_id
,

471 
uöt64_t
 
vÆue
);

472 
drmCheckMode£âögSuµ‹ãd
(c⁄° *
busid
);

474 
drmModeCπcSëGamma
(
fd
, 
uöt32_t
 
¸tc_id
, uöt32_à
size
,

475 
uöt16_t
 *
ªd
, uöt16_à*
gªí
, uöt16_à*
blue
);

476 
drmModeCπcGëGamma
(
fd
, 
uöt32_t
 
¸tc_id
, uöt32_à
size
,

477 
uöt16_t
 *
ªd
, uöt16_à*
gªí
, uöt16_à*
blue
);

478 
drmModePageFlù
(
fd
, 
uöt32_t
 
¸tc_id
, uöt32_à
fb_id
,

479 
uöt32_t
 
Êags
, *
u£r_d©a
);

480 
drmModePageFlùT¨gë
(
fd
, 
uöt32_t
 
¸tc_id
, uöt32_à
fb_id
,

481 
uöt32_t
 
Êags
, *
u£r_d©a
,

482 
uöt32_t
 
èrgë_vbœnk
);

484 
drmModePœ√ResPå
 
drmModeGëPœ√Resour˚s
(
fd
);

485 
drmModePœ√På
 
drmModeGëPœ√
(
fd
, 
uöt32_t
 
∂™e_id
);

486 
drmModeSëPœ√
(
fd
, 
uöt32_t
 
∂™e_id
, uöt32_à
¸tc_id
,

487 
uöt32_t
 
fb_id
, uöt32_à
Êags
,

488 
öt32_t
 
¸tc_x
, i¡32_à
¸tc_y
,

489 
uöt32_t
 
¸tc_w
, uöt32_à
¸tc_h
,

490 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

491 
uöt32_t
 
§c_w
, uöt32_à
§c_h
);

493 
drmModeObje˘Pr›îtõsPå
 
drmModeObje˘GëPr›îtõs
(
fd
,

494 
uöt32_t
 
obje˘_id
,

495 
uöt32_t
 
obje˘_ty≥
);

496 
drmModeFªeObje˘Pr›îtõs
(
drmModeObje˘Pr›îtõsPå
 
±r
);

497 
drmModeObje˘SëPr›îty
(
fd
, 
uöt32_t
 
obje˘_id
,

498 
uöt32_t
 
obje˘_ty≥
, uöt32_à
¥›îty_id
,

499 
uöt64_t
 
vÆue
);

502 
_drmModeAtomicReq
 
	tdrmModeAtomicReq
, *
	tdrmModeAtomicReqPå
;

504 
drmModeAtomicReqPå
 
drmModeAtomicAŒoc
();

505 
drmModeAtomicReqPå
 
drmModeAtomicDu∂iˇã
(drmModeAtomicReqPå 
ªq
);

506 
drmModeAtomicMîge
(
drmModeAtomicReqPå
 
ba£
,

507 
drmModeAtomicReqPå
 
augmít
);

508 
drmModeAtomicFªe
(
drmModeAtomicReqPå
 
ªq
);

509 
drmModeAtomicGëCurs‹
(
drmModeAtomicReqPå
 
ªq
);

510 
drmModeAtomicSëCurs‹
(
drmModeAtomicReqPå
 
ªq
, 
curs‹
);

511 
drmModeAtomicAddPr›îty
(
drmModeAtomicReqPå
 
ªq
,

512 
uöt32_t
 
obje˘_id
,

513 
uöt32_t
 
¥›îty_id
,

514 
uöt64_t
 
vÆue
);

515 
drmModeAtomicCommô
(
fd
,

516 
drmModeAtomicReqPå
 
ªq
,

517 
uöt32_t
 
Êags
,

518 *
u£r_d©a
);

520 
drmModeCª©ePr›îtyBlob
(
fd
, c⁄° *
d©a
, 
size_t
 
size
,

521 
uöt32_t
 *
id
);

522 
drmModeDe°royPr›îtyBlob
(
fd
, 
uöt32_t
 
id
);

525 #i‡
deföed
(
__˝lu•lus
)

	@/usr/include/xmlrpc-c/base.h

3 #i‚de‡
XMLRPC_H_INCLUDED


4 
	#XMLRPC_H_INCLUDED


	)

6 
	~<°ddef.h
>

7 
	~<°d¨g.h
>

8 
	~<time.h
>

9 
	~<xmÃpc-c/c_utû.h
>

10 
	~<xmÃpc-c/utû.h
>

11 
	~<xmÃpc-c/c⁄fig.h
>

14 #i‡
XMLRPC_HAVE_WCHAR


15 
	~<wch¨.h
>

18 #i‡
XMLRPC_HAVE_TIMEVAL


19 
	~<sys/time.h
>

22 #ifde‡
__˝lu•lus


33 #ifde‡
XMLRPC_BUILDING_LIB


34 
	#XMLRPC_LIB_EXPORTED
 
XMLRPC_DLLEXPORT


	)

36 
	#XMLRPC_LIB_EXPORTED


	)

44 
xmÃpc_öô
(
xmÃpc_ív
 * c⁄° 
ívP
);

47 
xmÃpc_ãrm
();

56 c⁄° 
xmÃpc_vîsi⁄_maj‹
;

57 c⁄° 
xmÃpc_vîsi⁄_mö‹
;

58 c⁄° 
xmÃpc_vîsi⁄_poöt
;

60 
XMLRPC_LIB_EXPORTED


62 
xmÃpc_vîsi⁄
(* c⁄° 
maj‹P
,

63 * c⁄° 
mö‹P
,

64 * c⁄° 
poötP
);

74 sig√d 
	txmÃpc_öt
;

76 
XMLRPC_INT32
 
	txmÃpc_öt32
;

78 
XMLRPC_INT64
 
	txmÃpc_öt64
;

80 
	txmÃpc_boﬁ
;

84 
	txmÃpc_doubÀ
;

95 
	gY
;

96 
	gM
;

97 
	gD
;

98 
	gh
;

99 
	gm
;

100 
	gs
;

101 
	gu
;

102 } 
	txmÃpc_d©ëime
;

110 
	txmÃpc_sockë
;

112 
	#XMLRPC_INT32_MAX
 0x7fffffff

	)

113 
	#XMLRPC_INT32_MIN
 (-
XMLRPC_INT32_MAX
 - 1)

	)

115 
	#XMLRPC_INT64_MAX
 0x7ffffffffffffffÊl

	)

116 
	#XMLRPC_INT64_MIN
 (-
XMLRPC_INT64_MAX
 - 1)

	)

126 
	gXMLRPC_TYPE_INT
 = 0,

127 
	gXMLRPC_TYPE_BOOL
 = 1,

128 
	gXMLRPC_TYPE_DOUBLE
 = 2,

129 
	gXMLRPC_TYPE_DATETIME
 = 3,

130 
	gXMLRPC_TYPE_STRING
 = 4,

131 
	gXMLRPC_TYPE_BASE64
 = 5,

132 
	gXMLRPC_TYPE_ARRAY
 = 6,

133 
	gXMLRPC_TYPE_STRUCT
 = 7,

134 
	gXMLRPC_TYPE_C_PTR
 = 8,

135 
	gXMLRPC_TYPE_NIL
 = 9,

136 
	gXMLRPC_TYPE_I8
 = 10,

137 
	gXMLRPC_TYPE_DEAD
 = 0xDEAD

138 } 
	txmÃpc_ty≥
;

140 
	#XMLRPC_HAVE_I8
 1

	)

142 
_xmÃpc_vÆue
 
	txmÃpc_vÆue
;

144 
XMLRPC_LIB_EXPORTED


146 
xmÃpc_ty≥_«me
(
xmÃpc_ty≥
 c⁄° 
ty≥
);

148 
XMLRPC_LIB_EXPORTED


150 
xmÃpc_ab‹t_if_¨øy_bad
(
xmÃpc_vÆue
 * c⁄° 
¨øyP
);

152 
	#XMLRPC_ASSERT_ARRAY_OK
(
vÆ
) \

153 
	`xmÃpc_ab‹t_if_¨øy_bad
(
vÆ
)

	)

156 
XMLRPC_LIB_EXPORTED


157 
xmÃpc_INCREF
(
xmÃpc_vÆue
* c⁄° 
vÆue
);

161 
XMLRPC_LIB_EXPORTED


162 
xmÃpc_DECREF
(
xmÃpc_vÆue
* c⁄° 
vÆue
);

165 
XMLRPC_LIB_EXPORTED


166 
xmÃpc_ty≥
 
xmÃpc_vÆue_ty≥
 (
xmÃpc_vÆue
* c⁄° 
vÆue
);

168 
XMLRPC_LIB_EXPORTED


169 
xmÃpc_vÆue
 *

170 
xmÃpc_öt_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

171 c⁄° 
ötVÆue
);

173 
XMLRPC_LIB_EXPORTED


175 
xmÃpc_ªad_öt
(
xmÃpc_ív
 * c⁄° 
ívP
,

176 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

177 * c⁄° 
ötVÆueP
);

179 
XMLRPC_LIB_EXPORTED


180 
xmÃpc_vÆue
 *

181 
xmÃpc_i8_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

182 
xmÃpc_öt64
 c⁄° 
vÆue
);

184 
XMLRPC_LIB_EXPORTED


186 
xmÃpc_ªad_i8
(
xmÃpc_ív
 * c⁄° 
ívP
,

187 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

188 
xmÃpc_öt64
 * c⁄° 
ötVÆueP
);

190 
XMLRPC_LIB_EXPORTED


191 
xmÃpc_vÆue
 *

192 
xmÃpc_boﬁ_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

193 
xmÃpc_boﬁ
 c⁄° 
boﬁVÆue
);

195 
XMLRPC_LIB_EXPORTED


197 
xmÃpc_ªad_boﬁ
(
xmÃpc_ív
 * c⁄° 
ívP
,

198 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

199 
xmÃpc_boﬁ
 * c⁄° 
boﬁVÆueP
);

201 
XMLRPC_LIB_EXPORTED


202 
xmÃpc_vÆue
 *

203 
xmÃpc_doubÀ_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

204 c⁄° 
doubÀVÆue
);

206 
XMLRPC_LIB_EXPORTED


208 
xmÃpc_ªad_doubÀ
(
xmÃpc_ív
 * c⁄° 
ívP
,

209 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

210 
xmÃpc_doubÀ
 * c⁄° 
doubÀVÆueP
);

212 
XMLRPC_LIB_EXPORTED


213 
xmÃpc_vÆue
 *

214 
xmÃpc_d©ëime_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

215 
xmÃpc_d©ëime
 c⁄° 
dt
);

217 
XMLRPC_LIB_EXPORTED


218 
xmÃpc_vÆue
 *

219 
xmÃpc_d©ëime_√w_°r
(
xmÃpc_ív
 * c⁄° 
ívP
,

220 c⁄° * c⁄° 
vÆue
);

222 
XMLRPC_LIB_EXPORTED


223 
xmÃpc_vÆue
 *

224 
xmÃpc_d©ëime_√w_£c
(
xmÃpc_ív
 * c⁄° 
ívP
,

225 
time_t
 c⁄° 
vÆue
);

227 
XMLRPC_LIB_EXPORTED


228 
xmÃpc_vÆue
*

229 
xmÃpc_d©ëime_√w_u£c
(
xmÃpc_ív
 * c⁄° 
ívP
,

230 
time_t
 c⁄° 
£cs
,

231 c⁄° 
u£cs
);

233 #i‡
XMLRPC_HAVE_TIMEVAL


234 
XMLRPC_LIB_EXPORTED


235 
xmÃpc_vÆue
 *

236 
xmÃpc_d©ëime_√w_timevÆ
(
xmÃpc_ív
 * c⁄° 
ívP
,

237 
timevÆ
 c⁄° 
vÆue
);

240 #i‡
XMLRPC_HAVE_TIMESPEC


241 
XMLRPC_LIB_EXPORTED


242 
xmÃpc_vÆue
 *

243 
xmÃpc_d©ëime_√w_time•ec
(
xmÃpc_ív
 * c⁄° 
ívP
,

244 
time•ec
 c⁄° 
vÆue
);

248 
XMLRPC_LIB_EXPORTED


249 
xmÃpc_ªad_d©ëime
(
xmÃpc_ív
 * c⁄° 
ívP
,

250 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

251 
xmÃpc_d©ëime
 * c⁄° 
dtP
);

253 
XMLRPC_LIB_EXPORTED


255 
xmÃpc_ªad_d©ëime_£c
(
xmÃpc_ív
 * c⁄° 
ívP
,

256 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

257 
time_t
 * c⁄° 
timeVÆueP
);

259 
XMLRPC_LIB_EXPORTED


261 
xmÃpc_ªad_d©ëime_u£c
(
xmÃpc_ív
 * c⁄° 
ívP
,

262 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

263 
time_t
 * c⁄° 
£csP
,

264 * c⁄° 
u£csP
);

266 #i‡
XMLRPC_HAVE_TIMEVAL


267 
XMLRPC_LIB_EXPORTED


269 
xmÃpc_ªad_d©ëime_timevÆ
(
xmÃpc_ív
 * c⁄° 
ívP
,

270 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

271 
timevÆ
 * c⁄° 
timeVÆueP
);

274 #i‡
XMLRPC_HAVE_TIMESPEC


275 
XMLRPC_LIB_EXPORTED


277 
xmÃpc_ªad_d©ëime_time•ec
(
xmÃpc_ív
 * c⁄° 
ívP
,

278 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

279 
time•ec
 * c⁄° 
timeVÆueP
);

283 
XMLRPC_LIB_EXPORTED


284 
xmÃpc_ªad_d©ëime_8601
(
xmÃpc_ív
 * c⁄° 
ívP
,

285 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

286 c⁄° ** c⁄° 
iso8601VÆueP
);

288 
XMLRPC_LIB_EXPORTED


290 
xmÃpc_ªad_d©ëime_°r
(
xmÃpc_ív
 * c⁄° 
ívP
,

291 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

292 c⁄° ** c⁄° 
°rögVÆueP
);

294 
XMLRPC_LIB_EXPORTED


295 
xmÃpc_vÆue
 *

296 
xmÃpc_°rög_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

297 c⁄° * c⁄° 
°rögVÆue
);

299 
XMLRPC_LIB_EXPORTED


300 
xmÃpc_vÆue
 *

301 
xmÃpc_°rög_√w_Õ
(
xmÃpc_ív
 * c⁄° 
ívP
,

302 
size_t
 c⁄° 
Àngth
,

303 c⁄° * c⁄° 
°rögVÆue
);

305 
XMLRPC_LIB_EXPORTED


306 
xmÃpc_vÆue
 *

307 
xmÃpc_°rög_√w_va
(
xmÃpc_ív
 * c⁄° 
ívP
,

308 c⁄° * c⁄° 
f‹m©
,

309 
va_li°
 
¨gs
);

311 
XMLRPC_LIB_EXPORTED


312 
xmÃpc_vÆue
 *

313 
xmÃpc_°rög_√w_f
(
xmÃpc_ív
 * c⁄° 
ívP
,

314 c⁄° * c⁄° 
f‹m©
,

317 
XMLRPC_LIB_EXPORTED


318 
xmÃpc_vÆue
 *

319 
xmÃpc_°rög_√w_Õ_¸
(
xmÃpc_ív
 * c⁄° 
ívP
,

320 
size_t
 c⁄° 
Àngth
,

321 c⁄° * c⁄° 
vÆue
);

323 
XMLRPC_LIB_EXPORTED


324 
xmÃpc_vÆue
 *

325 
xmÃpc_°rög_√w_¸
(
xmÃpc_ív
 * c⁄° 
ívP
,

326 c⁄° * c⁄° 
vÆue
);

328 
XMLRPC_LIB_EXPORTED


330 
xmÃpc_ªad_°rög
(
xmÃpc_ív
 * c⁄° 
ívP
,

331 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

332 c⁄° ** c⁄° 
°rögVÆueP
);

335 
XMLRPC_LIB_EXPORTED


337 
xmÃpc_ªad_°rög_¸lf
(
xmÃpc_ív
 * c⁄° 
ívP
,

338 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

339 c⁄° ** c⁄° 
°rögVÆueP
);

341 
XMLRPC_LIB_EXPORTED


343 
xmÃpc_ªad_°rög_Õ_¸lf
(
xmÃpc_ív
 * c⁄° 
ívP
,

344 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

345 
size_t
 * c⁄° 
ÀngthP
,

346 c⁄° ** c⁄° 
°rögVÆueP
);

348 
XMLRPC_LIB_EXPORTED


350 
xmÃpc_ªad_°rög_Õ
(
xmÃpc_ív
 * c⁄° 
ívP
,

351 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

352 
size_t
 * c⁄° 
ÀngthP
,

353 c⁄° ** c⁄° 
°rögVÆueP
);

355 #i‡
XMLRPC_HAVE_WCHAR


356 
XMLRPC_LIB_EXPORTED


357 
xmÃpc_vÆue
 *

358 
xmÃpc_°rög_w_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

359 c⁄° 
wch¨_t
 * c⁄° 
°rögVÆue
);

361 
XMLRPC_LIB_EXPORTED


362 
xmÃpc_vÆue
 *

363 
xmÃpc_°rög_w_√w_Õ
(
xmÃpc_ív
 * c⁄° 
ívP
,

364 
size_t
 c⁄° 
Àngth
,

365 c⁄° 
wch¨_t
 * c⁄° 
°rögVÆue
);

367 
XMLRPC_LIB_EXPORTED


369 
xmÃpc_ªad_°rög_w
(
xmÃpc_ív
 * c⁄° 
ívP
,

370 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

371 c⁄° 
wch¨_t
 ** c⁄° 
°rögVÆueP
);

373 
XMLRPC_LIB_EXPORTED


375 
xmÃpc_ªad_°rög_w_¸lf
(
xmÃpc_ív
 * c⁄° 
ívP
,

376 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

377 c⁄° 
wch¨_t
 ** c⁄° 
°rögVÆueP
);

379 
XMLRPC_LIB_EXPORTED


381 
xmÃpc_ªad_°rög_w_Õ
(
xmÃpc_ív
 * c⁄° 
ívP
,

382 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

383 
size_t
 * c⁄° 
ÀngthP
,

384 c⁄° 
wch¨_t
 ** c⁄° 
°rögVÆueP
);

386 
XMLRPC_LIB_EXPORTED


388 
xmÃpc_ªad_°rög_w_Õ_¸lf
(
xmÃpc_ív
 * c⁄° 
ívP
,

389 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

390 
size_t
 * c⁄° 
ÀngthP
,

391 c⁄° 
wch¨_t
 ** c⁄° 
°rögVÆueP
);

393 
XMLRPC_LIB_EXPORTED


394 
xmÃpc_vÆue
 *

395 
xmÃpc_°rög_w_√w_Õ_¸
(
xmÃpc_ív
 * c⁄° 
ívP
,

396 
size_t
 c⁄° 
Àngth
,

397 c⁄° 
wch¨_t
 * c⁄° 
vÆue
);

399 
XMLRPC_LIB_EXPORTED


400 
xmÃpc_vÆue
 *

401 
xmÃpc_°rög_w_√w_¸
(
xmÃpc_ív
 * c⁄° 
ívP
,

402 c⁄° 
wch¨_t
 * c⁄° 
vÆue
);

406 
XMLRPC_LIB_EXPORTED


407 
xmÃpc_vÆue
 *

408 
xmÃpc_ba£64_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

409 
size_t
 c⁄° 
Àngth
,

410 c⁄° * c⁄° 
vÆue
);

412 
XMLRPC_LIB_EXPORTED


414 
xmÃpc_ªad_ba£64
(
xmÃpc_ív
 * c⁄° 
ívP
,

415 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

416 
size_t
 * c⁄° 
ÀngthP
,

417 c⁄° ** c⁄° 
byã°rögVÆueP
);

419 
XMLRPC_LIB_EXPORTED


421 
xmÃpc_ªad_ba£64_size
(
xmÃpc_ív
 * c⁄° 
ívP
,

422 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

423 
size_t
 * c⁄° 
ÀngthP
);

425 
XMLRPC_LIB_EXPORTED


426 
xmÃpc_vÆue
 *

427 
xmÃpc_¨øy_√w
(
xmÃpc_ív
 * c⁄° 
ívP
);

431 
XMLRPC_LIB_EXPORTED


433 
xmÃpc_¨øy_size
(
xmÃpc_ív
 * c⁄° 
ív
,

434 c⁄° 
xmÃpc_vÆue
 * c⁄° 
¨øy
);

436 
XMLRPC_LIB_EXPORTED


438 
xmÃpc_¨øy_≠≥nd_ôem
(
xmÃpc_ív
 * c⁄° 
ívP
,

439 
xmÃpc_vÆue
 * c⁄° 
¨øyP
,

440 
xmÃpc_vÆue
 * c⁄° 
vÆueP
);

442 
XMLRPC_LIB_EXPORTED


444 
xmÃpc_¨øy_ªad_ôem
(
xmÃpc_ív
 * c⁄° 
ívP
,

445 c⁄° 
xmÃpc_vÆue
 * c⁄° 
¨øyP
,

446 c⁄° 
ödex
,

447 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

456 
XMLRPC_LIB_EXPORTED


457 
xmÃpc_vÆue
 *

458 
xmÃpc_¨øy_gë_ôem
(
xmÃpc_ív
 * c⁄° 
ívP
,

459 c⁄° 
xmÃpc_vÆue
 * c⁄° 
¨øyP
,

460 c⁄° 
ödex
);

471 
XMLRPC_LIB_EXPORTED


472 
xmÃpc_vÆue
 *

473 
xmÃpc_°ru˘_√w
(
xmÃpc_ív
 * c⁄° 
ív
);

477 
XMLRPC_LIB_EXPORTED


479 
xmÃpc_°ru˘_size
 (
xmÃpc_ív
 * c⁄° 
ív
,

480 
xmÃpc_vÆue
 * c⁄° 
°r˘
);

484 
XMLRPC_LIB_EXPORTED


486 
xmÃpc_°ru˘_has_key
(
xmÃpc_ív
 * c⁄° 
ívP
,

487 
xmÃpc_vÆue
 * c⁄° 
°r˘P
,

488 c⁄° * c⁄° 
key
);

494 
XMLRPC_LIB_EXPORTED


496 
xmÃpc_°ru˘_has_key_n
(
xmÃpc_ív
 * c⁄° 
ívP
,

497 
xmÃpc_vÆue
 * c⁄° 
°r˘P
,

498 c⁄° * c⁄° 
key
,

499 
size_t
 c⁄° 
key_Àn
);

503 
XMLRPC_LIB_EXPORTED


505 
xmÃpc_°ru˘_has_key_v
(
xmÃpc_ív
 * 
ív
,

506 
xmÃpc_vÆue
 * 
°r˘
,

507 
xmÃpc_vÆue
 * c⁄° 
keyvÆ
);

511 
XMLRPC_LIB_EXPORTED


513 
xmÃpc_°ru˘_föd_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

514 
xmÃpc_vÆue
 * c⁄° 
°ru˘P
,

515 c⁄° * c⁄° 
key
,

516 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

519 
XMLRPC_LIB_EXPORTED


521 
xmÃpc_°ru˘_föd_vÆue_v
(
xmÃpc_ív
 * c⁄° 
ívP
,

522 
xmÃpc_vÆue
 * c⁄° 
°ru˘P
,

523 
xmÃpc_vÆue
 * c⁄° 
keyP
,

524 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

526 
XMLRPC_LIB_EXPORTED


528 
xmÃpc_°ru˘_ªad_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

529 
xmÃpc_vÆue
 * c⁄° 
°ru˘P
,

530 c⁄° * c⁄° 
key
,

531 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

533 
XMLRPC_LIB_EXPORTED


535 
xmÃpc_°ru˘_ªad_vÆue_v
(
xmÃpc_ív
 * c⁄° 
ívP
,

536 
xmÃpc_vÆue
 * c⁄° 
°ru˘P
,

537 
xmÃpc_vÆue
 * c⁄° 
keyP
,

538 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

543 
XMLRPC_LIB_EXPORTED


544 
xmÃpc_vÆue
 *

545 
xmÃpc_°ru˘_gë_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

546 
xmÃpc_vÆue
 * c⁄° 
°r˘P
,

547 c⁄° * c⁄° 
key
);

553 
XMLRPC_LIB_EXPORTED


554 
xmÃpc_vÆue
 *

555 
xmÃpc_°ru˘_gë_vÆue_n
(
xmÃpc_ív
 * c⁄° 
ívP
,

556 
xmÃpc_vÆue
 * c⁄° 
°r˘P
,

557 c⁄° * c⁄° 
key
,

558 
size_t
 c⁄° 
key_Àn
);

563 
XMLRPC_LIB_EXPORTED


565 
xmÃpc_°ru˘_£t_vÆue
(
xmÃpc_ív
 * c⁄° 
ív
,

566 
xmÃpc_vÆue
 * c⁄° 
°r˘
,

567 c⁄° * c⁄° 
key
,

568 
xmÃpc_vÆue
 * c⁄° 
vÆue
);

574 
XMLRPC_LIB_EXPORTED


576 
xmÃpc_°ru˘_£t_vÆue_n
(
xmÃpc_ív
 * c⁄° 
ív
,

577 
xmÃpc_vÆue
 * c⁄° 
°r˘
,

578 c⁄° * c⁄° 
key
,

579 
size_t
 c⁄° 
key_Àn
,

580 
xmÃpc_vÆue
 * c⁄° 
vÆue
);

584 
XMLRPC_LIB_EXPORTED


586 
xmÃpc_°ru˘_£t_vÆue_v
(
xmÃpc_ív
 * c⁄° 
ív
,

587 
xmÃpc_vÆue
 * c⁄° 
°r˘
,

588 
xmÃpc_vÆue
 * c⁄° 
keyvÆ
,

589 
xmÃpc_vÆue
 * c⁄° 
vÆue
);

596 
XMLRPC_LIB_EXPORTED


598 
xmÃpc_°ru˘_ªad_membî
(
xmÃpc_ív
 * c⁄° 
ívP
,

599 
xmÃpc_vÆue
 * c⁄° 
°ru˘P
,

600 c⁄° 
ödex
,

601 
xmÃpc_vÆue
 ** c⁄° 
keyvÆP
,

602 
xmÃpc_vÆue
 ** c⁄° 
vÆueP
);

610 
XMLRPC_LIB_EXPORTED


612 
xmÃpc_°ru˘_gë_key_™d_vÆue
(
xmÃpc_ív
 * c⁄° 
ív
,

613 
xmÃpc_vÆue
 * c⁄° 
°r˘
,

614 c⁄° 
ödex
,

615 
xmÃpc_vÆue
 ** c⁄° 
out_keyvÆ
,

616 
xmÃpc_vÆue
 ** c⁄° 
out_vÆue
);

627 
XMLRPC_LIB_EXPORTED


628 
xmÃpc_vÆue
 *

629 
xmÃpc_˝å_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

630 * c⁄° 
vÆue
);

632 (*
	gxmÃpc_˝å_dt‹_‚
)(*, *);

634 
XMLRPC_LIB_EXPORTED


635 
xmÃpc_vÆue
 *

636 
xmÃpc_˝å_√w_dt‹
(
xmÃpc_ív
 * c⁄° 
ívP
,

637 * c⁄° 
vÆue
,

638 
xmÃpc_˝å_dt‹_‚
 c⁄° 
dt‹
,

639 * c⁄° 
dt‹C⁄ãxt
);

641 
XMLRPC_LIB_EXPORTED


643 
xmÃpc_ªad_˝å
(
xmÃpc_ív
 * c⁄° 
ívP
,

644 c⁄° 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

645 ** c⁄° 
±rVÆueP
);

647 
XMLRPC_LIB_EXPORTED


649 
xmÃpc_ªad_nû
(
xmÃpc_ív
 * c⁄° 
ívP
,

650 
xmÃpc_vÆue
 * c⁄° 
vÆueP
);

652 
XMLRPC_LIB_EXPORTED


653 
xmÃpc_vÆue
 *

654 
xmÃpc_nû_√w
(
xmÃpc_ív
 * c⁄° 
ívP
);

659 
XMLRPC_LIB_EXPORTED


660 
xmÃpc_vÆue
 *

661 
xmÃpc_buûd_vÆue
(
xmÃpc_ív
 * c⁄° 
ív
,

662 c⁄° * c⁄° 
f‹m©
,

666 
XMLRPC_LIB_EXPORTED


668 
xmÃpc_buûd_vÆue_va
(
xmÃpc_ív
 * c⁄° 
ív
,

669 c⁄° * c⁄° 
f‹m©
,

670 
va_li°
 c⁄° 
¨gs
,

671 
xmÃpc_vÆue
 ** c⁄° 
vÆPP
,

672 c⁄° ** c⁄° 
èûP
);

674 
XMLRPC_LIB_EXPORTED


676 
xmÃpc_decompo£_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

677 
xmÃpc_vÆue
 * c⁄° 
vÆue
,

678 c⁄° * c⁄° 
f‹m©
,

681 
XMLRPC_LIB_EXPORTED


683 
xmÃpc_decompo£_vÆue_va
(
xmÃpc_ív
 * c⁄° 
ívP
,

684 
xmÃpc_vÆue
 * c⁄° 
vÆue
,

685 c⁄° * c⁄° 
f‹m©
,

686 
va_li°
 c⁄° 
¨gs
);

695 
XMLRPC_LIB_EXPORTED


697 
xmÃpc_∑r£_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

698 
xmÃpc_vÆue
 * c⁄° 
vÆue
,

699 c⁄° * c⁄° 
f‹m©
,

703 
XMLRPC_LIB_EXPORTED


705 
xmÃpc_∑r£_vÆue_va
(
xmÃpc_ív
 * c⁄° 
ívP
,

706 
xmÃpc_vÆue
 * c⁄° 
vÆue
,

707 c⁄° * c⁄° 
f‹m©
,

708 
va_li°
 c⁄° 
¨gs
);

714 
	exmÃpc_düÀ˘
 {

715 
	gxmÃpc_düÀ˘_i8
,

716 
	gxmÃpc_düÀ˘_≠ache


717 } 
	txmÃpc_düÀ˘
;

719 
XMLRPC_LIB_EXPORTED


721 
xmÃpc_£rülize_vÆue2
(
xmÃpc_ív
 * c⁄° 
ívP
,

722 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

723 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

724 
xmÃpc_düÀ˘
 c⁄° 
düÀ˘
);

726 
XMLRPC_LIB_EXPORTED


728 
xmÃpc_£rülize_vÆue
(
xmÃpc_ív
 * c⁄° 
ívP
,

729 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

730 
xmÃpc_vÆue
 * c⁄° 
vÆueP
);

732 
XMLRPC_LIB_EXPORTED


734 
xmÃpc_£rülize_∑øms2
(
xmÃpc_ív
 * c⁄° 
ívP
,

735 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

736 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
,

737 
xmÃpc_düÀ˘
 c⁄° 
düÀ˘
);

739 
XMLRPC_LIB_EXPORTED


741 
xmÃpc_£rülize_∑øms
(
xmÃpc_ív
 * c⁄° 
ívP
,

742 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

743 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

745 
XMLRPC_LIB_EXPORTED


747 
xmÃpc_£rülize_ˇŒ2
(
xmÃpc_ív
 * c⁄° 
ívP
,

748 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

749 c⁄° * c⁄° 
mëhodName
,

750 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
,

751 
xmÃpc_düÀ˘
 c⁄° 
düÀ˘
);

753 
XMLRPC_LIB_EXPORTED


755 
xmÃpc_£rülize_ˇŒ
(
xmÃpc_ív
 * c⁄° 
ívP
,

756 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

757 c⁄° * c⁄° 
mëhodName
,

758 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

760 
XMLRPC_LIB_EXPORTED


762 
xmÃpc_£rülize_ª•⁄£2
(
xmÃpc_ív
 * c⁄° 
ívP
,

763 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

764 
xmÃpc_vÆue
 * c⁄° 
vÆueP
,

765 
xmÃpc_düÀ˘
 c⁄° 
düÀ˘
);

767 
XMLRPC_LIB_EXPORTED


769 
xmÃpc_£rülize_ª•⁄£
(
xmÃpc_ív
 * c⁄° 
ívP
,

770 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

771 
xmÃpc_vÆue
 * c⁄° 
vÆueP
);

773 
XMLRPC_LIB_EXPORTED


775 
xmÃpc_£rülize_Áu…
(
xmÃpc_ív
 * c⁄° 
ívP
,

776 
xmÃpc_mem_block
 * c⁄° 
ouçutP
,

777 c⁄° 
xmÃpc_ív
 * c⁄° 
Áu…P
);

784 
XMLRPC_LIB_EXPORTED


786 
xmÃpc_∑r£_vÆue_xml
(
xmÃpc_ív
 * c⁄° 
ívP
,

787 c⁄° * c⁄° 
xmlD©a
,

788 
size_t
 c⁄° 
xmlD©aLí
,

789 
xmÃpc_vÆue
 ** c⁄° 
vÆuePP
);

791 
XMLRPC_LIB_EXPORTED


793 
xmÃpc_∑r£_ˇŒ
(
xmÃpc_ív
 * c⁄° 
ívP
,

794 c⁄° * c⁄° 
xmlD©a
,

795 
size_t
 c⁄° 
xmlD©aLí
,

796 c⁄° ** c⁄° 
mëhodNameP
,

797 
xmÃpc_vÆue
 ** c⁄° 
∑ømAºayPP
);

799 
XMLRPC_LIB_EXPORTED


801 
xmÃpc_∑r£_ª•⁄£2
(
xmÃpc_ív
 * c⁄° 
ívP
,

802 c⁄° * c⁄° 
xmlD©a
,

803 
size_t
 c⁄° 
xmlD©aLí
,

804 
xmÃpc_vÆue
 ** c⁄° 
ªsu…PP
,

805 * c⁄° 
Áu…CodeP
,

806 c⁄° ** c⁄° 
Áu…SåögP
);

811 
XMLRPC_LIB_EXPORTED


812 
xmÃpc_vÆue
 *

813 
xmÃpc_∑r£_ª•⁄£
(
xmÃpc_ív
 * c⁄° 
ívP
,

814 c⁄° * c⁄° 
xmlD©a
,

815 
size_t
 c⁄° 
xmlD©aLí
);

828 
XMLRPC_LIB_EXPORTED


829 
xmÃpc_authcookõ_£t
(
xmÃpc_ív
 * c⁄° 
ív
,

830 c⁄° * c⁄° 
u£∫ame
,

831 c⁄° * c⁄° 
∑ssw‹d
);

833 
XMLRPC_LIB_EXPORTED


834 *
xmÃpc_authcookõ
();

850 
	#XMLRPC_NESTING_LIMIT_ID
 (0)

	)

851 
	#XMLRPC_XML_SIZE_LIMIT_ID
 (1)

	)

852 
	#XMLRPC_LAST_LIMIT_ID
 (
XMLRPC_XML_SIZE_LIMIT_ID
)

	)

855 
	#XMLRPC_NESTING_LIMIT_DEFAULT
 (64)

	)

859 
	#XMLRPC_XML_SIZE_LIMIT_DEFAULT
 (512*1024)

	)

862 
XMLRPC_LIB_EXPORTED


863 
xmÃpc_limô_£t
 (c⁄° 
limô_id
, 
size_t
 c⁄° 
vÆue
);

866 
XMLRPC_LIB_EXPORTED


867 
size_t
 
xmÃpc_limô_gë
 (c⁄° 
limô_id
);

870 #ifde‡
__˝lu•lus


	@/usr/include/xmlrpc-c/client.h

10 #i‚de‡ 
XMLRPC_CLIENT_H_INCLUDED


11 
	#XMLRPC_CLIENT_H_INCLUDED


	)

13 
	~<°d¨g.h
>

14 
	~<xmÃpc-c/c_utû.h
>

15 
	~<xmÃpc-c/ba£.h
>

17 #ifde‡
__˝lu•lus


21 
xmÃpc_˛õ¡
;

22 
xmÃpc_˛õ¡_å™•‹t
;

23 
xmÃpc_˛õ¡_å™•‹t_›s
;

24 #i‚de‡
__˝lu•lus


25 
xmÃpc_˛õ¡
 
	txmÃpc_˛õ¡
;

26 
xmÃpc_˛õ¡_å™•‹t
 
	txmÃpc_˛õ¡_å™•‹t
;

27 
xmÃpc_˛õ¡_å™•‹t_›s
 
	txmÃpc_˛õ¡_å™•‹t_›s
;

37 #ifde‡
XMLRPC_BUILDING_CLIENT


38 
	#XMLRPC_CLIENT_EXPORTED
 
XMLRPC_DLLEXPORT


	)

40 
	#XMLRPC_CLIENT_EXPORTED


	)

57 
XMLRPC_CLIENT_EXPORTED


58 
xmÃpc_˛õ¡_å™•‹t_›s
 
xmÃpc_libwww_å™•‹t_›s
;

59 
XMLRPC_CLIENT_EXPORTED


60 
xmÃpc_˛õ¡_å™•‹t_›s
 
xmÃpc_wööë_å™•‹t_›s
;

61 
XMLRPC_CLIENT_EXPORTED


62 
xmÃpc_˛õ¡_å™•‹t_›s
 
xmÃpc_cuæ_å™•‹t_›s
;

64 
	exmÃpc_s¶vîsi⁄
 {

65 
	gXMLRPC_SSLVERSION_DEFAULT
,

66 
	gXMLRPC_SSLVERSION_TLSv1
,

67 
	gXMLRPC_SSLVERSION_SSLv2
,

68 
	gXMLRPC_SSLVERSION_SSLv3


72 
	exmÃpc_hâ∑uthty≥
 {

76 
	gXMLRPC_HTTPAUTH_BASIC
 = (1<<0),

77 
	gXMLRPC_HTTPAUTH_DIGEST
 = (1<<1),

78 
	gXMLRPC_HTTPAUTH_GSSNEGOTIATE
 = (1<<2),

79 
	gXMLRPC_HTTPAUTH_NTLM
 = (1<<3)

85 
	#XMLRPC_HTTPAUTH_NONE
 0

	)

86 
	#XMLRPC_HTTPAUTH_ANY
 ~0

	)

87 
	#XMLRPC_HTTPAUTH_ANYSAFE
 (~
XMLRPC_HTTPAUTH_BASIC
)

	)

89 
	exmÃpc_hâµroxyty≥
 {

90 
	gXMLRPC_HTTPPROXY_HTTP
 = 0,

91 
	gXMLRPC_HTTPPROXY_SOCKS5
 = 5

94 
	sxmÃpc_cuæ_xp‹ç¨ms
 {

96 c⁄° * 
	g√tw‹k_öãrÁ˚
;

97 
xmÃpc_boﬁ
 
	gno_s¶_vîify≥î
;

98 
xmÃpc_boﬁ
 
	gno_s¶_vîifyho°
;

99 c⁄° * 
	gu£r_agít
;

100 c⁄° * 
	gs¶_˚π
;

101 c⁄° * 
	gs¶˚πty≥
;

102 c⁄° * 
	gs¶˚π∑sswd
;

103 c⁄° * 
	gs¶key
;

104 c⁄° * 
	gs¶keyty≥
;

105 c⁄° * 
	gs¶key∑sswd
;

106 c⁄° * 
	gs¶ígöe
;

107 
xmÃpc_boﬁ
 
	gs¶ígöe_deÁu…
;

108 
xmÃpc_s¶vîsi⁄
 
	gs¶vîsi⁄
;

109 c⁄° * 
	gˇöfo
;

110 c⁄° * 
	gˇ∑th
;

111 c⁄° * 
	gøndomfûe
;

112 c⁄° * 
	gegdsockë
;

113 c⁄° * 
	gs¶_cùhî_li°
;

114 
	gtimeout
;

115 
xmÃpc_boﬁ
 
	gd⁄t_advîti£
;

116 c⁄° * 
	g¥oxy
;

117 
	g¥oxy_p‹t
;

118 
xmÃpc_hâµroxyty≥
 
	g¥oxy_ty≥
;

119 
	g¥oxy_auth
;

123 c⁄° * 
	g¥oxy_u£Ωwd
;

124 
xmÃpc_boﬁ
 
	ggsßpi_dñeg©i⁄
;

125 c⁄° * 
	gª„ªr
;

129 
	#XMLRPC_CXPSIZE
(
mb∫ame
) \

130 
	`XMLRPC_STRUCTSIZE
(
xmÃpc_cuæ_xp‹ç¨ms
, 
mb∫ame
)

	)

134 
	sxmÃpc_wööë_xp‹ç¨ms
 {

135 
	gÆlowInvÆidSSLCîts
;

138 
	#XMLRPC_WXPSIZE
(
mb∫ame
) \

139 
	`XMLRPC_STRUCTSIZE
(
xmÃpc_wööë_xp‹ç¨ms
, 
mb∫ame
)

	)

143 
	sxmÃpc_å™s„r_¥ogªss
 {

144 
	gtŸÆ
;

145 
	gnow
;

148 
	sxmÃpc_¥ogªss_d©a
 {

149 
xmÃpc_å™s„r_¥ogªss
 
	gˇŒ
;

150 
xmÃpc_å™s„r_¥ogªss
 
	gª•⁄£
;

153 
	txmÃpc_¥ogªss_‚
(* const,

154 
	txmÃpc_¥ogªss_d©a
 const);

156 
	sxmÃpc_˛õ¡∑rms
 {

160 c⁄° * 
	gå™•‹t
;

161 c⁄° * 
	gå™•‹ç¨msP
;

163 
size_t
 
	gå™•‹ç¨m_size
;

165 c⁄° 
xmÃpc_˛õ¡_å™•‹t_›s
 * 
	gå™•‹tOpsP
;

166 
xmÃpc_˛õ¡_å™•‹t
 * 
	gå™•‹tP
;

167 
xmÃpc_düÀ˘
 
	gdüÀ˘
;

168 
xmÃpc_¥ogªss_‚
 * 
	g¥ogªssFn
;

171 
	#XMLRPC_CPSIZE
(
mb∫ame
) \

172 
	`XMLRPC_STRUCTSIZE
(
xmÃpc_˛õ¡∑rms
, 
mb∫ame
)

	)

181 
XMLRPC_CLIENT_EXPORTED


183 
xmÃpc_˛õ¡_gë_deÁu…_å™•‹t
(
xmÃpc_ív
 * c⁄° 
ív
);

193 
	txmÃpc_ª•⁄£_h™dÀr
(c⁄° * 
	t£rvîUæ
,

194 c⁄° * 
	tmëhodName
,

195 
	txmÃpc_vÆue
 * 
	t∑ømAºay
,

196 * 
	tu£rH™dÀ
,

197 
	txmÃpc_ív
 * 
	tÁu…
,

198 
	txmÃpc_vÆue
 * 
	tªsu…
);

214 
_xmÃpc_£rvî_öfo
 
	txmÃpc_£rvî_öfo
;

217 
XMLRPC_CLIENT_EXPORTED


218 
xmÃpc_£rvî_öfo
 *

219 
xmÃpc_£rvî_öfo_√w
(
xmÃpc_ív
 * c⁄° 
ívP
,

220 c⁄° * c⁄° 
£rvîUæ
);

223 
XMLRPC_CLIENT_EXPORTED


224 
xmÃpc_£rvî_öfo
 *

225 
xmÃpc_£rvî_öfo_c›y
(
xmÃpc_ív
 * c⁄° 
ívP
,

226 
xmÃpc_£rvî_öfo
 * c⁄° 
§cP
);

228 
XMLRPC_CLIENT_EXPORTED


230 
xmÃpc_£rvî_öfo_‰ì
(
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîP
);

233 
XMLRPC_CLIENT_EXPORTED


235 
xmÃpc_£rvî_öfo_£t_u£r
(
xmÃpc_ív
 * c⁄° 
ívP
,

236 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîInfoP
,

237 c⁄° * c⁄° 
u£∫ame
,

238 c⁄° * c⁄° 
∑ssw‹d
);

240 
XMLRPC_CLIENT_EXPORTED


242 
xmÃpc_£rvî_öfo_£t_basic_auth
(
xmÃpc_ív
 * c⁄° 
ívP
,

243 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîP
,

244 c⁄° * c⁄° 
u£∫ame
,

245 c⁄° * c⁄° 
∑ssw‹d
);

247 
XMLRPC_CLIENT_EXPORTED


249 
xmÃpc_£rvî_öfo_Ælow_auth_basic
(
xmÃpc_ív
 * c⁄° 
ívP
,

250 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

252 
XMLRPC_CLIENT_EXPORTED


254 
xmÃpc_£rvî_öfo_dißŒow_auth_basic
(
xmÃpc_ív
 * c⁄° 
ívP
,

255 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

257 
XMLRPC_CLIENT_EXPORTED


259 
xmÃpc_£rvî_öfo_Ælow_auth_dige°
(
xmÃpc_ív
 * c⁄° 
ívP
,

260 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

262 
XMLRPC_CLIENT_EXPORTED


264 
xmÃpc_£rvî_öfo_dißŒow_auth_dige°
(
xmÃpc_ív
 * c⁄° 
ívP
,

265 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

267 
XMLRPC_CLIENT_EXPORTED


269 
xmÃpc_£rvî_öfo_Ælow_auth_√gŸüã
(
xmÃpc_ív
 * c⁄° 
ívP
,

270 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

272 
XMLRPC_CLIENT_EXPORTED


274 
xmÃpc_£rvî_öfo_dißŒow_auth_√gŸüã
(
xmÃpc_ív
 * c⁄° 
ívP
,

275 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

277 
XMLRPC_CLIENT_EXPORTED


279 
xmÃpc_£rvî_öfo_Ælow_auth_¡lm
(
xmÃpc_ív
 * c⁄° 
ívP
,

280 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

282 
XMLRPC_CLIENT_EXPORTED


284 
xmÃpc_£rvî_öfo_dißŒow_auth_¡lm
(
xmÃpc_ív
 * c⁄° 
ívP
,

285 
xmÃpc_£rvî_öfo
 * c⁄° 
sP
);

290 c⁄° 
xmÃpc_˛õ¡_vîsi⁄_maj‹
;

291 c⁄° 
xmÃpc_˛õ¡_vîsi⁄_mö‹
;

292 c⁄° 
xmÃpc_˛õ¡_vîsi⁄_poöt
;

294 
XMLRPC_CLIENT_EXPORTED


296 
xmÃpc_˛õ¡_vîsi⁄
(* c⁄° 
maj‹P
,

297 * c⁄° 
mö‹P
,

298 * c⁄° 
poötP
);

300 
XMLRPC_CLIENT_EXPORTED


302 
xmÃpc_˛õ¡_£tup_globÆ_c⁄°
(
xmÃpc_ív
 * c⁄° 
ívP
);

304 
XMLRPC_CLIENT_EXPORTED


306 
xmÃpc_˛õ¡_ã¨down_globÆ_c⁄°
();

308 
XMLRPC_CLIENT_EXPORTED


310 
xmÃpc_˛õ¡_¸óã
(
xmÃpc_ív
 * c⁄° 
ívP
,

311 c⁄° 
Êags
,

312 c⁄° * c⁄° 
≠≤ame
,

313 c⁄° * c⁄° 
≠pvîsi⁄
,

314 c⁄° 
xmÃpc_˛õ¡∑rms
 * c⁄° 
˛õ¡∑rmsP
,

315 c⁄° 
∑rmSize
,

316 
xmÃpc_˛õ¡
 ** c⁄° 
˛õ¡PP
);

318 
XMLRPC_CLIENT_EXPORTED


320 
xmÃpc_˛õ¡_de°roy
(
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
);

322 
XMLRPC_CLIENT_EXPORTED


324 
xmÃpc_˛õ¡_å™•‹t_ˇŒ2
(

325 
xmÃpc_ív
 * c⁄° 
ívP
,

326 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

327 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîP
,

328 
xmÃpc_mem_block
 * c⁄° 
ˇŒXmlP
,

329 
xmÃpc_mem_block
 ** c⁄° 
ª•XmlPP
);

331 
XMLRPC_CLIENT_EXPORTED


333 
xmÃpc_˛õ¡_ˇŒ2
(
xmÃpc_ív
 * c⁄° 
ívP
,

334 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

335 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîInfoP
,

336 c⁄° * c⁄° 
mëhodName
,

337 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
,

338 
xmÃpc_vÆue
 ** c⁄° 
ªsu…PP
);

340 
XMLRPC_CLIENT_EXPORTED


342 
xmÃpc_˛õ¡_ˇŒ2f
(
xmÃpc_ív
 * c⁄° 
ívP
,

343 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

344 c⁄° * c⁄° 
£rvîUæ
,

345 c⁄° * c⁄° 
mëhodName
,

346 
xmÃpc_vÆue
 ** c⁄° 
ªsu…PP
,

347 c⁄° * c⁄° 
f‹m©
,

350 
XMLRPC_CLIENT_EXPORTED


352 
xmÃpc_˛õ¡_ˇŒ2f_va
(
xmÃpc_ív
 * c⁄° 
ívP
,

353 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

354 c⁄° * c⁄° 
£rvîUæ
,

355 c⁄° * c⁄° 
mëhodName
,

356 c⁄° * c⁄° 
f‹m©
,

357 
xmÃpc_vÆue
 ** c⁄° 
ªsu…PP
,

358 
va_li°
 
¨gs
);

360 
XMLRPC_CLIENT_EXPORTED


362 
xmÃpc_˛õ¡_evít_lo›_föish
(
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
);

364 
XMLRPC_CLIENT_EXPORTED


366 
xmÃpc_˛õ¡_evít_lo›_föish_timeout
(
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

367 c⁄° 
mûli£c⁄ds
);

369 
XMLRPC_CLIENT_EXPORTED


371 
xmÃpc_˛õ¡_°¨t_Ωc
(
xmÃpc_ív
 * c⁄° 
ívP
,

372 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

373 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîInfoP
,

374 c⁄° * c⁄° 
mëhodName
,

375 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
,

376 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

377 * c⁄° 
u£rD©a
);

379 
XMLRPC_CLIENT_EXPORTED


381 
xmÃpc_˛õ¡_°¨t_Ωcf
(
xmÃpc_ív
 * c⁄° 
ívP
,

382 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

383 c⁄° * c⁄° 
£rvîUæ
,

384 c⁄° * c⁄° 
mëhodName
,

385 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

386 * c⁄° 
u£rD©a
,

387 c⁄° * c⁄° 
f‹m©
,

390 
XMLRPC_CLIENT_EXPORTED


392 
xmÃpc_˛õ¡_°¨t_Ωcf_va
(
xmÃpc_ív
 * c⁄° 
ívP
,

393 
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

394 c⁄° * c⁄° 
£rvîUæ
,

395 c⁄° * c⁄° 
mëhodName
,

396 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

397 * c⁄° 
u£rD©a
,

398 c⁄° * c⁄° 
f‹m©
,

399 
va_li°
 
¨gs
);

401 
XMLRPC_CLIENT_EXPORTED


403 
xmÃpc_˛õ¡_£t_öãºu±
(
xmÃpc_˛õ¡
 * c⁄° 
˛õ¡P
,

404 * c⁄° 
öãºu±P
);

406 
	~<xmÃpc-c/˛õ¡_globÆ.h
>

434 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/alsa/asoundef.h

28 #i‚de‡
__ALSA_ASOUNDEF_H


29 
	#__ALSA_ASOUNDEF_H


	)

31 #ifde‡
__˝lu•lus


41 
	#IEC958_AES0_PROFESSIONAL
 (1<<0Ë

	)

42 
	#IEC958_AES0_NONAUDIO
 (1<<1Ë

	)

43 
	#IEC958_AES0_PRO_EMPHASIS
 (7<<2Ë

	)

44 
	#IEC958_AES0_PRO_EMPHASIS_NOTID
 (0<<2Ë

	)

45 
	#IEC958_AES0_PRO_EMPHASIS_NONE
 (1<<2Ë

	)

46 
	#IEC958_AES0_PRO_EMPHASIS_5015
 (3<<2Ë

	)

47 
	#IEC958_AES0_PRO_EMPHASIS_CCITT
 (7<<2Ë

	)

48 
	#IEC958_AES0_PRO_FREQ_UNLOCKED
 (1<<5Ë

	)

49 
	#IEC958_AES0_PRO_FS
 (3<<6Ë

	)

50 
	#IEC958_AES0_PRO_FS_NOTID
 (0<<6Ë

	)

51 
	#IEC958_AES0_PRO_FS_44100
 (1<<6Ë

	)

52 
	#IEC958_AES0_PRO_FS_48000
 (2<<6Ë

	)

53 
	#IEC958_AES0_PRO_FS_32000
 (3<<6Ë

	)

54 
	#IEC958_AES0_CON_NOT_COPYRIGHT
 (1<<2Ë

	)

55 
	#IEC958_AES0_CON_EMPHASIS
 (7<<3Ë

	)

56 
	#IEC958_AES0_CON_EMPHASIS_NONE
 (0<<3Ë

	)

57 
	#IEC958_AES0_CON_EMPHASIS_5015
 (1<<3Ë

	)

58 
	#IEC958_AES0_CON_MODE
 (3<<6Ë

	)

59 
	#IEC958_AES1_PRO_MODE
 (15<<0Ë

	)

60 
	#IEC958_AES1_PRO_MODE_NOTID
 (0<<0Ë

	)

61 
	#IEC958_AES1_PRO_MODE_STEREOPHONIC
 (2<<0Ë

	)

62 
	#IEC958_AES1_PRO_MODE_SINGLE
 (4<<0Ë

	)

63 
	#IEC958_AES1_PRO_MODE_TWO
 (8<<0Ë

	)

64 
	#IEC958_AES1_PRO_MODE_PRIMARY
 (12<<0Ë

	)

65 
	#IEC958_AES1_PRO_MODE_BYTE3
 (15<<0Ë

	)

66 
	#IEC958_AES1_PRO_USERBITS
 (15<<4Ë

	)

67 
	#IEC958_AES1_PRO_USERBITS_NOTID
 (0<<4Ë

	)

68 
	#IEC958_AES1_PRO_USERBITS_192
 (8<<4Ë

	)

69 
	#IEC958_AES1_PRO_USERBITS_UDEF
 (12<<4Ë

	)

70 
	#IEC958_AES1_CON_CATEGORY
 0x7‡

	)

71 
	#IEC958_AES1_CON_GENERAL
 0x00

	)

72 
	#IEC958_AES1_CON_LASEROPT_MASK
 0x07

	)

73 
	#IEC958_AES1_CON_LASEROPT_ID
 0x01

	)

74 
	#IEC958_AES1_CON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x00Ë

	)

75 
	#IEC958_AES1_CON_NON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x08Ë

	)

76 
	#IEC958_AES1_CON_MINI_DISC
 (
IEC958_AES1_CON_LASEROPT_ID
|0x48Ë

	)

77 
	#IEC958_AES1_CON_DVD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x18Ë

	)

78 
	#IEC958_AES1_CON_LASTEROPT_OTHER
 (
IEC958_AES1_CON_LASEROPT_ID
|0x78Ë

	)

79 
	#IEC958_AES1_CON_DIGDIGCONV_MASK
 0x07

	)

80 
	#IEC958_AES1_CON_DIGDIGCONV_ID
 0x02

	)

81 
	#IEC958_AES1_CON_PCM_CODER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x00Ë

	)

82 
	#IEC958_AES1_CON_MIXER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x10Ë

	)

83 
	#IEC958_AES1_CON_RATE_CONVERTER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x18Ë

	)

84 
	#IEC958_AES1_CON_SAMPLER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x20Ë

	)

85 
	#IEC958_AES1_CON_DSP
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x28Ë

	)

86 
	#IEC958_AES1_CON_DIGDIGCONV_OTHER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x78Ë

	)

87 
	#IEC958_AES1_CON_MAGNETIC_MASK
 0x07

	)

88 
	#IEC958_AES1_CON_MAGNETIC_ID
 0x03

	)

89 
	#IEC958_AES1_CON_DAT
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x00Ë

	)

90 
	#IEC958_AES1_CON_VCR
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x08Ë

	)

91 
	#IEC958_AES1_CON_DCC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x40Ë

	)

92 
	#IEC958_AES1_CON_MAGNETIC_DISC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x18Ë

	)

93 
	#IEC958_AES1_CON_MAGNETIC_OTHER
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x78Ë

	)

94 
	#IEC958_AES1_CON_BROADCAST1_MASK
 0x07

	)

95 
	#IEC958_AES1_CON_BROADCAST1_ID
 0x04

	)

96 
	#IEC958_AES1_CON_DAB_JAPAN
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x00Ë

	)

97 
	#IEC958_AES1_CON_DAB_EUROPE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x08Ë

	)

98 
	#IEC958_AES1_CON_DAB_USA
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x60Ë

	)

99 
	#IEC958_AES1_CON_SOFTWARE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x40Ë

	)

100 
	#IEC958_AES1_CON_IEC62105
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x20Ë

	)

101 
	#IEC958_AES1_CON_BROADCAST1_OTHER
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x78Ë

	)

102 
	#IEC958_AES1_CON_BROADCAST2_MASK
 0x0‡

	)

103 
	#IEC958_AES1_CON_BROADCAST2_ID
 0x0ê

	)

104 
	#IEC958_AES1_CON_MUSICAL_MASK
 0x07

	)

105 
	#IEC958_AES1_CON_MUSICAL_ID
 0x05

	)

106 
	#IEC958_AES1_CON_SYNTHESIZER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x00Ë

	)

107 
	#IEC958_AES1_CON_MICROPHONE
 (
IEC958_AES1_CON_MUSICAL_ID
|0x08Ë

	)

108 
	#IEC958_AES1_CON_MUSICAL_OTHER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x78Ë

	)

109 
	#IEC958_AES1_CON_ADC_MASK
 0x1‡

	)

110 
	#IEC958_AES1_CON_ADC_ID
 0x06

	)

111 
	#IEC958_AES1_CON_ADC
 (
IEC958_AES1_CON_ADC_ID
|0x00Ë

	)

112 
	#IEC958_AES1_CON_ADC_OTHER
 (
IEC958_AES1_CON_ADC_ID
|0x60Ë

	)

113 
	#IEC958_AES1_CON_ADC_COPYRIGHT_MASK
 0x1‡

	)

114 
	#IEC958_AES1_CON_ADC_COPYRIGHT_ID
 0x16

	)

115 
	#IEC958_AES1_CON_ADC_COPYRIGHT
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x00Ë

	)

116 
	#IEC958_AES1_CON_ADC_COPYRIGHT_OTHER
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x60Ë

	)

117 
	#IEC958_AES1_CON_SOLIDMEM_MASK
 0x0‡

	)

118 
	#IEC958_AES1_CON_SOLIDMEM_ID
 0x08

	)

119 
	#IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x00Ë

	)

120 
	#IEC958_AES1_CON_SOLIDMEM_OTHER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x70Ë

	)

121 
	#IEC958_AES1_CON_EXPERIMENTAL
 0x40

	)

122 
	#IEC958_AES1_CON_ORIGINAL
 (1<<7Ë

	)

123 
	#IEC958_AES2_PRO_SBITS
 (7<<0Ë

	)

124 
	#IEC958_AES2_PRO_SBITS_20
 (2<<0Ë

	)

125 
	#IEC958_AES2_PRO_SBITS_24
 (4<<0Ë

	)

126 
	#IEC958_AES2_PRO_SBITS_UDEF
 (6<<0Ë

	)

127 
	#IEC958_AES2_PRO_WORDLEN
 (7<<3Ë

	)

128 
	#IEC958_AES2_PRO_WORDLEN_NOTID
 (0<<3Ë

	)

129 
	#IEC958_AES2_PRO_WORDLEN_22_18
 (2<<3Ë

	)

130 
	#IEC958_AES2_PRO_WORDLEN_23_19
 (4<<3Ë

	)

131 
	#IEC958_AES2_PRO_WORDLEN_24_20
 (5<<3Ë

	)

132 
	#IEC958_AES2_PRO_WORDLEN_20_16
 (6<<3Ë

	)

133 
	#IEC958_AES2_CON_SOURCE
 (15<<0Ë

	)

134 
	#IEC958_AES2_CON_SOURCE_UNSPEC
 (0<<0Ë

	)

135 
	#IEC958_AES2_CON_CHANNEL
 (15<<4Ë

	)

136 
	#IEC958_AES2_CON_CHANNEL_UNSPEC
 (0<<4Ë

	)

137 
	#IEC958_AES3_CON_FS
 (15<<0Ë

	)

138 
	#IEC958_AES3_CON_FS_44100
 (0<<0Ë

	)

139 
	#IEC958_AES3_CON_FS_NOTID
 (1<<0Ë

	)

140 
	#IEC958_AES3_CON_FS_48000
 (2<<0Ë

	)

141 
	#IEC958_AES3_CON_FS_32000
 (3<<0Ë

	)

142 
	#IEC958_AES3_CON_FS_22050
 (4<<0Ë

	)

143 
	#IEC958_AES3_CON_FS_24000
 (6<<0Ë

	)

144 
	#IEC958_AES3_CON_FS_88200
 (8<<0Ë

	)

145 
	#IEC958_AES3_CON_FS_768000
 (9<<0Ë

	)

146 
	#IEC958_AES3_CON_FS_96000
 (10<<0Ë

	)

147 
	#IEC958_AES3_CON_FS_176400
 (12<<0Ë

	)

148 
	#IEC958_AES3_CON_FS_192000
 (14<<0Ë

	)

149 
	#IEC958_AES3_CON_CLOCK
 (3<<4Ë

	)

150 
	#IEC958_AES3_CON_CLOCK_1000PPM
 (0<<4Ë

	)

151 
	#IEC958_AES3_CON_CLOCK_50PPM
 (1<<4Ë

	)

152 
	#IEC958_AES3_CON_CLOCK_VARIABLE
 (2<<4Ë

	)

153 
	#IEC958_AES4_CON_MAX_WORDLEN_24
 (1<<0Ë

	)

154 
	#IEC958_AES4_CON_WORDLEN
 (7<<1Ë

	)

155 
	#IEC958_AES4_CON_WORDLEN_NOTID
 (0<<1Ë

	)

156 
	#IEC958_AES4_CON_WORDLEN_20_16
 (1<<1Ë

	)

157 
	#IEC958_AES4_CON_WORDLEN_22_18
 (2<<1Ë

	)

158 
	#IEC958_AES4_CON_WORDLEN_23_19
 (4<<1Ë

	)

159 
	#IEC958_AES4_CON_WORDLEN_24_20
 (5<<1Ë

	)

160 
	#IEC958_AES4_CON_WORDLEN_21_17
 (6<<1Ë

	)

161 
	#IEC958_AES4_CON_ORIGFS
 (15<<4Ë

	)

162 
	#IEC958_AES4_CON_ORIGFS_NOTID
 (0<<4Ë

	)

163 
	#IEC958_AES4_CON_ORIGFS_192000
 (1<<4Ë

	)

164 
	#IEC958_AES4_CON_ORIGFS_12000
 (2<<4Ë

	)

165 
	#IEC958_AES4_CON_ORIGFS_176400
 (3<<4Ë

	)

166 
	#IEC958_AES4_CON_ORIGFS_96000
 (5<<4Ë

	)

167 
	#IEC958_AES4_CON_ORIGFS_8000
 (6<<4Ë

	)

168 
	#IEC958_AES4_CON_ORIGFS_88200
 (7<<4Ë

	)

169 
	#IEC958_AES4_CON_ORIGFS_16000
 (8<<4Ë

	)

170 
	#IEC958_AES4_CON_ORIGFS_24000
 (9<<4Ë

	)

171 
	#IEC958_AES4_CON_ORIGFS_11025
 (10<<4Ë

	)

172 
	#IEC958_AES4_CON_ORIGFS_22050
 (11<<4Ë

	)

173 
	#IEC958_AES4_CON_ORIGFS_32000
 (12<<4Ë

	)

174 
	#IEC958_AES4_CON_ORIGFS_48000
 (13<<4Ë

	)

175 
	#IEC958_AES4_CON_ORIGFS_44100
 (15<<4Ë

	)

176 
	#IEC958_AES5_CON_CGMSA
 (3<<0Ë

	)

177 
	#IEC958_AES5_CON_CGMSA_COPYFREELY
 (0<<0Ë

	)

178 
	#IEC958_AES5_CON_CGMSA_COPYONCE
 (1<<0Ë

	)

179 
	#IEC958_AES5_CON_CGMSA_COPYNOMORE
 (2<<0Ë

	)

180 
	#IEC958_AES5_CON_CGMSA_COPYNEVER
 (3<<0Ë

	)

190 
	#MIDI_CHANNELS
 16

	)

191 
	#MIDI_GM_DRUM_CHANNEL
 (10-1Ë

	)

199 
	#MIDI_CMD_NOTE_OFF
 0x80

	)

200 
	#MIDI_CMD_NOTE_ON
 0x90

	)

201 
	#MIDI_CMD_NOTE_PRESSURE
 0xa0

	)

202 
	#MIDI_CMD_CONTROL
 0xb0

	)

203 
	#MIDI_CMD_PGM_CHANGE
 0xc0

	)

204 
	#MIDI_CMD_CHANNEL_PRESSURE
 0xd0

	)

205 
	#MIDI_CMD_BENDER
 0xe0

	)

207 
	#MIDI_CMD_COMMON_SYSEX
 0xf0

	)

208 
	#MIDI_CMD_COMMON_MTC_QUARTER
 0xf1

	)

209 
	#MIDI_CMD_COMMON_SONG_POS
 0xf2

	)

210 
	#MIDI_CMD_COMMON_SONG_SELECT
 0xf3

	)

211 
	#MIDI_CMD_COMMON_TUNE_REQUEST
 0xf6

	)

212 
	#MIDI_CMD_COMMON_SYSEX_END
 0xf7

	)

213 
	#MIDI_CMD_COMMON_CLOCK
 0xf8

	)

214 
	#MIDI_CMD_COMMON_START
 0xÁ

	)

215 
	#MIDI_CMD_COMMON_CONTINUE
 0xfb

	)

216 
	#MIDI_CMD_COMMON_STOP
 0xf¯

	)

217 
	#MIDI_CMD_COMMON_SENSING
 0x„

	)

218 
	#MIDI_CMD_COMMON_RESET
 0xf‡

	)

228 
	#MIDI_CTL_MSB_BANK
 0x00

	)

229 
	#MIDI_CTL_MSB_MODWHEEL
 0x01

	)

230 
	#MIDI_CTL_MSB_BREATH
 0x02

	)

231 
	#MIDI_CTL_MSB_FOOT
 0x04

	)

232 
	#MIDI_CTL_MSB_PORTAMENTO_TIME
 0x05

	)

233 
	#MIDI_CTL_MSB_DATA_ENTRY
 0x06

	)

234 
	#MIDI_CTL_MSB_MAIN_VOLUME
 0x07

	)

235 
	#MIDI_CTL_MSB_BALANCE
 0x08

	)

236 
	#MIDI_CTL_MSB_PAN
 0x0®

	)

237 
	#MIDI_CTL_MSB_EXPRESSION
 0x0b

	)

238 
	#MIDI_CTL_MSB_EFFECT1
 0x0¯

	)

239 
	#MIDI_CTL_MSB_EFFECT2
 0x0d

	)

240 
	#MIDI_CTL_MSB_GENERAL_PURPOSE1
 0x10

	)

241 
	#MIDI_CTL_MSB_GENERAL_PURPOSE2
 0x11

	)

242 
	#MIDI_CTL_MSB_GENERAL_PURPOSE3
 0x12

	)

243 
	#MIDI_CTL_MSB_GENERAL_PURPOSE4
 0x13

	)

244 
	#MIDI_CTL_LSB_BANK
 0x20

	)

245 
	#MIDI_CTL_LSB_MODWHEEL
 0x21

	)

246 
	#MIDI_CTL_LSB_BREATH
 0x22

	)

247 
	#MIDI_CTL_LSB_FOOT
 0x24

	)

248 
	#MIDI_CTL_LSB_PORTAMENTO_TIME
 0x25

	)

249 
	#MIDI_CTL_LSB_DATA_ENTRY
 0x26

	)

250 
	#MIDI_CTL_LSB_MAIN_VOLUME
 0x27

	)

251 
	#MIDI_CTL_LSB_BALANCE
 0x28

	)

252 
	#MIDI_CTL_LSB_PAN
 0x2®

	)

253 
	#MIDI_CTL_LSB_EXPRESSION
 0x2b

	)

254 
	#MIDI_CTL_LSB_EFFECT1
 0x2¯

	)

255 
	#MIDI_CTL_LSB_EFFECT2
 0x2d

	)

256 
	#MIDI_CTL_LSB_GENERAL_PURPOSE1
 0x30

	)

257 
	#MIDI_CTL_LSB_GENERAL_PURPOSE2
 0x31

	)

258 
	#MIDI_CTL_LSB_GENERAL_PURPOSE3
 0x32

	)

259 
	#MIDI_CTL_LSB_GENERAL_PURPOSE4
 0x33

	)

260 
	#MIDI_CTL_SUSTAIN
 0x40

	)

261 
	#MIDI_CTL_PORTAMENTO
 0x41

	)

262 
	#MIDI_CTL_SOSTENUTO
 0x42

	)

263 
	#MIDI_CTL_SUSTENUTO
 0x42

	)

264 
	#MIDI_CTL_SOFT_PEDAL
 0x43

	)

265 
	#MIDI_CTL_LEGATO_FOOTSWITCH
 0x44

	)

266 
	#MIDI_CTL_HOLD2
 0x45

	)

267 
	#MIDI_CTL_SC1_SOUND_VARIATION
 0x46

	)

268 
	#MIDI_CTL_SC2_TIMBRE
 0x47

	)

269 
	#MIDI_CTL_SC3_RELEASE_TIME
 0x48

	)

270 
	#MIDI_CTL_SC4_ATTACK_TIME
 0x49

	)

271 
	#MIDI_CTL_SC5_BRIGHTNESS
 0x4®

	)

272 
	#MIDI_CTL_SC6
 0x4b

	)

273 
	#MIDI_CTL_SC7
 0x4¯

	)

274 
	#MIDI_CTL_SC8
 0x4d

	)

275 
	#MIDI_CTL_SC9
 0x4ê

	)

276 
	#MIDI_CTL_SC10
 0x4‡

	)

277 
	#MIDI_CTL_GENERAL_PURPOSE5
 0x50

	)

278 
	#MIDI_CTL_GENERAL_PURPOSE6
 0x51

	)

279 
	#MIDI_CTL_GENERAL_PURPOSE7
 0x52

	)

280 
	#MIDI_CTL_GENERAL_PURPOSE8
 0x53

	)

281 
	#MIDI_CTL_PORTAMENTO_CONTROL
 0x54

	)

282 
	#MIDI_CTL_E1_REVERB_DEPTH
 0x5b

	)

283 
	#MIDI_CTL_E2_TREMOLO_DEPTH
 0x5¯

	)

284 
	#MIDI_CTL_E3_CHORUS_DEPTH
 0x5d

	)

285 
	#MIDI_CTL_E4_DETUNE_DEPTH
 0x5ê

	)

286 
	#MIDI_CTL_E5_PHASER_DEPTH
 0x5‡

	)

287 
	#MIDI_CTL_DATA_INCREMENT
 0x60

	)

288 
	#MIDI_CTL_DATA_DECREMENT
 0x61

	)

289 
	#MIDI_CTL_NONREG_PARM_NUM_LSB
 0x62

	)

290 
	#MIDI_CTL_NONREG_PARM_NUM_MSB
 0x63

	)

291 
	#MIDI_CTL_REGIST_PARM_NUM_LSB
 0x64

	)

292 
	#MIDI_CTL_REGIST_PARM_NUM_MSB
 0x65

	)

293 
	#MIDI_CTL_ALL_SOUNDS_OFF
 0x78

	)

294 
	#MIDI_CTL_RESET_CONTROLLERS
 0x79

	)

295 
	#MIDI_CTL_LOCAL_CONTROL_SWITCH
 0x7®

	)

296 
	#MIDI_CTL_ALL_NOTES_OFF
 0x7b

	)

297 
	#MIDI_CTL_OMNI_OFF
 0x7¯

	)

298 
	#MIDI_CTL_OMNI_ON
 0x7d

	)

299 
	#MIDI_CTL_MONO1
 0x7ê

	)

300 
	#MIDI_CTL_MONO2
 0x7‡

	)

306 #ifde‡
__˝lu•lus


	@/usr/include/alsa/conf.h

28 #i‚de‡
__ALSA_CONF_H


29 
	#__ALSA_CONF_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONFIG_DLSYM_VERSION_EVALUATE
 
_dlsym_c⁄fig_evÆu©e_001


	)

45 
	#SND_CONFIG_DLSYM_VERSION_HOOK
 
_dlsym_c⁄fig_hook_001


	)

48 
	e_¢d_c⁄fig_ty≥
 {

50 
SND_CONFIG_TYPE_INTEGER
,

52 
SND_CONFIG_TYPE_INTEGER64
,

54 
SND_CONFIG_TYPE_REAL
,

56 
SND_CONFIG_TYPE_STRING
,

58 
SND_CONFIG_TYPE_POINTER
,

60 
SND_CONFIG_TYPE_COMPOUND
 = 1024

61 } 
	t¢d_c⁄fig_ty≥_t
;

69 
_¢d_c⁄fig
 
	t¢d_c⁄fig_t
;

77 
_¢d_c⁄fig_ôî©‹
 *
	t¢d_c⁄fig_ôî©‹_t
;

83 
_¢d_c⁄fig_upd©e
 
	t¢d_c⁄fig_upd©e_t
;

85 
¢d_c⁄fig_t
 *
¢d_c⁄fig
;

87 
¢d_c⁄fig_t›
(
¢d_c⁄fig_t
 **
c⁄fig
);

89 
¢d_c⁄fig_lﬂd
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

90 
¢d_c⁄fig_lﬂd_ovîride
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

91 
¢d_c⁄fig_ßve
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_ouçut_t
 *
out
);

92 
¢d_c⁄fig_upd©e
();

93 
¢d_c⁄fig_upd©e_r
(
¢d_c⁄fig_t
 **
t›
, 
¢d_c⁄fig_upd©e_t
 **
upd©e
, c⁄° *
∑th
);

94 
¢d_c⁄fig_upd©e_‰ì
(
¢d_c⁄fig_upd©e_t
 *
upd©e
);

95 
¢d_c⁄fig_upd©e_‰ì_globÆ
();

97 
¢d_c⁄fig_upd©e_ªf
(
¢d_c⁄fig_t
 **
t›
);

98 
¢d_c⁄fig_ªf
(
¢d_c⁄fig_t
 *
t›
);

99 
¢d_c⁄fig_uƒef
(
¢d_c⁄fig_t
 *
t›
);

101 
¢d_c⁄fig_£¨ch
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
key
,

102 
¢d_c⁄fig_t
 **
ªsu…
);

103 
¢d_c⁄fig_£¨chv
(
¢d_c⁄fig_t
 *
c⁄fig
,

104 
¢d_c⁄fig_t
 **
ªsu…
, ...);

105 
¢d_c⁄fig_£¨ch_deföôi⁄
(
¢d_c⁄fig_t
 *
c⁄fig
,

106 c⁄° *
ba£
, c⁄° *
key
,

107 
¢d_c⁄fig_t
 **
ªsu…
);

109 
¢d_c⁄fig_ex∑nd
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

110 c⁄° *
¨gs
, 
¢d_c⁄fig_t
 *
¥iv©e_d©a
,

111 
¢d_c⁄fig_t
 **
ªsu…
);

112 
¢d_c⁄fig_evÆu©e
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

113 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, snd_c⁄fig_à**
ªsu…
);

115 
¢d_c⁄fig_add
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
Àaf
);

116 
¢d_c⁄fig_dñëe
(
¢d_c⁄fig_t
 *
c⁄fig
);

117 
¢d_c⁄fig_dñëe_compound_membîs
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

118 
¢d_c⁄fig_c›y
(
¢d_c⁄fig_t
 **
d°
, snd_c⁄fig_à*
§c
);

120 
¢d_c⁄fig_make
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
,

121 
¢d_c⁄fig_ty≥_t
 
ty≥
);

122 
¢d_c⁄fig_make_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

123 
¢d_c⁄fig_make_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

124 
¢d_c⁄fig_make_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

125 
¢d_c⁄fig_make_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

126 
¢d_c⁄fig_make_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

127 
¢d_c⁄fig_make_compound
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, 
joö
);

129 
¢d_c⁄fig_imake_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

130 
¢d_c⁄fig_imake_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

131 
¢d_c⁄fig_imake_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

132 
¢d_c⁄fig_imake_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

133 
¢d_c⁄fig_imake_ß„_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

134 
¢d_c⁄fig_imake_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
±r
);

136 
¢d_c⁄fig_ty≥_t
 
¢d_c⁄fig_gë_ty≥
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

138 
¢d_c⁄fig_£t_id
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

139 
¢d_c⁄fig_£t_öãgî
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

140 
¢d_c⁄fig_£t_öãgî64
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

141 
¢d_c⁄fig_£t_ªÆ
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

142 
¢d_c⁄fig_£t_°rög
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
vÆue
);

143 
¢d_c⁄fig_£t_ascii
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
ascii
);

144 
¢d_c⁄fig_£t_poöãr
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
±r
);

145 
¢d_c⁄fig_gë_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

146 
¢d_c⁄fig_gë_öãgî
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

147 
¢d_c⁄fig_gë_öãgî64
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

148 
¢d_c⁄fig_gë_ªÆ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

149 
¢d_c⁄fig_gë_úól
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

150 
¢d_c⁄fig_gë_°rög
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

151 
¢d_c⁄fig_gë_ascii
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, **
vÆue
);

152 
¢d_c⁄fig_gë_poöãr
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

153 
¢d_c⁄fig_ã°_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

155 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_fú°
(c⁄° 
¢d_c⁄fig_t
 *
node
);

156 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_√xt
(c⁄° snd_c⁄fig_ôî©‹_à
ôî©‹
);

157 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_íd
(c⁄° 
¢d_c⁄fig_t
 *
node
);

158 
¢d_c⁄fig_t
 *
¢d_c⁄fig_ôî©‹_íåy
(c⁄° 
¢d_c⁄fig_ôî©‹_t
 
ôî©‹
);

177 
	#¢d_c⁄fig_f‹_óch
(
pos
, 
√xt
, 
node
) \

178 
pos
 = 
	`¢d_c⁄fig_ôî©‹_fú°
(
node
), 
√xt
 = 
	`¢d_c⁄fig_ôî©‹_√xt
’os);Öo†!
	`¢d_c⁄fig_ôî©‹_íd
“ode);Öo†√xt,Çexà¢d_c⁄fig_ôî©‹_√xt’os))

	)

182 
¢d_c⁄fig_gë_boﬁ_ascii
(c⁄° *
ascii
);

183 
¢d_c⁄fig_gë_boﬁ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

184 
¢d_c⁄fig_gë_˘l_iÁ˚_ascii
(c⁄° *
ascii
);

185 
¢d_c⁄fig_gë_˘l_iÁ˚
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

192 
¢d_dev«me
 
	t¢d_dev«me_t
;

197 
	s¢d_dev«me
 {

198 *
	g«me
;

199 *
	gcommít
;

200 
¢d_dev«me_t
 *
	g√xt
;

203 
¢d_«mes_li°
(c⁄° *
iÁ˚
, 
¢d_dev«me_t
 **
li°
);

204 
¢d_«mes_li°_‰ì
(
¢d_dev«me_t
 *
li°
);

208 #ifde‡
__˝lu•lus


	@/usr/include/alsa/control.h

28 #i‚de‡
__ALSA_CONTROL_H


29 
	#__ALSA_CONTROL_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONTROL_DLSYM_VERSION
 
_dlsym_c⁄åﬁ_001


	)

46 
	s¢d_´s_õc958
 {

47 
°©us
[24];

48 
subcode
[147];

49 
∑d
;

50 
dig_sub‰ame
[4];

51 } 
	t¢d_´s_õc958_t
;

54 
_¢d_˘l_ˇrd_öfo
 
	t¢d_˘l_ˇrd_öfo_t
;

57 
_¢d_˘l_ñem_id
 
	t¢d_˘l_ñem_id_t
;

60 
_¢d_˘l_ñem_li°
 
	t¢d_˘l_ñem_li°_t
;

63 
_¢d_˘l_ñem_öfo
 
	t¢d_˘l_ñem_öfo_t
;

66 
_¢d_˘l_ñem_vÆue
 
	t¢d_˘l_ñem_vÆue_t
;

69 
_¢d_˘l_evít
 
	t¢d_˘l_evít_t
;

72 
	e_¢d_˘l_ñem_ty≥
 {

74 
SND_CTL_ELEM_TYPE_NONE
 = 0,

76 
SND_CTL_ELEM_TYPE_BOOLEAN
,

78 
SND_CTL_ELEM_TYPE_INTEGER
,

80 
SND_CTL_ELEM_TYPE_ENUMERATED
,

82 
SND_CTL_ELEM_TYPE_BYTES
,

84 
SND_CTL_ELEM_TYPE_IEC958
,

86 
SND_CTL_ELEM_TYPE_INTEGER64
,

87 
SND_CTL_ELEM_TYPE_LAST
 = 
SND_CTL_ELEM_TYPE_INTEGER64


88 } 
	t¢d_˘l_ñem_ty≥_t
;

91 
	e_¢d_˘l_ñem_iÁ˚
 {

93 
SND_CTL_ELEM_IFACE_CARD
 = 0,

95 
SND_CTL_ELEM_IFACE_HWDEP
,

97 
SND_CTL_ELEM_IFACE_MIXER
,

99 
SND_CTL_ELEM_IFACE_PCM
,

101 
SND_CTL_ELEM_IFACE_RAWMIDI
,

103 
SND_CTL_ELEM_IFACE_TIMER
,

105 
SND_CTL_ELEM_IFACE_SEQUENCER
,

106 
SND_CTL_ELEM_IFACE_LAST
 = 
SND_CTL_ELEM_IFACE_SEQUENCER


107 } 
	t¢d_˘l_ñem_iÁ˚_t
;

110 
	e_¢d_˘l_evít_ty≥
 {

112 
SND_CTL_EVENT_ELEM
 = 0,

113 
SND_CTL_EVENT_LAST
 = 
SND_CTL_EVENT_ELEM


114 }
	t¢d_˘l_evít_ty≥_t
;

118 
	#SND_CTL_EVENT_MASK_REMOVE
 (~0U)

	)

120 
	#SND_CTL_EVENT_MASK_VALUE
 (1<<0)

	)

122 
	#SND_CTL_EVENT_MASK_INFO
 (1<<1)

	)

124 
	#SND_CTL_EVENT_MASK_ADD
 (1<<2)

	)

126 
	#SND_CTL_EVENT_MASK_TLV
 (1<<3)

	)

129 
	#SND_CTL_NAME_NONE
 ""

	)

131 
	#SND_CTL_NAME_PLAYBACK
 "Pœyback "

	)

133 
	#SND_CTL_NAME_CAPTURE
 "C≠tuª "

	)

136 
	#SND_CTL_NAME_IEC958_NONE
 ""

	)

138 
	#SND_CTL_NAME_IEC958_SWITCH
 "Swôch"

	)

140 
	#SND_CTL_NAME_IEC958_VOLUME
 "Vﬁume"

	)

142 
	#SND_CTL_NAME_IEC958_DEFAULT
 "DeÁu…"

	)

144 
	#SND_CTL_NAME_IEC958_MASK
 "Mask"

	)

146 
	#SND_CTL_NAME_IEC958_CON_MASK
 "C⁄ Mask"

	)

148 
	#SND_CTL_NAME_IEC958_PRO_MASK
 "PrÿMask"

	)

150 
	#SND_CTL_NAME_IEC958_PCM_STREAM
 "PCM Såóm"

	)

152 
	#SND_CTL_NAME_IEC958
(
ex∂
,
dúe˘i⁄
,
wh©
Ë"IEC958 "Éx∂ 
SND_CTL_NAME_
##dúe˘i⁄ 
SND_CTL_NAME_IEC958_
##
	)
what

155 
	#SND_CTL_POWER_MASK
 0xff00

	)

157 
	#SND_CTL_POWER_D0
 0x0000

	)

159 
	#SND_CTL_POWER_D1
 0x0100

	)

161 
	#SND_CTL_POWER_D2
 0x0200

	)

163 
	#SND_CTL_POWER_D3
 0x0300

	)

165 
	#SND_CTL_POWER_D3hŸ
 (
SND_CTL_POWER_D3
|0x0000)

	)

167 
	#SND_CTL_POWER_D3cﬁd
 (
SND_CTL_POWER_D3
|0x0001)

	)

170 
	#SND_CTL_TLVT_CONTAINER
 0x0000

	)

172 
	#SND_CTL_TLVT_DB_SCALE
 0x0001

	)

174 
	#SND_CTL_TLVT_DB_LINEAR
 0x0002

	)

176 
	#SND_CTL_TLVT_DB_RANGE
 0x0003

	)

178 
	#SND_CTL_TLVT_DB_MINMAX
 0x0004

	)

180 
	#SND_CTL_TLVT_DB_MINMAX_MUTE
 0x0005

	)

183 
	#SND_CTL_TLV_DB_GAIN_MUTE
 -9999999

	)

186 
	#SND_CTL_TLVT_CHMAP_FIXED
 0x00101

	)

188 
	#SND_CTL_TLVT_CHMAP_VAR
 0x00102

	)

190 
	#SND_CTL_TLVT_CHMAP_PAIRED
 0x00103

	)

193 
	e_¢d_˘l_ty≥
 {

195 
SND_CTL_TYPE_HW
,

197 
SND_CTL_TYPE_SHM
,

199 
SND_CTL_TYPE_INET
,

201 
SND_CTL_TYPE_EXT


202 } 
	t¢d_˘l_ty≥_t
;

205 
	#SND_CTL_NONBLOCK
 0x0001

	)

208 
	#SND_CTL_ASYNC
 0x0002

	)

211 
	#SND_CTL_READONLY
 0x0004

	)

214 
_¢d_˘l
 
	t¢d_˘l_t
;

217 
	#SND_SCTL_NOFREE
 0x0001

	)

220 
_¢d_s˘l
 
	t¢d_s˘l_t
;

222 
¢d_ˇrd_lﬂd
(
ˇrd
);

223 
¢d_ˇrd_√xt
(*
ˇrd
);

224 
¢d_ˇrd_gë_ödex
(c⁄° *
«me
);

225 
¢d_ˇrd_gë_«me
(
ˇrd
, **
«me
);

226 
¢d_ˇrd_gë_l⁄g«me
(
ˇrd
, **
«me
);

228 
¢d_devi˚_«me_höt
(
ˇrd
, c⁄° *
iÁ˚
, ***
höts
);

229 
¢d_devi˚_«me_‰ì_höt
(**
höts
);

230 *
¢d_devi˚_«me_gë_höt
(c⁄° *
höt
, c⁄° *
id
);

232 
¢d_˘l_›í
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
);

233 
¢d_˘l_›í_lc⁄f
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

234 
¢d_˘l_›í_ÁŒback
(
¢d_˘l_t
 **
˘l
, 
¢d_c⁄fig_t
 *
roŸ
, c⁄° *
«me
, c⁄° *
‹ig_«me
, 
mode
);

235 
¢d_˘l_˛o£
(
¢d_˘l_t
 *
˘l
);

236 
¢d_˘l_n⁄block
(
¢d_˘l_t
 *
˘l
, 
n⁄block
);

237 
__ölöe__
 
¢d_˘l_ab‹t
(
¢d_˘l_t
 *
˘l
Ë{  
¢d_˘l_n⁄block
(ctl, 2); }

238 
¢d_async_add_˘l_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_˘l_t
 *
˘l
,

239 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

240 
¢d_˘l_t
 *
¢d_async_h™dÀr_gë_˘l
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

241 
¢d_˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_˘l_t
 *
˘l
);

242 
¢d_˘l_pﬁl_des¸ùt‹s
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

243 
¢d_˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

244 
¢d_˘l_subs¸ibe_evíts
(
¢d_˘l_t
 *
˘l
, 
subs¸ibe
);

245 
¢d_˘l_ˇrd_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ˇrd_öfo_t
 *
öfo
);

246 
¢d_˘l_ñem_li°
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_li°_t
 *
li°
);

247 
¢d_˘l_ñem_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
);

248 
¢d_˘l_ñem_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
d©a
);

249 
¢d_˘l_ñem_wrôe
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
d©a
);

250 
¢d_˘l_ñem_lock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

251 
¢d_˘l_ñem_u∆ock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

252 
¢d_˘l_ñem_év_ªad
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

253 *
év
, 
év_size
);

254 
¢d_˘l_ñem_év_wrôe
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

255 c⁄° *
év
);

256 
¢d_˘l_ñem_év_comm™d
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

257 c⁄° *
év
);

258 #ifde‡
__ALSA_HWDEP_H


259 
¢d_˘l_hwdï_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

260 
¢d_˘l_hwdï_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_hwdï_öfo_t
 * 
öfo
);

262 #ifde‡
__ALSA_PCM_H


263 
¢d_˘l_pcm_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, *
devi˚
);

264 
¢d_˘l_pcm_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_pcm_öfo_t
 * 
öfo
);

265 
¢d_˘l_pcm_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

267 #ifde‡
__ALSA_RAWMIDI_H


268 
¢d_˘l_øwmidi_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

269 
¢d_˘l_øwmidi_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

270 
¢d_˘l_øwmidi_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

272 
¢d_˘l_£t_powî_°©e
(
¢d_˘l_t
 *
˘l
, 
°©e
);

273 
¢d_˘l_gë_powî_°©e
(
¢d_˘l_t
 *
˘l
, *
°©e
);

275 
¢d_˘l_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_evít_t
 *
evít
);

276 
¢d_˘l_waô
(
¢d_˘l_t
 *
˘l
, 
timeout
);

277 c⁄° *
¢d_˘l_«me
(
¢d_˘l_t
 *
˘l
);

278 
¢d_˘l_ty≥_t
 
¢d_˘l_ty≥
(
¢d_˘l_t
 *
˘l
);

280 c⁄° *
¢d_˘l_ñem_ty≥_«me
(
¢d_˘l_ñem_ty≥_t
 
ty≥
);

281 c⁄° *
¢d_˘l_ñem_iÁ˚_«me
(
¢d_˘l_ñem_iÁ˚_t
 
iÁ˚
);

282 c⁄° *
¢d_˘l_evít_ty≥_«me
(
¢d_˘l_evít_ty≥_t
 
ty≥
);

284 
¢d_˘l_evít_ñem_gë_mask
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

285 
¢d_˘l_evít_ñem_gë_numid
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

286 
¢d_˘l_evít_ñem_gë_id
(c⁄° 
¢d_˘l_evít_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

287 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_evít_ñem_gë_öãrÁ˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

288 
¢d_˘l_evít_ñem_gë_devi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

289 
¢d_˘l_evít_ñem_gë_subdevi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

290 c⁄° *
¢d_˘l_evít_ñem_gë_«me
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

291 
¢d_˘l_evít_ñem_gë_ödex
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

293 
¢d_˘l_ñem_li°_Æloc_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
, 
íåõs
);

294 
¢d_˘l_ñem_li°_‰ì_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
);

296 *
¢d_˘l_ascii_ñem_id_gë
(
¢d_˘l_ñem_id_t
 *
id
);

297 
¢d_˘l_ascii_ñem_id_∑r£
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° *
°r
);

298 
¢d_˘l_ascii_vÆue_∑r£
(
¢d_˘l_t
 *
h™dÀ
,

299 
¢d_˘l_ñem_vÆue_t
 *
d°
,

300 
¢d_˘l_ñem_öfo_t
 *
öfo
,

301 c⁄° *
vÆue
);

303 
size_t
 
¢d_˘l_ñem_id_sizeof
();

308 
	#¢d_˘l_ñem_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_id
)

	)

309 
¢d_˘l_ñem_id_mÆloc
(
¢d_˘l_ñem_id_t
 **
±r
);

310 
¢d_˘l_ñem_id_‰ì
(
¢d_˘l_ñem_id_t
 *
obj
);

311 
¢d_˘l_ñem_id_˛ór
(
¢d_˘l_ñem_id_t
 *
obj
);

312 
¢d_˘l_ñem_id_c›y
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° snd_˘l_ñem_id_à*
§c
);

313 
¢d_˘l_ñem_id_gë_numid
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

314 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_id_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

315 
¢d_˘l_ñem_id_gë_devi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

316 
¢d_˘l_ñem_id_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

317 c⁄° *
¢d_˘l_ñem_id_gë_«me
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

318 
¢d_˘l_ñem_id_gë_ödex
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

319 
¢d_˘l_ñem_id_£t_numid
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

320 
¢d_˘l_ñem_id_£t_öãrÁ˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

321 
¢d_˘l_ñem_id_£t_devi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

322 
¢d_˘l_ñem_id_£t_subdevi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

323 
¢d_˘l_ñem_id_£t_«me
(
¢d_˘l_ñem_id_t
 *
obj
, c⁄° *
vÆ
);

324 
¢d_˘l_ñem_id_£t_ödex
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

326 
size_t
 
¢d_˘l_ˇrd_öfo_sizeof
();

331 
	#¢d_˘l_ˇrd_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ˇrd_öfo
)

	)

332 
¢d_˘l_ˇrd_öfo_mÆloc
(
¢d_˘l_ˇrd_öfo_t
 **
±r
);

333 
¢d_˘l_ˇrd_öfo_‰ì
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

334 
¢d_˘l_ˇrd_öfo_˛ór
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

335 
¢d_˘l_ˇrd_öfo_c›y
(
¢d_˘l_ˇrd_öfo_t
 *
d°
, c⁄° snd_˘l_ˇrd_öfo_à*
§c
);

336 
¢d_˘l_ˇrd_öfo_gë_ˇrd
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

337 c⁄° *
¢d_˘l_ˇrd_öfo_gë_id
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

338 c⁄° *
¢d_˘l_ˇrd_öfo_gë_drivî
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

339 c⁄° *
¢d_˘l_ˇrd_öfo_gë_«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

340 c⁄° *
¢d_˘l_ˇrd_öfo_gë_l⁄g«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

341 c⁄° *
¢d_˘l_ˇrd_öfo_gë_mixî«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

342 c⁄° *
¢d_˘l_ˇrd_öfo_gë_comp⁄íts
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

344 
size_t
 
¢d_˘l_evít_sizeof
();

349 
	#¢d_˘l_evít_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_evít
)

	)

350 
¢d_˘l_evít_mÆloc
(
¢d_˘l_evít_t
 **
±r
);

351 
¢d_˘l_evít_‰ì
(
¢d_˘l_evít_t
 *
obj
);

352 
¢d_˘l_evít_˛ór
(
¢d_˘l_evít_t
 *
obj
);

353 
¢d_˘l_evít_c›y
(
¢d_˘l_evít_t
 *
d°
, c⁄° snd_˘l_evít_à*
§c
);

354 
¢d_˘l_evít_ty≥_t
 
¢d_˘l_evít_gë_ty≥
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

356 
size_t
 
¢d_˘l_ñem_li°_sizeof
();

361 
	#¢d_˘l_ñem_li°_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_li°
)

	)

362 
¢d_˘l_ñem_li°_mÆloc
(
¢d_˘l_ñem_li°_t
 **
±r
);

363 
¢d_˘l_ñem_li°_‰ì
(
¢d_˘l_ñem_li°_t
 *
obj
);

364 
¢d_˘l_ñem_li°_˛ór
(
¢d_˘l_ñem_li°_t
 *
obj
);

365 
¢d_˘l_ñem_li°_c›y
(
¢d_˘l_ñem_li°_t
 *
d°
, c⁄° snd_˘l_ñem_li°_à*
§c
);

366 
¢d_˘l_ñem_li°_£t_off£t
(
¢d_˘l_ñem_li°_t
 *
obj
, 
vÆ
);

367 
¢d_˘l_ñem_li°_gë_u£d
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

368 
¢d_˘l_ñem_li°_gë_cou¡
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

369 
¢d_˘l_ñem_li°_gë_id
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
, 
¢d_˘l_ñem_id_t
 *
±r
);

370 
¢d_˘l_ñem_li°_gë_numid
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

371 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_li°_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

372 
¢d_˘l_ñem_li°_gë_devi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

373 
¢d_˘l_ñem_li°_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

374 c⁄° *
¢d_˘l_ñem_li°_gë_«me
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

375 
¢d_˘l_ñem_li°_gë_ödex
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

377 
size_t
 
¢d_˘l_ñem_öfo_sizeof
();

382 
	#¢d_˘l_ñem_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_öfo
)

	)

383 
¢d_˘l_ñem_öfo_mÆloc
(
¢d_˘l_ñem_öfo_t
 **
±r
);

384 
¢d_˘l_ñem_öfo_‰ì
(
¢d_˘l_ñem_öfo_t
 *
obj
);

385 
¢d_˘l_ñem_öfo_˛ór
(
¢d_˘l_ñem_öfo_t
 *
obj
);

386 
¢d_˘l_ñem_öfo_c›y
(
¢d_˘l_ñem_öfo_t
 *
d°
, c⁄° snd_˘l_ñem_öfo_à*
§c
);

387 
¢d_˘l_ñem_ty≥_t
 
¢d_˘l_ñem_öfo_gë_ty≥
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

388 
¢d_˘l_ñem_öfo_is_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

389 
¢d_˘l_ñem_öfo_is_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

390 
¢d_˘l_ñem_öfo_is_vﬁ©ûe
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

391 
¢d_˘l_ñem_öfo_is_öa˘ive
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

392 
¢d_˘l_ñem_öfo_is_locked
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

393 
¢d_˘l_ñem_öfo_is_év_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

394 
¢d_˘l_ñem_öfo_is_év_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

395 
¢d_˘l_ñem_öfo_is_év_comm™dabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

396 
¢d_˘l_ñem_öfo_is_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

397 
¢d_˘l_ñem_öfo_is_u£r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

398 
pid_t
 
¢d_˘l_ñem_öfo_gë_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

399 
¢d_˘l_ñem_öfo_gë_cou¡
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

400 
¢d_˘l_ñem_öfo_gë_mö
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

401 
¢d_˘l_ñem_öfo_gë_max
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

402 
¢d_˘l_ñem_öfo_gë_°ï
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

403 
¢d_˘l_ñem_öfo_gë_mö64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

404 
¢d_˘l_ñem_öfo_gë_max64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

405 
¢d_˘l_ñem_öfo_gë_°ï64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

406 
¢d_˘l_ñem_öfo_gë_ôems
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

407 
¢d_˘l_ñem_öfo_£t_ôem
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

408 c⁄° *
¢d_˘l_ñem_öfo_gë_ôem_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

409 
¢d_˘l_ñem_öfo_gë_dimísi⁄s
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

410 
¢d_˘l_ñem_öfo_gë_dimísi⁄
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
idx
);

411 
¢d_˘l_ñem_öfo_£t_dimísi⁄
(
¢d_˘l_ñem_öfo_t
 *
öfo
,

412 c⁄° 
dimísi⁄
[4]);

413 
¢d_˘l_ñem_öfo_gë_id
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

414 
¢d_˘l_ñem_öfo_gë_numid
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

415 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_öfo_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

416 
¢d_˘l_ñem_öfo_gë_devi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

417 
¢d_˘l_ñem_öfo_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

418 c⁄° *
¢d_˘l_ñem_öfo_gë_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

419 
¢d_˘l_ñem_öfo_gë_ödex
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

420 
¢d_˘l_ñem_öfo_£t_id
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

421 
¢d_˘l_ñem_öfo_£t_numid
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

422 
¢d_˘l_ñem_öfo_£t_öãrÁ˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

423 
¢d_˘l_ñem_öfo_£t_devi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

424 
¢d_˘l_ñem_öfo_£t_subdevi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

425 
¢d_˘l_ñem_öfo_£t_«me
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° *
vÆ
);

426 
¢d_˘l_ñem_öfo_£t_ödex
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

428 
¢d_˘l_add_öãgî_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

429 
ñemít_cou¡
,

430 
membî_cou¡
,

431 
mö
, 
max
, 
°ï
);

432 
¢d_˘l_add_öãgî64_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

433 
ñemít_cou¡
,

434 
membî_cou¡
,

435 
mö
, 
max
,

436 
°ï
);

437 
¢d_˘l_add_boﬁón_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

438 
ñemít_cou¡
,

439 
membî_cou¡
);

440 
¢d_˘l_add_íumî©ed_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

441 
ñemít_cou¡
,

442 
membî_cou¡
,

443 
ôems
,

444 c⁄° *c⁄° 
œbñs
[]);

445 
¢d_˘l_add_byãs_ñem_£t
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
,

446 
ñemít_cou¡
,

447 
membî_cou¡
);

449 
¢d_˘l_ñem_add_öãgî
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

450 
¢d_˘l_ñem_add_öãgî64
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

451 
¢d_˘l_ñem_add_boﬁón
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
);

452 
¢d_˘l_ñem_add_íumî©ed
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
ôems
, c⁄° *c⁄° 
«mes
[]);

453 
¢d_˘l_ñem_add_õc958
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

454 
¢d_˘l_ñem_ªmove
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

456 
size_t
 
¢d_˘l_ñem_vÆue_sizeof
();

461 
	#¢d_˘l_ñem_vÆue_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_vÆue
)

	)

462 
¢d_˘l_ñem_vÆue_mÆloc
(
¢d_˘l_ñem_vÆue_t
 **
±r
);

463 
¢d_˘l_ñem_vÆue_‰ì
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

464 
¢d_˘l_ñem_vÆue_˛ór
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

465 
¢d_˘l_ñem_vÆue_c›y
(
¢d_˘l_ñem_vÆue_t
 *
d°
, c⁄° snd_˘l_ñem_vÆue_à*
§c
);

466 
¢d_˘l_ñem_vÆue_com∑ª
(
¢d_˘l_ñem_vÆue_t
 *
À·
, c⁄° snd_˘l_ñem_vÆue_à*
right
);

467 
¢d_˘l_ñem_vÆue_gë_id
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

468 
¢d_˘l_ñem_vÆue_gë_numid
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

469 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_vÆue_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

470 
¢d_˘l_ñem_vÆue_gë_devi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

471 
¢d_˘l_ñem_vÆue_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

472 c⁄° *
¢d_˘l_ñem_vÆue_gë_«me
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

473 
¢d_˘l_ñem_vÆue_gë_ödex
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

474 
¢d_˘l_ñem_vÆue_£t_id
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

475 
¢d_˘l_ñem_vÆue_£t_numid
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

476 
¢d_˘l_ñem_vÆue_£t_öãrÁ˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

477 
¢d_˘l_ñem_vÆue_£t_devi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

478 
¢d_˘l_ñem_vÆue_£t_subdevi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

479 
¢d_˘l_ñem_vÆue_£t_«me
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° *
vÆ
);

480 
¢d_˘l_ñem_vÆue_£t_ödex
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

481 
¢d_˘l_ñem_vÆue_gë_boﬁón
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

482 
¢d_˘l_ñem_vÆue_gë_öãgî
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

483 
¢d_˘l_ñem_vÆue_gë_öãgî64
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

484 
¢d_˘l_ñem_vÆue_gë_íumî©ed
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

485 
¢d_˘l_ñem_vÆue_gë_byã
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

486 
¢d_˘l_ñem_vÆue_£t_boﬁón
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

487 
¢d_˘l_ñem_vÆue_£t_öãgî
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

488 
¢d_˘l_ñem_vÆue_£t_öãgî64
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

489 
¢d_˘l_ñem_vÆue_£t_íumî©ed
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

490 
¢d_˘l_ñem_vÆue_£t_byã
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

491 
¢d_˘l_ñem_£t_byãs
(
¢d_˘l_ñem_vÆue_t
 *
obj
, *
d©a
, 
size_t
 
size
);

492 c⁄° * 
¢d_˘l_ñem_vÆue_gë_byãs
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

493 
¢d_˘l_ñem_vÆue_gë_õc958
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_´s_õc958_t
 *
±r
);

494 
¢d_˘l_ñem_vÆue_£t_õc958
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_´s_õc958_t
 *
±r
);

496 
¢d_év_∑r£_dB_öfo
(*
év
, 
év_size
,

497 **
db_évp
);

498 
¢d_év_gë_dB_ønge
(*
év
, 
øngemö
, 
øngemax
,

499 *
mö
, *
max
);

500 
¢d_év_c⁄vît_to_dB
(*
év
, 
øngemö
, 
øngemax
,

501 
vﬁume
, *
db_gaö
);

502 
¢d_év_c⁄vît_‰om_dB
(*
év
, 
øngemö
, 
øngemax
,

503 
db_gaö
, *
vÆue
, 
xdú
);

504 
¢d_˘l_gë_dB_ønge
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

505 *
mö
, *
max
);

506 
¢d_˘l_c⁄vît_to_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

507 
vﬁume
, *
db_gaö
);

508 
¢d_˘l_c⁄vît_‰om_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

509 
db_gaö
, *
vÆue
, 
xdú
);

520 
_¢d_h˘l_ñem
 
	t¢d_h˘l_ñem_t
;

523 
_¢d_h˘l
 
	t¢d_h˘l_t
;

531 (*
¢d_h˘l_com∑ª_t
)(c⁄° 
	t¢d_h˘l_ñem_t
 *
	te1
,

532 c⁄° 
	t¢d_h˘l_ñem_t
 *
	te2
);

533 
¢d_h˘l_com∑ª_Á°
(c⁄° 
¢d_h˘l_ñem_t
 *
c1
,

534 c⁄° 
¢d_h˘l_ñem_t
 *
c2
);

542 (*
¢d_h˘l_ˇŒback_t
)(
	t¢d_h˘l_t
 *
	th˘l
,

543 
	tmask
,

544 
	t¢d_h˘l_ñem_t
 *
	tñem
);

551 (*
¢d_h˘l_ñem_ˇŒback_t
)(
	t¢d_h˘l_ñem_t
 *
	tñem
,

552 
	tmask
);

554 
¢d_h˘l_›í
(
¢d_h˘l_t
 **
h˘l
, c⁄° *
«me
, 
mode
);

555 
¢d_h˘l_›í_˘l
(
¢d_h˘l_t
 **
h˘Õ
, 
¢d_˘l_t
 *
˘l
);

556 
¢d_h˘l_˛o£
(
¢d_h˘l_t
 *
h˘l
);

557 
¢d_h˘l_n⁄block
(
¢d_h˘l_t
 *
h˘l
, 
n⁄block
);

558 
__ölöe__
 
¢d_h˘l_ab‹t
(
¢d_h˘l_t
 *
h˘l
Ë{  
¢d_h˘l_n⁄block
(hctl, 2); }

559 
¢d_h˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_h˘l_t
 *
h˘l
);

560 
¢d_h˘l_pﬁl_des¸ùt‹s
(
¢d_h˘l_t
 *
h˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

561 
¢d_h˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_h˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

562 
¢d_h˘l_gë_cou¡
(
¢d_h˘l_t
 *
h˘l
);

563 
¢d_h˘l_£t_com∑ª
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_com∑ª_t
 
hs‹t
);

564 
¢d_h˘l_ñem_t
 *
¢d_h˘l_fú°_ñem
(
¢d_h˘l_t
 *
h˘l
);

565 
¢d_h˘l_ñem_t
 *
¢d_h˘l_œ°_ñem
(
¢d_h˘l_t
 *
h˘l
);

566 
¢d_h˘l_ñem_t
 *
¢d_h˘l_föd_ñem
(
¢d_h˘l_t
 *
h˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

567 
¢d_h˘l_£t_ˇŒback
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_ˇŒback_t
 
ˇŒback
);

568 
¢d_h˘l_£t_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
, *
d©a
);

569 *
¢d_h˘l_gë_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
);

570 
¢d_h˘l_lﬂd
(
¢d_h˘l_t
 *
h˘l
);

571 
¢d_h˘l_‰ì
(
¢d_h˘l_t
 *
h˘l
);

572 
¢d_h˘l_h™dÀ_evíts
(
¢d_h˘l_t
 *
h˘l
);

573 c⁄° *
¢d_h˘l_«me
(
¢d_h˘l_t
 *
h˘l
);

574 
¢d_h˘l_waô
(
¢d_h˘l_t
 *
h˘l
, 
timeout
);

575 
¢d_˘l_t
 *
¢d_h˘l_˘l
(
¢d_h˘l_t
 *
h˘l
);

577 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_√xt
(¢d_h˘l_ñem_à*
ñem
);

578 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_¥ev
(¢d_h˘l_ñem_à*
ñem
);

579 
¢d_h˘l_ñem_öfo
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_öfo_t
 * 
öfo
);

580 
¢d_h˘l_ñem_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

581 
¢d_h˘l_ñem_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

582 
¢d_h˘l_ñem_év_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, *
év
, 
év_size
);

583 
¢d_h˘l_ñem_év_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

584 
¢d_h˘l_ñem_év_comm™d
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

586 
¢d_h˘l_t
 *
¢d_h˘l_ñem_gë_h˘l
(
¢d_h˘l_ñem_t
 *
ñem
);

588 
¢d_h˘l_ñem_gë_id
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

589 
¢d_h˘l_ñem_gë_numid
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

590 
¢d_˘l_ñem_iÁ˚_t
 
¢d_h˘l_ñem_gë_öãrÁ˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

591 
¢d_h˘l_ñem_gë_devi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

592 
¢d_h˘l_ñem_gë_subdevi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

593 c⁄° *
¢d_h˘l_ñem_gë_«me
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

594 
¢d_h˘l_ñem_gë_ödex
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

595 
¢d_h˘l_ñem_£t_ˇŒback
(
¢d_h˘l_ñem_t
 *
obj
, 
¢d_h˘l_ñem_ˇŒback_t
 
vÆ
);

596 * 
¢d_h˘l_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

597 
¢d_h˘l_ñem_£t_ˇŒback_¥iv©e
(
¢d_h˘l_ñem_t
 *
obj
, * 
vÆ
);

610 
¢d_s˘l_buûd
(
¢d_s˘l_t
 **
˘l
, 
¢d_˘l_t
 *
h™dÀ
, 
¢d_c⁄fig_t
 *
c⁄fig
,

611 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, 
mode
);

612 
¢d_s˘l_‰ì
(
¢d_s˘l_t
 *
h™dÀ
);

613 
¢d_s˘l_ö°Æl
(
¢d_s˘l_t
 *
h™dÀ
);

614 
¢d_s˘l_ªmove
(
¢d_s˘l_t
 *
h™dÀ
);

618 #ifde‡
__˝lu•lus


	@/usr/include/alsa/error.h

28 #i‚de‡
__ALSA_ERROR_H


29 
	#__ALSA_ERROR_H


	)

31 #ifde‡
__˝lu•lus


41 
	#SND_ERROR_BEGIN
 500000

	)

42 
	#SND_ERROR_INCOMPATIBLE_VERSION
 (
SND_ERROR_BEGIN
+0Ë

	)

43 
	#SND_ERROR_ALISP_NIL
 (
SND_ERROR_BEGIN
+1Ë

	)

45 c⁄° *
¢d_°ªº‹
(
î∫um
);

59 (*
¢d_lib_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	tfun˘i⁄
, 
	tîr
, c⁄° *
	tfmt
, ...) ;

60 
¢d_lib_îr‹_h™dÀr_t
 
¢d_lib_îr‹
;

61 
¢d_lib_îr‹_£t_h™dÀr
(
¢d_lib_îr‹_h™dÀr_t
 
h™dÀr
);

63 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95)

64 
	#SNDERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, 
__VA_ARGS__
Ë

	)

65 
	#SYSERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, 
__VA_ARGS__
Ë

	)

67 
	#SNDERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, ##¨gsË

	)

68 
	#SYSERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, ##¨gsË

	)

73 #ifde‡
__˝lu•lus


78 (*
	t¢d_loˇl_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
,

79 c⁄° *
	tfunc
, 
	tîr
,

80 c⁄° *
	tfmt
, 
	tva_li°
 
	t¨g
);

82 
¢d_loˇl_îr‹_h™dÀr_t
 
	`¢d_lib_îr‹_£t_loˇl
(¢d_loˇl_îr‹_h™dÀr_à
func
);

	@/usr/include/alsa/global.h

28 #i‚de‡
__ALSA_GLOBAL_H_


29 
	#__ALSA_GLOBAL_H_


	)

32 
	~<time.h
>

34 #ifde‡
__˝lu•lus


47 c⁄° *
¢d_asoundlib_vîsi⁄
();

49 #i‚de‡
ATTRIBUTE_UNUSED


51 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

54 #ifde‡
PIC


57 
	#__SND_DLSYM_VERSION
(
«me
, 
vîsi⁄
Ë
_
 ##Çamê## 
	)
version

62 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
Ë
	`__SND_DLSYM_VERSION
“ame, vîsi⁄);

	)

66 
	s¢d_dlsym_lök
 {

67 
¢d_dlsym_lök
 *
√xt
;

68 c⁄° *
dlsym_«me
;

69 c⁄° *
dlsym_±r
;

72 
¢d_dlsym_lök
 *
¢d_dlsym_°¨t
;

75 
	#__SND_DLSYM_VERSION
(
¥efix
, 
«me
, 
vîsi⁄
Ë
_
 ##Öªfix ##Çamê## 
	)
version

80 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
) \

81 
¢d_dlsym_lök
 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

82 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
Ë(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
)); \

83 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
) () { \

84 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
√xt
 = 
¢d_dlsym_°¨t
; \

85 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_«me
 = #name; \

86 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_±r
 = (*)&name; \

87 
¢d_dlsym_°¨t
 = &
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

88 }

	)

92 #i‚de‡
__STRING


94 
	#__STRING
(
x
Ë#x

	)

98 
	#SND_DLSYM_VERSION
(
vîsi⁄
Ë
	`__STRING
(vîsi⁄)

	)

100 *
¢d_dl›í
(c⁄° *
fûe
, 
mode
);

101 *
¢d_dlsym
(*
h™dÀ
, c⁄° *
«me
, c⁄° *
vîsi⁄
);

102 
¢d_dl˛o£
(*
h™dÀ
);

106 
	#__¢d_Æloˇ
(
±r
,
ty≥
Ëdÿ{ *±∏—y≥##
_t
 *Ë
	`Æloˇ
—y≥##
	`_sizeof
()); 
	`mem£t
(*±r, 0,Åy≥##_sizeof()); } 0)

	)

114 
_¢d_async_h™dÀr
 
	t¢d_async_h™dÀr_t
;

121 (*
	g¢d_async_ˇŒback_t
)(
	t¢d_async_h™dÀr_t
 *
	th™dÀr
);

123 
¢d_async_add_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
fd
,

124 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

125 
¢d_async_dñ_h™dÀr
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

126 
¢d_async_h™dÀr_gë_fd
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

127 
¢d_async_h™dÀr_gë_signo
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

128 *
¢d_async_h™dÀr_gë_ˇŒback_¥iv©e
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

130 
¢d_shm_¨ó
 *
¢d_shm_¨ó_¸óã
(
shmid
, *
±r
);

131 
¢d_shm_¨ó
 *
¢d_shm_¨ó_sh¨e
(¢d_shm_¨ó *
¨ó
);

132 
¢d_shm_¨ó_de°roy
(
¢d_shm_¨ó
 *
¨ó
);

134 
¢d_u£r_fûe
(c⁄° *
fûe
, **
ªsu…
);

136 #ifde‡
__GLIBC__


137 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_POSIX_SOURCE
)

138 
	stimevÆ
 {

139 
time_t
 
	gtv_£c
;

140 
	gtv_u£c
;

143 
	stime•ec
 {

144 
time_t
 
	gtv_£c
;

145 
	gtv_n£c
;

151 
timevÆ
 
	t¢d_time°amp_t
;

153 
time•ec
 
	t¢d_htime°amp_t
;

157 #ifde‡
__˝lu•lus


	@/usr/include/alsa/hwdep.h

28 #i‚de‡
__ALSA_HWDEP_H


29 
	#__ALSA_HWDEP_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_HWDEP_DLSYM_VERSION
 
_dlsym_hwdï_001


	)

45 
_¢d_hwdï_öfo
 
	t¢d_hwdï_öfo_t
;

48 
_¢d_hwdï_d•_°©us
 
	t¢d_hwdï_d•_°©us_t
;

51 
_¢d_hwdï_d•_image
 
	t¢d_hwdï_d•_image_t
;

54 
	e_¢d_hwdï_iÁ˚
 {

55 
SND_HWDEP_IFACE_OPL2
 = 0,

56 
SND_HWDEP_IFACE_OPL3
,

57 
SND_HWDEP_IFACE_OPL4
,

58 
SND_HWDEP_IFACE_SB16CSP
,

59 
SND_HWDEP_IFACE_EMU10K1
,

60 
SND_HWDEP_IFACE_YSS225
,

61 
SND_HWDEP_IFACE_ICS2115
,

62 
SND_HWDEP_IFACE_SSCAPE
,

63 
SND_HWDEP_IFACE_VX
,

64 
SND_HWDEP_IFACE_MIXART
,

65 
SND_HWDEP_IFACE_USX2Y
,

66 
SND_HWDEP_IFACE_EMUX_WAVETABLE
,

67 
SND_HWDEP_IFACE_BLUETOOTH
,

68 
SND_HWDEP_IFACE_USX2Y_PCM
,

69 
SND_HWDEP_IFACE_PCXHR
,

70 
SND_HWDEP_IFACE_SB_RC
,

71 
SND_HWDEP_IFACE_HDA
,

72 
SND_HWDEP_IFACE_USB_STREAM
,

73 
SND_HWDEP_IFACE_FW_DICE
,

74 
SND_HWDEP_IFACE_FW_FIREWORKS
,

75 
SND_HWDEP_IFACE_FW_BEBOB
,

76 
SND_HWDEP_IFACE_FW_OXFW
,

77 
SND_HWDEP_IFACE_FW_DIGI00X
,

78 
SND_HWDEP_IFACE_FW_TASCAM
,

80 
SND_HWDEP_IFACE_LAST
 = 
SND_HWDEP_IFACE_FW_TASCAM


81 } 
	t¢d_hwdï_iÁ˚_t
;

84 
	#SND_HWDEP_OPEN_READ
 (
O_RDONLY
)

	)

86 
	#SND_HWDEP_OPEN_WRITE
 (
O_WRONLY
)

	)

88 
	#SND_HWDEP_OPEN_DUPLEX
 (
O_RDWR
)

	)

90 
	#SND_HWDEP_OPEN_NONBLOCK
 (
O_NONBLOCK
)

	)

93 
	e_¢d_hwdï_ty≥
 {

95 
SND_HWDEP_TYPE_HW
,

97 
SND_HWDEP_TYPE_SHM
,

99 
SND_HWDEP_TYPE_INET


100 } 
	t¢d_hwdï_ty≥_t
;

103 
_¢d_hwdï
 
	t¢d_hwdï_t
;

105 
¢d_hwdï_›í
(
¢d_hwdï_t
 **
hwdï
, c⁄° *
«me
, 
mode
);

106 
¢d_hwdï_˛o£
(
¢d_hwdï_t
 *
hwdï
);

107 
¢d_hwdï_pﬁl_des¸ùt‹s
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_hwdï_pﬁl_des¸ùt‹s_cou¡
(
¢d_hwdï_t
 *
hwdï
);

109 
¢d_hwdï_pﬁl_des¸ùt‹s_ªvíts
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

110 
¢d_hwdï_n⁄block
(
¢d_hwdï_t
 *
hwdï
, 
n⁄block
);

111 
¢d_hwdï_öfo
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_öfo_t
 * 
öfo
);

112 
¢d_hwdï_d•_°©us
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_°©us_t
 *
°©us
);

113 
¢d_hwdï_d•_lﬂd
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_image_t
 *
block
);

114 
¢d_hwdï_io˘l
(
¢d_hwdï_t
 *
hwdï
, 
ªque°
, * 
¨g
);

115 
ssize_t
 
¢d_hwdï_wrôe
(
¢d_hwdï_t
 *
hwdï
, c⁄° *
buf„r
, 
size_t
 
size
);

116 
ssize_t
 
¢d_hwdï_ªad
(
¢d_hwdï_t
 *
hwdï
, *
buf„r
, 
size_t
 
size
);

118 
size_t
 
¢d_hwdï_öfo_sizeof
();

120 
	#¢d_hwdï_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_öfo
)

	)

121 
¢d_hwdï_öfo_mÆloc
(
¢d_hwdï_öfo_t
 **
±r
);

122 
¢d_hwdï_öfo_‰ì
(
¢d_hwdï_öfo_t
 *
obj
);

123 
¢d_hwdï_öfo_c›y
(
¢d_hwdï_öfo_t
 *
d°
, c⁄° snd_hwdï_öfo_à*
§c
);

125 
¢d_hwdï_öfo_gë_devi˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

126 
¢d_hwdï_öfo_gë_ˇrd
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

127 c⁄° *
¢d_hwdï_öfo_gë_id
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

128 c⁄° *
¢d_hwdï_öfo_gë_«me
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

129 
¢d_hwdï_iÁ˚_t
 
¢d_hwdï_öfo_gë_iÁ˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

130 
¢d_hwdï_öfo_£t_devi˚
(
¢d_hwdï_öfo_t
 *
obj
, 
vÆ
);

132 
size_t
 
¢d_hwdï_d•_°©us_sizeof
();

134 
	#¢d_hwdï_d•_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_°©us
)

	)

135 
¢d_hwdï_d•_°©us_mÆloc
(
¢d_hwdï_d•_°©us_t
 **
±r
);

136 
¢d_hwdï_d•_°©us_‰ì
(
¢d_hwdï_d•_°©us_t
 *
obj
);

137 
¢d_hwdï_d•_°©us_c›y
(
¢d_hwdï_d•_°©us_t
 *
d°
, c⁄° snd_hwdï_d•_°©us_à*
§c
);

139 
¢d_hwdï_d•_°©us_gë_vîsi⁄
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

140 c⁄° *
¢d_hwdï_d•_°©us_gë_id
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

141 
¢d_hwdï_d•_°©us_gë_num_d•s
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

142 
¢d_hwdï_d•_°©us_gë_d•_lﬂded
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

143 
¢d_hwdï_d•_°©us_gë_chù_ªady
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

145 
size_t
 
¢d_hwdï_d•_image_sizeof
();

147 
	#¢d_hwdï_d•_image_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_image
)

	)

148 
¢d_hwdï_d•_image_mÆloc
(
¢d_hwdï_d•_image_t
 **
±r
);

149 
¢d_hwdï_d•_image_‰ì
(
¢d_hwdï_d•_image_t
 *
obj
);

150 
¢d_hwdï_d•_image_c›y
(
¢d_hwdï_d•_image_t
 *
d°
, c⁄° snd_hwdï_d•_image_à*
§c
);

152 
¢d_hwdï_d•_image_gë_ödex
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

153 c⁄° *
¢d_hwdï_d•_image_gë_«me
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

154 c⁄° *
¢d_hwdï_d•_image_gë_image
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

155 
size_t
 
¢d_hwdï_d•_image_gë_Àngth
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

157 
¢d_hwdï_d•_image_£t_ödex
(
¢d_hwdï_d•_image_t
 *
obj
, 
_ödex
);

158 
¢d_hwdï_d•_image_£t_«me
(
¢d_hwdï_d•_image_t
 *
obj
, c⁄° *
«me
);

159 
¢d_hwdï_d•_image_£t_image
(
¢d_hwdï_d•_image_t
 *
obj
, *
buf„r
);

160 
¢d_hwdï_d•_image_£t_Àngth
(
¢d_hwdï_d•_image_t
 *
obj
, 
size_t
 
Àngth
);

164 #ifde‡
__˝lu•lus


	@/usr/include/alsa/input.h

28 #i‚de‡
__ALSA_INPUT_H


29 
	#__ALSA_INPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_öput
 
	t¢d_öput_t
;

57 
	e_¢d_öput_ty≥
 {

59 
SND_INPUT_STDIO
,

61 
SND_INPUT_BUFFER


62 } 
	t¢d_öput_ty≥_t
;

64 
¢d_öput_°dio_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_öput_°dio_©èch
(
¢d_öput_t
 **
öpuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_öput_buf„r_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
buf„r
, 
ssize_t
 
size
);

67 
¢d_öput_˛o£
(
¢d_öput_t
 *
öput
);

68 
¢d_öput_sˇnf
(
¢d_öput_t
 *
öput
, c⁄° *
f‹m©
, ...)

69 #i‚de‡
DOC_HIDDEN


70 
__©åibuã__
 ((
f‹m©
 (
sˇnf
, 2, 3)))

73 *
¢d_öput_gës
(
¢d_öput_t
 *
öput
, *
°r
, 
size_t
 
size
);

74 
¢d_öput_gëc
(
¢d_öput_t
 *
öput
);

75 
¢d_öput_ungëc
(
¢d_öput_t
 *
öput
, 
c
);

79 #ifde‡
__˝lu•lus


	@/usr/include/alsa/mixer.h

28 #i‚de‡
__ALSA_MIXER_H


29 
	#__ALSA_MIXER_H


	)

31 #ifde‡
__˝lu•lus


42 
_¢d_mixî
 
	t¢d_mixî_t
;

44 
_¢d_mixî_˛ass
 
	t¢d_mixî_˛ass_t
;

46 
_¢d_mixî_ñem
 
	t¢d_mixî_ñem_t
;

55 (*
¢d_mixî_ˇŒback_t
)(
	t¢d_mixî_t
 *
	t˘l
,

56 
	tmask
,

57 
	t¢d_mixî_ñem_t
 *
	tñem
);

65 (*
¢d_mixî_ñem_ˇŒback_t
)(
	t¢d_mixî_ñem_t
 *
	tñem
,

66 
	tmask
);

74 (*
¢d_mixî_com∑ª_t
)(c⁄° 
	t¢d_mixî_ñem_t
 *
	te1
,

75 c⁄° 
	t¢d_mixî_ñem_t
 *
	te2
);

85 (*
¢d_mixî_evít_t
)(
	t¢d_mixî_˛ass_t
 *
	t˛ass_
, 
	tmask
,

86 
	t¢d_h˘l_ñem_t
 *
	thñem
, 
	t¢d_mixî_ñem_t
 *
	tmñem
);

90 
	e_¢d_mixî_ñem_ty≥
 {

92 
SND_MIXER_ELEM_SIMPLE
,

93 
SND_MIXER_ELEM_LAST
 = 
SND_MIXER_ELEM_SIMPLE


94 } 
	t¢d_mixî_ñem_ty≥_t
;

96 
¢d_mixî_›í
(
¢d_mixî_t
 **
mixî
, 
mode
);

97 
¢d_mixî_˛o£
(
¢d_mixî_t
 *
mixî
);

98 
¢d_mixî_ñem_t
 *
¢d_mixî_fú°_ñem
(
¢d_mixî_t
 *
mixî
);

99 
¢d_mixî_ñem_t
 *
¢d_mixî_œ°_ñem
(
¢d_mixî_t
 *
mixî
);

100 
¢d_mixî_h™dÀ_evíts
(
¢d_mixî_t
 *
mixî
);

101 
¢d_mixî_©èch
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

102 
¢d_mixî_©èch_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

103 
¢d_mixî_dëach
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

104 
¢d_mixî_dëach_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

105 
¢d_mixî_gë_h˘l
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
, 
¢d_h˘l_t
 **
h˘l
);

106 
¢d_mixî_pﬁl_des¸ùt‹s_cou¡
(
¢d_mixî_t
 *
mixî
);

107 
¢d_mixî_pﬁl_des¸ùt‹s
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_mixî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

109 
¢d_mixî_lﬂd
(
¢d_mixî_t
 *
mixî
);

110 
¢d_mixî_‰ì
(
¢d_mixî_t
 *
mixî
);

111 
¢d_mixî_waô
(
¢d_mixî_t
 *
mixî
, 
timeout
);

112 
¢d_mixî_£t_com∑ª
(
¢d_mixî_t
 *
mixî
, 
¢d_mixî_com∑ª_t
 
ms‹t
);

113 
¢d_mixî_£t_ˇŒback
(
¢d_mixî_t
 *
obj
, 
¢d_mixî_ˇŒback_t
 
vÆ
);

114 * 
¢d_mixî_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_t
 *
obj
);

115 
¢d_mixî_£t_ˇŒback_¥iv©e
(
¢d_mixî_t
 *
obj
, * 
vÆ
);

116 
¢d_mixî_gë_cou¡
(c⁄° 
¢d_mixî_t
 *
obj
);

117 
¢d_mixî_˛ass_uƒegi°î
(
¢d_mixî_˛ass_t
 *
˛ss
);

119 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_√xt
(¢d_mixî_ñem_à*
ñem
);

120 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_¥ev
(¢d_mixî_ñem_à*
ñem
);

121 
¢d_mixî_ñem_£t_ˇŒback
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_ñem_ˇŒback_t
 
vÆ
);

122 * 
¢d_mixî_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

123 
¢d_mixî_ñem_£t_ˇŒback_¥iv©e
(
¢d_mixî_ñem_t
 *
obj
, * 
vÆ
);

124 
¢d_mixî_ñem_ty≥_t
 
¢d_mixî_ñem_gë_ty≥
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

126 
¢d_mixî_˛ass_ªgi°î
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_t
 *
mixî
);

127 
¢d_mixî_ñem_√w
(
¢d_mixî_ñem_t
 **
ñem
,

128 
¢d_mixî_ñem_ty≥_t
 
ty≥
,

129 
com∑ª_weight
,

130 *
¥iv©e_d©a
,

131 (*
¥iv©e_‰ì
)(
¢d_mixî_ñem_t
 *
ñem
));

132 
¢d_mixî_ñem_add
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_˛ass_t
 *
˛ass_
);

133 
¢d_mixî_ñem_ªmove
(
¢d_mixî_ñem_t
 *
ñem
);

134 
¢d_mixî_ñem_‰ì
(
¢d_mixî_ñem_t
 *
ñem
);

135 
¢d_mixî_ñem_öfo
(
¢d_mixî_ñem_t
 *
ñem
);

136 
¢d_mixî_ñem_vÆue
(
¢d_mixî_ñem_t
 *
ñem
);

137 
¢d_mixî_ñem_©èch
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

138 
¢d_mixî_ñem_dëach
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

139 
¢d_mixî_ñem_em±y
(
¢d_mixî_ñem_t
 *
mñem
);

140 *
¢d_mixî_ñem_gë_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
mñem
);

142 
size_t
 
¢d_mixî_˛ass_sizeof
();

147 
	#¢d_mixî_˛ass_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_˛ass
)

	)

148 
¢d_mixî_˛ass_mÆloc
(
¢d_mixî_˛ass_t
 **
±r
);

149 
¢d_mixî_˛ass_‰ì
(
¢d_mixî_˛ass_t
 *
obj
);

150 
¢d_mixî_˛ass_c›y
(
¢d_mixî_˛ass_t
 *
d°
, c⁄° snd_mixî_˛ass_à*
§c
);

151 
¢d_mixî_t
 *
¢d_mixî_˛ass_gë_mixî
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

152 
¢d_mixî_evít_t
 
¢d_mixî_˛ass_gë_evít
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

153 *
¢d_mixî_˛ass_gë_¥iv©e
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

154 
¢d_mixî_com∑ª_t
 
¢d_mixî_˛ass_gë_com∑ª
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

155 
¢d_mixî_˛ass_£t_evít
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_evít_t
 
evít
);

156 
¢d_mixî_˛ass_£t_¥iv©e
(
¢d_mixî_˛ass_t
 *
˛ass_
, *
¥iv©e_d©a
);

157 
¢d_mixî_˛ass_£t_¥iv©e_‰ì
(
¢d_mixî_˛ass_t
 *
˛ass_
, (*
¥iv©e_‰ì
)(snd_mixer_class_t *));

158 
¢d_mixî_˛ass_£t_com∑ª
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_com∑ª_t
 
com∑ª
);

170 
	e_¢d_mixî_£Àm_ch™√l_id
 {

172 
SND_MIXER_SCHN_UNKNOWN
 = -1,

174 
SND_MIXER_SCHN_FRONT_LEFT
 = 0,

176 
SND_MIXER_SCHN_FRONT_RIGHT
,

178 
SND_MIXER_SCHN_REAR_LEFT
,

180 
SND_MIXER_SCHN_REAR_RIGHT
,

182 
SND_MIXER_SCHN_FRONT_CENTER
,

184 
SND_MIXER_SCHN_WOOFER
,

186 
SND_MIXER_SCHN_SIDE_LEFT
,

188 
SND_MIXER_SCHN_SIDE_RIGHT
,

190 
SND_MIXER_SCHN_REAR_CENTER
,

191 
SND_MIXER_SCHN_LAST
 = 31,

193 
SND_MIXER_SCHN_MONO
 = 
SND_MIXER_SCHN_FRONT_LEFT


194 } 
	t¢d_mixî_£Àm_ch™√l_id_t
;

197 
	e¢d_mixî_£Àm_ªg›t_ab°ø˘
 {

199 
SND_MIXER_SABSTRACT_NONE
 = 0,

201 
SND_MIXER_SABSTRACT_BASIC
,

205 
	s¢d_mixî_£Àm_ªg›t
 {

207 
vî
;

209 
¢d_mixî_£Àm_ªg›t_ab°ø˘
 
ab°ø˘
;

211 c⁄° *
devi˚
;

213 
¢d_pcm_t
 *
∂ayback_pcm
;

215 
¢d_pcm_t
 *
ˇ±uª_pcm
;

219 
_¢d_mixî_£Àm_id
 
	t¢d_mixî_£Àm_id_t
;

221 c⁄° *
¢d_mixî_£Àm_ch™√l_«me
(
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

223 
¢d_mixî_£Àm_ªgi°î
(
¢d_mixî_t
 *
mixî
,

224 
¢d_mixî_£Àm_ªg›t
 *
›ti⁄s
,

225 
¢d_mixî_˛ass_t
 **
˛as•
);

226 
¢d_mixî_£Àm_gë_id
(
¢d_mixî_ñem_t
 *
ñemít
,

227 
¢d_mixî_£Àm_id_t
 *
id
);

228 c⁄° *
¢d_mixî_£Àm_gë_«me
(
¢d_mixî_ñem_t
 *
ñem
);

229 
¢d_mixî_£Àm_gë_ödex
(
¢d_mixî_ñem_t
 *
ñem
);

230 
¢d_mixî_ñem_t
 *
¢d_mixî_föd_£Àm
(
¢d_mixî_t
 *
mixî
,

231 c⁄° 
¢d_mixî_£Àm_id_t
 *
id
);

233 
¢d_mixî_£Àm_is_a˘ive
(
¢d_mixî_ñem_t
 *
ñem
);

234 
¢d_mixî_£Àm_is_∂ayback_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

235 
¢d_mixî_£Àm_has_∂ayback_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

236 
¢d_mixî_£Àm_is_ˇ±uª_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

237 
¢d_mixî_£Àm_has_ˇ±uª_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

238 
¢d_mixî_£Àm_gë_ˇ±uª_group
(
¢d_mixî_ñem_t
 *
ñem
);

239 
¢d_mixî_£Àm_has_comm⁄_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

240 
¢d_mixî_£Àm_has_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

241 
¢d_mixî_£Àm_has_∂ayback_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

242 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

243 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

244 
¢d_mixî_£Àm_has_comm⁄_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

245 
¢d_mixî_£Àm_has_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

246 
¢d_mixî_£Àm_has_∂ayback_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

247 
¢d_mixî_£Àm_has_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

248 
¢d_mixî_£Àm_has_ˇ±uª_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

249 
¢d_mixî_£Àm_has_ˇ±uª_swôch_ex˛usive
(
¢d_mixî_ñem_t
 *
ñem
);

251 
¢d_mixî_£Àm_ask_∂ayback_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

252 
¢d_mixî_£Àm_ask_ˇ±uª_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

253 
¢d_mixî_£Àm_ask_∂ayback_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

254 
¢d_mixî_£Àm_ask_ˇ±uª_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

255 
¢d_mixî_£Àm_gë_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

256 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

257 
¢d_mixî_£Àm_gë_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

258 
¢d_mixî_£Àm_gë_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

259 
¢d_mixî_£Àm_gë_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

260 
¢d_mixî_£Àm_gë_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

261 
¢d_mixî_£Àm_£t_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

262 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

263 
¢d_mixî_£Àm_£t_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

264 
¢d_mixî_£Àm_£t_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

265 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

266 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

267 
¢d_mixî_£Àm_£t_∂ayback_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

268 
¢d_mixî_£Àm_£t_ˇ±uª_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

269 
¢d_mixî_£Àm_£t_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

270 
¢d_mixî_£Àm_£t_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

271 
¢d_mixî_£Àm_£t_∂ayback_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

272 
¢d_mixî_£Àm_£t_ˇ±uª_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

273 
¢d_mixî_£Àm_gë_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

274 *
mö
, *
max
);

275 
¢d_mixî_£Àm_gë_∂ayback_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

276 *
mö
, *
max
);

277 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

278 
mö
, 
max
);

279 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

280 *
mö
, *
max
);

281 
¢d_mixî_£Àm_gë_ˇ±uª_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

282 *
mö
, *
max
);

283 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

284 
mö
, 
max
);

286 
¢d_mixî_£Àm_is_íumî©ed
(
¢d_mixî_ñem_t
 *
ñem
);

287 
¢d_mixî_£Àm_is_íum_∂ayback
(
¢d_mixî_ñem_t
 *
ñem
);

288 
¢d_mixî_£Àm_is_íum_ˇ±uª
(
¢d_mixî_ñem_t
 *
ñem
);

289 
¢d_mixî_£Àm_gë_íum_ôems
(
¢d_mixî_ñem_t
 *
ñem
);

290 
¢d_mixî_£Àm_gë_íum_ôem_«me
(
¢d_mixî_ñem_t
 *
ñem
, 
idx
, 
size_t
 
maxÀn
, *
°r
);

291 
¢d_mixî_£Àm_gë_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
idxp
);

292 
¢d_mixî_£Àm_£t_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
idx
);

294 
size_t
 
¢d_mixî_£Àm_id_sizeof
();

299 
	#¢d_mixî_£Àm_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_£Àm_id
)

	)

300 
¢d_mixî_£Àm_id_mÆloc
(
¢d_mixî_£Àm_id_t
 **
±r
);

301 
¢d_mixî_£Àm_id_‰ì
(
¢d_mixî_£Àm_id_t
 *
obj
);

302 
¢d_mixî_£Àm_id_c›y
(
¢d_mixî_£Àm_id_t
 *
d°
, c⁄° snd_mixî_£Àm_id_à*
§c
);

303 c⁄° *
¢d_mixî_£Àm_id_gë_«me
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

304 
¢d_mixî_£Àm_id_gë_ödex
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

305 
¢d_mixî_£Àm_id_£t_«me
(
¢d_mixî_£Àm_id_t
 *
obj
, c⁄° *
vÆ
);

306 
¢d_mixî_£Àm_id_£t_ödex
(
¢d_mixî_£Àm_id_t
 *
obj
, 
vÆ
);

312 #ifde‡
__˝lu•lus


	@/usr/include/alsa/output.h

28 #i‚de‡
__ALSA_OUTPUT_H


29 
	#__ALSA_OUTPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_ouçut
 
	t¢d_ouçut_t
;

57 
	e_¢d_ouçut_ty≥
 {

59 
SND_OUTPUT_STDIO
,

61 
SND_OUTPUT_BUFFER


62 } 
	t¢d_ouçut_ty≥_t
;

64 
¢d_ouçut_°dio_›í
(
¢d_ouçut_t
 **
ouçuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_ouçut_°dio_©èch
(
¢d_ouçut_t
 **
ouçuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_ouçut_buf„r_›í
(
¢d_ouçut_t
 **
ouçuç
);

67 
size_t
 
¢d_ouçut_buf„r_°rög
(
¢d_ouçut_t
 *
ouçut
, **
buf
);

68 
¢d_ouçut_˛o£
(
¢d_ouçut_t
 *
ouçut
);

69 
¢d_ouçut_¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, ...)

70 #i‚de‡
DOC_HIDDEN


71 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)))

74 
¢d_ouçut_v¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

75 
¢d_ouçut_puts
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
°r
);

76 
¢d_ouçut_putc
(
¢d_ouçut_t
 *
ouçut
, 
c
);

77 
¢d_ouçut_Êush
(
¢d_ouçut_t
 *
ouçut
);

81 #ifde‡
__˝lu•lus


	@/usr/include/alsa/pcm.h

29 #i‚de‡
__ALSA_PCM_H


30 
	#__ALSA_PCM_H


	)

32 #ifde‡
__˝lu•lus


43 
	#SND_PCM_DLSYM_VERSION
 
_dlsym_pcm_001


	)

46 
_¢d_pcm_öfo
 
	t¢d_pcm_öfo_t
;

62 
_¢d_pcm_hw_∑øms
 
	t¢d_pcm_hw_∑øms_t
;

65 
_¢d_pcm_sw_∑øms
 
	t¢d_pcm_sw_∑øms_t
;

67 
_¢d_pcm_°©us
 
	t¢d_pcm_°©us_t
;

69 
_¢d_pcm_ac˚ss_mask
 
	t¢d_pcm_ac˚ss_mask_t
;

71 
_¢d_pcm_f‹m©_mask
 
	t¢d_pcm_f‹m©_mask_t
;

73 
_¢d_pcm_subf‹m©_mask
 
	t¢d_pcm_subf‹m©_mask_t
;

76 
	e_¢d_pcm_˛ass
 {

79 
SND_PCM_CLASS_GENERIC
 = 0,

81 
SND_PCM_CLASS_MULTI
,

83 
SND_PCM_CLASS_MODEM
,

85 
SND_PCM_CLASS_DIGITIZER
,

86 
SND_PCM_CLASS_LAST
 = 
SND_PCM_CLASS_DIGITIZER


87 } 
	t¢d_pcm_˛ass_t
;

90 
	e_¢d_pcm_sub˛ass
 {

92 
SND_PCM_SUBCLASS_GENERIC_MIX
 = 0,

94 
SND_PCM_SUBCLASS_MULTI_MIX
,

95 
SND_PCM_SUBCLASS_LAST
 = 
SND_PCM_SUBCLASS_MULTI_MIX


96 } 
	t¢d_pcm_sub˛ass_t
;

99 
	e_¢d_pcm_°ªam
 {

101 
SND_PCM_STREAM_PLAYBACK
 = 0,

103 
SND_PCM_STREAM_CAPTURE
,

104 
SND_PCM_STREAM_LAST
 = 
SND_PCM_STREAM_CAPTURE


105 } 
	t¢d_pcm_°ªam_t
;

108 
	e_¢d_pcm_ac˚ss
 {

110 
SND_PCM_ACCESS_MMAP_INTERLEAVED
 = 0,

112 
SND_PCM_ACCESS_MMAP_NONINTERLEAVED
,

114 
SND_PCM_ACCESS_MMAP_COMPLEX
,

116 
SND_PCM_ACCESS_RW_INTERLEAVED
,

118 
SND_PCM_ACCESS_RW_NONINTERLEAVED
,

119 
SND_PCM_ACCESS_LAST
 = 
SND_PCM_ACCESS_RW_NONINTERLEAVED


120 } 
	t¢d_pcm_ac˚ss_t
;

123 
	e_¢d_pcm_f‹m©
 {

125 
SND_PCM_FORMAT_UNKNOWN
 = -1,

127 
SND_PCM_FORMAT_S8
 = 0,

129 
SND_PCM_FORMAT_U8
,

131 
SND_PCM_FORMAT_S16_LE
,

133 
SND_PCM_FORMAT_S16_BE
,

135 
SND_PCM_FORMAT_U16_LE
,

137 
SND_PCM_FORMAT_U16_BE
,

139 
SND_PCM_FORMAT_S24_LE
,

141 
SND_PCM_FORMAT_S24_BE
,

143 
SND_PCM_FORMAT_U24_LE
,

145 
SND_PCM_FORMAT_U24_BE
,

147 
SND_PCM_FORMAT_S32_LE
,

149 
SND_PCM_FORMAT_S32_BE
,

151 
SND_PCM_FORMAT_U32_LE
,

153 
SND_PCM_FORMAT_U32_BE
,

155 
SND_PCM_FORMAT_FLOAT_LE
,

157 
SND_PCM_FORMAT_FLOAT_BE
,

159 
SND_PCM_FORMAT_FLOAT64_LE
,

161 
SND_PCM_FORMAT_FLOAT64_BE
,

163 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE
,

165 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE
,

167 
SND_PCM_FORMAT_MU_LAW
,

169 
SND_PCM_FORMAT_A_LAW
,

171 
SND_PCM_FORMAT_IMA_ADPCM
,

173 
SND_PCM_FORMAT_MPEG
,

175 
SND_PCM_FORMAT_GSM
,

177 
SND_PCM_FORMAT_SPECIAL
 = 31,

179 
SND_PCM_FORMAT_S24_3LE
 = 32,

181 
SND_PCM_FORMAT_S24_3BE
,

183 
SND_PCM_FORMAT_U24_3LE
,

185 
SND_PCM_FORMAT_U24_3BE
,

187 
SND_PCM_FORMAT_S20_3LE
,

189 
SND_PCM_FORMAT_S20_3BE
,

191 
SND_PCM_FORMAT_U20_3LE
,

193 
SND_PCM_FORMAT_U20_3BE
,

195 
SND_PCM_FORMAT_S18_3LE
,

197 
SND_PCM_FORMAT_S18_3BE
,

199 
SND_PCM_FORMAT_U18_3LE
,

201 
SND_PCM_FORMAT_U18_3BE
,

203 
SND_PCM_FORMAT_G723_24
,

205 
SND_PCM_FORMAT_G723_24_1B
,

207 
SND_PCM_FORMAT_G723_40
,

209 
SND_PCM_FORMAT_G723_40_1B
,

211 
SND_PCM_FORMAT_DSD_U8
,

213 
SND_PCM_FORMAT_DSD_U16_LE
,

215 
SND_PCM_FORMAT_DSD_U32_LE
,

217 
SND_PCM_FORMAT_DSD_U16_BE
,

219 
SND_PCM_FORMAT_DSD_U32_BE
,

220 
SND_PCM_FORMAT_LAST
 = 
SND_PCM_FORMAT_DSD_U32_BE
,

222 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


224 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_LE
,

226 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_LE
,

228 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_LE
,

230 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_LE
,

232 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_LE
,

234 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_LE
,

236 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_LE
,

238 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_LE
,

240 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE


241 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


243 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_BE
,

245 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_BE
,

247 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_BE
,

249 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_BE
,

251 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_BE
,

253 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_BE
,

255 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_BE
,

257 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_BE
,

259 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE


263 } 
	t¢d_pcm_f‹m©_t
;

266 
	e_¢d_pcm_subf‹m©
 {

268 
SND_PCM_SUBFORMAT_STD
 = 0,

269 
SND_PCM_SUBFORMAT_LAST
 = 
SND_PCM_SUBFORMAT_STD


270 } 
	t¢d_pcm_subf‹m©_t
;

273 
	e_¢d_pcm_°©e
 {

275 
SND_PCM_STATE_OPEN
 = 0,

277 
SND_PCM_STATE_SETUP
,

279 
SND_PCM_STATE_PREPARED
,

281 
SND_PCM_STATE_RUNNING
,

283 
SND_PCM_STATE_XRUN
,

285 
SND_PCM_STATE_DRAINING
,

287 
SND_PCM_STATE_PAUSED
,

289 
SND_PCM_STATE_SUSPENDED
,

291 
SND_PCM_STATE_DISCONNECTED
,

292 
SND_PCM_STATE_LAST
 = 
SND_PCM_STATE_DISCONNECTED


293 } 
	t¢d_pcm_°©e_t
;

296 
	e_¢d_pcm_°¨t
 {

298 
SND_PCM_START_DATA
 = 0,

300 
SND_PCM_START_EXPLICIT
,

301 
SND_PCM_START_LAST
 = 
SND_PCM_START_EXPLICIT


302 } 
	t¢d_pcm_°¨t_t
;

305 
	e_¢d_pcm_xrun
 {

307 
SND_PCM_XRUN_NONE
 = 0,

309 
SND_PCM_XRUN_STOP
,

310 
SND_PCM_XRUN_LAST
 = 
SND_PCM_XRUN_STOP


311 } 
	t¢d_pcm_xrun_t
;

314 
	e_¢d_pcm_t°amp
 {

316 
SND_PCM_TSTAMP_NONE
 = 0,

318 
SND_PCM_TSTAMP_ENABLE
,

322 
SND_PCM_TSTAMP_MMAP
 = 
SND_PCM_TSTAMP_ENABLE
,

323 
SND_PCM_TSTAMP_LAST
 = 
SND_PCM_TSTAMP_ENABLE


324 } 
	t¢d_pcm_t°amp_t
;

326 
	e_¢d_pcm_t°amp_ty≥
 {

327 
SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY
 = 0,

328 
SND_PCM_TSTAMP_TYPE_MONOTONIC
,

329 
SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

330 
SND_PCM_TSTAMP_TYPE_LAST
 = 
SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW
,

331 } 
	t¢d_pcm_t°amp_ty≥_t
;

333 
	s_¢d_pcm_audio_t°amp_c⁄fig
 {

335 
ty≥_ªque°ed
:4;

336 
ªp‹t_dñay
:1;

337 } 
	t¢d_pcm_audio_t°amp_c⁄fig_t
;

339 
	s_¢d_pcm_audio_t°amp_ªp‹t
 {

343 
vÆid
:1;

346 
a˘uÆ_ty≥
:4;

349 
accuøcy_ªp‹t
:1;

350 
accuøcy
;

351 } 
	t¢d_pcm_audio_t°amp_ªp‹t_t
;

354 
	t¢d_pcm_u‰ames_t
;

356 
	t¢d_pcm_s‰ames_t
;

359 
	#SND_PCM_NONBLOCK
 0x00000001

	)

361 
	#SND_PCM_ASYNC
 0x00000002

	)

363 
	#SND_PCM_ABORT
 0x00008000

	)

365 
	#SND_PCM_NO_AUTO_RESAMPLE
 0x00010000

	)

367 
	#SND_PCM_NO_AUTO_CHANNELS
 0x00020000

	)

369 
	#SND_PCM_NO_AUTO_FORMAT
 0x00040000

	)

371 
	#SND_PCM_NO_SOFTVOL
 0x00080000

	)

374 
_¢d_pcm
 
	t¢d_pcm_t
;

377 
	e_¢d_pcm_ty≥
 {

379 
SND_PCM_TYPE_HW
 = 0,

381 
SND_PCM_TYPE_HOOKS
,

384 
SND_PCM_TYPE_MULTI
,

386 
SND_PCM_TYPE_FILE
,

388 
SND_PCM_TYPE_NULL
,

390 
SND_PCM_TYPE_SHM
,

392 
SND_PCM_TYPE_INET
,

394 
SND_PCM_TYPE_COPY
,

396 
SND_PCM_TYPE_LINEAR
,

398 
SND_PCM_TYPE_ALAW
,

400 
SND_PCM_TYPE_MULAW
,

402 
SND_PCM_TYPE_ADPCM
,

404 
SND_PCM_TYPE_RATE
,

406 
SND_PCM_TYPE_ROUTE
,

408 
SND_PCM_TYPE_PLUG
,

410 
SND_PCM_TYPE_SHARE
,

412 
SND_PCM_TYPE_METER
,

414 
SND_PCM_TYPE_MIX
,

416 
SND_PCM_TYPE_DROUTE
,

418 
SND_PCM_TYPE_LBSERVER
,

420 
SND_PCM_TYPE_LINEAR_FLOAT
,

422 
SND_PCM_TYPE_LADSPA
,

424 
SND_PCM_TYPE_DMIX
,

426 
SND_PCM_TYPE_JACK
,

428 
SND_PCM_TYPE_DSNOOP
,

430 
SND_PCM_TYPE_DSHARE
,

432 
SND_PCM_TYPE_IEC958
,

434 
SND_PCM_TYPE_SOFTVOL
,

436 
SND_PCM_TYPE_IOPLUG
,

438 
SND_PCM_TYPE_EXTPLUG
,

440 
SND_PCM_TYPE_MMAP_EMUL
,

441 
SND_PCM_TYPE_LAST
 = 
SND_PCM_TYPE_MMAP_EMUL


445 
_¢d_pcm_ty≥
 
	t¢d_pcm_ty≥_t
;

448 
	s_¢d_pcm_ch™√l_¨ó
 {

450 *
addr
;

452 
fú°
;

454 
°ï
;

455 } 
	t¢d_pcm_ch™√l_¨ó_t
;

458 
	u_¢d_pcm_sync_id
 {

460 
id
[16];

462 
id16
[8];

464 
id32
[4];

465 } 
	t¢d_pcm_sync_id_t
;

468 
_¢d_pcm_sc›e
 
	t¢d_pcm_sc›e_t
;

470 
¢d_pcm_›í
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

471 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

472 
¢d_pcm_›í_lc⁄f
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

473 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
,

474 
¢d_c⁄fig_t
 *
lc⁄f
);

475 
¢d_pcm_›í_ÁŒback
(
¢d_pcm_t
 **
pcm
, 
¢d_c⁄fig_t
 *
roŸ
,

476 c⁄° *
«me
, c⁄° *
‹ig_«me
,

477 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

479 
¢d_pcm_˛o£
(
¢d_pcm_t
 *
pcm
);

480 c⁄° *
¢d_pcm_«me
(
¢d_pcm_t
 *
pcm
);

481 
¢d_pcm_ty≥_t
 
¢d_pcm_ty≥
(
¢d_pcm_t
 *
pcm
);

482 
¢d_pcm_°ªam_t
 
¢d_pcm_°ªam
(
¢d_pcm_t
 *
pcm
);

483 
¢d_pcm_pﬁl_des¸ùt‹s_cou¡
(
¢d_pcm_t
 *
pcm
);

484 
¢d_pcm_pﬁl_des¸ùt‹s
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
•a˚
);

485 
¢d_pcm_pﬁl_des¸ùt‹s_ªvíts
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

486 
¢d_pcm_n⁄block
(
¢d_pcm_t
 *
pcm
, 
n⁄block
);

487 
__ölöe__
 
¢d_pcm_ab‹t
(
¢d_pcm_t
 *
pcm
Ë{  
¢d_pcm_n⁄block
(pcm, 2); }

488 
¢d_async_add_pcm_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_pcm_t
 *
pcm
,

489 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

490 
¢d_pcm_t
 *
¢d_async_h™dÀr_gë_pcm
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

491 
¢d_pcm_öfo
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_öfo_t
 *
öfo
);

492 
¢d_pcm_hw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

493 
¢d_pcm_hw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

494 
¢d_pcm_hw_‰ì
(
¢d_pcm_t
 *
pcm
);

495 
¢d_pcm_sw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

496 
¢d_pcm_sw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

497 
¢d_pcm_¥ï¨e
(
¢d_pcm_t
 *
pcm
);

498 
¢d_pcm_ª£t
(
¢d_pcm_t
 *
pcm
);

499 
¢d_pcm_°©us
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_°©us_t
 *
°©us
);

500 
¢d_pcm_°¨t
(
¢d_pcm_t
 *
pcm
);

501 
¢d_pcm_dr›
(
¢d_pcm_t
 *
pcm
);

502 
¢d_pcm_døö
(
¢d_pcm_t
 *
pcm
);

503 
¢d_pcm_∑u£
(
¢d_pcm_t
 *
pcm
, 
íabÀ
);

504 
¢d_pcm_°©e_t
 
¢d_pcm_°©e
(
¢d_pcm_t
 *
pcm
);

505 
¢d_pcm_hwsync
(
¢d_pcm_t
 *
pcm
);

506 
¢d_pcm_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
dñayp
);

507 
¢d_pcm_ªsume
(
¢d_pcm_t
 *
pcm
);

508 
¢d_pcm_htime°amp
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 *
avaû
, 
¢d_htime°amp_t
 *
t°amp
);

509 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû
(
¢d_pcm_t
 *
pcm
);

510 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû_upd©e
(
¢d_pcm_t
 *
pcm
);

511 
¢d_pcm_avaû_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
avaûp
, snd_pcm_s‰ames_à*
dñayp
);

512 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwödabÀ
(
¢d_pcm_t
 *
pcm
);

513 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwöd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

514 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨dabÀ
(
¢d_pcm_t
 *
pcm
);

515 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨d
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

516 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

517 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

518 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

519 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

520 
¢d_pcm_waô
(
¢d_pcm_t
 *
pcm
, 
timeout
);

522 
¢d_pcm_lök
(
¢d_pcm_t
 *
pcm1
, snd_pcm_à*
pcm2
);

523 
¢d_pcm_u∆ök
(
¢d_pcm_t
 *
pcm
);

526 
	#SND_CHMAP_API_VERSION
 ((1 << 16Ë| (0 << 8Ë| 1)

	)

529 
	e¢d_pcm_chm≠_ty≥
 {

530 
SND_CHMAP_TYPE_NONE
 = 0,

531 
SND_CHMAP_TYPE_FIXED
,

532 
SND_CHMAP_TYPE_VAR
,

533 
SND_CHMAP_TYPE_PAIRED
,

534 
SND_CHMAP_TYPE_LAST
 = 
SND_CHMAP_TYPE_PAIRED
,

538 
	e¢d_pcm_chm≠_posôi⁄
 {

539 
SND_CHMAP_UNKNOWN
 = 0,

540 
SND_CHMAP_NA
,

541 
SND_CHMAP_MONO
,

542 
SND_CHMAP_FL
,

543 
SND_CHMAP_FR
,

544 
SND_CHMAP_RL
,

545 
SND_CHMAP_RR
,

546 
SND_CHMAP_FC
,

547 
SND_CHMAP_LFE
,

548 
SND_CHMAP_SL
,

549 
SND_CHMAP_SR
,

550 
SND_CHMAP_RC
,

551 
SND_CHMAP_FLC
,

552 
SND_CHMAP_FRC
,

553 
SND_CHMAP_RLC
,

554 
SND_CHMAP_RRC
,

555 
SND_CHMAP_FLW
,

556 
SND_CHMAP_FRW
,

557 
SND_CHMAP_FLH
,

558 
SND_CHMAP_FCH
,

559 
SND_CHMAP_FRH
,

560 
SND_CHMAP_TC
,

561 
SND_CHMAP_TFL
,

562 
SND_CHMAP_TFR
,

563 
SND_CHMAP_TFC
,

564 
SND_CHMAP_TRL
,

565 
SND_CHMAP_TRR
,

566 
SND_CHMAP_TRC
,

567 
SND_CHMAP_TFLC
,

568 
SND_CHMAP_TFRC
,

569 
SND_CHMAP_TSL
,

570 
SND_CHMAP_TSR
,

571 
SND_CHMAP_LLFE
,

572 
SND_CHMAP_RLFE
,

573 
SND_CHMAP_BC
,

574 
SND_CHMAP_BLC
,

575 
SND_CHMAP_BRC
,

576 
SND_CHMAP_LAST
 = 
SND_CHMAP_BRC
,

580 
	#SND_CHMAP_POSITION_MASK
 0xffff

	)

583 
	#SND_CHMAP_PHASE_INVERSE
 (0x01 << 16)

	)

585 
	#SND_CHMAP_DRIVER_SPEC
 (0x02 << 16)

	)

588 
	s¢d_pcm_chm≠
 {

589 
ch™√ls
;

590 
pos
[0];

591 } 
	t¢d_pcm_chm≠_t
;

594 
	s¢d_pcm_chm≠_quîy
 {

595 
¢d_pcm_chm≠_ty≥
 
ty≥
;

596 
¢d_pcm_chm≠_t
 
m≠
;

597 } 
	t¢d_pcm_chm≠_quîy_t
;

600 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s
(
¢d_pcm_t
 *
pcm
);

601 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s_‰om_hw
(
ˇrd
, 
dev
,

602 
subdev
,

603 
¢d_pcm_°ªam_t
 
°ªam
);

604 
¢d_pcm_‰ì_chm≠s
(
¢d_pcm_chm≠_quîy_t
 **
m≠s
);

605 
¢d_pcm_chm≠_t
 *
¢d_pcm_gë_chm≠
(
¢d_pcm_t
 *
pcm
);

606 
¢d_pcm_£t_chm≠
(
¢d_pcm_t
 *
pcm
, c⁄° 
¢d_pcm_chm≠_t
 *
m≠
);

608 c⁄° *
¢d_pcm_chm≠_ty≥_«me
(
¢d_pcm_chm≠_ty≥
 
vÆ
);

609 c⁄° *
¢d_pcm_chm≠_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

610 c⁄° *
¢d_pcm_chm≠_l⁄g_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

611 
¢d_pcm_chm≠_¥öt
(c⁄° 
¢d_pcm_chm≠_t
 *
m≠
, 
size_t
 
maxÀn
, *
buf
);

612 
¢d_pcm_chm≠_‰om_°rög
(c⁄° *
°r
);

613 
¢d_pcm_chm≠_t
 *
¢d_pcm_chm≠_∑r£_°rög
(c⁄° *
°r
);

622 
¢d_pcm_ªcovî
(
¢d_pcm_t
 *
pcm
, 
îr
, 
sûít
);

623 
¢d_pcm_£t_∑øms
(
¢d_pcm_t
 *
pcm
,

624 
¢d_pcm_f‹m©_t
 
f‹m©
,

625 
¢d_pcm_ac˚ss_t
 
ac˚ss
,

626 
ch™√ls
,

627 
øã
,

628 
so·_ªßm∂e
,

629 
œãncy
);

630 
¢d_pcm_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

631 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

632 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

643 
size_t
 
¢d_pcm_öfo_sizeof
();

648 
	#¢d_pcm_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_öfo
)

	)

649 
¢d_pcm_öfo_mÆloc
(
¢d_pcm_öfo_t
 **
±r
);

650 
¢d_pcm_öfo_‰ì
(
¢d_pcm_öfo_t
 *
obj
);

651 
¢d_pcm_öfo_c›y
(
¢d_pcm_öfo_t
 *
d°
, c⁄° snd_pcm_öfo_à*
§c
);

652 
¢d_pcm_öfo_gë_devi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

653 
¢d_pcm_öfo_gë_subdevi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

654 
¢d_pcm_°ªam_t
 
¢d_pcm_öfo_gë_°ªam
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

655 
¢d_pcm_öfo_gë_ˇrd
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

656 c⁄° *
¢d_pcm_öfo_gë_id
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

657 c⁄° *
¢d_pcm_öfo_gë_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

658 c⁄° *
¢d_pcm_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

659 
¢d_pcm_˛ass_t
 
¢d_pcm_öfo_gë_˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

660 
¢d_pcm_sub˛ass_t
 
¢d_pcm_öfo_gë_sub˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

661 
¢d_pcm_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

662 
¢d_pcm_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

663 
¢d_pcm_sync_id_t
 
¢d_pcm_öfo_gë_sync
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

664 
¢d_pcm_öfo_£t_devi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

665 
¢d_pcm_öfo_£t_subdevi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

666 
¢d_pcm_öfo_£t_°ªam
(
¢d_pcm_öfo_t
 *
obj
, 
¢d_pcm_°ªam_t
 
vÆ
);

677 
¢d_pcm_hw_∑øms_™y
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

679 
¢d_pcm_hw_∑øms_ˇn_mm≠_ßm∂e_ªsﬁuti⁄
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

680 
¢d_pcm_hw_∑øms_is_doubÀ
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

681 
¢d_pcm_hw_∑øms_is_b©ch
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

682 
¢d_pcm_hw_∑øms_is_block_å™s„r
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

683 
¢d_pcm_hw_∑øms_is_m⁄Ÿ⁄ic
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

684 
¢d_pcm_hw_∑øms_ˇn_ovîønge
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

685 
¢d_pcm_hw_∑øms_ˇn_∑u£
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

686 
¢d_pcm_hw_∑øms_ˇn_ªsume
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

687 
¢d_pcm_hw_∑øms_is_hÆf_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

688 
¢d_pcm_hw_∑øms_is_joöt_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

689 
¢d_pcm_hw_∑øms_ˇn_sync_°¨t
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

690 
¢d_pcm_hw_∑øms_ˇn_dißbÀ_≥riod_wakeup
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

691 
¢d_pcm_hw_∑øms_suµ‹ts_audio_wÆl˛ock_ts
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

692 
¢d_pcm_hw_∑øms_suµ‹ts_audio_ts_ty≥
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
ty≥
);

693 
¢d_pcm_hw_∑øms_gë_øã_numdí
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

694 *
øã_num
,

695 *
øã_dí
);

696 
¢d_pcm_hw_∑øms_gë_sbôs
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

697 
¢d_pcm_hw_∑øms_gë_fifo_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

700 
_¢d_pcm_hw_°øãgy
 
	t¢d_pcm_hw_°øãgy_t
;

703 
	s_¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°
 {

704 
vÆue
;

705 
bad√ss
;

706 } 
	t¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°_t
;

708 
¢d_pcm_hw_∑øms_°øãgy
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

709 c⁄° 
¢d_pcm_hw_°øãgy_t
 *
°øãgy
,

710 
bad√ss_mö
,

711 
bad√ss_max
);

713 
¢d_pcm_hw_°øãgy_‰ì
(
¢d_pcm_hw_°øãgy_t
 *
°øãgy
);

714 
¢d_pcm_hw_°øãgy_sim∂e
(
¢d_pcm_hw_°øãgy_t
 **
°øãgyp
,

715 
bad√ss_mö
,

716 
bad√ss_max
);

717 
¢d_pcm_hw_∑øms_åy_ex∂aö_Áûuª
(
¢d_pcm_t
 *
pcm
,

718 
¢d_pcm_hw_∑øms_t
 *
Áû
,

719 
¢d_pcm_hw_∑øms_t
 *
suc˚ss
,

720 
dïth
,

721 
¢d_ouçut_t
 *
out
);

725 
size_t
 
¢d_pcm_hw_∑øms_sizeof
();

730 
	#¢d_pcm_hw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_hw_∑øms
)

	)

731 
¢d_pcm_hw_∑øms_mÆloc
(
¢d_pcm_hw_∑øms_t
 **
±r
);

732 
¢d_pcm_hw_∑øms_‰ì
(
¢d_pcm_hw_∑øms_t
 *
obj
);

733 
¢d_pcm_hw_∑øms_c›y
(
¢d_pcm_hw_∑øms_t
 *
d°
, c⁄° snd_pcm_hw_∑øms_à*
§c
);

735 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

737 
¢d_pcm_hw_∑øms_gë_ac˚ss
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

738 
¢d_pcm_hw_∑øms_ã°_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

739 
¢d_pcm_hw_∑øms_£t_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

740 
¢d_pcm_hw_∑øms_£t_ac˚ss_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

741 
¢d_pcm_hw_∑øms_£t_ac˚ss_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

742 
¢d_pcm_hw_∑øms_£t_ac˚ss_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

743 
¢d_pcm_hw_∑øms_gë_ac˚ss_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

745 
¢d_pcm_hw_∑øms_gë_f‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
vÆ
);

746 
¢d_pcm_hw_∑øms_ã°_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

747 
¢d_pcm_hw_∑øms_£t_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

748 
¢d_pcm_hw_∑øms_£t_f‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

749 
¢d_pcm_hw_∑øms_£t_f‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

750 
¢d_pcm_hw_∑øms_£t_f‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

751 
¢d_pcm_hw_∑øms_gë_f‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

753 
¢d_pcm_hw_∑øms_gë_subf‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

754 
¢d_pcm_hw_∑øms_ã°_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

755 
¢d_pcm_hw_∑øms_£t_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

756 
¢d_pcm_hw_∑øms_£t_subf‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

757 
¢d_pcm_hw_∑øms_£t_subf‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

758 
¢d_pcm_hw_∑øms_£t_subf‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

759 
¢d_pcm_hw_∑øms_gë_subf‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

761 
¢d_pcm_hw_∑øms_gë_ch™√ls
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

762 
¢d_pcm_hw_∑øms_gë_ch™√ls_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

763 
¢d_pcm_hw_∑øms_gë_ch™√ls_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

764 
¢d_pcm_hw_∑øms_ã°_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

765 
¢d_pcm_hw_∑øms_£t_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

766 
¢d_pcm_hw_∑øms_£t_ch™√ls_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

767 
¢d_pcm_hw_∑øms_£t_ch™√ls_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

768 
¢d_pcm_hw_∑øms_£t_ch™√ls_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
max
);

769 
¢d_pcm_hw_∑øms_£t_ch™√ls_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

770 
¢d_pcm_hw_∑øms_£t_ch™√ls_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

771 
¢d_pcm_hw_∑øms_£t_ch™√ls_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

773 
¢d_pcm_hw_∑øms_gë_øã
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

774 
¢d_pcm_hw_∑øms_gë_øã_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

775 
¢d_pcm_hw_∑øms_gë_øã_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

776 
¢d_pcm_hw_∑øms_ã°_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

777 
¢d_pcm_hw_∑øms_£t_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

778 
¢d_pcm_hw_∑øms_£t_øã_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

779 
¢d_pcm_hw_∑øms_£t_øã_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

780 
¢d_pcm_hw_∑øms_£t_øã_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

781 
¢d_pcm_hw_∑øms_£t_øã_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

782 
¢d_pcm_hw_∑øms_£t_øã_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

783 
¢d_pcm_hw_∑øms_£t_øã_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

784 
¢d_pcm_hw_∑øms_£t_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

785 
¢d_pcm_hw_∑øms_gë_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

786 
¢d_pcm_hw_∑øms_£t_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

787 
¢d_pcm_hw_∑øms_gë_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

788 
¢d_pcm_hw_∑øms_£t_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

789 
¢d_pcm_hw_∑øms_gë_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

791 
¢d_pcm_hw_∑øms_gë_≥riod_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

792 
¢d_pcm_hw_∑øms_gë_≥riod_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

793 
¢d_pcm_hw_∑øms_gë_≥riod_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

794 
¢d_pcm_hw_∑øms_ã°_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

795 
¢d_pcm_hw_∑øms_£t_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

796 
¢d_pcm_hw_∑øms_£t_≥riod_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

797 
¢d_pcm_hw_∑øms_£t_≥riod_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

798 
¢d_pcm_hw_∑øms_£t_≥riod_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

799 
¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

800 
¢d_pcm_hw_∑øms_£t_≥riod_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

801 
¢d_pcm_hw_∑øms_£t_≥riod_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

803 
¢d_pcm_hw_∑øms_gë_≥riod_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

804 
¢d_pcm_hw_∑øms_gë_≥riod_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

805 
¢d_pcm_hw_∑øms_gë_≥riod_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

806 
¢d_pcm_hw_∑øms_ã°_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

807 
¢d_pcm_hw_∑øms_£t_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

808 
¢d_pcm_hw_∑øms_£t_≥riod_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

809 
¢d_pcm_hw_∑øms_£t_≥riod_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

810 
¢d_pcm_hw_∑øms_£t_≥riod_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, *
mödú
, snd_pcm_u‰ames_à*
max
, *
maxdú
);

811 
¢d_pcm_hw_∑øms_£t_≥riod_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

812 
¢d_pcm_hw_∑øms_£t_≥riod_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

813 
¢d_pcm_hw_∑øms_£t_≥riod_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

814 
¢d_pcm_hw_∑øms_£t_≥riod_size_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

816 
¢d_pcm_hw_∑øms_gë_≥riods
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

817 
¢d_pcm_hw_∑øms_gë_≥riods_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

818 
¢d_pcm_hw_∑øms_gë_≥riods_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

819 
¢d_pcm_hw_∑øms_ã°_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

820 
¢d_pcm_hw_∑øms_£t_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

821 
¢d_pcm_hw_∑øms_£t_≥riods_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

822 
¢d_pcm_hw_∑øms_£t_≥riods_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

823 
¢d_pcm_hw_∑øms_£t_≥riods_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

824 
¢d_pcm_hw_∑øms_£t_≥riods_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

825 
¢d_pcm_hw_∑øms_£t_≥riods_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

826 
¢d_pcm_hw_∑øms_£t_≥riods_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

827 
¢d_pcm_hw_∑øms_£t_≥riods_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

829 
¢d_pcm_hw_∑øms_gë_buf„r_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

830 
¢d_pcm_hw_∑øms_gë_buf„r_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

831 
¢d_pcm_hw_∑øms_gë_buf„r_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

832 
¢d_pcm_hw_∑øms_ã°_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

833 
¢d_pcm_hw_∑øms_£t_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

834 
¢d_pcm_hw_∑øms_£t_buf„r_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

835 
¢d_pcm_hw_∑øms_£t_buf„r_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

836 
¢d_pcm_hw_∑øms_£t_buf„r_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

837 
¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

838 
¢d_pcm_hw_∑øms_£t_buf„r_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

839 
¢d_pcm_hw_∑øms_£t_buf„r_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

841 
¢d_pcm_hw_∑øms_gë_buf„r_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

842 
¢d_pcm_hw_∑øms_gë_buf„r_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

843 
¢d_pcm_hw_∑øms_gë_buf„r_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

844 
¢d_pcm_hw_∑øms_ã°_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

845 
¢d_pcm_hw_∑øms_£t_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

846 
¢d_pcm_hw_∑øms_£t_buf„r_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

847 
¢d_pcm_hw_∑øms_£t_buf„r_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

848 
¢d_pcm_hw_∑øms_£t_buf„r_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, snd_pcm_u‰ames_à*
max
);

849 
¢d_pcm_hw_∑øms_£t_buf„r_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

850 
¢d_pcm_hw_∑øms_£t_buf„r_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

851 
¢d_pcm_hw_∑øms_£t_buf„r_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

855 
¢d_pcm_hw_∑øms_gë_mö_Æign
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

866 
size_t
 
¢d_pcm_sw_∑øms_sizeof
();

871 
	#¢d_pcm_sw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_sw_∑øms
)

	)

872 
¢d_pcm_sw_∑øms_mÆloc
(
¢d_pcm_sw_∑øms_t
 **
±r
);

873 
¢d_pcm_sw_∑øms_‰ì
(
¢d_pcm_sw_∑øms_t
 *
obj
);

874 
¢d_pcm_sw_∑øms_c›y
(
¢d_pcm_sw_∑øms_t
 *
d°
, c⁄° snd_pcm_sw_∑øms_à*
§c
);

875 
¢d_pcm_sw_∑øms_gë_bound¨y
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

877 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

879 
¢d_pcm_sw_∑øms_£t_t°amp_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 
vÆ
);

880 
¢d_pcm_sw_∑øms_gë_t°amp_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 *
vÆ
);

881 
¢d_pcm_sw_∑øms_£t_t°amp_ty≥
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_ty≥_t
 
vÆ
);

882 
¢d_pcm_sw_∑øms_gë_t°amp_ty≥
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_ty≥_t
 *
vÆ
);

883 
¢d_pcm_sw_∑øms_£t_avaû_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

884 
¢d_pcm_sw_∑øms_gë_avaû_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

885 
¢d_pcm_sw_∑øms_£t_≥riod_evít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
);

886 
¢d_pcm_sw_∑øms_gë_≥riod_evít
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
);

887 
¢d_pcm_sw_∑øms_£t_°¨t_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

888 
¢d_pcm_sw_∑øms_gë_°¨t_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑ømsm
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

889 
¢d_pcm_sw_∑øms_£t_°›_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

890 
¢d_pcm_sw_∑øms_gë_°›_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

891 
¢d_pcm_sw_∑øms_£t_sûí˚_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

892 
¢d_pcm_sw_∑øms_gë_sûí˚_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

893 
¢d_pcm_sw_∑øms_£t_sûí˚_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

894 
¢d_pcm_sw_∑øms_gë_sûí˚_size
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

901 #i‚de‡
ALSA_LIBRARY_BUILD


902 #i‡
deföed
(
ALSA_PCM_OLD_HW_PARAMS_API
Ë|| deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

903 
	~"pcm_ﬁd.h
"

914 
size_t
 
¢d_pcm_ac˚ss_mask_sizeof
();

919 
	#¢d_pcm_ac˚ss_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_ac˚ss_mask
)

	)

920 
¢d_pcm_ac˚ss_mask_mÆloc
(
¢d_pcm_ac˚ss_mask_t
 **
±r
);

921 
¢d_pcm_ac˚ss_mask_‰ì
(
¢d_pcm_ac˚ss_mask_t
 *
obj
);

922 
¢d_pcm_ac˚ss_mask_c›y
(
¢d_pcm_ac˚ss_mask_t
 *
d°
, c⁄° snd_pcm_ac˚ss_mask_à*
§c
);

923 
¢d_pcm_ac˚ss_mask_n⁄e
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

924 
¢d_pcm_ac˚ss_mask_™y
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

925 
¢d_pcm_ac˚ss_mask_ã°
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

926 
¢d_pcm_ac˚ss_mask_em±y
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

927 
¢d_pcm_ac˚ss_mask_£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

928 
¢d_pcm_ac˚ss_mask_ª£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

939 
size_t
 
¢d_pcm_f‹m©_mask_sizeof
();

944 
	#¢d_pcm_f‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_f‹m©_mask
)

	)

945 
¢d_pcm_f‹m©_mask_mÆloc
(
¢d_pcm_f‹m©_mask_t
 **
±r
);

946 
¢d_pcm_f‹m©_mask_‰ì
(
¢d_pcm_f‹m©_mask_t
 *
obj
);

947 
¢d_pcm_f‹m©_mask_c›y
(
¢d_pcm_f‹m©_mask_t
 *
d°
, c⁄° snd_pcm_f‹m©_mask_à*
§c
);

948 
¢d_pcm_f‹m©_mask_n⁄e
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

949 
¢d_pcm_f‹m©_mask_™y
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

950 
¢d_pcm_f‹m©_mask_ã°
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

951 
¢d_pcm_f‹m©_mask_em±y
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
);

952 
¢d_pcm_f‹m©_mask_£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

953 
¢d_pcm_f‹m©_mask_ª£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

964 
size_t
 
¢d_pcm_subf‹m©_mask_sizeof
();

969 
	#¢d_pcm_subf‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_subf‹m©_mask
)

	)

970 
¢d_pcm_subf‹m©_mask_mÆloc
(
¢d_pcm_subf‹m©_mask_t
 **
±r
);

971 
¢d_pcm_subf‹m©_mask_‰ì
(
¢d_pcm_subf‹m©_mask_t
 *
obj
);

972 
¢d_pcm_subf‹m©_mask_c›y
(
¢d_pcm_subf‹m©_mask_t
 *
d°
, c⁄° snd_pcm_subf‹m©_mask_à*
§c
);

973 
¢d_pcm_subf‹m©_mask_n⁄e
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

974 
¢d_pcm_subf‹m©_mask_™y
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

975 
¢d_pcm_subf‹m©_mask_ã°
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

976 
¢d_pcm_subf‹m©_mask_em±y
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

977 
¢d_pcm_subf‹m©_mask_£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

978 
¢d_pcm_subf‹m©_mask_ª£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

989 
size_t
 
¢d_pcm_°©us_sizeof
();

994 
	#¢d_pcm_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_°©us
)

	)

995 
¢d_pcm_°©us_mÆloc
(
¢d_pcm_°©us_t
 **
±r
);

996 
¢d_pcm_°©us_‰ì
(
¢d_pcm_°©us_t
 *
obj
);

997 
¢d_pcm_°©us_c›y
(
¢d_pcm_°©us_t
 *
d°
, c⁄° snd_pcm_°©us_à*
§c
);

998 
¢d_pcm_°©e_t
 
¢d_pcm_°©us_gë_°©e
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

999 
¢d_pcm_°©us_gë_åiggî_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

1000 
¢d_pcm_°©us_gë_åiggî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1001 
¢d_pcm_°©us_gë_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

1002 
¢d_pcm_°©us_gë_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1003 
¢d_pcm_°©us_gë_audio_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1004 
¢d_pcm_°©us_gë_drivî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

1005 
¢d_pcm_°©us_gë_audio_ht°amp_ªp‹t
(c⁄° 
¢d_pcm_°©us_t
 *
obj
,

1006 
¢d_pcm_audio_t°amp_ªp‹t_t
 *
audio_t°amp_ªp‹t
);

1007 
¢d_pcm_°©us_£t_audio_ht°amp_c⁄fig
(
¢d_pcm_°©us_t
 *
obj
,

1008 
¢d_pcm_audio_t°amp_c⁄fig_t
 *
audio_t°amp_c⁄fig
);

1010 
ölöe
 
¢d_pcm_∑ck_audio_t°amp_c⁄fig
(*
d©a
,

1011 
¢d_pcm_audio_t°amp_c⁄fig_t
 *
c⁄fig
)

1013 *
d©a
 = 
c⁄fig
->
ªp‹t_dñay
;

1014 *
d©a
 <<= 4;

1015 *
d©a
 |
c⁄fig
->
ty≥_ªque°ed
;

1018 
ölöe
 
¢d_pcm_u≈ack_audio_t°amp_ªp‹t
(
d©a
, 
accuøcy
,

1019 
¢d_pcm_audio_t°amp_ªp‹t_t
 *
ªp‹t
)

1021 
d©a
 >>= 16;

1022 
ªp‹t
->
vÆid
 = 
d©a
 & 1;

1023 
ªp‹t
->
a˘uÆ_ty≥
 = (
d©a
 >> 1) & 0xF;

1024 
ªp‹t
->
accuøcy_ªp‹t
 = (
d©a
 >> 5) & 1;

1025 
ªp‹t
->
accuøcy
 =áccuracy;

1028 
¢d_pcm_s‰ames_t
 
¢d_pcm_°©us_gë_dñay
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1029 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1030 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû_max
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1031 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_ovîønge
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

1042 c⁄° *
¢d_pcm_ty≥_«me
(
¢d_pcm_ty≥_t
 
ty≥
);

1043 c⁄° *
¢d_pcm_°ªam_«me
(c⁄° 
¢d_pcm_°ªam_t
 
°ªam
);

1044 c⁄° *
¢d_pcm_ac˚ss_«me
(c⁄° 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

1045 c⁄° *
¢d_pcm_f‹m©_«me
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

1046 c⁄° *
¢d_pcm_f‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

1047 c⁄° *
¢d_pcm_subf‹m©_«me
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

1048 c⁄° *
¢d_pcm_subf‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

1049 
¢d_pcm_f‹m©_t
 
¢d_pcm_f‹m©_vÆue
(c⁄° * 
«me
);

1050 c⁄° *
¢d_pcm_t°amp_mode_«me
(c⁄° 
¢d_pcm_t°amp_t
 
mode
);

1051 c⁄° *
¢d_pcm_°©e_«me
(c⁄° 
¢d_pcm_°©e_t
 
°©e
);

1062 
¢d_pcm_dump
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1063 
¢d_pcm_dump_hw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1064 
¢d_pcm_dump_sw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1065 
¢d_pcm_dump_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1066 
¢d_pcm_hw_∑øms_dump
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1067 
¢d_pcm_sw_∑øms_dump
(
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1068 
¢d_pcm_°©us_dump
(
¢d_pcm_°©us_t
 *
°©us
, 
¢d_ouçut_t
 *
out
);

1079 
¢d_pcm_mm≠_begö
(
¢d_pcm_t
 *
pcm
,

1080 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 **
¨ós
,

1081 
¢d_pcm_u‰ames_t
 *
off£t
,

1082 
¢d_pcm_u‰ames_t
 *
‰ames
);

1083 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_commô
(
¢d_pcm_t
 *
pcm
,

1084 
¢d_pcm_u‰ames_t
 
off£t
,

1085 
¢d_pcm_u‰ames_t
 
‰ames
);

1086 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1087 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1088 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1089 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1100 
¢d_pcm_f‹m©_sig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1101 
¢d_pcm_f‹m©_unsig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1102 
¢d_pcm_f‹m©_löór
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1103 
¢d_pcm_f‹m©_Êﬂt
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1104 
¢d_pcm_f‹m©_lôée_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1105 
¢d_pcm_f‹m©_big_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1106 
¢d_pcm_f‹m©_˝u_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1107 
¢d_pcm_f‹m©_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1108 
¢d_pcm_f‹m©_physiˇl_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1109 
¢d_pcm_f‹m©_t
 
¢d_pcm_buûd_löór_f‹m©
(
width
, 
pwidth
, 
unsignd
, 
big_ídün
);

1110 
ssize_t
 
¢d_pcm_f‹m©_size
(
¢d_pcm_f‹m©_t
 
f‹m©
, 
size_t
 
ßm∂es
);

1111 
u_öt8_t
 
¢d_pcm_f‹m©_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1112 
u_öt16_t
 
¢d_pcm_f‹m©_sûí˚_16
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1113 
u_öt32_t
 
¢d_pcm_f‹m©_sûí˚_32
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1114 
u_öt64_t
 
¢d_pcm_f‹m©_sûí˚_64
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1115 
¢d_pcm_f‹m©_£t_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
, *
buf
, 
ßm∂es
);

1117 
¢d_pcm_s‰ames_t
 
¢d_pcm_byãs_to_‰ames
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1118 
ssize_t
 
¢d_pcm_‰ames_to_byãs
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 
‰ames
);

1119 
¢d_pcm_byãs_to_ßm∂es
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1120 
ssize_t
 
¢d_pcm_ßm∂es_to_byãs
(
¢d_pcm_t
 *
pcm
, 
ßm∂es
);

1122 
¢d_pcm_¨ó_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1123 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1124 
¢d_pcm_¨ós_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1125 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1126 
¢d_pcm_¨ó_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1127 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√l
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1128 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1129 
¢d_pcm_¨ós_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1130 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√ls
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1131 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1143 
	e_¢d_pcm_hook_ty≥
 {

1144 
SND_PCM_HOOK_TYPE_HW_PARAMS
 = 0,

1145 
SND_PCM_HOOK_TYPE_HW_FREE
,

1146 
SND_PCM_HOOK_TYPE_CLOSE
,

1147 
SND_PCM_HOOK_TYPE_LAST
 = 
SND_PCM_HOOK_TYPE_CLOSE


1148 } 
	t¢d_pcm_hook_ty≥_t
;

1151 
_¢d_pcm_hook
 
	t¢d_pcm_hook_t
;

1153 (*
¢d_pcm_hook_func_t
)(
	t¢d_pcm_hook_t
 *
	thook
);

1154 
¢d_pcm_t
 *
¢d_pcm_hook_gë_pcm
(
¢d_pcm_hook_t
 *
hook
);

1155 *
¢d_pcm_hook_gë_¥iv©e
(
¢d_pcm_hook_t
 *
hook
);

1156 
¢d_pcm_hook_£t_¥iv©e
(
¢d_pcm_hook_t
 *
hook
, *
¥iv©e_d©a
);

1157 
¢d_pcm_hook_add
(
¢d_pcm_hook_t
 **
hookp
, 
¢d_pcm_t
 *
pcm
,

1158 
¢d_pcm_hook_ty≥_t
 
ty≥
,

1159 
¢d_pcm_hook_func_t
 
func
, *
¥iv©e_d©a
);

1160 
¢d_pcm_hook_ªmove
(
¢d_pcm_hook_t
 *
hook
);

1172 
	s_¢d_pcm_sc›e_›s
 {

1176 (*
íabÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1180 (*
dißbÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1184 (*
°¨t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1188 (*
°›
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1192 (*
upd©e
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1196 (*
ª£t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1200 (*
˛o£
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1201 } 
	t¢d_pcm_sc›e_›s_t
;

1203 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bufsize
(
¢d_pcm_t
 *
pcm
);

1204 
¢d_pcm_mëî_gë_ch™√ls
(
¢d_pcm_t
 *
pcm
);

1205 
¢d_pcm_mëî_gë_øã
(
¢d_pcm_t
 *
pcm
);

1206 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_now
(
¢d_pcm_t
 *
pcm
);

1207 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bound¨y
(
¢d_pcm_t
 *
pcm
);

1208 
¢d_pcm_mëî_add_sc›e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sc›e_t
 *
sc›e
);

1209 
¢d_pcm_sc›e_t
 *
¢d_pcm_mëî_£¨ch_sc›e
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
);

1210 
¢d_pcm_sc›e_mÆloc
(
¢d_pcm_sc›e_t
 **
±r
);

1211 
¢d_pcm_sc›e_£t_›s
(
¢d_pcm_sc›e_t
 *
sc›e
,

1212 c⁄° 
¢d_pcm_sc›e_›s_t
 *
vÆ
);

1213 
¢d_pcm_sc›e_£t_«me
(
¢d_pcm_sc›e_t
 *
sc›e
, c⁄° *
vÆ
);

1214 c⁄° *
¢d_pcm_sc›e_gë_«me
(
¢d_pcm_sc›e_t
 *
sc›e
);

1215 *
¢d_pcm_sc›e_gë_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
);

1216 
¢d_pcm_sc›e_£t_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
, *
vÆ
);

1217 
¢d_pcm_sc›e_s16_›í
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
,

1218 
¢d_pcm_sc›e_t
 **
sc›ï
);

1219 
öt16_t
 *
¢d_pcm_sc›e_s16_gë_ch™√l_buf„r
(
¢d_pcm_sc›e_t
 *
sc›e
,

1220 
ch™√l
);

1232 
	e_¢d_•cm_œãncy
 {

1235 
SND_SPCM_LATENCY_STANDARD
 = 0,

1238 
SND_SPCM_LATENCY_MEDIUM
,

1241 
SND_SPCM_LATENCY_REALTIME


1242 } 
	t¢d_•cm_œãncy_t
;

1245 
	e_¢d_•cm_xrun_ty≥
 {

1247 
SND_SPCM_XRUN_IGNORE
 = 0,

1249 
SND_SPCM_XRUN_STOP


1250 } 
	t¢d_•cm_xrun_ty≥_t
;

1253 
	e_¢d_•cm_du∂ex_ty≥
 {

1255 
SND_SPCM_DUPLEX_LIBERAL
 = 0,

1257 
SND_SPCM_DUPLEX_PEDANTIC


1258 } 
	t¢d_•cm_du∂ex_ty≥_t
;

1260 
¢d_•cm_öô
(
¢d_pcm_t
 *
pcm
,

1261 
øã
,

1262 
ch™√ls
,

1263 
¢d_pcm_f‹m©_t
 
f‹m©
,

1264 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1265 
¢d_•cm_œãncy_t
 
œãncy
,

1266 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1267 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
);

1269 
¢d_•cm_öô_du∂ex
(
¢d_pcm_t
 *
∂ayback_pcm
,

1270 
¢d_pcm_t
 *
ˇ±uª_pcm
,

1271 
øã
,

1272 
ch™√ls
,

1273 
¢d_pcm_f‹m©_t
 
f‹m©
,

1274 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1275 
¢d_•cm_œãncy_t
 
œãncy
,

1276 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1277 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
,

1278 
¢d_•cm_du∂ex_ty≥_t
 
du∂ex_ty≥
);

1280 
¢d_•cm_öô_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

1281 *
øã
,

1282 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

1283 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

1295 c⁄° *
¢d_pcm_°¨t_mode_«me
(
¢d_pcm_°¨t_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1296 c⁄° *
¢d_pcm_xrun_mode_«me
(
¢d_pcm_xrun_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1297 
¢d_pcm_sw_∑øms_£t_°¨t_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_°¨t_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1298 
¢d_pcm_°¨t_t
 
¢d_pcm_sw_∑øms_gë_°¨t_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1299 
¢d_pcm_sw_∑øms_£t_xrun_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_xrun_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1300 
¢d_pcm_xrun_t
 
¢d_pcm_sw_∑øms_gë_xrun_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1301 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

1302 
¢d_pcm_sw_∑øms_£t_x„r_Æign
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1303 
¢d_pcm_sw_∑øms_gë_x„r_Æign
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1304 
¢d_pcm_sw_∑øms_£t_¶ìp_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1305 
¢d_pcm_sw_∑øms_gë_¶ìp_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1307 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

1308 
¢d_pcm_hw_∑øms_gë_tick_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1309 
¢d_pcm_hw_∑øms_gë_tick_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1310 
¢d_pcm_hw_∑øms_gë_tick_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1311 
¢d_pcm_hw_∑øms_ã°_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1312 
¢d_pcm_hw_∑øms_£t_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1313 
¢d_pcm_hw_∑øms_£t_tick_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1314 
¢d_pcm_hw_∑øms_£t_tick_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1315 
¢d_pcm_hw_∑øms_£t_tick_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
Ë
__©åibuã__
((
dïªˇãd
));

1316 
¢d_pcm_hw_∑øms_£t_tick_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1317 
¢d_pcm_hw_∑øms_£t_tick_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1318 
¢d_pcm_hw_∑øms_£t_tick_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1323 #ifde‡
__˝lu•lus


	@/usr/include/alsa/rawmidi.h

28 #i‚de‡
__ALSA_RAWMIDI_H


29 
	#__ALSA_RAWMIDI_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_RAWMIDI_DLSYM_VERSION
 
_dlsym_øwmidi_001


	)

45 
_¢d_øwmidi_öfo
 
	t¢d_øwmidi_öfo_t
;

47 
_¢d_øwmidi_∑øms
 
	t¢d_øwmidi_∑øms_t
;

49 
_¢d_øwmidi_°©us
 
	t¢d_øwmidi_°©us_t
;

52 
	e_¢d_øwmidi_°ªam
 {

54 
SND_RAWMIDI_STREAM_OUTPUT
 = 0,

56 
SND_RAWMIDI_STREAM_INPUT
,

57 
SND_RAWMIDI_STREAM_LAST
 = 
SND_RAWMIDI_STREAM_INPUT


58 } 
	t¢d_øwmidi_°ªam_t
;

61 
	#SND_RAWMIDI_APPEND
 0x0001

	)

63 
	#SND_RAWMIDI_NONBLOCK
 0x0002

	)

65 
	#SND_RAWMIDI_SYNC
 0x0004

	)

68 
_¢d_øwmidi
 
	t¢d_øwmidi_t
;

71 
	e_¢d_øwmidi_ty≥
 {

73 
SND_RAWMIDI_TYPE_HW
,

75 
SND_RAWMIDI_TYPE_SHM
,

77 
SND_RAWMIDI_TYPE_INET
,

79 
SND_RAWMIDI_TYPE_VIRTUAL


80 } 
	t¢d_øwmidi_ty≥_t
;

82 
¢d_øwmidi_›í
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

83 c⁄° *
«me
, 
mode
);

84 
¢d_øwmidi_›í_lc⁄f
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

85 c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

86 
¢d_øwmidi_˛o£
(
¢d_øwmidi_t
 *
rmidi
);

87 
¢d_øwmidi_pﬁl_des¸ùt‹s_cou¡
(
¢d_øwmidi_t
 *
rmidi
);

88 
¢d_øwmidi_pﬁl_des¸ùt‹s
(
¢d_øwmidi_t
 *
rmidi
, 
pﬁlfd
 *
pfds
, 
•a˚
);

89 
¢d_øwmidi_pﬁl_des¸ùt‹s_ªvíts
(
¢d_øwmidi_t
 *
øwmidi
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvít
);

90 
¢d_øwmidi_n⁄block
(
¢d_øwmidi_t
 *
rmidi
, 
n⁄block
);

91 
size_t
 
¢d_øwmidi_öfo_sizeof
();

96 
	#¢d_øwmidi_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_öfo
)

	)

97 
¢d_øwmidi_öfo_mÆloc
(
¢d_øwmidi_öfo_t
 **
±r
);

98 
¢d_øwmidi_öfo_‰ì
(
¢d_øwmidi_öfo_t
 *
obj
);

99 
¢d_øwmidi_öfo_c›y
(
¢d_øwmidi_öfo_t
 *
d°
, c⁄° snd_øwmidi_öfo_à*
§c
);

100 
¢d_øwmidi_öfo_gë_devi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

101 
¢d_øwmidi_öfo_gë_subdevi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

102 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_öfo_gë_°ªam
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

103 
¢d_øwmidi_öfo_gë_ˇrd
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

104 
¢d_øwmidi_öfo_gë_Êags
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

105 c⁄° *
¢d_øwmidi_öfo_gë_id
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

106 c⁄° *
¢d_øwmidi_öfo_gë_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

107 c⁄° *
¢d_øwmidi_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

108 
¢d_øwmidi_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

109 
¢d_øwmidi_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

110 
¢d_øwmidi_öfo_£t_devi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

111 
¢d_øwmidi_öfo_£t_subdevi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

112 
¢d_øwmidi_öfo_£t_°ªam
(
¢d_øwmidi_öfo_t
 *
obj
, 
¢d_øwmidi_°ªam_t
 
vÆ
);

113 
¢d_øwmidi_öfo
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

114 
size_t
 
¢d_øwmidi_∑øms_sizeof
();

119 
	#¢d_øwmidi_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_∑øms
)

	)

120 
¢d_øwmidi_∑øms_mÆloc
(
¢d_øwmidi_∑øms_t
 **
±r
);

121 
¢d_øwmidi_∑øms_‰ì
(
¢d_øwmidi_∑øms_t
 *
obj
);

122 
¢d_øwmidi_∑øms_c›y
(
¢d_øwmidi_∑øms_t
 *
d°
, c⁄° snd_øwmidi_∑øms_à*
§c
);

123 
¢d_øwmidi_∑øms_£t_buf„r_size
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

124 
size_t
 
¢d_øwmidi_∑øms_gë_buf„r_size
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

125 
¢d_øwmidi_∑øms_£t_avaû_mö
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

126 
size_t
 
¢d_øwmidi_∑øms_gë_avaû_mö
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

127 
¢d_øwmidi_∑øms_£t_no_a˘ive_£nsög
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
vÆ
);

128 
¢d_øwmidi_∑øms_gë_no_a˘ive_£nsög
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

129 
¢d_øwmidi_∑øms
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 * 
∑øms
);

130 
¢d_øwmidi_∑øms_cuºít
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
);

131 
size_t
 
¢d_øwmidi_°©us_sizeof
();

136 
	#¢d_øwmidi_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_°©us
)

	)

137 
¢d_øwmidi_°©us_mÆloc
(
¢d_øwmidi_°©us_t
 **
±r
);

138 
¢d_øwmidi_°©us_‰ì
(
¢d_øwmidi_°©us_t
 *
obj
);

139 
¢d_øwmidi_°©us_c›y
(
¢d_øwmidi_°©us_t
 *
d°
, c⁄° snd_øwmidi_°©us_à*
§c
);

140 
¢d_øwmidi_°©us_gë_t°amp
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

141 
size_t
 
¢d_øwmidi_°©us_gë_avaû
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

142 
size_t
 
¢d_øwmidi_°©us_gë_xruns
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

143 
¢d_øwmidi_°©us
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_°©us_t
 * 
°©us
);

144 
¢d_øwmidi_døö
(
¢d_øwmidi_t
 *
rmidi
);

145 
¢d_øwmidi_dr›
(
¢d_øwmidi_t
 *
rmidi
);

146 
ssize_t
 
¢d_øwmidi_wrôe
(
¢d_øwmidi_t
 *
rmidi
, c⁄° *
buf„r
, 
size_t
 
size
);

147 
ssize_t
 
¢d_øwmidi_ªad
(
¢d_øwmidi_t
 *
rmidi
, *
buf„r
, 
size_t
 
size
);

148 c⁄° *
¢d_øwmidi_«me
(
¢d_øwmidi_t
 *
rmidi
);

149 
¢d_øwmidi_ty≥_t
 
¢d_øwmidi_ty≥
(
¢d_øwmidi_t
 *
rmidi
);

150 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_°ªam
(
¢d_øwmidi_t
 *
øwmidi
);

154 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq.h

29 #i‚de‡
__ALSA_SEQ_H


30 
	#__ALSA_SEQ_H


	)

32 #ifde‡
__˝lu•lus


44 
	#SND_SEQ_DLSYM_VERSION
 
_dlsym_£q_001


	)

47 
_¢d_£q
 
	t¢d_£q_t
;

52 
	#SND_SEQ_OPEN_OUTPUT
 1

	)

53 
	#SND_SEQ_OPEN_INPUT
 2

	)

54 
	#SND_SEQ_OPEN_DUPLEX
 (
SND_SEQ_OPEN_OUTPUT
|
SND_SEQ_OPEN_INPUT
Ë

	)

59 
	#SND_SEQ_NONBLOCK
 0x0001

	)

62 
	e_¢d_£q_ty≥
 {

63 
SND_SEQ_TYPE_HW
,

64 
SND_SEQ_TYPE_SHM
,

65 
SND_SEQ_TYPE_INET


66 } 
	t¢d_£q_ty≥_t
;

69 
	#SND_SEQ_ADDRESS_UNKNOWN
 253

	)

70 
	#SND_SEQ_ADDRESS_SUBSCRIBERS
 254

	)

71 
	#SND_SEQ_ADDRESS_BROADCAST
 255

	)

74 
	#SND_SEQ_CLIENT_SYSTEM
 0

	)

78 
¢d_£q_›í
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
);

79 
¢d_£q_›í_lc⁄f
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

80 c⁄° *
¢d_£q_«me
(
¢d_£q_t
 *
£q
);

81 
¢d_£q_ty≥_t
 
¢d_£q_ty≥
(
¢d_£q_t
 *
£q
);

82 
¢d_£q_˛o£
(
¢d_£q_t
 *
h™dÀ
);

83 
¢d_£q_pﬁl_des¸ùt‹s_cou¡
(
¢d_£q_t
 *
h™dÀ
, 
evíts
);

84 
¢d_£q_pﬁl_des¸ùt‹s
(
¢d_£q_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
, 
evíts
);

85 
¢d_£q_pﬁl_des¸ùt‹s_ªvíts
(
¢d_£q_t
 *
£q
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

86 
¢d_£q_n⁄block
(
¢d_£q_t
 *
h™dÀ
, 
n⁄block
);

87 
¢d_£q_˛õ¡_id
(
¢d_£q_t
 *
h™dÀ
);

89 
size_t
 
¢d_£q_gë_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

90 
size_t
 
¢d_£q_gë_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

91 
¢d_£q_£t_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

92 
¢d_£q_£t_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

95 
_¢d_£q_sy°em_öfo
 
	t¢d_£q_sy°em_öfo_t
;

97 
size_t
 
¢d_£q_sy°em_öfo_sizeof
();

99 
	#¢d_£q_sy°em_öfo_Æloˇ
(
±r
) \

100 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_sy°em_öfo
)

	)

101 
¢d_£q_sy°em_öfo_mÆloc
(
¢d_£q_sy°em_öfo_t
 **
±r
);

102 
¢d_£q_sy°em_öfo_‰ì
(
¢d_£q_sy°em_öfo_t
 *
±r
);

103 
¢d_£q_sy°em_öfo_c›y
(
¢d_£q_sy°em_öfo_t
 *
d°
, c⁄° snd_£q_sy°em_öfo_à*
§c
);

105 
¢d_£q_sy°em_öfo_gë_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

106 
¢d_£q_sy°em_öfo_gë_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

107 
¢d_£q_sy°em_öfo_gë_p‹ts
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

108 
¢d_£q_sy°em_öfo_gë_ch™√ls
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

109 
¢d_£q_sy°em_öfo_gë_cur_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

110 
¢d_£q_sy°em_öfo_gë_cur_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

112 
¢d_£q_sy°em_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_sy°em_öfo_t
 *
öfo
);

125 
_¢d_£q_˛õ¡_öfo
 
	t¢d_£q_˛õ¡_öfo_t
;

128 
	e¢d_£q_˛õ¡_ty≥
 {

129 
SND_SEQ_USER_CLIENT
 = 1,

130 
SND_SEQ_KERNEL_CLIENT
 = 2

131 } 
	t¢d_£q_˛õ¡_ty≥_t
;

133 
size_t
 
¢d_£q_˛õ¡_öfo_sizeof
();

135 
	#¢d_£q_˛õ¡_öfo_Æloˇ
(
±r
) \

136 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_öfo
)

	)

137 
¢d_£q_˛õ¡_öfo_mÆloc
(
¢d_£q_˛õ¡_öfo_t
 **
±r
);

138 
¢d_£q_˛õ¡_öfo_‰ì
(
¢d_£q_˛õ¡_öfo_t
 *
±r
);

139 
¢d_£q_˛õ¡_öfo_c›y
(
¢d_£q_˛õ¡_öfo_t
 *
d°
, c⁄° snd_£q_˛õ¡_öfo_à*
§c
);

141 
¢d_£q_˛õ¡_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

142 
¢d_£q_˛õ¡_ty≥_t
 
¢d_£q_˛õ¡_öfo_gë_ty≥
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

143 c⁄° *
¢d_£q_˛õ¡_öfo_gë_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

144 
¢d_£q_˛õ¡_öfo_gë_brﬂdˇ°_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

145 
¢d_£q_˛õ¡_öfo_gë_îr‹_boun˚
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

146 
¢d_£q_˛õ¡_öfo_gë_ˇrd
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

147 
¢d_£q_˛õ¡_öfo_gë_pid
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

148 c⁄° *
¢d_£q_˛õ¡_öfo_gë_evít_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

149 
¢d_£q_˛õ¡_öfo_gë_num_p‹ts
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

150 
¢d_£q_˛õ¡_öfo_gë_evít_lo°
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

152 
¢d_£q_˛õ¡_öfo_£t_˛õ¡
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
˛õ¡
);

153 
¢d_£q_˛õ¡_öfo_£t_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, c⁄° *
«me
);

154 
¢d_£q_˛õ¡_öfo_£t_brﬂdˇ°_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

155 
¢d_£q_˛õ¡_öfo_£t_îr‹_boun˚
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

156 
¢d_£q_˛õ¡_öfo_£t_evít_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, *
fûãr
);

158 
¢d_£q_˛õ¡_öfo_evít_fûãr_˛ór
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

159 
¢d_£q_˛õ¡_öfo_evít_fûãr_add
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

160 
¢d_£q_˛õ¡_öfo_evít_fûãr_dñ
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

161 
¢d_£q_˛õ¡_öfo_evít_fûãr_check
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

163 
¢d_£q_gë_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

164 
¢d_£q_gë_™y_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

165 
¢d_£q_£t_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

166 
¢d_£q_quîy_√xt_˛õ¡
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

172 
_¢d_£q_˛õ¡_poﬁ
 
	t¢d_£q_˛õ¡_poﬁ_t
;

174 
size_t
 
¢d_£q_˛õ¡_poﬁ_sizeof
();

176 
	#¢d_£q_˛õ¡_poﬁ_Æloˇ
(
±r
) \

177 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_poﬁ
)

	)

178 
¢d_£q_˛õ¡_poﬁ_mÆloc
(
¢d_£q_˛õ¡_poﬁ_t
 **
±r
);

179 
¢d_£q_˛õ¡_poﬁ_‰ì
(
¢d_£q_˛õ¡_poﬁ_t
 *
±r
);

180 
¢d_£q_˛õ¡_poﬁ_c›y
(
¢d_£q_˛õ¡_poﬁ_t
 *
d°
, c⁄° snd_£q_˛õ¡_poﬁ_à*
§c
);

182 
¢d_£q_˛õ¡_poﬁ_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

183 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

184 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

185 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_room
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

186 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

187 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

188 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

189 
¢d_£q_˛õ¡_poﬁ_£t_öput_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

190 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_room
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

192 
¢d_£q_gë_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

193 
¢d_£q_£t_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

207 
_¢d_£q_p‹t_öfo
 
	t¢d_£q_p‹t_öfo_t
;

210 
	#SND_SEQ_PORT_SYSTEM_TIMER
 0

	)

211 
	#SND_SEQ_PORT_SYSTEM_ANNOUNCE
 1

	)

214 
	#SND_SEQ_PORT_CAP_READ
 (1<<0Ë

	)

215 
	#SND_SEQ_PORT_CAP_WRITE
 (1<<1Ë

	)

217 
	#SND_SEQ_PORT_CAP_SYNC_READ
 (1<<2Ë

	)

218 
	#SND_SEQ_PORT_CAP_SYNC_WRITE
 (1<<3Ë

	)

220 
	#SND_SEQ_PORT_CAP_DUPLEX
 (1<<4Ë

	)

222 
	#SND_SEQ_PORT_CAP_SUBS_READ
 (1<<5Ë

	)

223 
	#SND_SEQ_PORT_CAP_SUBS_WRITE
 (1<<6Ë

	)

224 
	#SND_SEQ_PORT_CAP_NO_EXPORT
 (1<<7Ë

	)

228 
	#SND_SEQ_PORT_TYPE_SPECIFIC
 (1<<0)

	)

230 
	#SND_SEQ_PORT_TYPE_MIDI_GENERIC
 (1<<1)

	)

232 
	#SND_SEQ_PORT_TYPE_MIDI_GM
 (1<<2)

	)

234 
	#SND_SEQ_PORT_TYPE_MIDI_GS
 (1<<3)

	)

236 
	#SND_SEQ_PORT_TYPE_MIDI_XG
 (1<<4)

	)

238 
	#SND_SEQ_PORT_TYPE_MIDI_MT32
 (1<<5)

	)

240 
	#SND_SEQ_PORT_TYPE_MIDI_GM2
 (1<<6)

	)

243 
	#SND_SEQ_PORT_TYPE_SYNTH
 (1<<10)

	)

246 
	#SND_SEQ_PORT_TYPE_DIRECT_SAMPLE
 (1<<11)

	)

249 
	#SND_SEQ_PORT_TYPE_SAMPLE
 (1<<12)

	)

251 
	#SND_SEQ_PORT_TYPE_HARDWARE
 (1<<16)

	)

253 
	#SND_SEQ_PORT_TYPE_SOFTWARE
 (1<<17)

	)

255 
	#SND_SEQ_PORT_TYPE_SYNTHESIZER
 (1<<18)

	)

258 
	#SND_SEQ_PORT_TYPE_PORT
 (1<<19)

	)

260 
	#SND_SEQ_PORT_TYPE_APPLICATION
 (1<<20)

	)

263 
size_t
 
¢d_£q_p‹t_öfo_sizeof
();

265 
	#¢d_£q_p‹t_öfo_Æloˇ
(
±r
) \

266 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_öfo
)

	)

267 
¢d_£q_p‹t_öfo_mÆloc
(
¢d_£q_p‹t_öfo_t
 **
±r
);

268 
¢d_£q_p‹t_öfo_‰ì
(
¢d_£q_p‹t_öfo_t
 *
±r
);

269 
¢d_£q_p‹t_öfo_c›y
(
¢d_£q_p‹t_öfo_t
 *
d°
, c⁄° snd_£q_p‹t_öfo_à*
§c
);

271 
¢d_£q_p‹t_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

272 
¢d_£q_p‹t_öfo_gë_p‹t
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

273 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_öfo_gë_addr
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

274 c⁄° *
¢d_£q_p‹t_öfo_gë_«me
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

275 
¢d_£q_p‹t_öfo_gë_ˇ∑bûôy
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

276 
¢d_£q_p‹t_öfo_gë_ty≥
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

277 
¢d_£q_p‹t_öfo_gë_midi_ch™√ls
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

278 
¢d_£q_p‹t_öfo_gë_midi_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

279 
¢d_£q_p‹t_öfo_gë_sy¡h_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

280 
¢d_£q_p‹t_öfo_gë_ªad_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

281 
¢d_£q_p‹t_öfo_gë_wrôe_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

282 
¢d_£q_p‹t_öfo_gë_p‹t_•ecifõd
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

283 
¢d_£q_p‹t_öfo_gë_time°ampög
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

284 
¢d_£q_p‹t_öfo_gë_time°amp_ªÆ
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

285 
¢d_£q_p‹t_öfo_gë_time°amp_queue
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

287 
¢d_£q_p‹t_öfo_£t_˛õ¡
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
˛õ¡
);

288 
¢d_£q_p‹t_öfo_£t_p‹t
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
p‹t
);

289 
¢d_£q_p‹t_öfo_£t_addr
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

290 
¢d_£q_p‹t_öfo_£t_«me
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° *
«me
);

291 
¢d_£q_p‹t_öfo_£t_ˇ∑bûôy
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ˇ∑bûôy
);

292 
¢d_£q_p‹t_öfo_£t_ty≥
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ty≥
);

293 
¢d_£q_p‹t_öfo_£t_midi_ch™√ls
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ch™√ls
);

294 
¢d_£q_p‹t_öfo_£t_midi_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

295 
¢d_£q_p‹t_öfo_£t_sy¡h_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

296 
¢d_£q_p‹t_öfo_£t_p‹t_•ecifõd
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
vÆ
);

297 
¢d_£q_p‹t_öfo_£t_time°ampög
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
íabÀ
);

298 
¢d_£q_p‹t_öfo_£t_time°amp_ªÆ
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ªÆtime
);

299 
¢d_£q_p‹t_öfo_£t_time°amp_queue
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
queue
);

301 
¢d_£q_¸óã_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

302 
¢d_£q_dñëe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
);

303 
¢d_£q_gë_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

304 
¢d_£q_gë_™y_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

305 
¢d_£q_£t_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

306 
¢d_£q_quîy_√xt_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

319 
_¢d_£q_p‹t_subs¸ibe
 
	t¢d_£q_p‹t_subs¸ibe_t
;

321 
size_t
 
¢d_£q_p‹t_subs¸ibe_sizeof
();

323 
	#¢d_£q_p‹t_subs¸ibe_Æloˇ
(
±r
) \

324 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_subs¸ibe
)

	)

325 
¢d_£q_p‹t_subs¸ibe_mÆloc
(
¢d_£q_p‹t_subs¸ibe_t
 **
±r
);

326 
¢d_£q_p‹t_subs¸ibe_‰ì
(
¢d_£q_p‹t_subs¸ibe_t
 *
±r
);

327 
¢d_£q_p‹t_subs¸ibe_c›y
(
¢d_£q_p‹t_subs¸ibe_t
 *
d°
, c⁄° snd_£q_p‹t_subs¸ibe_à*
§c
);

329 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_£ndî
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

330 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_de°
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

331 
¢d_£q_p‹t_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

332 
¢d_£q_p‹t_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

333 
¢d_£q_p‹t_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

334 
¢d_£q_p‹t_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

336 
¢d_£q_p‹t_subs¸ibe_£t_£ndî
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

337 
¢d_£q_p‹t_subs¸ibe_£t_de°
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

338 
¢d_£q_p‹t_subs¸ibe_£t_queue
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
q
);

339 
¢d_£q_p‹t_subs¸ibe_£t_ex˛usive
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

340 
¢d_£q_p‹t_subs¸ibe_£t_time_upd©e
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

341 
¢d_£q_p‹t_subs¸ibe_£t_time_ªÆ
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

343 
¢d_£q_gë_p‹t_subs¸ùti⁄
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

344 
¢d_£q_subs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

345 
¢d_£q_unsubs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

351 
_¢d_£q_quîy_subs¸ibe
 
	t¢d_£q_quîy_subs¸ibe_t
;

355 
SND_SEQ_QUERY_SUBS_READ
,

356 
SND_SEQ_QUERY_SUBS_WRITE


357 } 
	t¢d_£q_quîy_subs_ty≥_t
;

359 
size_t
 
¢d_£q_quîy_subs¸ibe_sizeof
();

361 
	#¢d_£q_quîy_subs¸ibe_Æloˇ
(
±r
) \

362 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_quîy_subs¸ibe
)

	)

363 
¢d_£q_quîy_subs¸ibe_mÆloc
(
¢d_£q_quîy_subs¸ibe_t
 **
±r
);

364 
¢d_£q_quîy_subs¸ibe_‰ì
(
¢d_£q_quîy_subs¸ibe_t
 *
±r
);

365 
¢d_£q_quîy_subs¸ibe_c›y
(
¢d_£q_quîy_subs¸ibe_t
 *
d°
, c⁄° snd_£q_quîy_subs¸ibe_à*
§c
);

367 
¢d_£q_quîy_subs¸ibe_gë_˛õ¡
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

368 
¢d_£q_quîy_subs¸ibe_gë_p‹t
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

369 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_roŸ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

370 
¢d_£q_quîy_subs_ty≥_t
 
¢d_£q_quîy_subs¸ibe_gë_ty≥
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

371 
¢d_£q_quîy_subs¸ibe_gë_ödex
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

372 
¢d_£q_quîy_subs¸ibe_gë_num_subs
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

373 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_addr
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

374 
¢d_£q_quîy_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

375 
¢d_£q_quîy_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

376 
¢d_£q_quîy_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

377 
¢d_£q_quîy_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

379 
¢d_£q_quîy_subs¸ibe_£t_˛õ¡
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
˛õ¡
);

380 
¢d_£q_quîy_subs¸ibe_£t_p‹t
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
p‹t
);

381 
¢d_£q_quîy_subs¸ibe_£t_roŸ
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

382 
¢d_£q_quîy_subs¸ibe_£t_ty≥
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
¢d_£q_quîy_subs_ty≥_t
 
ty≥
);

383 
¢d_£q_quîy_subs¸ibe_£t_ödex
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
_ödex
);

385 
¢d_£q_quîy_p‹t_subs¸ibîs
(
¢d_£q_t
 *
£q
, 
¢d_£q_quîy_subs¸ibe_t
 * 
subs
);

398 
_¢d_£q_queue_öfo
 
	t¢d_£q_queue_öfo_t
;

400 
_¢d_£q_queue_°©us
 
	t¢d_£q_queue_°©us_t
;

402 
_¢d_£q_queue_ãmpo
 
	t¢d_£q_queue_ãmpo_t
;

404 
_¢d_£q_queue_timî
 
	t¢d_£q_queue_timî_t
;

407 
	#SND_SEQ_QUEUE_DIRECT
 253

	)

409 
size_t
 
¢d_£q_queue_öfo_sizeof
();

411 
	#¢d_£q_queue_öfo_Æloˇ
(
±r
) \

412 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_öfo
)

	)

413 
¢d_£q_queue_öfo_mÆloc
(
¢d_£q_queue_öfo_t
 **
±r
);

414 
¢d_£q_queue_öfo_‰ì
(
¢d_£q_queue_öfo_t
 *
±r
);

415 
¢d_£q_queue_öfo_c›y
(
¢d_£q_queue_öfo_t
 *
d°
, c⁄° snd_£q_queue_öfo_à*
§c
);

417 
¢d_£q_queue_öfo_gë_queue
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

418 c⁄° *
¢d_£q_queue_öfo_gë_«me
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

419 
¢d_£q_queue_öfo_gë_ow√r
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

420 
¢d_£q_queue_öfo_gë_locked
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

421 
¢d_£q_queue_öfo_gë_Êags
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

423 
¢d_£q_queue_öfo_£t_«me
(
¢d_£q_queue_öfo_t
 *
öfo
, c⁄° *
«me
);

424 
¢d_£q_queue_öfo_£t_ow√r
(
¢d_£q_queue_öfo_t
 *
öfo
, 
ow√r
);

425 
¢d_£q_queue_öfo_£t_locked
(
¢d_£q_queue_öfo_t
 *
öfo
, 
locked
);

426 
¢d_£q_queue_öfo_£t_Êags
(
¢d_£q_queue_öfo_t
 *
öfo
, 
Êags
);

428 
¢d_£q_¸óã_queue
(
¢d_£q_t
 *
£q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

429 
¢d_£q_Æloc_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

430 
¢d_£q_Æloc_queue
(
¢d_£q_t
 *
h™dÀ
);

431 
¢d_£q_‰ì_queue
(
¢d_£q_t
 *
h™dÀ
, 
q
);

432 
¢d_£q_gë_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

433 
¢d_£q_£t_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

434 
¢d_£q_quîy_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

436 
¢d_£q_gë_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
);

437 
¢d_£q_£t_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
u£d
);

441 
size_t
 
¢d_£q_queue_°©us_sizeof
();

443 
	#¢d_£q_queue_°©us_Æloˇ
(
±r
) \

444 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_°©us
)

	)

445 
¢d_£q_queue_°©us_mÆloc
(
¢d_£q_queue_°©us_t
 **
±r
);

446 
¢d_£q_queue_°©us_‰ì
(
¢d_£q_queue_°©us_t
 *
±r
);

447 
¢d_£q_queue_°©us_c›y
(
¢d_£q_queue_°©us_t
 *
d°
, c⁄° snd_£q_queue_°©us_à*
§c
);

449 
¢d_£q_queue_°©us_gë_queue
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

450 
¢d_£q_queue_°©us_gë_evíts
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

451 
¢d_£q_tick_time_t
 
¢d_£q_queue_°©us_gë_tick_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

452 c⁄° 
¢d_£q_ªÆ_time_t
 *
¢d_£q_queue_°©us_gë_ªÆ_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

453 
¢d_£q_queue_°©us_gë_°©us
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

455 
¢d_£q_gë_queue_°©us
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_°©us_t
 *
°©us
);

459 
size_t
 
¢d_£q_queue_ãmpo_sizeof
();

461 
	#¢d_£q_queue_ãmpo_Æloˇ
(
±r
) \

462 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_ãmpo
)

	)

463 
¢d_£q_queue_ãmpo_mÆloc
(
¢d_£q_queue_ãmpo_t
 **
±r
);

464 
¢d_£q_queue_ãmpo_‰ì
(
¢d_£q_queue_ãmpo_t
 *
±r
);

465 
¢d_£q_queue_ãmpo_c›y
(
¢d_£q_queue_ãmpo_t
 *
d°
, c⁄° snd_£q_queue_ãmpo_à*
§c
);

467 
¢d_£q_queue_ãmpo_gë_queue
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

468 
¢d_£q_queue_ãmpo_gë_ãmpo
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

469 
¢d_£q_queue_ãmpo_gë_µq
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

470 
¢d_£q_queue_ãmpo_gë_skew
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

471 
¢d_£q_queue_ãmpo_gë_skew_ba£
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

472 
¢d_£q_queue_ãmpo_£t_ãmpo
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ãmpo
);

473 
¢d_£q_queue_ãmpo_£t_µq
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
µq
);

474 
¢d_£q_queue_ãmpo_£t_skew
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
skew
);

475 
¢d_£q_queue_ãmpo_£t_skew_ba£
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ba£
);

477 
¢d_£q_gë_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

478 
¢d_£q_£t_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

485 
SND_SEQ_TIMER_ALSA
 = 0,

486 
SND_SEQ_TIMER_MIDI_CLOCK
 = 1,

487 
SND_SEQ_TIMER_MIDI_TICK
 = 2

488 } 
	t¢d_£q_queue_timî_ty≥_t
;

490 
size_t
 
¢d_£q_queue_timî_sizeof
();

492 
	#¢d_£q_queue_timî_Æloˇ
(
±r
) \

493 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_timî
)

	)

494 
¢d_£q_queue_timî_mÆloc
(
¢d_£q_queue_timî_t
 **
±r
);

495 
¢d_£q_queue_timî_‰ì
(
¢d_£q_queue_timî_t
 *
±r
);

496 
¢d_£q_queue_timî_c›y
(
¢d_£q_queue_timî_t
 *
d°
, c⁄° snd_£q_queue_timî_à*
§c
);

498 
¢d_£q_queue_timî_gë_queue
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

499 
¢d_£q_queue_timî_ty≥_t
 
¢d_£q_queue_timî_gë_ty≥
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

500 c⁄° 
¢d_timî_id_t
 *
¢d_£q_queue_timî_gë_id
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

501 
¢d_£q_queue_timî_gë_ªsﬁuti⁄
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

503 
¢d_£q_queue_timî_£t_ty≥
(
¢d_£q_queue_timî_t
 *
öfo
, 
¢d_£q_queue_timî_ty≥_t
 
ty≥
);

504 
¢d_£q_queue_timî_£t_id
(
¢d_£q_queue_timî_t
 *
öfo
, c⁄° 
¢d_timî_id_t
 *
id
);

505 
¢d_£q_queue_timî_£t_ªsﬁuti⁄
(
¢d_£q_queue_timî_t
 *
öfo
, 
ªsﬁuti⁄
);

507 
¢d_£q_gë_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

508 
¢d_£q_£t_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

519 
¢d_£q_‰ì_evít
(
¢d_£q_evít_t
 *
ev
);

520 
ssize_t
 
¢d_£q_evít_Àngth
(
¢d_£q_evít_t
 *
ev
);

521 
¢d_£q_evít_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

522 
¢d_£q_evít_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

523 
¢d_£q_evít_ouçut_dúe˘
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

524 
¢d_£q_evít_öput
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

525 
¢d_£q_evít_öput_≥ndög
(
¢d_£q_t
 *
£q
, 
„tch_£quí˚r
);

526 
¢d_£q_døö_ouçut
(
¢d_£q_t
 *
h™dÀ
);

527 
¢d_£q_evít_ouçut_≥ndög
(
¢d_£q_t
 *
£q
);

528 
¢d_£q_exåa˘_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

529 
¢d_£q_dr›_ouçut
(
¢d_£q_t
 *
h™dÀ
);

530 
¢d_£q_dr›_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
);

531 
¢d_£q_dr›_öput
(
¢d_£q_t
 *
h™dÀ
);

532 
¢d_£q_dr›_öput_buf„r
(
¢d_£q_t
 *
h™dÀ
);

535 
_¢d_£q_ªmove_evíts
 
	t¢d_£q_ªmove_evíts_t
;

538 
	#SND_SEQ_REMOVE_INPUT
 (1<<0Ë

	)

539 
	#SND_SEQ_REMOVE_OUTPUT
 (1<<1Ë

	)

540 
	#SND_SEQ_REMOVE_DEST
 (1<<2Ë

	)

541 
	#SND_SEQ_REMOVE_DEST_CHANNEL
 (1<<3Ë

	)

542 
	#SND_SEQ_REMOVE_TIME_BEFORE
 (1<<4Ë

	)

543 
	#SND_SEQ_REMOVE_TIME_AFTER
 (1<<5Ë

	)

544 
	#SND_SEQ_REMOVE_TIME_TICK
 (1<<6Ë

	)

545 
	#SND_SEQ_REMOVE_EVENT_TYPE
 (1<<7Ë

	)

546 
	#SND_SEQ_REMOVE_IGNORE_OFF
 (1<<8Ë

	)

547 
	#SND_SEQ_REMOVE_TAG_MATCH
 (1<<9Ë

	)

549 
size_t
 
¢d_£q_ªmove_evíts_sizeof
();

551 
	#¢d_£q_ªmove_evíts_Æloˇ
(
±r
) \

552 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_ªmove_evíts
)

	)

553 
¢d_£q_ªmove_evíts_mÆloc
(
¢d_£q_ªmove_evíts_t
 **
±r
);

554 
¢d_£q_ªmove_evíts_‰ì
(
¢d_£q_ªmove_evíts_t
 *
±r
);

555 
¢d_£q_ªmove_evíts_c›y
(
¢d_£q_ªmove_evíts_t
 *
d°
, c⁄° snd_£q_ªmove_evíts_à*
§c
);

557 
¢d_£q_ªmove_evíts_gë_c⁄dôi⁄
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

558 
¢d_£q_ªmove_evíts_gë_queue
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

559 c⁄° 
¢d_£q_time°amp_t
 *
¢d_£q_ªmove_evíts_gë_time
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

560 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_ªmove_evíts_gë_de°
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

561 
¢d_£q_ªmove_evíts_gë_ch™√l
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

562 
¢d_£q_ªmove_evíts_gë_evít_ty≥
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

563 
¢d_£q_ªmove_evíts_gë_èg
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

565 
¢d_£q_ªmove_evíts_£t_c⁄dôi⁄
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
Êags
);

566 
¢d_£q_ªmove_evíts_£t_queue
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
queue
);

567 
¢d_£q_ªmove_evíts_£t_time
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_time°amp_t
 *
time
);

568 
¢d_£q_ªmove_evíts_£t_de°
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

569 
¢d_£q_ªmove_evíts_£t_ch™√l
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ch™√l
);

570 
¢d_£q_ªmove_evíts_£t_evít_ty≥
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ty≥
);

571 
¢d_£q_ªmove_evíts_£t_èg
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
èg
);

573 
¢d_£q_ªmove_evíts
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_ªmove_evíts_t
 *
öfo
);

584 
¢d_£q_£t_bô
(
ƒ
, *
¨øy
);

585 
¢d_£q_un£t_bô
(
ƒ
, *
¨øy
);

586 
¢d_£q_ch™ge_bô
(
ƒ
, *
¨øy
);

587 
¢d_£q_gë_bô
(
ƒ
, *
¨øy
);

601 
SND_SEQ_EVFLG_RESULT
,

602 
SND_SEQ_EVFLG_NOTE
,

603 
SND_SEQ_EVFLG_CONTROL
,

604 
SND_SEQ_EVFLG_QUEUE
,

605 
SND_SEQ_EVFLG_SYSTEM
,

606 
SND_SEQ_EVFLG_MESSAGE
,

607 
SND_SEQ_EVFLG_CONNECTION
,

608 
SND_SEQ_EVFLG_SAMPLE
,

609 
SND_SEQ_EVFLG_USERS
,

610 
SND_SEQ_EVFLG_INSTR
,

611 
SND_SEQ_EVFLG_QUOTE
,

612 
SND_SEQ_EVFLG_NONE
,

613 
SND_SEQ_EVFLG_RAW
,

614 
SND_SEQ_EVFLG_FIXED
,

615 
SND_SEQ_EVFLG_VARIABLE
,

616 
SND_SEQ_EVFLG_VARUSR


620 
SND_SEQ_EVFLG_NOTE_ONEARG
,

621 
SND_SEQ_EVFLG_NOTE_TWOARG


625 
SND_SEQ_EVFLG_QUEUE_NOARG
,

626 
SND_SEQ_EVFLG_QUEUE_TICK
,

627 
SND_SEQ_EVFLG_QUEUE_TIME
,

628 
SND_SEQ_EVFLG_QUEUE_VALUE


636 c⁄° 
¢d_£q_evít_ty≥s
[];

638 
	#_SND_SEQ_TYPE
(
x
Ë(1<<(x)Ë

	)

639 
	#_SND_SEQ_TYPE_OPT
(
x
Ë((x)<<24Ë

	)

642 
	#¢d_£q_ty≥_check
(
ev
,
x
Ë(
¢d_£q_evít_ty≥s
[”v)->
ty≥
] & 
	`_SND_SEQ_TYPE
(x))

	)

645 
	#¢d_£q_ev_is_ªsu…_ty≥
(
ev
) \

646 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_RESULT
)

	)

648 
	#¢d_£q_ev_is_nŸe_ty≥
(
ev
) \

649 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_NOTE
)

	)

651 
	#¢d_£q_ev_is_c⁄åﬁ_ty≥
(
ev
) \

652 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONTROL
)

	)

654 
	#¢d_£q_ev_is_ch™√l_ty≥
(
ev
) \

655 (
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
] & (
	`_SND_SEQ_TYPE
(
SND_SEQ_EVFLG_NOTE
Ë| _SND_SEQ_TYPE(
SND_SEQ_EVFLG_CONTROL
)))

	)

658 
	#¢d_£q_ev_is_queue_ty≥
(
ev
) \

659 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_QUEUE
)

	)

661 
	#¢d_£q_ev_is_mesßge_ty≥
(
ev
) \

662 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_MESSAGE
)

	)

664 
	#¢d_£q_ev_is_subs¸ibe_ty≥
(
ev
) \

665 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONNECTION
)

	)

667 
	#¢d_£q_ev_is_ßm∂e_ty≥
(
ev
) \

668 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_SAMPLE
)

	)

670 
	#¢d_£q_ev_is_u£r_ty≥
(
ev
) \

671 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_USERS
)

	)

673 
	#¢d_£q_ev_is_ö°r_ty≥
(
ev
) \

674 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_INSTR
)

	)

676 
	#¢d_£q_ev_is_fixed_ty≥
(
ev
) \

677 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_FIXED
)

	)

679 
	#¢d_£q_ev_is_v¨übÀ_ty≥
(
ev
) \

680 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARIABLE
)

	)

682 
	#¢d_£q_ev_is_v¨u§_ty≥
(
ev
) \

683 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARUSR
)

	)

685 
	#¢d_£q_ev_is_ª£rved
(
ev
) \

686 (! 
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
])

	)

692 
	#¢d_£q_ev_is_¥i‹
(
ev
) \

693 (((
ev
)->
Êags
 & 
SND_SEQ_PRIORITY_MASK
Ë=
SND_SEQ_PRIORITY_HIGH
)

	)

696 
	#¢d_£q_ev_Àngth_ty≥
(
ev
) \

697 ((
ev
)->
Êags
 & 
SND_SEQ_EVENT_LENGTH_MASK
)

	)

699 
	#¢d_£q_ev_is_fixed
(
ev
) \

700 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

702 
	#¢d_£q_ev_is_v¨übÀ
(
ev
) \

703 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARIABLE
)

	)

705 
	#¢d_£q_ev_is_v¨u§
(
ev
) \

706 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARUSR
)

	)

709 
	#¢d_£q_ev_time°amp_ty≥
(
ev
) \

710 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_STAMP_MASK
)

	)

712 
	#¢d_£q_ev_is_tick
(
ev
) \

713 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_TICK
)

	)

715 
	#¢d_£q_ev_is_ªÆ
(
ev
) \

716 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_REAL
)

	)

719 
	#¢d_£q_ev_timemode_ty≥
(
ev
) \

720 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_MODE_MASK
)

	)

722 
	#¢d_£q_ev_is_ab°ime
(
ev
) \

723 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_ABS
)

	)

725 
	#¢d_£q_ev_is_ª…ime
(
ev
) \

726 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_REL
)

	)

729 
	#¢d_£q_ev_is_dúe˘
(
ev
) \

730 ((
ev
)->
queue
 =
SND_SEQ_QUEUE_DIRECT
)

	)

734 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq_event.h

28 #i‚de‡
__ALSA_SEQ_EVENT_H


29 
	#__ALSA_SEQ_EVENT_H


	)

41 
	t¢d_£q_evít_ty≥_t
;

44 
	e¢d_£q_evít_ty≥
 {

46 
	mSND_SEQ_EVENT_SYSTEM
 = 0,

48 
	mSND_SEQ_EVENT_RESULT
,

51 
	mSND_SEQ_EVENT_NOTE
 = 5,

53 
	mSND_SEQ_EVENT_NOTEON
,

55 
	mSND_SEQ_EVENT_NOTEOFF
,

57 
	mSND_SEQ_EVENT_KEYPRESS
,

60 
	mSND_SEQ_EVENT_CONTROLLER
 = 10,

62 
	mSND_SEQ_EVENT_PGMCHANGE
,

64 
	mSND_SEQ_EVENT_CHANPRESS
,

66 
	mSND_SEQ_EVENT_PITCHBEND
,

68 
	mSND_SEQ_EVENT_CONTROL14
,

70 
	mSND_SEQ_EVENT_NONREGPARAM
,

72 
	mSND_SEQ_EVENT_REGPARAM
,

75 
	mSND_SEQ_EVENT_SONGPOS
 = 20,

77 
	mSND_SEQ_EVENT_SONGSEL
,

79 
	mSND_SEQ_EVENT_QFRAME
,

81 
	mSND_SEQ_EVENT_TIMESIGN
,

83 
	mSND_SEQ_EVENT_KEYSIGN
,

86 
	mSND_SEQ_EVENT_START
 = 30,

88 
	mSND_SEQ_EVENT_CONTINUE
,

90 
	mSND_SEQ_EVENT_STOP
,

92 
	mSND_SEQ_EVENT_SETPOS_TICK
,

94 
	mSND_SEQ_EVENT_SETPOS_TIME
,

96 
	mSND_SEQ_EVENT_TEMPO
,

98 
	mSND_SEQ_EVENT_CLOCK
,

100 
	mSND_SEQ_EVENT_TICK
,

102 
	mSND_SEQ_EVENT_QUEUE_SKEW
,

104 
	mSND_SEQ_EVENT_SYNC_POS
,

107 
	mSND_SEQ_EVENT_TUNE_REQUEST
 = 40,

109 
	mSND_SEQ_EVENT_RESET
,

111 
	mSND_SEQ_EVENT_SENSING
,

114 
	mSND_SEQ_EVENT_ECHO
 = 50,

116 
	mSND_SEQ_EVENT_OSS
,

119 
	mSND_SEQ_EVENT_CLIENT_START
 = 60,

121 
	mSND_SEQ_EVENT_CLIENT_EXIT
,

123 
	mSND_SEQ_EVENT_CLIENT_CHANGE
,

125 
	mSND_SEQ_EVENT_PORT_START
,

127 
	mSND_SEQ_EVENT_PORT_EXIT
,

129 
	mSND_SEQ_EVENT_PORT_CHANGE
,

132 
	mSND_SEQ_EVENT_PORT_SUBSCRIBED
,

134 
	mSND_SEQ_EVENT_PORT_UNSUBSCRIBED
,

137 
	mSND_SEQ_EVENT_USR0
 = 90,

139 
	mSND_SEQ_EVENT_USR1
,

141 
	mSND_SEQ_EVENT_USR2
,

143 
	mSND_SEQ_EVENT_USR3
,

145 
	mSND_SEQ_EVENT_USR4
,

147 
	mSND_SEQ_EVENT_USR5
,

149 
	mSND_SEQ_EVENT_USR6
,

151 
	mSND_SEQ_EVENT_USR7
,

153 
	mSND_SEQ_EVENT_USR8
,

155 
	mSND_SEQ_EVENT_USR9
,

158 
	mSND_SEQ_EVENT_SYSEX
 = 130,

160 
	mSND_SEQ_EVENT_BOUNCE
,

162 
	mSND_SEQ_EVENT_USR_VAR0
 = 135,

164 
	mSND_SEQ_EVENT_USR_VAR1
,

166 
	mSND_SEQ_EVENT_USR_VAR2
,

168 
	mSND_SEQ_EVENT_USR_VAR3
,

170 
	mSND_SEQ_EVENT_USR_VAR4
,

173 
	mSND_SEQ_EVENT_NONE
 = 255

178 
	s¢d_£q_addr
 {

179 
	m˛õ¡
;

180 
	mp‹t
;

181 } 
	t¢d_£q_addr_t
;

184 
	s¢d_£q_c⁄√˘
 {

185 
¢d_£q_addr_t
 
	m£ndî
;

186 
¢d_£q_addr_t
 
	mde°
;

187 } 
	t¢d_£q_c⁄√˘_t
;

191 
	s¢d_£q_ªÆ_time
 {

192 
	mtv_£c
;

193 
	mtv_n£c
;

194 } 
	t¢d_£q_ªÆ_time_t
;

197 
	t¢d_£q_tick_time_t
;

200 
	u¢d_£q_time°amp
 {

201 
¢d_£q_tick_time_t
 
	mtick
;

202 
¢d_£q_ªÆ_time
 
	mtime
;

203 } 
	t¢d_£q_time°amp_t
;

211 
	#SND_SEQ_TIME_STAMP_TICK
 (0<<0Ë

	)

212 
	#SND_SEQ_TIME_STAMP_REAL
 (1<<0Ë

	)

213 
	#SND_SEQ_TIME_STAMP_MASK
 (1<<0Ë

	)

215 
	#SND_SEQ_TIME_MODE_ABS
 (0<<1Ë

	)

216 
	#SND_SEQ_TIME_MODE_REL
 (1<<1Ë

	)

217 
	#SND_SEQ_TIME_MODE_MASK
 (1<<1Ë

	)

219 
	#SND_SEQ_EVENT_LENGTH_FIXED
 (0<<2Ë

	)

220 
	#SND_SEQ_EVENT_LENGTH_VARIABLE
 (1<<2Ë

	)

221 
	#SND_SEQ_EVENT_LENGTH_VARUSR
 (2<<2Ë

	)

222 
	#SND_SEQ_EVENT_LENGTH_MASK
 (3<<2Ë

	)

224 
	#SND_SEQ_PRIORITY_NORMAL
 (0<<4Ë

	)

225 
	#SND_SEQ_PRIORITY_HIGH
 (1<<4Ë

	)

226 
	#SND_SEQ_PRIORITY_MASK
 (1<<4Ë

	)

230 
	s¢d_£q_ev_nŸe
 {

231 
	mch™√l
;

232 
	mnŸe
;

233 
	mvñocôy
;

234 
	moff_vñocôy
;

235 
	mduøti⁄
;

236 } 
	t¢d_£q_ev_nŸe_t
;

239 
	s¢d_£q_ev_˘æ
 {

240 
	mch™√l
;

241 
	munu£d
[3];

242 
	m∑øm
;

243 sig√d 
	mvÆue
;

244 } 
	t¢d_£q_ev_˘æ_t
;

247 
	s¢d_£q_ev_øw8
 {

248 
	md
[12];

249 } 
	t¢d_£q_ev_øw8_t
;

252 
	s¢d_£q_ev_øw32
 {

253 
	md
[3];

254 } 
	t¢d_£q_ev_øw32_t
;

257 
	s¢d_£q_ev_ext
 {

258 
	mÀn
;

259 *
	m±r
;

260 } 
__©åibuã__
((
∑cked
));

262 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

263 #ifde‡
DOC_HIDDEN


265 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

269 
	s¢d_£q_ªsu…
 {

270 
	mevít
;

271 
	mªsu…
;

272 } 
	t¢d_£q_ªsu…_t
;

275 
	s¢d_£q_queue_skew
 {

276 
	mvÆue
;

277 
	mba£
;

278 } 
	t¢d_£q_queue_skew_t
;

281 
	s¢d_£q_ev_queue_c⁄åﬁ
 {

282 
	mqueue
;

283 
	munu£d
[3];

285 sig√d 
	mvÆue
;

286 
¢d_£q_time°amp_t
 
	mtime
;

287 
	mposôi⁄
;

288 
¢d_£q_queue_skew_t
 
	mskew
;

289 
	md32
[2];

290 
	md8
[8];

291 } 
	m∑øm
;

292 } 
	t¢d_£q_ev_queue_c⁄åﬁ_t
;

296 
	s¢d_£q_evít
 {

297 
¢d_£q_evít_ty≥_t
 
	mty≥
;

298 
	mÊags
;

299 
	mèg
;

301 
	mqueue
;

302 
¢d_£q_time°amp_t
 
	mtime
;

304 
¢d_£q_addr_t
 
	msour˚
;

305 
¢d_£q_addr_t
 
	mde°
;

308 
¢d_£q_ev_nŸe_t
 
	mnŸe
;

309 
¢d_£q_ev_˘æ_t
 
	mc⁄åﬁ
;

310 
¢d_£q_ev_øw8_t
 
	møw8
;

311 
¢d_£q_ev_øw32_t
 
	møw32
;

312 
¢d_£q_ev_ext_t
 
	mext
;

313 
¢d_£q_ev_queue_c⁄åﬁ_t
 
	mqueue
;

314 
¢d_£q_time°amp_t
 
	mtime
;

315 
¢d_£q_addr_t
 
	maddr
;

316 
¢d_£q_c⁄√˘_t
 
	mc⁄√˘
;

317 
¢d_£q_ªsu…_t
 
	mªsu…
;

318 } 
	md©a
;

319 } 
	t¢d_£q_evít_t
;

	@/usr/include/alsa/seq_midi_event.h

28 #i‚de‡
__ALSA_SEQ_MIDI_EVENT_H


29 
	#__ALSA_SEQ_MIDI_EVENT_H


	)

31 #ifde‡
__˝lu•lus


43 
¢d_midi_evít
 
	t¢d_midi_evít_t
;

45 
¢d_midi_evít_√w
(
size_t
 
bufsize
, 
¢d_midi_evít_t
 **
rdev
);

46 
¢d_midi_evít_ªsize_buf„r
(
¢d_midi_evít_t
 *
dev
, 
size_t
 
bufsize
);

47 
¢d_midi_evít_‰ì
(
¢d_midi_evít_t
 *
dev
);

48 
¢d_midi_evít_öô
(
¢d_midi_evít_t
 *
dev
);

49 
¢d_midi_evít_ª£t_ícode
(
¢d_midi_evít_t
 *
dev
);

50 
¢d_midi_evít_ª£t_decode
(
¢d_midi_evít_t
 *
dev
);

51 
¢d_midi_evít_no_°©us
(
¢d_midi_evít_t
 *
dev
, 
⁄
);

53 
¢d_midi_evít_ícode
(
¢d_midi_evít_t
 *
dev
, c⁄° *
buf
, 
cou¡
, 
¢d_£q_evít_t
 *
ev
);

54 
¢d_midi_evít_ícode_byã
(
¢d_midi_evít_t
 *
dev
, 
c
, 
¢d_£q_evít_t
 *
ev
);

56 
¢d_midi_evít_decode
(
¢d_midi_evít_t
 *
dev
, *
buf
, 
cou¡
, c⁄° 
¢d_£q_evít_t
 *
ev
);

60 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seqmid.h

28 #i‚de‡
__ALSA_SEQMID_H


29 
	#__ALSA_SEQMID_H


	)

31 #ifde‡
__˝lu•lus


48 
	#¢d_£q_ev_˛ór
(
ev
) \

49 
	`mem£t
(
ev
, 0, (
¢d_£q_evít_t
))

	)

58 
	#¢d_£q_ev_£t_èg
(
ev
,
t
) \

59 ((
ev
)->
èg
 = (
t
))

	)

71 
	#¢d_£q_ev_£t_de°
(
ev
,
c
,
p
) \

72 ((
ev
)->
de°
.
˛õ¡
 = (
c
), (ev)->de°.
p‹t
 = (
p
))

	)

82 
	#¢d_£q_ev_£t_subs
(
ev
) \

83 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_SUBSCRIBERS
,\

84 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_UNKNOWN
)

	)

94 
	#¢d_£q_ev_£t_brﬂdˇ°
(
ev
) \

95 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_BROADCAST
,\

96 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_BROADCAST
)

	)

105 
	#¢d_£q_ev_£t_sour˚
(
ev
,
p
) \

106 ((
ev
)->
sour˚
.
p‹t
 = (
p
))

	)

117 
	#¢d_£q_ev_£t_dúe˘
(
ev
) \

118 ((
ev
)->
queue
 = 
SND_SEQ_QUEUE_DIRECT
)

	)

132 
	#¢d_£q_ev_scheduÀ_tick
(
ev
, 
q
, 
ªœtive
, 
âick
) \

133 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

134 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_TICK
,\

135 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

136 (
ev
)->
time
.
tick
 = (
âick
),\

137 (
ev
)->
queue
 = (
q
))

	)

151 
	#¢d_£q_ev_scheduÀ_ªÆ
(
ev
, 
q
, 
ªœtive
, 
πime
) \

152 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

153 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_REAL
,\

154 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

155 (
ev
)->
time
.timê*(
πime
),\

156 (
ev
)->
queue
 = (
q
))

	)

163 
	#¢d_£q_ev_£t_¥i‹ôy
(
ev
, 
high_¥i‹
) \

164 ((
ev
)->
Êags
 &~
SND_SEQ_PRIORITY_MASK
,\

165 (
ev
)->
Êags
 |(
high_¥i‹
Ë? 
SND_SEQ_PRIORITY_HIGH
 : 
SND_SEQ_PRIORITY_NORMAL
)

	)

175 
	#¢d_£q_ev_£t_fixed
(
ev
) \

176 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

177 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

189 
	#¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
) \

190 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

191 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARIABLE
,\

192 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

193 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

205 
	#¢d_£q_ev_£t_v¨u§
(
ev
, 
d©Æí
, 
d©≠å
) \

206 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

207 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARUSR
,\

208 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

209 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

218 
	#¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
typ
, 
q
, 
vÆ
) \

219 ((
ev
)->
ty≥
 = (
typ
),\

220 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

221 (
ev
)->
d©a
.
queue
.queuê(
q
),\

222 (
ev
)->
d©a
.
queue
.
∑øm
.
vÆue
 = (
vÆ
))

	)

231 
	#¢d_£q_ev_£t_queue_°¨t
(
ev
, 
q
) \

232 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_START
, 
q
, 0)

	)

241 
	#¢d_£q_ev_£t_queue_°›
(
ev
, 
q
) \

242 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_STOP
, 
q
, 0)

	)

251 
	#¢d_£q_ev_£t_queue_c⁄töue
(
ev
, 
q
) \

252 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_CONTINUE
, 
q
, 0)

	)

260 
	#¢d_£q_ev_£t_queue_ãmpo
(
ev
, 
q
, 
vÆ
) \

261 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_TEMPO
, 
q
, 
vÆ
)

	)

269 
	#¢d_£q_ev_£t_queue_pos_ªÆ
(
ev
, 
q
, 
πime
) \

270 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TIME
,\

271 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

272 (
ev
)->
d©a
.
queue
.queuê(
q
),\

273 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.timê*(
πime
))

	)

281 
	#¢d_£q_ev_£t_queue_pos_tick
(
ev
, 
q
, 
âime
) \

282 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TICK
,\

283 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

284 (
ev
)->
d©a
.
queue
.queuê(
q
),\

285 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.
tick
 = (
âime
))

	)

288 
¢d_£q_c⁄åﬁ_queue
(
¢d_£q_t
 *
£q
, 
q
, 
ty≥
, 
vÆue
, 
¢d_£q_evít_t
 *
ev
);

296 
	#¢d_£q_°¨t_queue
(
£q
, 
q
, 
ev
) \

297 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_START
, 0, 
ev
)

	)

305 
	#¢d_£q_°›_queue
(
£q
, 
q
, 
ev
) \

306 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_STOP
, 0, 
ev
)

	)

314 
	#¢d_£q_c⁄töue_queue
(
£q
, 
q
, 
ev
) \

315 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_CONTINUE
, 0, 
ev
)

	)

324 
	#¢d_£q_ch™ge_queue_ãmpo
(
£q
, 
q
, 
ãmpo
, 
ev
) \

325 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_TEMPO
, 
ãmpo
, 
ev
)

	)

328 
¢d_£q_¸óã_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, c⁄° *
«me
,

329 
ˇps
, 
ty≥
);

331 
¢d_£q_dñëe_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, 
p‹t
);

336 
¢d_£q_c⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

337 
¢d_£q_c⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

338 
¢d_£q_disc⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

339 
¢d_£q_disc⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

344 
¢d_£q_£t_˛õ¡_«me
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

345 
¢d_£q_£t_˛õ¡_evít_fûãr
(
¢d_£q_t
 *
£q
, 
evít_ty≥
);

346 
¢d_£q_£t_˛õ¡_poﬁ_ouçut
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

347 
¢d_£q_£t_˛õ¡_poﬁ_ouçut_room
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

348 
¢d_£q_£t_˛õ¡_poﬁ_öput
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

350 
¢d_£q_sync_ouçut_queue
(
¢d_£q_t
 *
£q
);

355 
¢d_£q_∑r£_addªss
(
¢d_£q_t
 *
£q
, 
¢d_£q_addr_t
 *
addr
, c⁄° *
°r
);

360 
¢d_£q_ª£t_poﬁ_ouçut
(
¢d_£q_t
 *
£q
);

361 
¢d_£q_ª£t_poﬁ_öput
(
¢d_£q_t
 *
£q
);

371 
	#¢d_£q_ev_£t_nŸe
(
ev
, 
ch
, 
key
, 
vñ
, 
dur
) \

372 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTE
,\

373 
	`¢d_£q_ev_£t_fixed
(
ev
),\

374 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

375 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

376 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
),\

377 (
ev
)->
d©a
.
nŸe
.
duøti⁄
 = (
dur
))

	)

386 
	#¢d_£q_ev_£t_nŸe⁄
(
ev
, 
ch
, 
key
, 
vñ
) \

387 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEON
,\

388 
	`¢d_£q_ev_£t_fixed
(
ev
),\

389 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

390 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

391 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

400 
	#¢d_£q_ev_£t_nŸeoff
(
ev
, 
ch
, 
key
, 
vñ
) \

401 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEOFF
,\

402 
	`¢d_£q_ev_£t_fixed
(
ev
),\

403 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

404 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

405 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

414 
	#¢d_£q_ev_£t_key¥ess
(
ev
,
ch
,
key
,
vñ
) \

415 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_KEYPRESS
,\

416 
	`¢d_£q_ev_£t_fixed
(
ev
),\

417 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

418 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

419 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

428 
	#¢d_£q_ev_£t_c⁄åﬁÀr
(
ev
,
ch
,
cc
,
vÆ
) \

429 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CONTROLLER
,\

430 
	`¢d_£q_ev_£t_fixed
(
ev
),\

431 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

432 (
ev
)->
d©a
.
c⁄åﬁ
.
∑øm
 = (
cc
),\

433 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

441 
	#¢d_£q_ev_£t_pgmch™ge
(
ev
,
ch
,
vÆ
) \

442 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PGMCHANGE
,\

443 
	`¢d_£q_ev_£t_fixed
(
ev
),\

444 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

445 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

453 
	#¢d_£q_ev_£t_pôchbíd
(
ev
,
ch
,
vÆ
) \

454 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PITCHBEND
,\

455 
	`¢d_£q_ev_£t_fixed
(
ev
),\

456 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

457 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

465 
	#¢d_£q_ev_£t_ch™¥ess
(
ev
,
ch
,
vÆ
) \

466 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CHANPRESS
,\

467 
	`¢d_£q_ev_£t_fixed
(
ev
),\

468 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

469 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

479 
	#¢d_£q_ev_£t_sy£x
(
ev
,
d©Æí
,
d©≠å
) \

480 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SYSEX
,\

481 
	`¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
))

	)

485 #ifde‡
__˝lu•lus


	@/usr/include/alsa/timer.h

28 #i‚de‡
__ALSA_TIMER_H


29 
	#__ALSA_TIMER_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_TIMER_DLSYM_VERSION
 
_dlsym_timî_001


	)

44 
	#SND_TIMER_QUERY_DLSYM_VERSION
 
_dlsym_timî_quîy_001


	)

47 
_¢d_timî_id
 
	t¢d_timî_id_t
;

49 
_¢d_timî_göfo
 
	t¢d_timî_göfo_t
;

51 
_¢d_timî_g∑øms
 
	t¢d_timî_g∑øms_t
;

53 
_¢d_timî_g°©us
 
	t¢d_timî_g°©us_t
;

55 
_¢d_timî_öfo
 
	t¢d_timî_öfo_t
;

57 
_¢d_timî_∑øms
 
	t¢d_timî_∑øms_t
;

59 
_¢d_timî_°©us
 
	t¢d_timî_°©us_t
;

61 
	e_¢d_timî_˛ass
 {

62 
SND_TIMER_CLASS_NONE
 = -1,

63 
SND_TIMER_CLASS_SLAVE
 = 0,

64 
SND_TIMER_CLASS_GLOBAL
,

65 
SND_TIMER_CLASS_CARD
,

66 
SND_TIMER_CLASS_PCM
,

67 
SND_TIMER_CLASS_LAST
 = 
SND_TIMER_CLASS_PCM


68 } 
	t¢d_timî_˛ass_t
;

71 
	e_¢d_timî_¶ave_˛ass
 {

72 
SND_TIMER_SCLASS_NONE
 = 0,

73 
SND_TIMER_SCLASS_APPLICATION
,

74 
SND_TIMER_SCLASS_SEQUENCER
,

75 
SND_TIMER_SCLASS_OSS_SEQUENCER
,

76 
SND_TIMER_SCLASS_LAST
 = 
SND_TIMER_SCLASS_OSS_SEQUENCER


77 } 
	t¢d_timî_¶ave_˛ass_t
;

80 
	e_¢d_timî_evít
 {

81 
SND_TIMER_EVENT_RESOLUTION
 = 0,

82 
SND_TIMER_EVENT_TICK
,

83 
SND_TIMER_EVENT_START
,

84 
SND_TIMER_EVENT_STOP
,

85 
SND_TIMER_EVENT_CONTINUE
,

86 
SND_TIMER_EVENT_PAUSE
,

87 
SND_TIMER_EVENT_EARLY
,

88 
SND_TIMER_EVENT_SUSPEND
,

89 
SND_TIMER_EVENT_RESUME
,

91 
SND_TIMER_EVENT_MSTART
 = 
SND_TIMER_EVENT_START
 + 10,

92 
SND_TIMER_EVENT_MSTOP
 = 
SND_TIMER_EVENT_STOP
 + 10,

93 
SND_TIMER_EVENT_MCONTINUE
 = 
SND_TIMER_EVENT_CONTINUE
 + 10,

94 
SND_TIMER_EVENT_MPAUSE
 = 
SND_TIMER_EVENT_PAUSE
 + 10,

95 
SND_TIMER_EVENT_MSUSPEND
 = 
SND_TIMER_EVENT_SUSPEND
 + 10,

96 
SND_TIMER_EVENT_MRESUME
 = 
SND_TIMER_EVENT_RESUME
 + 10

97 } 
	t¢d_timî_evít_t
;

100 
	s_¢d_timî_ªad
 {

101 
ªsﬁuti⁄
;

102 
ticks
;

103 } 
	t¢d_timî_ªad_t
;

106 
	s_¢d_timî_åód
 {

107 
¢d_timî_evít_t
 
evít
;

108 
¢d_htime°amp_t
 
t°amp
;

109 
vÆ
;

110 } 
	t¢d_timî_åód_t
;

113 
	#SND_TIMER_GLOBAL_SYSTEM
 0

	)

115 
	#SND_TIMER_GLOBAL_RTC
 1

	)

117 
	#SND_TIMER_GLOBAL_HPET
 2

	)

119 
	#SND_TIMER_GLOBAL_HRTIMER
 3

	)

122 
	#SND_TIMER_OPEN_NONBLOCK
 (1<<0)

	)

124 
	#SND_TIMER_OPEN_TREAD
 (1<<1)

	)

127 
	e_¢d_timî_ty≥
 {

129 
SND_TIMER_TYPE_HW
 = 0,

131 
SND_TIMER_TYPE_SHM
,

133 
SND_TIMER_TYPE_INET


134 } 
	t¢d_timî_ty≥_t
;

137 
_¢d_timî_quîy
 
	t¢d_timî_quîy_t
;

139 
_¢d_timî
 
	t¢d_timî_t
;

142 
¢d_timî_quîy_›í
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

143 
¢d_timî_quîy_›í_lc⁄f
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

144 
¢d_timî_quîy_˛o£
(
¢d_timî_quîy_t
 *
h™dÀ
);

145 
¢d_timî_quîy_√xt_devi˚
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_id_t
 *
tid
);

146 
¢d_timî_quîy_öfo
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_göfo_t
 *
öfo
);

147 
¢d_timî_quîy_∑øms
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g∑øms_t
 *
∑øms
);

148 
¢d_timî_quîy_°©us
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g°©us_t
 *
°©us
);

150 
¢d_timî_›í
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

151 
¢d_timî_›í_lc⁄f
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

152 
¢d_timî_˛o£
(
¢d_timî_t
 *
h™dÀ
);

153 
¢d_async_add_timî_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_timî_t
 *
timî
,

154 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

155 
¢d_timî_t
 *
¢d_async_h™dÀr_gë_timî
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

156 
¢d_timî_pﬁl_des¸ùt‹s_cou¡
(
¢d_timî_t
 *
h™dÀ
);

157 
¢d_timî_pﬁl_des¸ùt‹s
(
¢d_timî_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
);

158 
¢d_timî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_timî_t
 *
timî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

159 
¢d_timî_öfo
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_öfo_t
 *
timî
);

160 
¢d_timî_∑øms
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_∑øms_t
 *
∑øms
);

161 
¢d_timî_°©us
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_°©us_t
 *
°©us
);

162 
¢d_timî_°¨t
(
¢d_timî_t
 *
h™dÀ
);

163 
¢d_timî_°›
(
¢d_timî_t
 *
h™dÀ
);

164 
¢d_timî_c⁄töue
(
¢d_timî_t
 *
h™dÀ
);

165 
ssize_t
 
¢d_timî_ªad
(
¢d_timî_t
 *
h™dÀ
, *
buf„r
, 
size_t
 
size
);

167 
size_t
 
¢d_timî_id_sizeof
();

169 
	#¢d_timî_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_id
)

	)

170 
¢d_timî_id_mÆloc
(
¢d_timî_id_t
 **
±r
);

171 
¢d_timî_id_‰ì
(
¢d_timî_id_t
 *
obj
);

172 
¢d_timî_id_c›y
(
¢d_timî_id_t
 *
d°
, c⁄° snd_timî_id_à*
§c
);

174 
¢d_timî_id_£t_˛ass
(
¢d_timî_id_t
 *
id
, 
dev_˛ass
);

175 
¢d_timî_id_gë_˛ass
(
¢d_timî_id_t
 *
id
);

176 
¢d_timî_id_£t_s˛ass
(
¢d_timî_id_t
 *
id
, 
dev_s˛ass
);

177 
¢d_timî_id_gë_s˛ass
(
¢d_timî_id_t
 *
id
);

178 
¢d_timî_id_£t_ˇrd
(
¢d_timî_id_t
 *
id
, 
ˇrd
);

179 
¢d_timî_id_gë_ˇrd
(
¢d_timî_id_t
 *
id
);

180 
¢d_timî_id_£t_devi˚
(
¢d_timî_id_t
 *
id
, 
devi˚
);

181 
¢d_timî_id_gë_devi˚
(
¢d_timî_id_t
 *
id
);

182 
¢d_timî_id_£t_subdevi˚
(
¢d_timî_id_t
 *
id
, 
subdevi˚
);

183 
¢d_timî_id_gë_subdevi˚
(
¢d_timî_id_t
 *
id
);

185 
size_t
 
¢d_timî_göfo_sizeof
();

187 
	#¢d_timî_göfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_göfo
)

	)

188 
¢d_timî_göfo_mÆloc
(
¢d_timî_göfo_t
 **
±r
);

189 
¢d_timî_göfo_‰ì
(
¢d_timî_göfo_t
 *
obj
);

190 
¢d_timî_göfo_c›y
(
¢d_timî_göfo_t
 *
d°
, c⁄° snd_timî_göfo_à*
§c
);

192 
¢d_timî_göfo_£t_tid
(
¢d_timî_göfo_t
 *
obj
, 
¢d_timî_id_t
 *
tid
);

193 
¢d_timî_id_t
 *
¢d_timî_göfo_gë_tid
(
¢d_timî_göfo_t
 *
obj
);

194 
¢d_timî_göfo_gë_Êags
(
¢d_timî_göfo_t
 *
obj
);

195 
¢d_timî_göfo_gë_ˇrd
(
¢d_timî_göfo_t
 *
obj
);

196 *
¢d_timî_göfo_gë_id
(
¢d_timî_göfo_t
 *
obj
);

197 *
¢d_timî_göfo_gë_«me
(
¢d_timî_göfo_t
 *
obj
);

198 
¢d_timî_göfo_gë_ªsﬁuti⁄
(
¢d_timî_göfo_t
 *
obj
);

199 
¢d_timî_göfo_gë_ªsﬁuti⁄_mö
(
¢d_timî_göfo_t
 *
obj
);

200 
¢d_timî_göfo_gë_ªsﬁuti⁄_max
(
¢d_timî_göfo_t
 *
obj
);

201 
¢d_timî_göfo_gë_˛õ¡s
(
¢d_timî_göfo_t
 *
obj
);

203 
size_t
 
¢d_timî_öfo_sizeof
();

205 
	#¢d_timî_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_öfo
)

	)

206 
¢d_timî_öfo_mÆloc
(
¢d_timî_öfo_t
 **
±r
);

207 
¢d_timî_öfo_‰ì
(
¢d_timî_öfo_t
 *
obj
);

208 
¢d_timî_öfo_c›y
(
¢d_timî_öfo_t
 *
d°
, c⁄° snd_timî_öfo_à*
§c
);

210 
¢d_timî_öfo_is_¶ave
(
¢d_timî_öfo_t
 * 
öfo
);

211 
¢d_timî_öfo_gë_ˇrd
(
¢d_timî_öfo_t
 * 
öfo
);

212 c⁄° *
¢d_timî_öfo_gë_id
(
¢d_timî_öfo_t
 * 
öfo
);

213 c⁄° *
¢d_timî_öfo_gë_«me
(
¢d_timî_öfo_t
 * 
öfo
);

214 
¢d_timî_öfo_gë_ªsﬁuti⁄
(
¢d_timî_öfo_t
 * 
öfo
);

216 
size_t
 
¢d_timî_∑øms_sizeof
();

218 
	#¢d_timî_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_∑øms
)

	)

219 
¢d_timî_∑øms_mÆloc
(
¢d_timî_∑øms_t
 **
±r
);

220 
¢d_timî_∑øms_‰ì
(
¢d_timî_∑øms_t
 *
obj
);

221 
¢d_timî_∑øms_c›y
(
¢d_timî_∑øms_t
 *
d°
, c⁄° snd_timî_∑øms_à*
§c
);

223 
¢d_timî_∑øms_£t_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
, 
auto_°¨t
);

224 
¢d_timî_∑øms_gë_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
);

225 
¢d_timî_∑øms_£t_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ex˛usive
);

226 
¢d_timî_∑øms_gë_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
);

227 
¢d_timî_∑øms_£t_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
, 
óæy_evít
);

228 
¢d_timî_∑øms_gë_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
);

229 
¢d_timî_∑øms_£t_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ticks
);

230 
¢d_timî_∑øms_gë_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
);

231 
¢d_timî_∑øms_£t_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
, 
queue_size
);

232 
¢d_timî_∑øms_gë_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
);

233 
¢d_timî_∑øms_£t_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
, 
fûãr
);

234 
¢d_timî_∑øms_gë_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
);

236 
size_t
 
¢d_timî_°©us_sizeof
();

238 
	#¢d_timî_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_°©us
)

	)

239 
¢d_timî_°©us_mÆloc
(
¢d_timî_°©us_t
 **
±r
);

240 
¢d_timî_°©us_‰ì
(
¢d_timî_°©us_t
 *
obj
);

241 
¢d_timî_°©us_c›y
(
¢d_timî_°©us_t
 *
d°
, c⁄° snd_timî_°©us_à*
§c
);

243 
¢d_htime°amp_t
 
¢d_timî_°©us_gë_time°amp
(
¢d_timî_°©us_t
 * 
°©us
);

244 
¢d_timî_°©us_gë_ªsﬁuti⁄
(
¢d_timî_°©us_t
 * 
°©us
);

245 
¢d_timî_°©us_gë_lo°
(
¢d_timî_°©us_t
 * 
°©us
);

246 
¢d_timî_°©us_gë_ovîrun
(
¢d_timî_°©us_t
 * 
°©us
);

247 
¢d_timî_°©us_gë_queue
(
¢d_timî_°©us_t
 * 
°©us
);

250 
¢d_timî_öfo_gë_ticks
(
¢d_timî_öfo_t
 * 
öfo
);

254 #ifde‡
__˝lu•lus


	@/usr/include/alsa/version.h

5 
	#SND_LIB_MAJOR
 1

	)

6 
	#SND_LIB_MINOR
 1

	)

7 
	#SND_LIB_SUBMINOR
 3

	)

8 
	#SND_LIB_EXTRAVER
 1000000

	)

10 
	#SND_LIB_VERSION
 ((
SND_LIB_MAJOR
<<16)|\

11 (
SND_LIB_MINOR
<<8)|\

12 
SND_LIB_SUBMINOR
)

	)

14 
	#SND_LIB_VERSION_STR
 "1.1.3"

	)

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/flt-eval-method.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__FLT_EVAL_METHOD__


24 #i‡
__FLT_EVAL_METHOD__
 == -1

25 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

27 
	#__GLIBC_FLT_EVAL_METHOD
 
__FLT_EVAL_METHOD__


	)

29 #ñi‡
deföed
 
__x86_64__


30 
	#__GLIBC_FLT_EVAL_METHOD
 0

	)

32 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

	@/usr/include/bits/fp-fast.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__USE_ISOC99


27 #ifde‡
__FP_FAST_FMA


28 
	#FP_FAST_FMA
 1

	)

31 #ifde‡
__FP_FAST_FMAF


32 
	#FP_FAST_FMAF
 1

	)

35 #ifde‡
__FP_FAST_FMAL


36 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/fp-logb.h

19 #i‚de‡
_MATH_H


23 
	#__FP_LOGB0_IS_MIN
 1

	)

24 
	#__FP_LOGBNAN_IS_MIN
 1

	)

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/iscanonical.h

19 #i‚de‡
_MATH_H


23 
	$__isˇn⁄iˇŒ
 (
__x
)

24 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

25 
	#__isˇn⁄iˇlf
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

26 
	#__isˇn⁄iˇl
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

34 
	#isˇn⁄iˇl
(
x
Ë
	`__MATH_TG
 ((x), 
__isˇn⁄iˇl
, (x))

	)

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

47 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


48 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


49 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

56 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


57 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


58 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

60 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
)

120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 #ifde‡
__USE_GNU


124 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

127 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


128 
__BEGIN_NAMESPACE_C99


130 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

133 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

136 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

137 
	g__END_NAMESPACE_C99


140 #ifde‡
__USE_ISOC99


141 
__BEGIN_NAMESPACE_C99


143 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

146 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

147 
	g__END_NAMESPACE_C99


153 
_MdoubÀ_BEGIN_NAMESPACE


155 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

158 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

159 
	g_MdoubÀ_END_NAMESPACE


161 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


162 
__BEGIN_NAMESPACE_C99


164 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

165 
	g__END_NAMESPACE_C99


168 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


169 
__BEGIN_NAMESPACE_C99


171 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

172 
	g__END_NAMESPACE_C99


178 
_MdoubÀ_BEGIN_NAMESPACE


180 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

183 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

186 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

189 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

194 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

198 
	g_MdoubÀ_END_NAMESPACE


200 #ifde‡
__USE_MISC


201 #i‡(!
deföed
 
__˝lu•lus
 \

202 || 
	g__˝lu•lus
 < 201103L \

203 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

206 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

210 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

213 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

217 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

220 #ifde‡
__USE_ISOC99


221 
__BEGIN_NAMESPACE_C99


223 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

224 
	g__END_NAMESPACE_C99


227 #ifde‡
__USE_ISOC99


228 
__BEGIN_NAMESPACE_C99


230 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

231 
	g__END_NAMESPACE_C99


236 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

239 #i‡(!
deföed
 
__˝lu•lus
 \

240 || 
	g__˝lu•lus
 < 201103L \

241 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

243 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

247 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

249 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

252 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

253 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

254 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

258 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


259 
__BEGIN_NAMESPACE_C99


261 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

262 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

263 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

264 
	g__END_NAMESPACE_C99


267 #ifde‡
__USE_ISOC99


268 
__BEGIN_NAMESPACE_C99


270 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

271 
	g__END_NAMESPACE_C99


274 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

276 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

279 #ifde‡
__USE_MISC


283 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

287 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


288 
__BEGIN_NAMESPACE_C99


291 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

294 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

295 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


296 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

299 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

301 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

303 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

307 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

309 #ifde‡
__USE_ISOC99


311 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

315 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

318 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

320 
__MATHDECL
 (, 
Œogb
,, (
_MdoubÀ_
 
__x
));

323 #ifde‡
__USE_ISOC99


325 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

329 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

333 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

337 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

342 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

349 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

350 
__exãnsi⁄__


351 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

355 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

356 
__exãnsi⁄__


357 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

361 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

364 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

367 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

371 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

372 
__©åibuã__
 ((
__c⁄°__
));

375 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

376 
__©åibuã__
 ((
__c⁄°__
));

380 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

383 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


384 
	g__END_NAMESPACE_C99


387 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

389 
__MATHCALLX
 (
roundeví
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

393 
__MATHDECL
 (
__ötmax_t
, 
‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

394 
__width
));

398 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

399 
__width
));

404 
__MATHDECL
 (
__ötmax_t
, 
‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

405 
__width
));

410 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

411 
__width
));

414 
__MATHCALLX
 (
fmaxmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

417 
__MATHCALLX
 (
fmömag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

420 
__MATHDECL_1
 (, 
__i£qsig
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

423 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

424 
__©åibuã__
 ((
__c⁄°__
));

427 
__MATHDECL_1
 (, 
tŸÆ‹dî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
))

428 
__©åibuã__
 ((
__c⁄°__
));

431 
__MATHDECL_1
 (, 
tŸÆ‹dîmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
))

432 
__©åibuã__
 ((
__c⁄°__
));

435 
__MATHDECL_1
 (, 
ˇn⁄iˇlize
,, (
_MdoubÀ_
 *
__cx
, c⁄° _MdoubÀ_ *
__x
));

438 
__MATHCALL
 (
gë∑ylﬂd
,, (c⁄° 
_MdoubÀ_
 *
__x
));

441 
__MATHDECL_1
 (, 
£çaylﬂd
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

444 
__MATHDECL_1
 (, 
£çaylﬂdsig
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

447 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

448 && 
	g__MATH_DECLARING_DOUBLE
 \

449 && !
deföed
 
	g__USE_XOPEN2K8
)

451 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
__exãnsi⁄__
 union

145 
__exãnsi⁄__
 
	m__w£q
;

147 
	m__low
;

148 
	m__high
;

149 } 
	m__w£q32
;

151 
__exãnsi⁄__
 union

153 
__exãnsi⁄__
 
	m__g1_°¨t
;

155 
	m__low
;

156 
	m__high
;

157 } 
	m__g1_°¨t32
;

159 
	m__g_ªfs
[2];

160 
	m__g_size
[2];

161 
	m__g1_‹ig_size
;

162 
	m__wªfs
;

163 
	m__g_sig«ls
[2];

164 } 
	m__d©a
;

165 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

166 
__exãnsi⁄__
 
	m__Æign
;

167 } 
	t±hªad_c⁄d_t
;

171 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

172 
	m__Æign
;

173 } 
	t±hªad_c⁄d©å_t
;

177 
	t±hªad_key_t
;

181 
	t±hªad_⁄˚_t
;

184 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


189 #ifde‡
__x86_64__


192 
	m__ªadîs
;

193 
	m__wrôîs
;

194 
	m__wΩha£_fuãx
;

195 
	m__wrôîs_fuãx
;

196 
	m__∑d3
;

197 
	m__∑d4
;

198 
	m__cur_wrôî
;

199 
	m__sh¨ed
;

200 sig√d 
	m__rwñisi⁄
;

201 #ifde‡ 
__ILP32__


202 
	m__∑d1
[3];

203 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

205 
	m__∑d1
[7];

206 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

208 
	m__∑d2
;

211 
	m__Êags
;

212 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

213 } 
	m__d©a
;

217 
	m__ªadîs
;

218 
	m__wrôîs
;

219 
	m__wΩha£_fuãx
;

220 
	m__wrôîs_fuãx
;

221 
	m__∑d3
;

222 
	m__∑d4
;

225 
	m__Êags
;

226 
	m__sh¨ed
;

227 sig√d 
	m__rwñisi⁄
;

228 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

229 
	m__∑d2
;

230 
	m__cur_wrôî
;

231 } 
	m__d©a
;

233 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

234 
	m__Æign
;

235 } 
	t±hªad_rwlock_t
;

239 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

240 
	m__Æign
;

241 } 
	t±hªad_rwlock©å_t
;

245 #ifde‡
__USE_XOPEN2K


247 vﬁ©ûê
	t±hªad_•ölock_t
;

254 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

255 
	m__Æign
;

256 } 
	t±hªad_b¨rõr_t
;

260 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

261 
	m__Æign
;

262 } 
	t±hªad_b¨rõøâr_t
;

266 #i‚de‡
__x86_64__


268 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

186 
	srußge


189 
timevÆ
 
	mru_utime
;

191 
timevÆ
 
	mru_°ime
;

193 
__exãnsi⁄__
 union

195 
	mru_maxrss
;

196 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

201 
__exãnsi⁄__
 union

203 
	mru_ixrss
;

204 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

207 
__exãnsi⁄__
 union

209 
	mru_idrss
;

210 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

213 
__exãnsi⁄__
 union

215 
	mru_i§ss
;

216 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

220 
__exãnsi⁄__
 union

222 
	mru_möÊt
;

223 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

226 
__exãnsi⁄__
 union

228 
	mru_majÊt
;

229 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

232 
__exãnsi⁄__
 union

234 
	mru_nsw≠
;

235 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

239 
__exãnsi⁄__
 union

241 
	mru_öblock
;

242 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

245 
__exãnsi⁄__
 union

247 
	mru_oublock
;

248 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

251 
__exãnsi⁄__
 union

253 
	mru_msg¢d
;

254 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

257 
__exãnsi⁄__
 union

259 
	mru_msgrcv
;

260 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

263 
__exãnsi⁄__
 union

265 
	mru_nsig«ls
;

266 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

271 
__exãnsi⁄__
 union

273 
	mru_nvcsw
;

274 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

278 
__exãnsi⁄__
 union

280 
	mru_nivcsw
;

281 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

286 
	#PRIO_MIN
 -20

	)

287 
	#PRIO_MAX
 20

	)

291 
	e__¥i‹ôy_which


293 
	mPRIO_PROCESS
 = 0,

294 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

295 
	mPRIO_PGRP
 = 1,

296 
	#PRIO_PGRP
 
PRIO_PGRP


	)

297 
	mPRIO_USER
 = 2

298 
	#PRIO_USER
 
PRIO_USER


	)

302 
	g__BEGIN_DECLS


304 #ifde‡
__USE_GNU


306 #i‚de‡
__USE_FILE_OFFSET64


307 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

308 c⁄° 
æimô
 *
__√w_limô
,

309 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

311 #ifde‡
__REDIRECT_NTH


312 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

313 
__æimô_ªsour˚
 
__ªsour˚
,

314 c⁄° 
æimô
 *
__√w_limô
,

315 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

317 
	#¥limô
 
¥limô64


	)

320 #ifde‡
__USE_LARGEFILE64


321 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

322 c⁄° 
æimô64
 *
__√w_limô
,

323 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

327 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

30 
	ssig°ack


32 *
	mss_•
;

33 
	mss_⁄°ack
;

37 
	ssigÆt°ack


39 *
	mss_•
;

40 
	mss_Êags
;

41 
size_t
 
	mss_size
;

42 } 
	t°ack_t
;

47 
	mSS_ONSTACK
 = 1,

48 
	#SS_ONSTACK
 
SS_ONSTACK


	)

49 
	mSS_DISABLE


50 
	#SS_DISABLE
 
SS_DISABLE


	)

54 
	#MINSIGSTKSZ
 2048

	)

57 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

34 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

37 #ifde‡
__USE_MISC


38 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

40 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

41 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

42 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 
__asm__
 
__vﬁ©ûe__


1109 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1110 : "1" ((Ë
__tmp
 - 1), "2" (
__§c
), "3" (
__n
)

1113  
__de°
;

1114 
	}
}

1118 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1119 
	#°rcmp
(
s1
, 
s2
) \

1120 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1121 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1122 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1123 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1124 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1125 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1126 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1127 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1128 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1129 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1130 (c⁄° *Ë(
s2
), \

1131 
	`°æí
 (
s1
)) \

1132 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1133 (c⁄° *Ë(
s2
), \

1134 
	`°æí
 (
s1
))) \

1135 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1136 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1137 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1138 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1139 (c⁄° *Ë(
s2
), \

1140 
	`°æí
 (
s2
)) \

1141 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1142 (c⁄° *Ë(
s2
), \

1143 
	`°æí
 (
s2
))) \

1144 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1146 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1147 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1148 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1150 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1151 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1154 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1155 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1158 
__ªsu…
; }))

	)

1160 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1161 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1162 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1163 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1165 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1166 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1169 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1170 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1173 
__ªsu…
; }))

	)

1175 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1176 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1177 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1178 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1180 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1181 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1184 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1185 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1188 
__ªsu…
; }))

	)

1190 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1192 
__STRING_INLINE
 

1193 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1195 
__ªs
;

1196 
__asm__
 
__vﬁ©ûe__


1212 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1213 : "1" (
__s1
), "2" (
__s2
),

1214 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1217  
__ªs
;

1218 
	}
}

1222 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1223 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1224 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1227 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1228 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1230 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1231 
size_t
 
__n
);

1233 
__STRING_INLINE
 

1234 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1236 
__ªs
;

1237 
__asm__
 
__vﬁ©ûe__


1256 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1257 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1258 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1261  
__ªs
;

1262 
	}
}

1266 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1267 
	#_USE_STRING_ARCH_°rchr
 1

	)

1268 
	#°rchr
(
s
, 
c
) \

1269 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1270 ? ((
c
) == '\0' \

1271 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1272 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1273 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1275 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1277 
__STRING_INLINE
 *

1278 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1280 
__d0
;

1281 *
__ªs
;

1282 
__asm__
 
__vﬁ©ûe__


1292 : "Ù" (
__ªs
), "=&a" (
__d0
)

1293 : "0" (
__s
), "1" (
__c
),

1294 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1296  
__ªs
;

1297 
	}
}

1299 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1301 
__STRING_INLINE
 *

1302 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1304 
__d0
;

1305 *
__ªs
;

1306 
__asm__
 
__vﬁ©ûe__


1317 : "Ù" (
__ªs
), "=&a" (
__d0
)

1318 : "0" (
__s
), "1" (
__c
),

1319 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1321  
__ªs
;

1322 
	}
}

1326 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1327 
	#__°rch∫ul
(
s
, 
c
) \

1328 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1329 ? ((
c
) == '\0' \

1330 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1331 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1332 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1334 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1336 
__STRING_INLINE
 *

1337 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1339 
__d0
;

1340 *
__ªs
;

1341 
__asm__
 
__vﬁ©ûe__


1351 : "Ù" (
__ªs
), "=&a" (
__d0
)

1352 : "0" (
__s
), "1" (
__c
),

1353 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1355  
__ªs
;

1356 
	}
}

1358 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1360 
__STRING_INLINE
 *

1361 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1363 
__d0
;

1364 *
__ªs
;

1365 
__asm__
 
__vﬁ©ûe__


1376 : "Ù" (
__ªs
), "=&a" (
__d0
)

1377 : "0" (
__s
), "1" (
__c
),

1378 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1380  
__ªs
;

1381 
	}
}

1382 #ifde‡
__USE_GNU


1383 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1387 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1389 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1390 
	#ödex
(
s
, 
c
) \

1391 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1392 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1393 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1398 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1399 
	#°ºchr
(
s
, 
c
) \

1400 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1401 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1402 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1404 #ifde‡
__i686__


1405 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1407 
__STRING_INLINE
 *

1408 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1410 
__d0
, 
__d1
;

1411 *
__ªs
;

1412 
__asm__
 
__vﬁ©ûe__


1420 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1421 : "0" (1), "1" (
__s
), "2" (
__c
),

1422 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1424  
__ªs
 - 1;

1425 
	}
}

1427 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1429 
__STRING_INLINE
 *

1430 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1432 
__d0
, 
__d1
;

1433 *
__ªs
;

1434 
__asm__
 
__vﬁ©ûe__


1443 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1444 : "0" (1), "1" (
__s
), "2" (
__c
),

1445 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1447  
__ªs
 - 1;

1448 
	}
}

1450 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1452 
__STRING_INLINE
 *

1453 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1455 
__d0
, 
__d1
;

1456 *
__ªs
;

1457 
__asm__
 
__vﬁ©ûe__


1467 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1468 : "0" (0), "1" (
__s
), "2" (
__c
),

1469 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1471  
__ªs
;

1472 
	}
}

1474 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1476 
__STRING_INLINE
 *

1477 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1479 
__d0
, 
__d1
;

1480 *
__ªs
;

1481 
__asm__
 
__vﬁ©ûe__


1492 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1493 : "0" (0), "1" (
__s
), "2" (
__c
),

1494 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1496  
__ªs
;

1497 
	}
}

1501 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1503 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1504 
	#rödex
(
s
, 
c
) \

1505 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1506 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1507 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1513 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1514 
	#°rc•n
(
s
, 
ªje˘
) \

1515 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1516 ? ((
ªje˘
)[0] == '\0' \

1517 ? 
	`°æí
 (
s
) \

1518 : ((
ªje˘
)[1] == '\0' \

1519 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1520 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1521 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1523 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1525 #i‚de‡
_FORCE_INLINES


1526 
__STRING_INLINE
 
size_t


1527 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1529 
__d0
;

1530 *
__ªs
;

1531 
__asm__
 
__vﬁ©ûe__


1540 : "Ù" (
__ªs
), "=&a" (
__d0
)

1541 : "0" (
__s
), "1" (
__ªje˘
),

1542 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1544  (
__ªs
 - 1Ë- 
__s
;

1545 
	}
}

1548 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1549 
size_t
 
__ªje˘_Àn
);

1551 
__STRING_INLINE
 
size_t


1552 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1554 
__d0
, 
__d1
, 
__d2
;

1555 c⁄° *
__ªs
;

1556 
__asm__
 
__vﬁ©ûe__


1567 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1568 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1570  (
__ªs
 - 1Ë- 
__s
;

1571 
	}
}

1573 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1574 #ifde‡
__PIC__


1576 
__STRING_INLINE
 
size_t


1577 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1579 
__d0
, 
__d1
, 
__d2
;

1580 c⁄° *
__ªs
;

1581 
__asm__
 
__vﬁ©ûe__


1598 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1599 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1601  (
__ªs
 - 1Ë- 
__s
;

1602 
	}
}

1604 
__STRING_INLINE
 
size_t


1605 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1607 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1608 c⁄° *
__ªs
;

1609 
__asm__
 
__vﬁ©ûe__


1623 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1624 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1627  (
__ªs
 - 1Ë- 
__s
;

1628 
	}
}

1634 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1635 
	#°r•n
(
s
, 
ac˚±
) \

1636 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1637 ? ((
ac˚±
)[0] == '\0' \

1638 ? ((Ë(
s
), 0) \

1639 : ((
ac˚±
)[1] == '\0' \

1640 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1641 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1642 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1644 #i‚de‡
_FORCE_INLINES


1645 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1647 
__STRING_INLINE
 
size_t


1648 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1650 
__d0
;

1651 *
__ªs
;

1653 
__asm__
 
__vﬁ©ûe__


1659 : "Ù" (
__ªs
), "=&q" (
__d0
)

1660 : "0" (
__s
), "1" (
__ac˚±
),

1661 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1663  (
__ªs
 - 1Ë- 
__s
;

1664 
	}
}

1667 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1668 
size_t
 
__ac˚±_Àn
);

1670 
__STRING_INLINE
 
size_t


1671 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1673 
__d0
, 
__d1
, 
__d2
;

1674 c⁄° *
__ªs
;

1675 
__asm__
 
__vﬁ©ûe__


1686 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1687 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1690 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1691 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1693  (
__ªs
 - 1Ë- 
__s
;

1694 
	}
}

1696 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1697 #ifde‡
__PIC__


1699 
__STRING_INLINE
 
size_t


1700 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1702 
__d0
, 
__d1
, 
__d2
;

1703 c⁄° *
__ªs
;

1704 
__asm__
 
__vﬁ©ûe__


1720 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1721 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1723  (
__ªs
 - 1Ë- 
__s
;

1724 
	}
}

1726 
__STRING_INLINE
 
size_t


1727 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1729 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1730 c⁄° *
__ªs
;

1731 
__asm__
 
__vﬁ©ûe__


1745 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1746 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1748  (
__ªs
 - 1Ë- 
__s
;

1749 
	}
}

1754 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1755 
	#°Ωbrk
(
s
, 
ac˚±
) \

1756 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1757 ? ((
ac˚±
)[0] == '\0' \

1758 ? ((Ë(
s
), (*) 0) \

1759 : ((
ac˚±
)[1] == '\0' \

1760 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1761 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1762 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1764 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1765 
size_t
 
__ac˚±_Àn
);

1767 
__STRING_INLINE
 *

1768 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1770 
__d0
, 
__d1
, 
__d2
;

1771 *
__ªs
;

1772 
__asm__
 
__vﬁ©ûe__


1787 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1788 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1790  
__ªs
;

1791 
	}
}

1793 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1794 #ifde‡
__PIC__


1796 
__STRING_INLINE
 *

1797 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1799 
__d0
, 
__d1
, 
__d2
;

1800 *
__ªs
;

1801 
__asm__
 
__vﬁ©ûe__


1822 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1823 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1825  
__ªs
;

1826 
	}
}

1828 
__STRING_INLINE
 *

1829 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1831 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1832 *
__ªs
;

1833 
__asm__
 
__vﬁ©ûe__


1852 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1853 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1855  
__ªs
;

1856 
	}
}

1861 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1862 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1863 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1864 ? ((
√edÀ
)[0] == '\0' \

1865 ? (
hay°ack
) \

1866 : ((
√edÀ
)[1] == '\0' \

1867 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1868 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1869 
	`°æí
 (
√edÀ
)))) \

1870 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1874 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1875 c⁄° 
__√edÀ
[],

1876 
size_t
 
__√edÀ_Àn
);

1878 
__STRING_INLINE
 *

1879 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1880 
size_t
 
__√edÀ_Àn
)

1882 
__d0
, 
__d1
, 
__d2
;

1883 *
__ªs
;

1884 
__asm__
 
__vﬁ©ûe__


1897 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1898 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1900  
__ªs
;

1901 
	}
}

1903 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1904 c⁄° *
__√edÀ
);

1905 #ifde‡
__PIC__


1907 
__STRING_INLINE
 *

1908 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1910 
__d0
, 
__d1
, 
__d2
;

1911 *
__ªs
;

1912 
__asm__
 
__vﬁ©ûe__


1931 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1932 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1933 "d" (
__√edÀ
)

1935  
__ªs
;

1936 
	}
}

1938 
__STRING_INLINE
 *

1939 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1941 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1942 *
__ªs
;

1943 
__asm__
 
__vﬁ©ûe__


1960 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1961 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1962 "b" (
__√edÀ
)

1964  
__ªs
;

1965 
	}
}

1971 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1972 #ifde‡
__i686__


1973 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1974 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1975 ? 
	`__buûtö_ffs
 (
w‹d
) \

1976 : ({ 
__˙t
, 
__tmp
; \

1977 
__asm__
 
__vﬁ©ûe__
 \

1980 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1981 : "rm" (
w‹d
), "1" (-1)); \

1982 
__˙t
 + 1; }))

	)

1984 #i‚de‡
ff¶


1985 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1990 #i‚de‡
_FORCE_INLINES


1991 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

52 
	#__°rög2_1b±r_p
(
__x
) \

53 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

56 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


57 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

61 #i‚de‡
_HAVE_STRING_ARCH_°rchr


62 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

63 
	#°rchr
(
s
, 
c
) \

64 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

65 && (
c
) == '\0' \

66 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

67 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

72 #ifde‡
__USE_GNU


73 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


74 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

77 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

83 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


84 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

89 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


90 #ifde‡
_USE_STRING_ARCH_°rchr


91 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

92 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

93 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

94 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

95 ? 
	`°rˇt
 (
__de°
, 
§c
) \

96 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

97 
§c
, 
n
)Ë'\0', 
__de°
)) \

98 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

100 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

106 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


107 
	#°rcmp
(
s1
, 
s2
) \

108 
__exãnsi⁄__
 \

109 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

110 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

111 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

112 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

113 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

114 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

115 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

116 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

118 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

119 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

120 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

121 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

122 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

123 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

124 : -
	`__°rcmp_cg
 (
s2
, 
s1
, 
__s2_Àn
)) \

125 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

127 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

128 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

129 (c⁄° *Ë(c⁄° *Ë(
s2
); \

130 
__ªsu…
 = \

131 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

132 - 
__s2
[0]); \

133 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

135 
__ªsu…
 = (((const *) \

136 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

137 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

139 
__ªsu…
 = (((const *) \

140 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

141 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

142 
__ªsu…
 = (((const *) \

143 (c⁄° *Ë(
s1
))[3] \

144 - 
__s2
[3]); \

147 
__ªsu…
; }))

	)

152 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


153 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

154 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

155 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

156 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

157 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

158 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

159 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

165 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


166 
	#°rc•n
(
s
, 
ªje˘
Ë
	`__buûtö_°rc•n
 (s,Ñeje˘)

	)

172 #i‚de‡
_HAVE_STRING_ARCH_°r•n


173 
	#°r•n
(
s
, 
ac˚±
Ë
	`__buûtö_°r•n
 (s,ác˚±)

	)

178 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


179 
	#°Ωbrk
(
s
, 
ac˚±
Ë
	`__buûtö_°Ωbrk
 (s,ác˚±)

	)

186 #ifde‡
__USE_MISC


188 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


189 
	#__√ed_mÆloc_™d_ˇŒoc


	)

190 
	~<°dlib.h
>

193 #i‚de‡
_HAVE_STRING_ARCH_°rdup


195 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

196 
	#__°rdup
(
s
) \

197 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

198 ? (((c⁄° *Ë(
s
))[0] == '\0' \

199 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

200 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

201 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

202 i‡(
__ªtvÆ
 !
NULL
) \

203 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

204 
__ªtvÆ
; 
	}
})) \

205 : 
	`__°rdup
 (
s
)))

	)

207 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


208 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

212 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


214 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

215 
__THROW
 
__©åibuã_mÆloc__
;

216 
	#__°∫dup
(
s
, 
n
) \

217 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

218 ? (((c⁄° *Ë(
s
))[0] == '\0' \

219 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

220 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

221 
size_t
 
__n
 = (
n
); \

222 *
__ªtvÆ
; \

223 i‡(
__n
 < 
__Àn
) \

224 
__Àn
 = 
__n
 + 1; \

225 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

226 i‡(
__ªtvÆ
 !
NULL
) \

228 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

229 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

230 
__Àn
 - 1); \

232 
__ªtvÆ
; 
	}
})) \

233 : 
	`__°∫dup
 (
s
, 
n
)))

	)

235 #ifde‡
__USE_XOPEN2K8


236 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

242 #i‚de‡
_FORCE_INLINES


243 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
	~<bôs/°rögs_f‹tifõd.h
>

96 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

97 
__THROW
 
	`__n⁄nuŒ
 ((1));

99 
__f‹tify_fun˘i⁄
 

100 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

102 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

103 
	}
}

106 
__f‹tify_fun˘i⁄
 *

107 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

109  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

110 
	}
}

112 #ifde‡
__USE_GNU


113 
__f‹tify_fun˘i⁄
 *

114 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

116  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

117 
	}
}

121 
__f‹tify_fun˘i⁄
 *

122 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

123 
size_t
 
__Àn
))

125  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

126 
	}
}

129 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

130 
size_t
 
__de°Àn
Ë
__THROW
;

131 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

132 
size_t
 
__n
), 
°≤˝y
);

134 
__f‹tify_fun˘i⁄
 *

135 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

137 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

138 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

139  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

140  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

141 
	}
}

144 
__f‹tify_fun˘i⁄
 *

145 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

147  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

148 
	}
}

151 
__f‹tify_fun˘i⁄
 *

152 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__Àn
))

155  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

156 
	}
}

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

20 
	#SYS_bdÊush
 
__NR_bdÊush


	)

21 
	#SYS_böd
 
__NR_böd


	)

22 
	#SYS_bpf
 
__NR_bpf


	)

23 
	#SYS_bªak
 
__NR_bªak


	)

24 
	#SYS_brk
 
__NR_brk


	)

25 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

26 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

27 
	#SYS_chdú
 
__NR_chdú


	)

28 
	#SYS_chmod
 
__NR_chmod


	)

29 
	#SYS_chown
 
__NR_chown


	)

30 
	#SYS_chown32
 
__NR_chown32


	)

31 
	#SYS_chroŸ
 
__NR_chroŸ


	)

32 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

33 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

34 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

35 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

36 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

37 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

38 
	#SYS_˛o£
 
__NR_˛o£


	)

39 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

40 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

41 
	#SYS_¸ót
 
__NR_¸ót


	)

42 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

43 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

44 
	#SYS_dup
 
__NR_dup


	)

45 
	#SYS_dup2
 
__NR_dup2


	)

46 
	#SYS_dup3
 
__NR_dup3


	)

47 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

48 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

49 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

50 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

51 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

52 
	#SYS_evítfd
 
__NR_evítfd


	)

53 
	#SYS_evítfd2
 
__NR_evítfd2


	)

54 
	#SYS_execve
 
__NR_execve


	)

55 
	#SYS_execvót
 
__NR_execvót


	)

56 
	#SYS_exô
 
__NR_exô


	)

57 
	#SYS_exô_group
 
__NR_exô_group


	)

58 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

59 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

60 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

61 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

62 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

63 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

64 
	#SYS_fchdú
 
__NR_fchdú


	)

65 
	#SYS_fchmod
 
__NR_fchmod


	)

66 
	#SYS_fchmod©
 
__NR_fchmod©


	)

67 
	#SYS_fchown
 
__NR_fchown


	)

68 
	#SYS_fchown32
 
__NR_fchown32


	)

69 
	#SYS_fchow«t
 
__NR_fchow«t


	)

70 
	#SYS_f˙é
 
__NR_f˙é


	)

71 
	#SYS_f˙é64
 
__NR_f˙é64


	)

72 
	#SYS_fd©async
 
__NR_fd©async


	)

73 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

74 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

75 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

76 
	#SYS_Êock
 
__NR_Êock


	)

77 
	#SYS_f‹k
 
__NR_f‹k


	)

78 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

79 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

80 
	#SYS_f°©
 
__NR_f°©


	)

81 
	#SYS_f°©64
 
__NR_f°©64


	)

82 
	#SYS_f°©©64
 
__NR_f°©©64


	)

83 
	#SYS_f°©fs
 
__NR_f°©fs


	)

84 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

85 
	#SYS_fsync
 
__NR_fsync


	)

86 
	#SYS_·ime
 
__NR_·ime


	)

87 
	#SYS_·runˇã
 
__NR_·runˇã


	)

88 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

89 
	#SYS_fuãx
 
__NR_fuãx


	)

90 
	#SYS_futimeßt
 
__NR_futimeßt


	)

91 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

92 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

93 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

94 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

95 
	#SYS_gë˝u
 
__NR_gë˝u


	)

96 
	#SYS_gëcwd
 
__NR_gëcwd


	)

97 
	#SYS_gëdíts
 
__NR_gëdíts


	)

98 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

99 
	#SYS_gëegid
 
__NR_gëegid


	)

100 
	#SYS_gëegid32
 
__NR_gëegid32


	)

101 
	#SYS_gëeuid
 
__NR_gëeuid


	)

102 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

103 
	#SYS_gëgid
 
__NR_gëgid


	)

104 
	#SYS_gëgid32
 
__NR_gëgid32


	)

105 
	#SYS_gëgroups
 
__NR_gëgroups


	)

106 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

107 
	#SYS_gëôimî
 
__NR_gëôimî


	)

108 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

109 
	#SYS_gëpgid
 
__NR_gëpgid


	)

110 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

111 
	#SYS_gëpid
 
__NR_gëpid


	)

112 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

113 
	#SYS_gëµid
 
__NR_gëµid


	)

114 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

115 
	#SYS_gëøndom
 
__NR_gëøndom


	)

116 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

117 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

118 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

119 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

120 
	#SYS_gëæimô
 
__NR_gëæimô


	)

121 
	#SYS_gërußge
 
__NR_gërußge


	)

122 
	#SYS_gësid
 
__NR_gësid


	)

123 
	#SYS_gësock«me
 
__NR_gësock«me


	)

124 
	#SYS_gësock›t
 
__NR_gësock›t


	)

125 
	#SYS_gëtid
 
__NR_gëtid


	)

126 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

127 
	#SYS_gëuid
 
__NR_gëuid


	)

128 
	#SYS_gëuid32
 
__NR_gëuid32


	)

129 
	#SYS_gëx©å
 
__NR_gëx©å


	)

130 
	#SYS_gây
 
__NR_gây


	)

131 
	#SYS_idÀ
 
__NR_idÀ


	)

132 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

133 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

134 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

135 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

136 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

137 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

138 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

139 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

140 
	#SYS_io_£tup
 
__NR_io_£tup


	)

141 
	#SYS_io_submô
 
__NR_io_submô


	)

142 
	#SYS_io˘l
 
__NR_io˘l


	)

143 
	#SYS_i›îm
 
__NR_i›îm


	)

144 
	#SYS_i›l
 
__NR_i›l


	)

145 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

146 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

147 
	#SYS_ùc
 
__NR_ùc


	)

148 
	#SYS_kcmp
 
__NR_kcmp


	)

149 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

150 
	#SYS_key˘l
 
__NR_key˘l


	)

151 
	#SYS_kûl
 
__NR_kûl


	)

152 
	#SYS_lchown
 
__NR_lchown


	)

153 
	#SYS_lchown32
 
__NR_lchown32


	)

154 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

155 
	#SYS_lök
 
__NR_lök


	)

156 
	#SYS_lök©
 
__NR_lök©


	)

157 
	#SYS_li°í
 
__NR_li°í


	)

158 
	#SYS_li°x©å
 
__NR_li°x©å


	)

159 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

160 
	#SYS_lock
 
__NR_lock


	)

161 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

162 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

163 
	#SYS_l£ek
 
__NR_l£ek


	)

164 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

165 
	#SYS_l°©
 
__NR_l°©


	)

166 
	#SYS_l°©64
 
__NR_l°©64


	)

167 
	#SYS_madvi£
 
__NR_madvi£


	)

168 
	#SYS_mböd
 
__NR_mböd


	)

169 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

170 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

171 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

172 
	#SYS_möc‹e
 
__NR_möc‹e


	)

173 
	#SYS_mkdú
 
__NR_mkdú


	)

174 
	#SYS_mkdú©
 
__NR_mkdú©


	)

175 
	#SYS_mknod
 
__NR_mknod


	)

176 
	#SYS_mknod©
 
__NR_mknod©


	)

177 
	#SYS_mlock
 
__NR_mlock


	)

178 
	#SYS_mlock2
 
__NR_mlock2


	)

179 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

180 
	#SYS_mm≠
 
__NR_mm≠


	)

181 
	#SYS_mm≠2
 
__NR_mm≠2


	)

182 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

183 
	#SYS_mou¡
 
__NR_mou¡


	)

184 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

185 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

186 
	#SYS_mpx
 
__NR_mpx


	)

187 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

188 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

189 
	#SYS_mq_›í
 
__NR_mq_›í


	)

190 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

191 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

192 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

193 
	#SYS_mªm≠
 
__NR_mªm≠


	)

194 
	#SYS_msync
 
__NR_msync


	)

195 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

196 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

197 
	#SYS_munm≠
 
__NR_munm≠


	)

198 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

199 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

200 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

201 
	#SYS_ni˚
 
__NR_ni˚


	)

202 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

203 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

204 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

205 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

206 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

207 
	#SYS_›í
 
__NR_›í


	)

208 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

209 
	#SYS_›í©
 
__NR_›í©


	)

210 
	#SYS_∑u£
 
__NR_∑u£


	)

211 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

212 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

213 
	#SYS_pùe
 
__NR_pùe


	)

214 
	#SYS_pùe2
 
__NR_pùe2


	)

215 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

216 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

217 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

218 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

219 
	#SYS_pﬁl
 
__NR_pﬁl


	)

220 
	#SYS_µﬁl
 
__NR_µﬁl


	)

221 
	#SYS_¥˘l
 
__NR_¥˘l


	)

222 
	#SYS_¥ód64
 
__NR_¥ód64


	)

223 
	#SYS_¥ódv
 
__NR_¥ódv


	)

224 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

225 
	#SYS_¥limô64
 
__NR_¥limô64


	)

226 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

227 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

228 
	#SYS_¥of
 
__NR_¥of


	)

229 
	#SYS_¥ofû
 
__NR_¥ofû


	)

230 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

231 
	#SYS_±ø˚
 
__NR_±ø˚


	)

232 
	#SYS_puçmsg
 
__NR_puçmsg


	)

233 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

234 
	#SYS_pwrôev
 
__NR_pwrôev


	)

235 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

236 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

237 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

238 
	#SYS_ªad
 
__NR_ªad


	)

239 
	#SYS_ªadahód
 
__NR_ªadahód


	)

240 
	#SYS_ªaddú
 
__NR_ªaddú


	)

241 
	#SYS_ªadlök
 
__NR_ªadlök


	)

242 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

243 
	#SYS_ªadv
 
__NR_ªadv


	)

244 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

245 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

246 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

247 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

248 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

249 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

250 
	#SYS_ª«me
 
__NR_ª«me


	)

251 
	#SYS_ª«mót
 
__NR_ª«mót


	)

252 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

253 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

254 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

255 
	#SYS_rmdú
 
__NR_rmdú


	)

256 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

257 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

258 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

259 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

260 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

261 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

262 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

263 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

264 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

265 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

266 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

267 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

268 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

269 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

270 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

271 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

272 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

273 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

274 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

275 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

276 
	#SYS_£ccomp
 
__NR_£ccomp


	)

277 
	#SYS_£À˘
 
__NR_£À˘


	)

278 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

279 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

280 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

281 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

282 
	#SYS_£ndto
 
__NR_£ndto


	)

283 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

284 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

285 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

286 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

287 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

288 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

289 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

290 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

291 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

292 
	#SYS_£tgid
 
__NR_£tgid


	)

293 
	#SYS_£tgid32
 
__NR_£tgid32


	)

294 
	#SYS_£tgroups
 
__NR_£tgroups


	)

295 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

296 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

297 
	#SYS_£tôimî
 
__NR_£tôimî


	)

298 
	#SYS_£äs
 
__NR_£äs


	)

299 
	#SYS_£çgid
 
__NR_£çgid


	)

300 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

301 
	#SYS_£åegid
 
__NR_£åegid


	)

302 
	#SYS_£åegid32
 
__NR_£åegid32


	)

303 
	#SYS_£åesgid
 
__NR_£åesgid


	)

304 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

305 
	#SYS_£åesuid
 
__NR_£åesuid


	)

306 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

307 
	#SYS_£åeuid
 
__NR_£åeuid


	)

308 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

309 
	#SYS_£ålimô
 
__NR_£ålimô


	)

310 
	#SYS_£tsid
 
__NR_£tsid


	)

311 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

312 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

313 
	#SYS_£tuid
 
__NR_£tuid


	)

314 
	#SYS_£tuid32
 
__NR_£tuid32


	)

315 
	#SYS_£tx©å
 
__NR_£tx©å


	)

316 
	#SYS_sgëmask
 
__NR_sgëmask


	)

317 
	#SYS_shutdown
 
__NR_shutdown


	)

318 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

319 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

320 
	#SYS_sig«l
 
__NR_sig«l


	)

321 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

322 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

323 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

324 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

325 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

326 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

327 
	#SYS_sockë
 
__NR_sockë


	)

328 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

329 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

330 
	#SYS_•li˚
 
__NR_•li˚


	)

331 
	#SYS_s£tmask
 
__NR_s£tmask


	)

332 
	#SYS_°©
 
__NR_°©


	)

333 
	#SYS_°©64
 
__NR_°©64


	)

334 
	#SYS_°©fs
 
__NR_°©fs


	)

335 
	#SYS_°©fs64
 
__NR_°©fs64


	)

336 
	#SYS_°©x
 
__NR_°©x


	)

337 
	#SYS_°ime
 
__NR_°ime


	)

338 
	#SYS_°ty
 
__NR_°ty


	)

339 
	#SYS_sw≠off
 
__NR_sw≠off


	)

340 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

341 
	#SYS_symlök
 
__NR_symlök


	)

342 
	#SYS_symlök©
 
__NR_symlök©


	)

343 
	#SYS_sync
 
__NR_sync


	)

344 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

345 
	#SYS_syncfs
 
__NR_syncfs


	)

346 
	#SYS_sysfs
 
__NR_sysfs


	)

347 
	#SYS_sysöfo
 
__NR_sysöfo


	)

348 
	#SYS_sy¶og
 
__NR_sy¶og


	)

349 
	#SYS_ãe
 
__NR_ãe


	)

350 
	#SYS_tgkûl
 
__NR_tgkûl


	)

351 
	#SYS_time
 
__NR_time


	)

352 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

353 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

354 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

355 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

356 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

357 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

358 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

359 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

360 
	#SYS_times
 
__NR_times


	)

361 
	#SYS_tkûl
 
__NR_tkûl


	)

362 
	#SYS_åunˇã
 
__NR_åunˇã


	)

363 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

364 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

365 
	#SYS_ulimô
 
__NR_ulimô


	)

366 
	#SYS_umask
 
__NR_umask


	)

367 
	#SYS_umou¡
 
__NR_umou¡


	)

368 
	#SYS_umou¡2
 
__NR_umou¡2


	)

369 
	#SYS_u«me
 
__NR_u«me


	)

370 
	#SYS_u∆ök
 
__NR_u∆ök


	)

371 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

372 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

373 
	#SYS_u£lib
 
__NR_u£lib


	)

374 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

375 
	#SYS_u°©
 
__NR_u°©


	)

376 
	#SYS_utime
 
__NR_utime


	)

377 
	#SYS_utimíßt
 
__NR_utimíßt


	)

378 
	#SYS_utimes
 
__NR_utimes


	)

379 
	#SYS_vf‹k
 
__NR_vf‹k


	)

380 
	#SYS_vh™gup
 
__NR_vh™gup


	)

381 
	#SYS_vm86
 
__NR_vm86


	)

382 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

383 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

384 
	#SYS_v£rvî
 
__NR_v£rvî


	)

385 
	#SYS_waô4
 
__NR_waô4


	)

386 
	#SYS_waôid
 
__NR_waôid


	)

387 
	#SYS_waôpid
 
__NR_waôpid


	)

388 
	#SYS_wrôe
 
__NR_wrôe


	)

389 
	#SYS_wrôev
 
__NR_wrôev


	)

391 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


392 
	#SYS__sys˘l
 
__NR__sys˘l


	)

393 
	#SYS_ac˚±
 
__NR_ac˚±


	)

394 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

395 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

396 
	#SYS_ac˘
 
__NR_ac˘


	)

397 
	#SYS_add_key
 
__NR_add_key


	)

398 
	#SYS_adjtimex
 
__NR_adjtimex


	)

399 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

400 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

401 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

402 
	#SYS_böd
 
__NR_böd


	)

403 
	#SYS_bpf
 
__NR_bpf


	)

404 
	#SYS_brk
 
__NR_brk


	)

405 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

406 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

407 
	#SYS_chdú
 
__NR_chdú


	)

408 
	#SYS_chmod
 
__NR_chmod


	)

409 
	#SYS_chown
 
__NR_chown


	)

410 
	#SYS_chroŸ
 
__NR_chroŸ


	)

411 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

412 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

413 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

414 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

415 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

416 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

417 
	#SYS_˛o£
 
__NR_˛o£


	)

418 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

419 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

420 
	#SYS_¸ót
 
__NR_¸ót


	)

421 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

422 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

423 
	#SYS_dup
 
__NR_dup


	)

424 
	#SYS_dup2
 
__NR_dup2


	)

425 
	#SYS_dup3
 
__NR_dup3


	)

426 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

427 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

428 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

429 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

430 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

431 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

432 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

433 
	#SYS_evítfd
 
__NR_evítfd


	)

434 
	#SYS_evítfd2
 
__NR_evítfd2


	)

435 
	#SYS_execve
 
__NR_execve


	)

436 
	#SYS_execvót
 
__NR_execvót


	)

437 
	#SYS_exô
 
__NR_exô


	)

438 
	#SYS_exô_group
 
__NR_exô_group


	)

439 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

440 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

441 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

442 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

443 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

444 
	#SYS_fchdú
 
__NR_fchdú


	)

445 
	#SYS_fchmod
 
__NR_fchmod


	)

446 
	#SYS_fchmod©
 
__NR_fchmod©


	)

447 
	#SYS_fchown
 
__NR_fchown


	)

448 
	#SYS_fchow«t
 
__NR_fchow«t


	)

449 
	#SYS_f˙é
 
__NR_f˙é


	)

450 
	#SYS_fd©async
 
__NR_fd©async


	)

451 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

452 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

453 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

454 
	#SYS_Êock
 
__NR_Êock


	)

455 
	#SYS_f‹k
 
__NR_f‹k


	)

456 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

457 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

458 
	#SYS_f°©
 
__NR_f°©


	)

459 
	#SYS_f°©fs
 
__NR_f°©fs


	)

460 
	#SYS_fsync
 
__NR_fsync


	)

461 
	#SYS_·runˇã
 
__NR_·runˇã


	)

462 
	#SYS_fuãx
 
__NR_fuãx


	)

463 
	#SYS_futimeßt
 
__NR_futimeßt


	)

464 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

465 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

466 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

467 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

468 
	#SYS_gë˝u
 
__NR_gë˝u


	)

469 
	#SYS_gëcwd
 
__NR_gëcwd


	)

470 
	#SYS_gëdíts
 
__NR_gëdíts


	)

471 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

472 
	#SYS_gëegid
 
__NR_gëegid


	)

473 
	#SYS_gëeuid
 
__NR_gëeuid


	)

474 
	#SYS_gëgid
 
__NR_gëgid


	)

475 
	#SYS_gëgroups
 
__NR_gëgroups


	)

476 
	#SYS_gëôimî
 
__NR_gëôimî


	)

477 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

478 
	#SYS_gëpgid
 
__NR_gëpgid


	)

479 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

480 
	#SYS_gëpid
 
__NR_gëpid


	)

481 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

482 
	#SYS_gëµid
 
__NR_gëµid


	)

483 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

484 
	#SYS_gëøndom
 
__NR_gëøndom


	)

485 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

486 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

487 
	#SYS_gëæimô
 
__NR_gëæimô


	)

488 
	#SYS_gërußge
 
__NR_gërußge


	)

489 
	#SYS_gësid
 
__NR_gësid


	)

490 
	#SYS_gësock«me
 
__NR_gësock«me


	)

491 
	#SYS_gësock›t
 
__NR_gësock›t


	)

492 
	#SYS_gëtid
 
__NR_gëtid


	)

493 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

494 
	#SYS_gëuid
 
__NR_gëuid


	)

495 
	#SYS_gëx©å
 
__NR_gëx©å


	)

496 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

497 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

498 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

499 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

500 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

501 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

502 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

503 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

504 
	#SYS_io_£tup
 
__NR_io_£tup


	)

505 
	#SYS_io_submô
 
__NR_io_submô


	)

506 
	#SYS_io˘l
 
__NR_io˘l


	)

507 
	#SYS_i›îm
 
__NR_i›îm


	)

508 
	#SYS_i›l
 
__NR_i›l


	)

509 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

510 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

511 
	#SYS_kcmp
 
__NR_kcmp


	)

512 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

513 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

514 
	#SYS_key˘l
 
__NR_key˘l


	)

515 
	#SYS_kûl
 
__NR_kûl


	)

516 
	#SYS_lchown
 
__NR_lchown


	)

517 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

518 
	#SYS_lök
 
__NR_lök


	)

519 
	#SYS_lök©
 
__NR_lök©


	)

520 
	#SYS_li°í
 
__NR_li°í


	)

521 
	#SYS_li°x©å
 
__NR_li°x©å


	)

522 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

523 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

524 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

525 
	#SYS_l£ek
 
__NR_l£ek


	)

526 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

527 
	#SYS_l°©
 
__NR_l°©


	)

528 
	#SYS_madvi£
 
__NR_madvi£


	)

529 
	#SYS_mböd
 
__NR_mböd


	)

530 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

531 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

532 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

533 
	#SYS_möc‹e
 
__NR_möc‹e


	)

534 
	#SYS_mkdú
 
__NR_mkdú


	)

535 
	#SYS_mkdú©
 
__NR_mkdú©


	)

536 
	#SYS_mknod
 
__NR_mknod


	)

537 
	#SYS_mknod©
 
__NR_mknod©


	)

538 
	#SYS_mlock
 
__NR_mlock


	)

539 
	#SYS_mlock2
 
__NR_mlock2


	)

540 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

541 
	#SYS_mm≠
 
__NR_mm≠


	)

542 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

543 
	#SYS_mou¡
 
__NR_mou¡


	)

544 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

545 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

546 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

547 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

548 
	#SYS_mq_›í
 
__NR_mq_›í


	)

549 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

550 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

551 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

552 
	#SYS_mªm≠
 
__NR_mªm≠


	)

553 
	#SYS_msg˘l
 
__NR_msg˘l


	)

554 
	#SYS_msggë
 
__NR_msggë


	)

555 
	#SYS_msgrcv
 
__NR_msgrcv


	)

556 
	#SYS_msg¢d
 
__NR_msg¢d


	)

557 
	#SYS_msync
 
__NR_msync


	)

558 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

559 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

560 
	#SYS_munm≠
 
__NR_munm≠


	)

561 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

562 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

563 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

564 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

565 
	#SYS_›í
 
__NR_›í


	)

566 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

567 
	#SYS_›í©
 
__NR_›í©


	)

568 
	#SYS_∑u£
 
__NR_∑u£


	)

569 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

570 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

571 
	#SYS_pùe
 
__NR_pùe


	)

572 
	#SYS_pùe2
 
__NR_pùe2


	)

573 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

574 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

575 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

576 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

577 
	#SYS_pﬁl
 
__NR_pﬁl


	)

578 
	#SYS_µﬁl
 
__NR_µﬁl


	)

579 
	#SYS_¥˘l
 
__NR_¥˘l


	)

580 
	#SYS_¥ód64
 
__NR_¥ód64


	)

581 
	#SYS_¥ódv
 
__NR_¥ódv


	)

582 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

583 
	#SYS_¥limô64
 
__NR_¥limô64


	)

584 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

585 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

586 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

587 
	#SYS_±ø˚
 
__NR_±ø˚


	)

588 
	#SYS_puçmsg
 
__NR_puçmsg


	)

589 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

590 
	#SYS_pwrôev
 
__NR_pwrôev


	)

591 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

592 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

593 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

594 
	#SYS_ªad
 
__NR_ªad


	)

595 
	#SYS_ªadahód
 
__NR_ªadahód


	)

596 
	#SYS_ªadlök
 
__NR_ªadlök


	)

597 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

598 
	#SYS_ªadv
 
__NR_ªadv


	)

599 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

600 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

601 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

602 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

603 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

604 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

605 
	#SYS_ª«me
 
__NR_ª«me


	)

606 
	#SYS_ª«mót
 
__NR_ª«mót


	)

607 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

608 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

609 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

610 
	#SYS_rmdú
 
__NR_rmdú


	)

611 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

612 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

613 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

614 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

615 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

616 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

617 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

618 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

619 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

620 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

621 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

622 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

623 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

624 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

625 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

626 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

627 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

628 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

629 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

630 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

631 
	#SYS_£ccomp
 
__NR_£ccomp


	)

632 
	#SYS_£curôy
 
__NR_£curôy


	)

633 
	#SYS_£À˘
 
__NR_£À˘


	)

634 
	#SYS_£m˘l
 
__NR_£m˘l


	)

635 
	#SYS_£mgë
 
__NR_£mgë


	)

636 
	#SYS_£m›
 
__NR_£m›


	)

637 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

638 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

639 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

640 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

641 
	#SYS_£ndto
 
__NR_£ndto


	)

642 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

643 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

644 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

645 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

646 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

647 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

648 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

649 
	#SYS_£tgid
 
__NR_£tgid


	)

650 
	#SYS_£tgroups
 
__NR_£tgroups


	)

651 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

652 
	#SYS_£tôimî
 
__NR_£tôimî


	)

653 
	#SYS_£äs
 
__NR_£äs


	)

654 
	#SYS_£çgid
 
__NR_£çgid


	)

655 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

656 
	#SYS_£åegid
 
__NR_£åegid


	)

657 
	#SYS_£åesgid
 
__NR_£åesgid


	)

658 
	#SYS_£åesuid
 
__NR_£åesuid


	)

659 
	#SYS_£åeuid
 
__NR_£åeuid


	)

660 
	#SYS_£ålimô
 
__NR_£ålimô


	)

661 
	#SYS_£tsid
 
__NR_£tsid


	)

662 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

663 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

664 
	#SYS_£tuid
 
__NR_£tuid


	)

665 
	#SYS_£tx©å
 
__NR_£tx©å


	)

666 
	#SYS_shm©
 
__NR_shm©


	)

667 
	#SYS_shm˘l
 
__NR_shm˘l


	)

668 
	#SYS_shmdt
 
__NR_shmdt


	)

669 
	#SYS_shmgë
 
__NR_shmgë


	)

670 
	#SYS_shutdown
 
__NR_shutdown


	)

671 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

672 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

673 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

674 
	#SYS_sockë
 
__NR_sockë


	)

675 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

676 
	#SYS_•li˚
 
__NR_•li˚


	)

677 
	#SYS_°©
 
__NR_°©


	)

678 
	#SYS_°©fs
 
__NR_°©fs


	)

679 
	#SYS_°©x
 
__NR_°©x


	)

680 
	#SYS_sw≠off
 
__NR_sw≠off


	)

681 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

682 
	#SYS_symlök
 
__NR_symlök


	)

683 
	#SYS_symlök©
 
__NR_symlök©


	)

684 
	#SYS_sync
 
__NR_sync


	)

685 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

686 
	#SYS_syncfs
 
__NR_syncfs


	)

687 
	#SYS_sysfs
 
__NR_sysfs


	)

688 
	#SYS_sysöfo
 
__NR_sysöfo


	)

689 
	#SYS_sy¶og
 
__NR_sy¶og


	)

690 
	#SYS_ãe
 
__NR_ãe


	)

691 
	#SYS_tgkûl
 
__NR_tgkûl


	)

692 
	#SYS_time
 
__NR_time


	)

693 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

694 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

695 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

696 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

697 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

698 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

699 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

700 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

701 
	#SYS_times
 
__NR_times


	)

702 
	#SYS_tkûl
 
__NR_tkûl


	)

703 
	#SYS_åunˇã
 
__NR_åunˇã


	)

704 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

705 
	#SYS_umask
 
__NR_umask


	)

706 
	#SYS_umou¡2
 
__NR_umou¡2


	)

707 
	#SYS_u«me
 
__NR_u«me


	)

708 
	#SYS_u∆ök
 
__NR_u∆ök


	)

709 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

710 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

711 
	#SYS_u£lib
 
__NR_u£lib


	)

712 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

713 
	#SYS_u°©
 
__NR_u°©


	)

714 
	#SYS_utime
 
__NR_utime


	)

715 
	#SYS_utimíßt
 
__NR_utimíßt


	)

716 
	#SYS_utimes
 
__NR_utimes


	)

717 
	#SYS_vf‹k
 
__NR_vf‹k


	)

718 
	#SYS_vh™gup
 
__NR_vh™gup


	)

719 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

720 
	#SYS_v£rvî
 
__NR_v£rvî


	)

721 
	#SYS_waô4
 
__NR_waô4


	)

722 
	#SYS_waôid
 
__NR_waôid


	)

723 
	#SYS_wrôe
 
__NR_wrôe


	)

724 
	#SYS_wrôev
 
__NR_wrôev


	)

726 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


727 
	#SYS_ac˚±
 
__NR_ac˚±


	)

728 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

729 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

730 
	#SYS_ac˘
 
__NR_ac˘


	)

731 
	#SYS_add_key
 
__NR_add_key


	)

732 
	#SYS_adjtimex
 
__NR_adjtimex


	)

733 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

734 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

735 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

736 
	#SYS_böd
 
__NR_böd


	)

737 
	#SYS_bpf
 
__NR_bpf


	)

738 
	#SYS_brk
 
__NR_brk


	)

739 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

740 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

741 
	#SYS_chdú
 
__NR_chdú


	)

742 
	#SYS_chmod
 
__NR_chmod


	)

743 
	#SYS_chown
 
__NR_chown


	)

744 
	#SYS_chroŸ
 
__NR_chroŸ


	)

745 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

746 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

747 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

748 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

749 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

750 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

751 
	#SYS_˛o£
 
__NR_˛o£


	)

752 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

753 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

754 
	#SYS_¸ót
 
__NR_¸ót


	)

755 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

756 
	#SYS_dup
 
__NR_dup


	)

757 
	#SYS_dup2
 
__NR_dup2


	)

758 
	#SYS_dup3
 
__NR_dup3


	)

759 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

760 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

761 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

762 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

763 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

764 
	#SYS_evítfd
 
__NR_evítfd


	)

765 
	#SYS_evítfd2
 
__NR_evítfd2


	)

766 
	#SYS_execve
 
__NR_execve


	)

767 
	#SYS_execvót
 
__NR_execvót


	)

768 
	#SYS_exô
 
__NR_exô


	)

769 
	#SYS_exô_group
 
__NR_exô_group


	)

770 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

771 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

772 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

773 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

774 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

775 
	#SYS_fchdú
 
__NR_fchdú


	)

776 
	#SYS_fchmod
 
__NR_fchmod


	)

777 
	#SYS_fchmod©
 
__NR_fchmod©


	)

778 
	#SYS_fchown
 
__NR_fchown


	)

779 
	#SYS_fchow«t
 
__NR_fchow«t


	)

780 
	#SYS_f˙é
 
__NR_f˙é


	)

781 
	#SYS_fd©async
 
__NR_fd©async


	)

782 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

783 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

784 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

785 
	#SYS_Êock
 
__NR_Êock


	)

786 
	#SYS_f‹k
 
__NR_f‹k


	)

787 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

788 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

789 
	#SYS_f°©
 
__NR_f°©


	)

790 
	#SYS_f°©fs
 
__NR_f°©fs


	)

791 
	#SYS_fsync
 
__NR_fsync


	)

792 
	#SYS_·runˇã
 
__NR_·runˇã


	)

793 
	#SYS_fuãx
 
__NR_fuãx


	)

794 
	#SYS_futimeßt
 
__NR_futimeßt


	)

795 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

796 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

797 
	#SYS_gë˝u
 
__NR_gë˝u


	)

798 
	#SYS_gëcwd
 
__NR_gëcwd


	)

799 
	#SYS_gëdíts
 
__NR_gëdíts


	)

800 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

801 
	#SYS_gëegid
 
__NR_gëegid


	)

802 
	#SYS_gëeuid
 
__NR_gëeuid


	)

803 
	#SYS_gëgid
 
__NR_gëgid


	)

804 
	#SYS_gëgroups
 
__NR_gëgroups


	)

805 
	#SYS_gëôimî
 
__NR_gëôimî


	)

806 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

807 
	#SYS_gëpgid
 
__NR_gëpgid


	)

808 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

809 
	#SYS_gëpid
 
__NR_gëpid


	)

810 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

811 
	#SYS_gëµid
 
__NR_gëµid


	)

812 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

813 
	#SYS_gëøndom
 
__NR_gëøndom


	)

814 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

815 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

816 
	#SYS_gëæimô
 
__NR_gëæimô


	)

817 
	#SYS_gërußge
 
__NR_gërußge


	)

818 
	#SYS_gësid
 
__NR_gësid


	)

819 
	#SYS_gësock«me
 
__NR_gësock«me


	)

820 
	#SYS_gësock›t
 
__NR_gësock›t


	)

821 
	#SYS_gëtid
 
__NR_gëtid


	)

822 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

823 
	#SYS_gëuid
 
__NR_gëuid


	)

824 
	#SYS_gëx©å
 
__NR_gëx©å


	)

825 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

826 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

827 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

828 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

829 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

830 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

831 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

832 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

833 
	#SYS_io_£tup
 
__NR_io_£tup


	)

834 
	#SYS_io_submô
 
__NR_io_submô


	)

835 
	#SYS_io˘l
 
__NR_io˘l


	)

836 
	#SYS_i›îm
 
__NR_i›îm


	)

837 
	#SYS_i›l
 
__NR_i›l


	)

838 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

839 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

840 
	#SYS_kcmp
 
__NR_kcmp


	)

841 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

842 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

843 
	#SYS_key˘l
 
__NR_key˘l


	)

844 
	#SYS_kûl
 
__NR_kûl


	)

845 
	#SYS_lchown
 
__NR_lchown


	)

846 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

847 
	#SYS_lök
 
__NR_lök


	)

848 
	#SYS_lök©
 
__NR_lök©


	)

849 
	#SYS_li°í
 
__NR_li°í


	)

850 
	#SYS_li°x©å
 
__NR_li°x©å


	)

851 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

852 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

853 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

854 
	#SYS_l£ek
 
__NR_l£ek


	)

855 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

856 
	#SYS_l°©
 
__NR_l°©


	)

857 
	#SYS_madvi£
 
__NR_madvi£


	)

858 
	#SYS_mböd
 
__NR_mböd


	)

859 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

860 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

861 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

862 
	#SYS_möc‹e
 
__NR_möc‹e


	)

863 
	#SYS_mkdú
 
__NR_mkdú


	)

864 
	#SYS_mkdú©
 
__NR_mkdú©


	)

865 
	#SYS_mknod
 
__NR_mknod


	)

866 
	#SYS_mknod©
 
__NR_mknod©


	)

867 
	#SYS_mlock
 
__NR_mlock


	)

868 
	#SYS_mlock2
 
__NR_mlock2


	)

869 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

870 
	#SYS_mm≠
 
__NR_mm≠


	)

871 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

872 
	#SYS_mou¡
 
__NR_mou¡


	)

873 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

874 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

875 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

876 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

877 
	#SYS_mq_›í
 
__NR_mq_›í


	)

878 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

879 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

880 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

881 
	#SYS_mªm≠
 
__NR_mªm≠


	)

882 
	#SYS_msg˘l
 
__NR_msg˘l


	)

883 
	#SYS_msggë
 
__NR_msggë


	)

884 
	#SYS_msgrcv
 
__NR_msgrcv


	)

885 
	#SYS_msg¢d
 
__NR_msg¢d


	)

886 
	#SYS_msync
 
__NR_msync


	)

887 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

888 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

889 
	#SYS_munm≠
 
__NR_munm≠


	)

890 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

891 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

892 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

893 
	#SYS_›í
 
__NR_›í


	)

894 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

895 
	#SYS_›í©
 
__NR_›í©


	)

896 
	#SYS_∑u£
 
__NR_∑u£


	)

897 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

898 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

899 
	#SYS_pùe
 
__NR_pùe


	)

900 
	#SYS_pùe2
 
__NR_pùe2


	)

901 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

902 
	#SYS_pkey_Æloc
 
__NR_pkey_Æloc


	)

903 
	#SYS_pkey_‰ì
 
__NR_pkey_‰ì


	)

904 
	#SYS_pkey_m¥Ÿe˘
 
__NR_pkey_m¥Ÿe˘


	)

905 
	#SYS_pﬁl
 
__NR_pﬁl


	)

906 
	#SYS_µﬁl
 
__NR_µﬁl


	)

907 
	#SYS_¥˘l
 
__NR_¥˘l


	)

908 
	#SYS_¥ód64
 
__NR_¥ód64


	)

909 
	#SYS_¥ódv
 
__NR_¥ódv


	)

910 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

911 
	#SYS_¥limô64
 
__NR_¥limô64


	)

912 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

913 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

914 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

915 
	#SYS_±ø˚
 
__NR_±ø˚


	)

916 
	#SYS_puçmsg
 
__NR_puçmsg


	)

917 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

918 
	#SYS_pwrôev
 
__NR_pwrôev


	)

919 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

920 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

921 
	#SYS_ªad
 
__NR_ªad


	)

922 
	#SYS_ªadahód
 
__NR_ªadahód


	)

923 
	#SYS_ªadlök
 
__NR_ªadlök


	)

924 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

925 
	#SYS_ªadv
 
__NR_ªadv


	)

926 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

927 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

928 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

929 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

930 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

931 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

932 
	#SYS_ª«me
 
__NR_ª«me


	)

933 
	#SYS_ª«mót
 
__NR_ª«mót


	)

934 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

935 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

936 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

937 
	#SYS_rmdú
 
__NR_rmdú


	)

938 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

939 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

940 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

941 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

942 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

943 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

944 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

945 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

946 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

947 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

948 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

949 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

950 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

951 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

952 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

953 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

954 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

955 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

956 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

957 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

958 
	#SYS_£ccomp
 
__NR_£ccomp


	)

959 
	#SYS_£curôy
 
__NR_£curôy


	)

960 
	#SYS_£À˘
 
__NR_£À˘


	)

961 
	#SYS_£m˘l
 
__NR_£m˘l


	)

962 
	#SYS_£mgë
 
__NR_£mgë


	)

963 
	#SYS_£m›
 
__NR_£m›


	)

964 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

965 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

966 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

967 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

968 
	#SYS_£ndto
 
__NR_£ndto


	)

969 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

970 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

971 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

972 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

973 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

974 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

975 
	#SYS_£tgid
 
__NR_£tgid


	)

976 
	#SYS_£tgroups
 
__NR_£tgroups


	)

977 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

978 
	#SYS_£tôimî
 
__NR_£tôimî


	)

979 
	#SYS_£äs
 
__NR_£äs


	)

980 
	#SYS_£çgid
 
__NR_£çgid


	)

981 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

982 
	#SYS_£åegid
 
__NR_£åegid


	)

983 
	#SYS_£åesgid
 
__NR_£åesgid


	)

984 
	#SYS_£åesuid
 
__NR_£åesuid


	)

985 
	#SYS_£åeuid
 
__NR_£åeuid


	)

986 
	#SYS_£ålimô
 
__NR_£ålimô


	)

987 
	#SYS_£tsid
 
__NR_£tsid


	)

988 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

989 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

990 
	#SYS_£tuid
 
__NR_£tuid


	)

991 
	#SYS_£tx©å
 
__NR_£tx©å


	)

992 
	#SYS_shm©
 
__NR_shm©


	)

993 
	#SYS_shm˘l
 
__NR_shm˘l


	)

994 
	#SYS_shmdt
 
__NR_shmdt


	)

995 
	#SYS_shmgë
 
__NR_shmgë


	)

996 
	#SYS_shutdown
 
__NR_shutdown


	)

997 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

998 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

999 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

1000 
	#SYS_sockë
 
__NR_sockë


	)

1001 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

1002 
	#SYS_•li˚
 
__NR_•li˚


	)

1003 
	#SYS_°©
 
__NR_°©


	)

1004 
	#SYS_°©fs
 
__NR_°©fs


	)

1005 
	#SYS_°©x
 
__NR_°©x


	)

1006 
	#SYS_sw≠off
 
__NR_sw≠off


	)

1007 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

1008 
	#SYS_symlök
 
__NR_symlök


	)

1009 
	#SYS_symlök©
 
__NR_symlök©


	)

1010 
	#SYS_sync
 
__NR_sync


	)

1011 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

1012 
	#SYS_syncfs
 
__NR_syncfs


	)

1013 
	#SYS_sysfs
 
__NR_sysfs


	)

1014 
	#SYS_sysöfo
 
__NR_sysöfo


	)

1015 
	#SYS_sy¶og
 
__NR_sy¶og


	)

1016 
	#SYS_ãe
 
__NR_ãe


	)

1017 
	#SYS_tgkûl
 
__NR_tgkûl


	)

1018 
	#SYS_time
 
__NR_time


	)

1019 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

1020 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

1021 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

1022 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

1023 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

1024 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

1025 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

1026 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

1027 
	#SYS_times
 
__NR_times


	)

1028 
	#SYS_tkûl
 
__NR_tkûl


	)

1029 
	#SYS_åunˇã
 
__NR_åunˇã


	)

1030 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

1031 
	#SYS_umask
 
__NR_umask


	)

1032 
	#SYS_umou¡2
 
__NR_umou¡2


	)

1033 
	#SYS_u«me
 
__NR_u«me


	)

1034 
	#SYS_u∆ök
 
__NR_u∆ök


	)

1035 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

1036 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

1037 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

1038 
	#SYS_u°©
 
__NR_u°©


	)

1039 
	#SYS_utime
 
__NR_utime


	)

1040 
	#SYS_utimíßt
 
__NR_utimíßt


	)

1041 
	#SYS_utimes
 
__NR_utimes


	)

1042 
	#SYS_vf‹k
 
__NR_vf‹k


	)

1043 
	#SYS_vh™gup
 
__NR_vh™gup


	)

1044 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

1045 
	#SYS_waô4
 
__NR_waô4


	)

1046 
	#SYS_waôid
 
__NR_waôid


	)

1047 
	#SYS_wrôe
 
__NR_wrôe


	)

1048 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/sysmacros.h

19 #i‚de‡
_BITS_SYSMACROS_H


20 
	#_BITS_SYSMACROS_H
 1

	)

22 #i‚de‡
_SYS_SYSMACROS_H


36 
	#__SYSMACROS_DECLARE_MAJOR
(
DECL_TEMPL
) \

37 
	`DECL_TEMPL
(, 
maj‹
, (
__dev_t
 
__dev
))

	)

39 
	#__SYSMACROS_DEFINE_MAJOR
(
DECL_TEMPL
) \

40 
	`__SYSMACROS_DECLARE_MAJOR
 (
DECL_TEMPL
) \

42 
__maj‹
; \

43 
__maj‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000fff00u) >> 8); \

44 
__maj‹
 |((
__dev
 & (
__dev_t
) 0xfffff00000000000u) >> 32); \

45  
__maj‹
; \

46 }

	)

48 
	#__SYSMACROS_DECLARE_MINOR
(
DECL_TEMPL
) \

49 
	`DECL_TEMPL
(, 
mö‹
, (
__dev_t
 
__dev
))

	)

51 
	#__SYSMACROS_DEFINE_MINOR
(
DECL_TEMPL
) \

52 
	`__SYSMACROS_DECLARE_MINOR
 (
DECL_TEMPL
) \

54 
__mö‹
; \

55 
__mö‹
 = ((
__dev
 & (
__dev_t
) 0x00000000000000ffu) >> 0); \

56 
__mö‹
 |((
__dev
 & (
__dev_t
) 0x00000ffffff00000u) >> 12); \

57  
__mö‹
; \

58 }

	)

60 
	#__SYSMACROS_DECLARE_MAKEDEV
(
DECL_TEMPL
) \

61 
	`DECL_TEMPL
(
__dev_t
, 
makedev
, (
__maj‹
, 
__mö‹
))

	)

63 
	#__SYSMACROS_DEFINE_MAKEDEV
(
DECL_TEMPL
) \

64 
	`__SYSMACROS_DECLARE_MAKEDEV
 (
DECL_TEMPL
) \

66 
__dev_t
 
__dev
; \

67 
__dev
 = (((
__dev_t
Ë(
__maj‹
 & 0x00000fffu)) << 8); \

68 
__dev
 |(((
__dev_t
Ë(
__maj‹
 & 0xfffff000u)) << 32); \

69 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0x000000ffu)) << 0); \

70 
__dev
 |(((
__dev_t
Ë(
__mö‹
 & 0xffffff00u)) << 12); \

71  
__dev
; \

72 }

	)

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	#NCCS
 32

	)

28 
	sãrmios


30 
tcÊag_t
 
	mc_iÊag
;

31 
tcÊag_t
 
	mc_oÊag
;

32 
tcÊag_t
 
	mc_cÊag
;

33 
tcÊag_t
 
	mc_lÊag
;

34 
cc_t
 
	mc_löe
;

35 
cc_t
 
	mc_cc
[
NCCS
];

36 
•ìd_t
 
	mc_i•ìd
;

37 
•ìd_t
 
	mc_o•ìd
;

38 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

39 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

43 
	#VINTR
 0

	)

44 
	#VQUIT
 1

	)

45 
	#VERASE
 2

	)

46 
	#VKILL
 3

	)

47 
	#VEOF
 4

	)

48 
	#VTIME
 5

	)

49 
	#VMIN
 6

	)

50 
	#VSWTC
 7

	)

51 
	#VSTART
 8

	)

52 
	#VSTOP
 9

	)

53 
	#VSUSP
 10

	)

54 
	#VEOL
 11

	)

55 
	#VREPRINT
 12

	)

56 
	#VDISCARD
 13

	)

57 
	#VWERASE
 14

	)

58 
	#VLNEXT
 15

	)

59 
	#VEOL2
 16

	)

62 
	#IGNBRK
 0000001

	)

63 
	#BRKINT
 0000002

	)

64 
	#IGNPAR
 0000004

	)

65 
	#PARMRK
 0000010

	)

66 
	#INPCK
 0000020

	)

67 
	#ISTRIP
 0000040

	)

68 
	#INLCR
 0000100

	)

69 
	#IGNCR
 0000200

	)

70 
	#ICRNL
 0000400

	)

71 
	#IUCLC
 0001000

	)

72 
	#IXON
 0002000

	)

73 
	#IXANY
 0004000

	)

74 
	#IXOFF
 0010000

	)

75 
	#IMAXBEL
 0020000

	)

76 
	#IUTF8
 0040000

	)

79 
	#OPOST
 0000001

	)

80 
	#OLCUC
 0000002

	)

81 
	#ONLCR
 0000004

	)

82 
	#OCRNL
 0000010

	)

83 
	#ONOCR
 0000020

	)

84 
	#ONLRET
 0000040

	)

85 
	#OFILL
 0000100

	)

86 
	#OFDEL
 0000200

	)

87 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


88 
	#NLDLY
 0000400

	)

89 
	#NL0
 0000000

	)

90 
	#NL1
 0000400

	)

91 
	#CRDLY
 0003000

	)

92 
	#CR0
 0000000

	)

93 
	#CR1
 0001000

	)

94 
	#CR2
 0002000

	)

95 
	#CR3
 0003000

	)

96 
	#TABDLY
 0014000

	)

97 
	#TAB0
 0000000

	)

98 
	#TAB1
 0004000

	)

99 
	#TAB2
 0010000

	)

100 
	#TAB3
 0014000

	)

101 
	#BSDLY
 0020000

	)

102 
	#BS0
 0000000

	)

103 
	#BS1
 0020000

	)

104 
	#FFDLY
 0100000

	)

105 
	#FF0
 0000000

	)

106 
	#FF1
 0100000

	)

109 
	#VTDLY
 0040000

	)

110 
	#VT0
 0000000

	)

111 
	#VT1
 0040000

	)

113 #ifde‡
__USE_MISC


114 
	#XTABS
 0014000

	)

118 #ifde‡
__USE_MISC


119 
	#CBAUD
 0010017

	)

121 
	#B0
 0000000

	)

122 
	#B50
 0000001

	)

123 
	#B75
 0000002

	)

124 
	#B110
 0000003

	)

125 
	#B134
 0000004

	)

126 
	#B150
 0000005

	)

127 
	#B200
 0000006

	)

128 
	#B300
 0000007

	)

129 
	#B600
 0000010

	)

130 
	#B1200
 0000011

	)

131 
	#B1800
 0000012

	)

132 
	#B2400
 0000013

	)

133 
	#B4800
 0000014

	)

134 
	#B9600
 0000015

	)

135 
	#B19200
 0000016

	)

136 
	#B38400
 0000017

	)

137 #ifde‡
__USE_MISC


138 
	#EXTA
 
B19200


	)

139 
	#EXTB
 
B38400


	)

141 
	#CSIZE
 0000060

	)

142 
	#CS5
 0000000

	)

143 
	#CS6
 0000020

	)

144 
	#CS7
 0000040

	)

145 
	#CS8
 0000060

	)

146 
	#CSTOPB
 0000100

	)

147 
	#CREAD
 0000200

	)

148 
	#PARENB
 0000400

	)

149 
	#PARODD
 0001000

	)

150 
	#HUPCL
 0002000

	)

151 
	#CLOCAL
 0004000

	)

152 #ifde‡
__USE_MISC


153 
	#CBAUDEX
 0010000

	)

155 
	#B57600
 0010001

	)

156 
	#B115200
 0010002

	)

157 
	#B230400
 0010003

	)

158 
	#B460800
 0010004

	)

159 
	#B500000
 0010005

	)

160 
	#B576000
 0010006

	)

161 
	#B921600
 0010007

	)

162 
	#B1000000
 0010010

	)

163 
	#B1152000
 0010011

	)

164 
	#B1500000
 0010012

	)

165 
	#B2000000
 0010013

	)

166 
	#B2500000
 0010014

	)

167 
	#B3000000
 0010015

	)

168 
	#B3500000
 0010016

	)

169 
	#B4000000
 0010017

	)

170 
	#__MAX_BAUD
 
B4000000


	)

171 #ifde‡
__USE_MISC


172 
	#CIBAUD
 002003600000

	)

173 
	#CMSPAR
 010000000000

	)

174 
	#CRTSCTS
 020000000000

	)

178 
	#ISIG
 0000001

	)

179 
	#ICANON
 0000002

	)

180 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

181 
	#XCASE
 0000004

	)

183 
	#ECHO
 0000010

	)

184 
	#ECHOE
 0000020

	)

185 
	#ECHOK
 0000040

	)

186 
	#ECHONL
 0000100

	)

187 
	#NOFLSH
 0000200

	)

188 
	#TOSTOP
 0000400

	)

189 #ifde‡
__USE_MISC


190 
	#ECHOCTL
 0001000

	)

191 
	#ECHOPRT
 0002000

	)

192 
	#ECHOKE
 0004000

	)

193 
	#FLUSHO
 0010000

	)

194 
	#PENDIN
 0040000

	)

196 
	#IEXTEN
 0100000

	)

197 #ifde‡
__USE_MISC


198 
	#EXTPROC
 0200000

	)

202 
	#TCOOFF
 0

	)

203 
	#TCOON
 1

	)

204 
	#TCIOFF
 2

	)

205 
	#TCION
 3

	)

208 
	#TCIFLUSH
 0

	)

209 
	#TCOFLUSH
 1

	)

210 
	#TCIOFLUSH
 2

	)

213 
	#TCSANOW
 0

	)

214 
	#TCSADRAIN
 1

	)

215 
	#TCSAFLUSH
 2

	)

218 
	#_IOT_ãrmios
 \

219 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	t__ötmax_t
;

62 
	t__uötmax_t
;

64 
__exãnsi⁄__
 
	t__ötmax_t
;

65 
__exãnsi⁄__
 
	t__uötmax_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

6 
__BEGIN_NAMESPACE_STD


8 
__˛ock_t
 
	t˛ock_t
;

9 
	g__END_NAMESPACE_STD


11 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


12 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_timespec.h

1 #i‚de‡
__time•ec_deföed


2 
	#__time•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stime•ec


10 
__time_t
 
	mtv_£c
;

11 
__sysˇŒ_¶⁄g_t
 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__BEGIN_NAMESPACE_STD


8 
	stm


10 
	mtm_£c
;

11 
	mtm_mö
;

12 
	mtm_hour
;

13 
	mtm_mday
;

14 
	mtm_m⁄
;

15 
	mtm_yór
;

16 
	mtm_wday
;

17 
	mtm_yday
;

18 
	mtm_isd°
;

20 #ifdef 
__USE_MISC


21 
	mtm_gmtoff
;

22 c⁄° *
	mtm_z⁄e
;

24 
	m__tm_gmtoff
;

25 c⁄° *
	m__tm_z⁄e
;

28 
	g__END_NAMESPACE_STD


29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


30 
	$__USING_NAMESPACE_STD
(
tm
)

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

6 
__BEGIN_NAMESPACE_STD


8 
__time_t
 
	ttime_t
;

9 
	g__END_NAMESPACE_STD


10 #ifde‡
__USE_POSIX


11 
	$__USING_NAMESPACE_STD
(
time_t
)

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #ifde‡
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


81 
	#NL_NMAX
 
INT_MAX


	)

85 
	#NL_SETMAX
 
INT_MAX


	)

88 
	#NL_TEXTMAX
 
INT_MAX


	)

91 
	#NZERO
 20

	)

95 #ifde‡
INT_MAX


96 #i‡
INT_MAX
 == 32767

97 
	#WORD_BIT
 16

	)

99 #i‡
INT_MAX
 == 2147483647

100 
	#WORD_BIT
 32

	)

103 
	#WORD_BIT
 64

	)

106 #ñi‡
deföed
 
__INT_MAX__


107 #i‡
__INT_MAX__
 == 32767

108 
	#WORD_BIT
 16

	)

110 #i‡
__INT_MAX__
 == 2147483647

111 
	#WORD_BIT
 32

	)

114 
	#WORD_BIT
 64

	)

118 
	#WORD_BIT
 32

	)

122 #ifde‡
LONG_MAX


123 #i‡
LONG_MAX
 == 2147483647

124 
	#LONG_BIT
 32

	)

127 
	#LONG_BIT
 64

	)

129 #ñi‡
deföed
 
__LONG_MAX__


130 #i‡
__LONG_MAX__
 == 2147483647

131 
	#LONG_BIT
 32

	)

134 
	#LONG_BIT
 64

	)

137 
	~<bôs/w‹dsize.h
>

138 #i‡
__WORDSIZE
 == 64

139 
	#LONG_BIT
 64

	)

141 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

116 #unde‡
__USE_ISOC11


117 #unde‡
__USE_ISOC99


118 #unde‡
__USE_ISOC95


119 #unde‡
__USE_ISOCXX11


120 #unde‡
__USE_POSIX


121 #unde‡
__USE_POSIX2


122 #unde‡
__USE_POSIX199309


123 #unde‡
__USE_POSIX199506


124 #unde‡
__USE_XOPEN


125 #unde‡
__USE_XOPEN_EXTENDED


126 #unde‡
__USE_UNIX98


127 #unde‡
__USE_XOPEN2K


128 #unde‡
__USE_XOPEN2KXSI


129 #unde‡
__USE_XOPEN2K8


130 #unde‡
__USE_XOPEN2K8XSI


131 #unde‡
__USE_LARGEFILE


132 #unde‡
__USE_LARGEFILE64


133 #unde‡
__USE_FILE_OFFSET64


134 #unde‡
__USE_MISC


135 #unde‡
__USE_ATFILE


136 #unde‡
__USE_GNU


137 #unde‡
__USE_FORTIFY_LEVEL


138 #unde‡
__KERNEL_STRICT_NAMES


142 #i‚de‡
_LOOSE_KERNEL_NAMES


143 
	#__KERNEL_STRICT_NAMES


	)

153 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


154 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

155 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

157 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

164 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


165 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

166 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

168 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

172 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

178 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

179 && !
deföed
 
	g_DEFAULT_SOURCE


181 #unde‡
_DEFAULT_SOURCE


182 
	#_DEFAULT_SOURCE
 1

	)

186 #ifde‡
_GNU_SOURCE


187 #unde‡
_ISOC95_SOURCE


188 
	#_ISOC95_SOURCE
 1

	)

189 #unde‡
_ISOC99_SOURCE


190 
	#_ISOC99_SOURCE
 1

	)

191 #unde‡
_ISOC11_SOURCE


192 
	#_ISOC11_SOURCE
 1

	)

193 #unde‡
_POSIX_SOURCE


194 
	#_POSIX_SOURCE
 1

	)

195 #unde‡
_POSIX_C_SOURCE


196 
	#_POSIX_C_SOURCE
 200809L

	)

197 #unde‡
_XOPEN_SOURCE


198 
	#_XOPEN_SOURCE
 700

	)

199 #unde‡
_XOPEN_SOURCE_EXTENDED


200 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

201 #unde‡
_LARGEFILE64_SOURCE


202 
	#_LARGEFILE64_SOURCE
 1

	)

203 #unde‡
_DEFAULT_SOURCE


204 
	#_DEFAULT_SOURCE
 1

	)

205 #unde‡
_ATFILE_SOURCE


206 
	#_ATFILE_SOURCE
 1

	)

211 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

212 || (!
deföed
 
	g__STRICT_ANSI__
 \

213 && !
deföed
 
	g_ISOC99_SOURCE
 \

214 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

215 && !
deföed
 
	g_XOPEN_SOURCE
))

216 #unde‡
_DEFAULT_SOURCE


217 
	#_DEFAULT_SOURCE
 1

	)

221 #i‡(
deföed
 
_ISOC11_SOURCE
 \

222 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

223 
	#__USE_ISOC11
 1

	)

227 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

228 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

229 
	#__USE_ISOC99
 1

	)

233 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

234 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

235 
	#__USE_ISOC95
 1

	)

242 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

243 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

244 
	#__USE_ISOCXX11
 1

	)

250 #ifde‡
_DEFAULT_SOURCE


251 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


252 
	#__USE_POSIX_IMPLICITLY
 1

	)

254 #unde‡
_POSIX_SOURCE


255 
	#_POSIX_SOURCE
 1

	)

256 #unde‡
_POSIX_C_SOURCE


257 
	#_POSIX_C_SOURCE
 200809L

	)

260 #i‡((!
deföed
 
__STRICT_ANSI__
 \

261 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

262 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

263 
	#_POSIX_SOURCE
 1

	)

264 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

265 
	#_POSIX_C_SOURCE
 2

	)

266 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

267 
	#_POSIX_C_SOURCE
 199506L

	)

268 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

269 
	#_POSIX_C_SOURCE
 200112L

	)

271 
	#_POSIX_C_SOURCE
 200809L

	)

273 
	#__USE_POSIX_IMPLICITLY
 1

	)

282 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

283 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

284 
	#_POSIX_SOURCE
 1

	)

285 #unde‡
_POSIX_C_SOURCE


286 
	#_POSIX_C_SOURCE
 199506L

	)

289 #i‡(
deföed
 
_POSIX_SOURCE
 \

290 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

291 || 
deföed
 
_XOPEN_SOURCE
)

292 
	#__USE_POSIX
 1

	)

295 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


296 
	#__USE_POSIX2
 1

	)

299 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

300 
	#__USE_POSIX199309
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

304 
	#__USE_POSIX199506
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

308 
	#__USE_XOPEN2K
 1

	)

309 #unde‡
__USE_ISOC95


310 
	#__USE_ISOC95
 1

	)

311 #unde‡
__USE_ISOC99


312 
	#__USE_ISOC99
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

316 
	#__USE_XOPEN2K8
 1

	)

317 #unde‡
_ATFILE_SOURCE


318 
	#_ATFILE_SOURCE
 1

	)

321 #ifdef 
_XOPEN_SOURCE


322 
	#__USE_XOPEN
 1

	)

323 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

324 
	#__USE_XOPEN_EXTENDED
 1

	)

325 
	#__USE_UNIX98
 1

	)

326 #unde‡
_LARGEFILE_SOURCE


327 
	#_LARGEFILE_SOURCE
 1

	)

328 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

329 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

330 
	#__USE_XOPEN2K8
 1

	)

331 
	#__USE_XOPEN2K8XSI
 1

	)

333 
	#__USE_XOPEN2K
 1

	)

334 
	#__USE_XOPEN2KXSI
 1

	)

335 #unde‡
__USE_ISOC95


336 
	#__USE_ISOC95
 1

	)

337 #unde‡
__USE_ISOC99


338 
	#__USE_ISOC99
 1

	)

341 #ifde‡
_XOPEN_SOURCE_EXTENDED


342 
	#__USE_XOPEN_EXTENDED
 1

	)

347 #ifde‡
_LARGEFILE_SOURCE


348 
	#__USE_LARGEFILE
 1

	)

351 #ifde‡
_LARGEFILE64_SOURCE


352 
	#__USE_LARGEFILE64
 1

	)

355 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

356 
	#__USE_FILE_OFFSET64
 1

	)

359 #i‡
deföed
 
_DEFAULT_SOURCE


360 
	#__USE_MISC
 1

	)

363 #ifdef 
_ATFILE_SOURCE


364 
	#__USE_ATFILE
 1

	)

367 #ifdef 
_GNU_SOURCE


368 
	#__USE_GNU
 1

	)

371 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

372 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

373 #i‡
_FORTIFY_SOURCE
 > 1

374 
	#__USE_FORTIFY_LEVEL
 2

	)

376 
	#__USE_FORTIFY_LEVEL
 1

	)

379 
	#__USE_FORTIFY_LEVEL
 0

	)

384 
	~<°dc-¥edef.h
>

392 #unde‡
__GNU_LIBRARY__


393 
	#__GNU_LIBRARY__
 6

	)

397 
	#__GLIBC__
 2

	)

398 
	#__GLIBC_MINOR__
 25

	)

400 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

401 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

404 #i‚de‡
__ASSEMBLER__


405 #i‚de‡
_SYS_CDEFS_H


406 
	~<sys/cdefs.h
>

411 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


412 
	#__USE_LARGEFILE
 1

	)

413 
	#__USE_LARGEFILE64
 1

	)

419 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

420 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

421 && 
deföed
 
	g__exã∫_ölöe


422 
	#__USE_EXTERN_INLINES
 1

	)

430 
	~<gnu/°ubs.h
>

	@/usr/include/gsl/gsl_complex.h

20 #i‚de‡
__GSL_COMPLEX_H__


21 
	#__GSL_COMPLEX_H__


	)

23 #unde‡
__BEGIN_DECLS


24 #unde‡
__END_DECLS


25 #ifde‡
__˝lu•lus


26 
	#__BEGIN_DECLS
 "C" {

	)

27 
	#__END_DECLS
 }

	)

29 
	#__BEGIN_DECLS


	)

30 
	#__END_DECLS


	)

33 
__BEGIN_DECLS


37 * 
	tg¶_com∂ex_∑cked
 ;

38 * 
	tg¶_com∂ex_∑cked_Êﬂt
 ;

39 * 
	tg¶_com∂ex_∑cked_l⁄g_doubÀ
 ;

41 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked
 ;

42 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_Êﬂt
 ;

43 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_l⁄g_doubÀ
 ;

47 * 
	tg¶_com∂ex_∑cked_¨øy
 ;

48 * 
	tg¶_com∂ex_∑cked_¨øy_Êﬂt
 ;

49 * 
	tg¶_com∂ex_∑cked_¨øy_l⁄g_doubÀ
 ;

51 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_¨øy
 ;

52 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_¨øy_Êﬂt
 ;

53 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_¨øy_l⁄g_doubÀ
 ;

61 * 
	tg¶_com∂ex_∑cked_±r
 ;

62 * 
	tg¶_com∂ex_∑cked_Êﬂt_±r
 ;

63 * 
	tg¶_com∂ex_∑cked_l⁄g_doubÀ_±r
 ;

65 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_±r
 ;

66 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_Êﬂt_±r
 ;

67 c⁄° * 
	tg¶_c⁄°_com∂ex_∑cked_l⁄g_doubÀ_±r
 ;

72 
	md©
[2];

74 
	tg¶_com∂ex_l⁄g_doubÀ
;

78 
	md©
[2];

80 
	tg¶_com∂ex
;

84 
	md©
[2];

86 
	tg¶_com∂ex_Êﬂt
;

88 
	#GSL_REAL
(
z
Ë((z).
d©
[0])

	)

89 
	#GSL_IMAG
(
z
Ë((z).
d©
[1])

	)

90 
	#GSL_COMPLEX_P
(
zp
Ë((zp)->
d©
)

	)

91 
	#GSL_COMPLEX_P_REAL
(
zp
Ë((zp)->
d©
[0])

	)

92 
	#GSL_COMPLEX_P_IMAG
(
zp
Ë((zp)->
d©
[1])

	)

93 
	#GSL_COMPLEX_EQ
(
z1
,
z2
Ë(((z1).
d©
[0] =(z2).d©[0]Ë&& ((z1).d©[1] =(z2).d©[1]))

	)

95 
	#GSL_SET_COMPLEX
(
zp
,
x
,
y
Ëdÿ{(zp)->
d©
[0]=(x); (zp)->d©[1]=(y);} 0)

	)

96 
	#GSL_SET_REAL
(
zp
,
x
Ëdÿ{(zp)->
d©
[0]=(x);} 0)

	)

97 
	#GSL_SET_IMAG
(
zp
,
y
Ëdÿ{(zp)->
d©
[1]=(y);} 0)

	)

99 
	#GSL_SET_COMPLEX_PACKED
(
zp
,
n
,
x
,
y
Ëdÿ{*((zp)+2*“))=(x); *((zp)+(2*“)+1))=(y);} 0)

	)

101 
	g__END_DECLS


	@/usr/include/gsl/gsl_fft.h

20 #i‚de‡
__GSL_FFT_H__


21 
	#__GSL_FFT_H__


	)

23 
	~<g¶/g¶_com∂ex.h
>

25 #unde‡
__BEGIN_DECLS


26 #unde‡
__END_DECLS


27 #ifde‡
__˝lu•lus


28 
	#__BEGIN_DECLS
 "C" {

	)

29 
	#__END_DECLS
 }

	)

31 
	#__BEGIN_DECLS


	)

32 
	#__END_DECLS


	)

35 
__BEGIN_DECLS


39 
g¶_f·_f‹w¨d
 = -1, 
g¶_f·_backw¨d
 = +1

41 
	tg¶_f·_dúe˘i⁄
;

49 
	g__END_DECLS


	@/usr/include/gsl/gsl_math.h

20 #i‚de‡
__GSL_MATH_H__


21 
	#__GSL_MATH_H__


	)

22 
	~<m©h.h
>

23 
	~<g¶/g¶_sys.h
>

24 
	~<g¶/g¶_ölöe.h
>

25 
	~<g¶/g¶_machöe.h
>

26 
	~<g¶/g¶_¥ecisi⁄.h
>

27 
	~<g¶/g¶_«n.h
>

28 
	~<g¶/g¶_pow_öt.h
>

29 
	~<g¶/g¶_mömax.h
>

31 #i‚de‡
M_E


32 
	#M_E
 2.71828182845904523536028747135

	)

35 #i‚de‡
M_LOG2E


36 
	#M_LOG2E
 1.44269504088896340735992468100

	)

39 #i‚de‡
M_LOG10E


40 
	#M_LOG10E
 0.43429448190325182765112891892

	)

43 #i‚de‡
M_SQRT2


44 
	#M_SQRT2
 1.41421356237309504880168872421

	)

47 #i‚de‡
M_SQRT1_2


48 
	#M_SQRT1_2
 0.70710678118654752440084436210

	)

52 #i‚de‡
M_SQRT3


53 
	#M_SQRT3
 1.73205080756887729352744634151

	)

56 #i‚de‡
M_PI


57 
	#M_PI
 3.14159265358979323846264338328

	)

60 #i‚de‡
M_PI_2


61 
	#M_PI_2
 1.57079632679489661923132169164

	)

64 #i‚de‡
M_PI_4


65 
	#M_PI_4
 0.78539816339744830961566084582

	)

68 #i‚de‡
M_SQRTPI


69 
	#M_SQRTPI
 1.77245385090551602729816748334

	)

72 #i‚de‡
M_2_SQRTPI


73 
	#M_2_SQRTPI
 1.12837916709551257389615890312

	)

76 #i‚de‡
M_1_PI


77 
	#M_1_PI
 0.31830988618379067153776752675

	)

80 #i‚de‡
M_2_PI


81 
	#M_2_PI
 0.63661977236758134307553505349

	)

84 #i‚de‡
M_LN10


85 
	#M_LN10
 2.30258509299404568401799145468

	)

88 #i‚de‡
M_LN2


89 
	#M_LN2
 0.69314718055994530941723212146

	)

92 #i‚de‡
M_LNPI


93 
	#M_LNPI
 1.14472988584940017414342735135

	)

96 #i‚de‡
M_EULER


97 
	#M_EULER
 0.57721566490153286060651209008

	)

100 #unde‡
__BEGIN_DECLS


101 #unde‡
__END_DECLS


102 #ifde‡
__˝lu•lus


103 
	#__BEGIN_DECLS
 "C" {

	)

104 
	#__END_DECLS
 }

	)

106 
	#__BEGIN_DECLS


	)

107 
	#__END_DECLS


	)

110 
__BEGIN_DECLS


114 
	#GSL_IS_ODD
(
n
Ë(“Ë& 1)

	)

115 
	#GSL_IS_EVEN
(
n
Ë(!(
	`GSL_IS_ODD
“)))

	)

116 
	#GSL_SIGN
(
x
Ë((xË>0.0 ? 1 : -1)

	)

119 
	#GSL_IS_REAL
(
x
Ë(
	`g¶_föôe
(x))

	)

123 
	sg¶_fun˘i⁄_°ru˘


125 (* 
fun˘i⁄
Ë(
x
, * 
∑øms
);

126 * 
∑øms
;

129 
g¶_fun˘i⁄_°ru˘
 
	tg¶_fun˘i⁄
 ;

131 
	#GSL_FN_EVAL
(
F
,
x
Ë(*((F)->
fun˘i⁄
))(x,(F)->
∑øms
)

	)

135 
	sg¶_fun˘i⁄_fdf_°ru˘


137 (* 
	mf
Ë(
	mx
, * 
	m∑øms
);

138 (* 
	mdf
Ë(
	mx
, * 
	m∑øms
);

139 (* 
	mfdf
Ë(
	mx
, * 
	m∑øms
, * 
	mf
, * 
	mdf
);

140 * 
	m∑øms
;

143 
g¶_fun˘i⁄_fdf_°ru˘
 
	tg¶_fun˘i⁄_fdf
 ;

145 
	#GSL_FN_FDF_EVAL_F
(
FDF
,
x
Ë(*((FDF)->
f
))(x,(FDF)->
∑øms
)

	)

146 
	#GSL_FN_FDF_EVAL_DF
(
FDF
,
x
Ë(*((FDF)->
df
))(x,(FDF)->
∑øms
)

	)

147 
	#GSL_FN_FDF_EVAL_F_DF
(
FDF
,
x
,
y
,
dy
Ë(*((FDF)->
fdf
))(x,(FDF)->
∑øms
,(y),(dy))

	)

152 
	sg¶_fun˘i⁄_vec_°ru˘


154 (* 
	mfun˘i⁄
Ë(
	mx
, 
	my
[], * 
	m∑øms
);

155 * 
	m∑øms
;

158 
g¶_fun˘i⁄_vec_°ru˘
 
	tg¶_fun˘i⁄_vec
 ;

160 
	#GSL_FN_VEC_EVAL
(
F
,
x
,
y
Ë(*((F)->
fun˘i⁄
))(x,y,(F)->
∑øms
)

	)

162 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
__USE_GNU


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/libunwind-x86_64.h

28 #i‚de‡
LIBUNWIND_H


29 
	#LIBUNWIND_H


	)

31 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

35 
	~<sys/ty≥s.h
>

36 
	~<öây≥s.h
>

37 
	~<uc⁄ãxt.h
>

39 
	#UNW_TARGET
 
x86_64


	)

40 
	#UNW_TARGET_X86_64
 1

	)

42 
	#_U_TDEP_QP_TRUE
 0

	)

49 
	#UNW_TDEP_CURSOR_LEN
 127

	)

51 
uöt64_t
 
	tunw_w‹d_t
;

52 
öt64_t
 
	tunw_sw‹d_t
;

54 
	tunw_tdï_Âªg_t
;

58 
UNW_X86_64_RAX
,

59 
UNW_X86_64_RDX
,

60 
UNW_X86_64_RCX
,

61 
UNW_X86_64_RBX
,

62 
UNW_X86_64_RSI
,

63 
UNW_X86_64_RDI
,

64 
UNW_X86_64_RBP
,

65 
UNW_X86_64_RSP
,

66 
UNW_X86_64_R8
,

67 
UNW_X86_64_R9
,

68 
UNW_X86_64_R10
,

69 
UNW_X86_64_R11
,

70 
UNW_X86_64_R12
,

71 
UNW_X86_64_R13
,

72 
UNW_X86_64_R14
,

73 
UNW_X86_64_R15
,

74 
UNW_X86_64_RIP
,

75 #ifde‡
CONFIG_MSABI_SUPPORT


76 
UNW_X86_64_XMM0
,

77 
UNW_X86_64_XMM1
,

78 
UNW_X86_64_XMM2
,

79 
UNW_X86_64_XMM3
,

80 
UNW_X86_64_XMM4
,

81 
UNW_X86_64_XMM5
,

82 
UNW_X86_64_XMM6
,

83 
UNW_X86_64_XMM7
,

84 
UNW_X86_64_XMM8
,

85 
UNW_X86_64_XMM9
,

86 
UNW_X86_64_XMM10
,

87 
UNW_X86_64_XMM11
,

88 
UNW_X86_64_XMM12
,

89 
UNW_X86_64_XMM13
,

90 
UNW_X86_64_XMM14
,

91 
UNW_X86_64_XMM15
,

92 
UNW_TDEP_LAST_REG
 = 
UNW_X86_64_XMM15
,

94 
UNW_TDEP_LAST_REG
 = 
UNW_X86_64_RIP
,

100 
UNW_X86_64_CFA
,

102 
UNW_TDEP_IP
 = 
UNW_X86_64_RIP
,

103 
UNW_TDEP_SP
 = 
UNW_X86_64_RSP
,

104 
UNW_TDEP_BP
 = 
UNW_X86_64_RBP
,

105 
UNW_TDEP_EH
 = 
UNW_X86_64_RAX


107 
	tx86_64_ªgnum_t
;

109 
	#UNW_TDEP_NUM_EH_REGS
 2

	)

111 
	sunw_tdï_ßve_loc


115 
unw_tdï_ßve_loc_t
;

118 
uc⁄ãxt_t
 
	tunw_tdï_c⁄ãxt_t
;

124 
unw_tdï_¥oc_öfo_t
;

126 
	~"libunwöd-dy«mic.h
"

127 
	~"libunwöd-comm⁄.h
"

129 
	#unw_tdï_gëc⁄ãxt
 
	`UNW_ARCH_OBJ
(
gëc⁄ãxt
)

	)

130 
	#unw_tdï_is_Âªg
 
	`UNW_ARCH_OBJ
(
is_Âªg
)

	)

132 
unw_tdï_gëc⁄ãxt
 (
unw_tdï_c⁄ãxt_t
 *);

133 
unw_tdï_is_Âªg
 ();

135 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 
	#__bôwi£
 
__bôwi£__


	)

23 
__u16
 
	t__bôwi£
 
	t__À16
;

24 
__u16
 
	t__bôwi£
 
	t__be16
;

25 
__u32
 
	t__bôwi£
 
	t__À32
;

26 
__u32
 
	t__bôwi£
 
	t__be32
;

27 
__u64
 
	t__bôwi£
 
	t__À64
;

28 
__u64
 
	t__bôwi£
 
	t__be64
;

30 
__u16
 
	t__bôwi£
 
	t__sum16
;

31 
__u32
 
	t__bôwi£
 
	t__wsum
;

42 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

43 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
	~<bôs/sched.h
>

46 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

49 
__BEGIN_DECLS


52 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

53 
__THROW
;

56 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

59 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

60 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

63 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

66 
	$sched_yõld
 (Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

75 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

78 #ifde‡
__USE_GNU


80 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

81 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

84 
˝u£ç
)

	)

85 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

90 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

91 
˝u£ç
)

	)

92 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

100 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

102 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

104 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

106 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

108 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

110 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

113 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

114 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

115 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

119 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

120 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

123 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

124 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

127 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	~<bôs/ty≥s/time_t.h
>

42 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

43 #ifde‡
__USE_XOPEN2K


44 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

27 
	~<bôs/sig°ack.h
>

30 #ifde‡
__x86_64__


33 
__exãnsi⁄__
 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

28 
	~<bôs/libc-hódî-°¨t.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


81 
	#____mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 #i‚de‡
__mb°©e_t_deföed


105 
__BEGIN_NAMESPACE_C99


107 
__mb°©e_t
 
	tmb°©e_t
;

108 
	g__END_NAMESPACE_C99


109 
	#__mb°©e_t_deföed
 1

	)

112 #ifde‡
__USE_GNU


113 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

116 #i‚de‡
WCHAR_MIN


118 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

119 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

122 #i‚de‡
WEOF


123 
	#WEOF
 (0xffffffffu)

	)

128 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


129 
	~<w˘y≥.h
>

133 
__BEGIN_DECLS


135 
__BEGIN_NAMESPACE_STD


138 
tm
;

139 
__END_NAMESPACE_STD


143 
	$__USING_NAMESPACE_STD
(
tm
)

146 
__BEGIN_NAMESPACE_STD


148 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

153 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

154 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

158 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

162 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

163 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

164 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

167 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

170 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_XOPEN2K8


176 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

179 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

180 
size_t
 
__n
Ë
__THROW
;

184 
	~<xloˇÀ.h
>

186 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

187 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

190 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

193 
__BEGIN_NAMESPACE_STD


196 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

200 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

201 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN2K8


210 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

211 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

217 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

223 
__BEGIN_NAMESPACE_STD


225 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


226 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

227 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

228 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

229 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
__©åibuã_puª__
;

235 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


236 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

237 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

238 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

239 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

241 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

242 
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_GNU


249 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

250 
__THROW
 
__©åibuã_puª__
;

253 
__BEGIN_NAMESPACE_STD


256 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

257 
__THROW
 
__©åibuã_puª__
;

260 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
__©åibuã_puª__
;

263 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


264 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

265 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

267 c⁄° 
wch¨_t
 *
__ac˚±
)

268 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

271 
__THROW
 
__©åibuã_puª__
;

274 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


275 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

276 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

278 c⁄° 
wch¨_t
 *
__√edÀ
)

279 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

281 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

282 
__THROW
 
__©åibuã_puª__
;

286 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

287 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

288 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

291 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

292 
__END_NAMESPACE_STD


294 #ifde‡
__USE_XOPEN


296 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


297 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

298 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

300 c⁄° 
wch¨_t
 *
__√edÀ
)

301 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

303 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

304 
__THROW
 
__©åibuã_puª__
;

308 #ifde‡
__USE_XOPEN2K8


310 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

311 
__THROW
 
__©åibuã_puª__
;

315 
__BEGIN_NAMESPACE_STD


317 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


318 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

319 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

321 
size_t
 
__n
)

322 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

324 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

325 
__THROW
 
__©åibuã_puª__
;

329 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

330 
__THROW
 
__©åibuã_puª__
;

333 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

334 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

338 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

339 
__THROW
;

342 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

343 
__END_NAMESPACE_STD


345 #ifde‡
__USE_GNU


348 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

349 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

350 
__THROW
;

354 
__BEGIN_NAMESPACE_STD


357 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

361 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

365 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

369 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

370 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

371 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

374 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

379 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

380 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

381 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

382 
__END_NAMESPACE_STD


384 #ifde‡
__USE_EXTERN_INLINES


390 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

391 
__exã∫_ölöe
 
wöt_t


392 
	`__NTH
 (
	$btowc
 (
__c
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

394 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

396 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

397 
__exã∫_ölöe
 

398 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

399 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

400 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

402 
__exã∫_ölöe
 
size_t


403 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

404 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

405 {  (
__ps
 !
NULL


406 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

409 
__BEGIN_NAMESPACE_STD


412 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

413 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

418 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

419 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

420 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

421 
__END_NAMESPACE_STD


424 #ifdef 
__USE_XOPEN2K8


427 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

428 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

429 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

433 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

434 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

435 
size_t
 
__nwc
, size_à
__Àn
,

436 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

441 #ifde‡
__USE_XOPEN


443 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

447 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

451 
__BEGIN_NAMESPACE_STD


454 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
__END_NAMESPACE_STD


458 #ifde‡
__USE_ISOC99


459 
__BEGIN_NAMESPACE_C99


461 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

462 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

463 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

464 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

465 
__END_NAMESPACE_C99


469 
__BEGIN_NAMESPACE_STD


472 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

473 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

477 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

478 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

479 
__THROW
;

480 
__END_NAMESPACE_STD


482 #ifde‡
__USE_ISOC99


483 
__BEGIN_NAMESPACE_C99


486 
__exãnsi⁄__


487 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

489 
__THROW
;

493 
__exãnsi⁄__


494 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

495 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

496 
__ba£
Ë
__THROW
;

497 
__END_NAMESPACE_C99


500 #ifde‡
__USE_GNU


503 
__exãnsi⁄__


504 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

506 
__THROW
;

510 
__exãnsi⁄__


511 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

512 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

513 
__ba£
Ë
__THROW
;

516 #ifde‡
__USE_GNU


530 
	~<xloˇÀ.h
>

534 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

536 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

540 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

542 
__exãnsi⁄__


543 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

544 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

545 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

547 
__exãnsi⁄__


548 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

549 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

550 
__ba£
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

559 
__THROW
;

561 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

562 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

563 
__loˇÀ_t
 
__loc
Ë
__THROW
;

567 #ifde‡
__USE_XOPEN2K8


570 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

571 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

575 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

576 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
;

583 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

586 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

589 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


590 
__BEGIN_NAMESPACE_STD


593 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

600 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

601 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

610 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

611 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

612 
__THROW
 ;

618 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

619 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

620 
__gnuc_va_li°
 
__¨g
)

626 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

631 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

632 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

633 
__gnuc_va_li°
 
__¨g
)

634 
__THROW
 ;

641 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

642 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

651 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

652 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

653 
__THROW
 ;

655 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

656 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

657 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

658 #ifde‡
__REDIRECT


662 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

663 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_fwsˇnf
)

666 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

667 
__isoc99_wsˇnf
)

669 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 ...), 
__isoc99_swsˇnf
)

674 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

676 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

677 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

678 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

679 
__THROW
;

680 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

681 
	#wsˇnf
 
__isoc99_wsˇnf


	)

682 
	#swsˇnf
 
__isoc99_swsˇnf


	)

686 
__END_NAMESPACE_STD


689 #ifde‡
__USE_ISOC99


690 
__BEGIN_NAMESPACE_C99


695 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

696 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

697 
__gnuc_va_li°
 
__¨g
)

703 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

704 
__gnuc_va_li°
 
__¨g
)

707 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

708 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
)

710 
__THROW
 ;

712 #i‡!
deföed
 
__USE_GNU
 \

713 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

714 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

715 #ifde‡
__REDIRECT


716 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

717 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

720 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

723 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

724 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

725 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

728 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

729 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

730 
__gnuc_va_li°
 
__¨g
);

731 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
);

733 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

734 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

735 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

736 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

737 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

738 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

742 
__END_NAMESPACE_C99


746 
__BEGIN_NAMESPACE_STD


751 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`gëwch¨
 ();

765 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

772 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

780 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

781 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

788 
__FILE
 *
__ª°ri˘
 
__°ªam
);

795 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

796 
__END_NAMESPACE_STD


799 #ifde‡
__USE_GNU


807 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

808 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

816 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

833 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

834 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

843 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

852 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

853 
__FILE
 *
__ª°ri˘
 
__°ªam
);

857 
__BEGIN_NAMESPACE_C99


861 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

862 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

863 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

864 
__END_NAMESPACE_C99


866 #ifde‡
__USE_GNU


867 
	~<xloˇÀ.h
>

871 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

872 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

873 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

874 
__loˇÀ_t
 
__loc
Ë
__THROW
;

883 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


884 
	#__√ed_iswxxx


	)

885 
	~<w˘y≥.h
>

889 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


890 
	~<bôs/wch¨2.h
>

893 #ifde‡
__LDBL_COMPAT


894 
	~<bôs/wch¨-ldbl.h
>

897 
__END_DECLS


905 #unde‡
__√ed_mb°©e_t


906 #unde‡
__√ed_wöt_t


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/xmlrpc-c/c_util.h

1 #i‚de‡
XMLRPC_C_C_UTIL_H_INCLUDED


2 
	#XMLRPC_C_C_UTIL_H_INCLUDED


	)

12 #ifde‡
__GNUC__


13 
	#XMLRPC_PRINTF_ATTR
(
a
,
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
,á, b)))

	)

14 
	#XMLRPC_NORETURN_ATTR
 
	`__©åibuã__
((
n‹ëu∫
))

	)

16 
	#XMLRPC_PRINTF_ATTR
(
a
,
b
)

	)

17 
	#XMLRPC_NORETURN_ATTR


	)

26 #i‡
deföed
(
XMLRPC_BUILD_DLL
Ë&& deföed(
_MSC_VER
)

27 
	#XMLRPC_DLLEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

29 
	#XMLRPC_DLLEXPORT


	)

	@/usr/include/xmlrpc-c/client_global.h

1 #i‚de‡
CLIENT_GLOBAL_H_INCLUDED


2 
	#CLIENT_GLOBAL_H_INCLUDED


	)

4 
	~<xmÃpc-c/c_utû.h
>

5 
	~<xmÃpc-c/˛õ¡.h
>

14 #ifde‡
XMLRPC_BUILDING_CLIENT


15 
	#XMLRPC_CLIENT_EXPORTED
 
XMLRPC_DLLEXPORT


	)

17 
	#XMLRPC_CLIENT_EXPORTED


	)

28 
	#XMLRPC_CLIENT_NO_FLAGS
 (0)

	)

29 
	#XMLRPC_CLIENT_SKIP_LIBWWW_INIT
 (1)

	)

31 
XMLRPC_CLIENT_EXPORTED


33 
xmÃpc_˛õ¡_öô
(c⁄° 
Êags
,

34 c⁄° * c⁄° 
≠≤ame
,

35 c⁄° * c⁄° 
≠pvîsi⁄
);

37 
XMLRPC_CLIENT_EXPORTED


39 
xmÃpc_˛õ¡_öô2
(
xmÃpc_ív
 * c⁄° 
ív
,

40 c⁄° 
Êags
,

41 c⁄° * c⁄° 
≠≤ame
,

42 c⁄° * c⁄° 
≠pvîsi⁄
,

43 c⁄° 
xmÃpc_˛õ¡∑rms
 * c⁄° 
˛õ¡∑rms
,

44 c⁄° 
∑rm_size
);

46 
XMLRPC_CLIENT_EXPORTED


48 
xmÃpc_˛õ¡_˛ónup
();

54 
XMLRPC_CLIENT_EXPORTED


55 
xmÃpc_vÆue
 *

56 
xmÃpc_˛õ¡_ˇŒ
(
xmÃpc_ív
 * c⁄° 
ívP
,

57 c⁄° * c⁄° 
£rvî_uæ
,

58 c⁄° * c⁄° 
mëhod_«me
,

59 c⁄° * c⁄° 
f‹m©
,

62 
XMLRPC_CLIENT_EXPORTED


63 
xmÃpc_vÆue
 *

64 
xmÃpc_˛õ¡_ˇŒ_∑øms
(
xmÃpc_ív
 * c⁄° 
ívP
,

65 c⁄° * c⁄° 
£rvîUæ
,

66 c⁄° * c⁄° 
mëhodName
,

67 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

69 
XMLRPC_CLIENT_EXPORTED


70 
xmÃpc_vÆue
 *

71 
xmÃpc_˛õ¡_ˇŒ_£rvî
(
xmÃpc_ív
 * c⁄° 
ívP
,

72 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvî
,

73 c⁄° * c⁄° 
mëhod_«me
,

74 c⁄° * c⁄° 
f‹m©
,

77 
XMLRPC_CLIENT_EXPORTED


78 
xmÃpc_vÆue
 *

79 
xmÃpc_˛õ¡_ˇŒ_£rvî_∑øms
(

80 
xmÃpc_ív
 * c⁄° 
ívP
,

81 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîP
,

82 c⁄° * c⁄° 
mëhod_«me
,

83 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

85 
XMLRPC_CLIENT_EXPORTED


87 
xmÃpc_˛õ¡_å™•‹t_ˇŒ
(

88 
xmÃpc_ív
 * c⁄° 
ívP
,

89 * c⁄° 
ª£rved
,

90 c⁄° 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvîP
,

91 
xmÃpc_mem_block
 * c⁄° 
ˇŒXmlP
,

92 
xmÃpc_mem_block
 ** c⁄° 
ª•XmlPP
);

101 
XMLRPC_CLIENT_EXPORTED


103 
xmÃpc_˛õ¡_ˇŒ_asynch
(c⁄° * c⁄° 
£rvî_uæ
,

104 c⁄° * c⁄° 
mëhod_«me
,

105 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

106 * c⁄° 
u£r_d©a
,

107 c⁄° * c⁄° 
f‹m©
,

110 
XMLRPC_CLIENT_EXPORTED


112 
xmÃpc_˛õ¡_ˇŒ_£rvî_asynch
(
xmÃpc_£rvî_öfo
 * c⁄° 
£rvî
,

113 c⁄° * c⁄° 
mëhod_«me
,

114 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

115 * c⁄° 
u£r_d©a
,

116 c⁄° * c⁄° 
f‹m©
,

119 
XMLRPC_CLIENT_EXPORTED


121 
xmÃpc_˛õ¡_ˇŒ_asynch_∑øms
(c⁄° * c⁄° 
£rvî_uæ
,

122 c⁄° * c⁄° 
mëhod_«me
,

123 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

124 * c⁄° 
u£r_d©a
,

125 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

127 
XMLRPC_CLIENT_EXPORTED


129 
xmÃpc_˛õ¡_ˇŒ_£rvî_asynch_∑øms
(

130 
xmÃpc_£rvî_öfo
 * c⁄° 
£rvî
,

131 c⁄° * c⁄° 
mëhod_«me
,

132 
xmÃpc_ª•⁄£_h™dÀr
 
ª•⁄£H™dÀr
,

133 * c⁄° 
u£r_d©a
,

134 
xmÃpc_vÆue
 * c⁄° 
∑ømAºayP
);

145 
XMLRPC_CLIENT_EXPORTED


147 
xmÃpc_˛õ¡_evít_lo›_föish_asynch
();

151 
XMLRPC_CLIENT_EXPORTED


153 
xmÃpc_˛õ¡_evít_lo›_föish_asynch_timeout
(c⁄° 
mûli£c⁄ds
);

	@/usr/include/xmlrpc-c/config.h

1 #i‚de‡
XMLRPC_C_CONFIG_H_INCLUDED


2 
	#XMLRPC_C_CONFIG_H_INCLUDED


	)

14 
	#XMLRPC_HAVE_WCHAR
 1

	)

15 #ifde‡
_WIN32


20 
	#XMLRPC_SOCKET
 
SOCKET


	)

21 
	#XMLRPC_HAVE_TIMEVAL
 0

	)

22 
	#XMLRPC_HAVE_TIMESPEC
 0

	)

23 
	#XMLRPC_HAVE_PTHREAD
 0

	)

24 
	#XMLRPC_HAVE_WINTHREAD
 1

	)

26 
	#XMLRPC_SOCKET
 

	)

27 
	#XMLRPC_HAVE_TIMEVAL
 1

	)

28 
	#XMLRPC_HAVE_TIMESPEC
 1

	)

29 
	#XMLRPC_HAVE_PTHREAD
 1

	)

30 
	#XMLRPC_HAVE_WINTHREAD
 0

	)

33 #i‡
deföed
(
_MSC_VER
)

35 
	#XMLRPC_INT64
 
__öt64


	)

36 
	#XMLRPC_PRId64
 "I64"

	)

37 
	#XMLRPC_INT32
 
__öt32


	)

39 
	#XMLRPC_INT64
 

	)

40 
	#XMLRPC_PRId64
 "Œd"

	)

41 
	#XMLRPC_INT32
 

	)

	@/usr/include/xmlrpc-c/util.h

17 #i‚de‡
XMLRPC_C_UTIL_H_INCLUDED


18 
	#XMLRPC_C_UTIL_H_INCLUDED


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°d¨g.h
>

23 
	~<xmÃpc-c/c⁄fig.h
>

24 
	~<xmÃpc-c/c_utû.h
>

26 #i‡
XMLRPC_HAVE_WCHAR


27 
	~<wch¨.h
>

30 #ifde‡
__˝lu•lus


41 #ifde‡
XMLRPC_BUILDING_UTIL


42 
	#XMLRPC_UTIL_EXPORTED
 
XMLRPC_DLLEXPORT


	)

44 
	#XMLRPC_UTIL_EXPORTED


	)

57 
	#_XMLRPC_STRUCT_MEMBER_OFFSET
(
TYPE
, 
MBRNAME
) \

58 ((
size_t
)(*)&((
TYPE
 *)0)->
MBRNAME
)

	)

59 
	#_XMLRPC_STRUCT_MEMBER_SIZE
(
TYPE
, 
MBRNAME
) \

60 (((
TYPE
 *)0)->
MBRNAME
)

	)

61 
	#XMLRPC_STRUCTSIZE
(
TYPE
, 
MBRNAME
) \

62 (
	`_XMLRPC_STRUCT_MEMBER_OFFSET
(
TYPE
, 
MBRNAME
) + \

63 
	`_XMLRPC_STRUCT_MEMBER_SIZE
(
TYPE
, 
MBRNAME
))

	)

77 #i‚de‡
NDEBUG


79 
	#XMLRPC_ASSERT
(
c⁄d
) \

81 i‡(!(
c⁄d
)) \

82 
	`xmÃpc_as£πi⁄_Áûed
(
__FILE__
, 
__LINE__
); \

83 0)

	)

86 
	#XMLRPC_ASSERT
(
c⁄d
Ë0Ë{}

	)

89 
XMLRPC_UTIL_EXPORTED


91 
xmÃpc_as£πi⁄_Áûed
(c⁄° * c⁄° 
fûeName
,

92 c⁄° 
löeNumbî
);

95 
	#XMLRPC_ASSERT_PTR_OK
(
±r
) \

96 
	`XMLRPC_ASSERT
((
±r
Ë!
NULL
)

	)

123 
	#XMLRPC_INTERNAL_ERROR
 (-500)

	)

124 
	#XMLRPC_TYPE_ERROR
 (-501)

	)

125 
	#XMLRPC_INDEX_ERROR
 (-502)

	)

126 
	#XMLRPC_PARSE_ERROR
 (-503)

	)

127 
	#XMLRPC_NETWORK_ERROR
 (-504)

	)

128 
	#XMLRPC_TIMEOUT_ERROR
 (-505)

	)

129 
	#XMLRPC_NO_SUCH_METHOD_ERROR
 (-506)

	)

130 
	#XMLRPC_REQUEST_REFUSED_ERROR
 (-507)

	)

131 
	#XMLRPC_INTROSPECTION_DISABLED_ERROR
 (-508)

	)

132 
	#XMLRPC_LIMIT_EXCEEDED_ERROR
 (-509)

	)

133 
	#XMLRPC_INVALID_UTF8_ERROR
 (-510)

	)

135 
	s_xmÃpc_ív
 {

136 
Áu…_occuºed
;

137 
Áu…_code
;

138 * 
Áu…_°rög
;

139 } 
	txmÃpc_ív
;

143 
XMLRPC_UTIL_EXPORTED


144 
xmÃpc_ív_öô
 (
xmÃpc_ív
* 
ív
);

145 
XMLRPC_UTIL_EXPORTED


146 
xmÃpc_ív_˛ón
 (
xmÃpc_ív
* c⁄° 
ív
);

151 
XMLRPC_UTIL_EXPORTED


153 
xmÃpc_ív_£t_Áu…
(
xmÃpc_ív
 * c⁄° 
ív
,

154 c⁄° 
Áu…Code
,

155 c⁄° * c⁄° 
Áu…Des¸ùti⁄
);

158 
XMLRPC_UTIL_EXPORTED


160 
xmÃpc_£t_Áu…_f‹m©ãd_v
(
xmÃpc_ív
 * c⁄° 
ívP
,

161 c⁄° 
code
,

162 c⁄° * c⁄° 
f‹m©
,

163 
va_li°
 
¨gs
);

166 
XMLRPC_UTIL_EXPORTED


168 
xmÃpc_ív_£t_Áu…_f‹m©ãd
(
xmÃpc_ív
 * c⁄° 
ívP
,

169 c⁄° 
code
,

170 c⁄° * c⁄° 
f‹m©
,

171 ...Ë
XMLRPC_PRINTF_ATTR
(3,4);

176 
XMLRPC_UTIL_EXPORTED


178 
xmÃpc_Áu…f
(
xmÃpc_ív
 * c⁄° 
ívP
,

179 c⁄° * c⁄° 
f‹m©
,

180 ...Ë
XMLRPC_PRINTF_ATTR
(2,3);

183 
	#XMLRPC_ASSERT_ENV_OK
(
ívP
) \

184 
	`XMLRPC_ASSERT
((
ívP
Ë!
NULL
 && \

185 (
ívP
->
Áu…_°rög
 =
NULL
) && \

186 !(
ívP
)->
Áu…_occuºed
)

	)

190 
	#XMLRPC_FAIL
(
ív
,
code
,
°r
) \

191 dÿ{ 
	`xmÃpc_ív_£t_Áu…
((
ív
),(
code
),(
°r
)); 
˛ónup
; } 0)

	)

193 
	#XMLRPC_FAIL1
(
ív
,
code
,
°r
,
¨g1
) \

195 
	`xmÃpc_ív_£t_Áu…_f‹m©ãd
((
ív
),(
code
),(
°r
),(
¨g1
)); \

196 
˛ónup
; \

197 } 0)

	)

199 
	#XMLRPC_FAIL2
(
ív
,
code
,
°r
,
¨g1
,
¨g2
) \

201 
	`xmÃpc_ív_£t_Áu…_f‹m©ãd
((
ív
),(
code
),(
°r
),(
¨g1
),(
¨g2
)); \

202 
˛ónup
; \

203 } 0)

	)

205 
	#XMLRPC_FAIL3
(
ív
,
code
,
°r
,
¨g1
,
¨g2
,
¨g3
) \

207 
	`xmÃpc_ív_£t_Áu…_f‹m©ãd
((
ív
),(
code
), \

208 (
°r
),(
¨g1
),(
¨g2
),(
¨g3
)); \

209 
˛ónup
; \

210 } 0)

	)

212 #i‡!
deföed
(
__˝lu•lus
)

213 #i‡
deföed
(
__GNUC__
)

214 
	#XMLRPC_FAILF
–
ív
, 
code
, 
fmt
, ... ) \

216 
	`xmÃpc_ív_£t_Áu…_f‹m©ãd
((
ív
), (
code
), (
fmt
), \

217 ##
__VA_ARGS__
 ); \

218 
˛ónup
; \

219 } 0)

	)

223 
	#XMLRPC_FAIL_IF_NULL
(
±r
,
ív
,
code
,
°r
) \

225 i‡((
±r
Ë=
NULL
) \

226 
	`XMLRPC_FAIL
((
ív
),(
code
),(
°r
)); \

227 } 0)

	)

229 
	#XMLRPC_FAIL_IF_FAULT
(
ív
) \

230 dÿ{ i‡((
ív
)->
Áu…_occuºed
Ë
˛ónup
; } 0)

	)

241 
	s_xmÃpc_mem_block
 {

242 
size_t
 
_size
;

243 
size_t
 
_Æloˇãd
;

244 * 
_block
;

245 } 
	txmÃpc_mem_block
;

248 
XMLRPC_UTIL_EXPORTED


249 
xmÃpc_mem_block
* 
xmÃpc_mem_block_√w
 (
xmÃpc_ív
* c⁄° 
ív
, 
size_t
 c⁄° 
size
);

252 
XMLRPC_UTIL_EXPORTED


253 
xmÃpc_mem_block_‰ì
 (
xmÃpc_mem_block
* c⁄° 
block
);

256 
XMLRPC_UTIL_EXPORTED


257 
xmÃpc_mem_block_öô


258 (
xmÃpc_ív
* c⁄° 
ív
, 
xmÃpc_mem_block
* c⁄° 
block
, 
size_t
 c⁄° 
size
);

262 
XMLRPC_UTIL_EXPORTED


263 
xmÃpc_mem_block_˛ón
 (
xmÃpc_mem_block
* c⁄° 
block
);

266 
XMLRPC_UTIL_EXPORTED


267 
size_t


268 
xmÃpc_mem_block_size
(c⁄° 
xmÃpc_mem_block
 * c⁄° 
block
);

270 
XMLRPC_UTIL_EXPORTED


272 
xmÃpc_mem_block_c⁄ã¡s
(c⁄° 
xmÃpc_mem_block
 * c⁄° 
block
);

276 
XMLRPC_UTIL_EXPORTED


277 
xmÃpc_mem_block_ªsize


278 (
xmÃpc_ív
* c⁄° 
ív
, 
xmÃpc_mem_block
* c⁄° 
block
, 
size_t
 c⁄° 
size
);

281 
XMLRPC_UTIL_EXPORTED


282 
xmÃpc_mem_block_≠≥nd


283 (
xmÃpc_ív
* c⁄° 
ív
, 
xmÃpc_mem_block
* c⁄° 
block
, c⁄° * c⁄° 
d©a
, 
size_t
 c⁄° 
Àn
);

285 
	#XMLRPC_MEMBLOCK_NEW
(
ty≥
,
ív
,
size
) \

286 
	`xmÃpc_mem_block_√w
((
ív
), (
ty≥
Ë* (
size
))

	)

287 
	#XMLRPC_MEMBLOCK_FREE
(
ty≥
,
block
) \

288 
	`xmÃpc_mem_block_‰ì
(
block
)

	)

289 
	#XMLRPC_MEMBLOCK_INIT
(
ty≥
,
ív
,
block
,
size
) \

290 
	`xmÃpc_mem_block_öô
((
ív
), (
block
), (
ty≥
Ë* (
size
))

	)

291 
	#XMLRPC_MEMBLOCK_CLEAN
(
ty≥
,
block
) \

292 
	`xmÃpc_mem_block_˛ón
(
block
)

	)

293 
	#XMLRPC_MEMBLOCK_SIZE
(
ty≥
,
block
) \

294 (
	`xmÃpc_mem_block_size
(
block
Ë/ (
ty≥
))

	)

295 
	#XMLRPC_MEMBLOCK_CONTENTS
(
ty≥
,
block
) \

296 ((
ty≥
*Ë
	`xmÃpc_mem_block_c⁄ã¡s
(
block
))

	)

297 
	#XMLRPC_MEMBLOCK_RESIZE
(
ty≥
,
ív
,
block
,
size
) \

298 
	`xmÃpc_mem_block_ªsize
(
ív
, 
block
, (
ty≥
Ë* (
size
))

	)

299 
	#XMLRPC_MEMBLOCK_APPEND
(
ty≥
,
ív
,
block
,
d©a
,
size
) \

300 
	`xmÃpc_mem_block_≠≥nd
(
ív
, 
block
, 
d©a
, (
ty≥
Ë* (
size
))

	)

306 
	#XMLRPC_TYPED_MEM_BLOCK_NEW
(
ty≥
,
ív
,
size
) \

307 
	`XMLRPC_MEMBLOCK_NEW
(
ty≥
,
ív
,
size
)

	)

308 
	#XMLRPC_TYPED_MEM_BLOCK_FREE
(
ty≥
,
block
) \

309 
	`XMLRPC_MEMBLOCK_FREE
(
ty≥
,
block
)

	)

310 
	#XMLRPC_TYPED_MEM_BLOCK_INIT
(
ty≥
,
ív
,
block
,
size
) \

311 
	`XMLRPC_MEMBLOCK_INIT
(
ty≥
,
ív
,
block
,
size
)

	)

312 
	#XMLRPC_TYPED_MEM_BLOCK_CLEAN
(
ty≥
,
block
) \

313 
	`XMLRPC_MEMBLOCK_CLEAN
(
ty≥
,
block
)

	)

314 
	#XMLRPC_TYPED_MEM_BLOCK_SIZE
(
ty≥
,
block
) \

315 
	`XMLRPC_MEMBLOCK_SIZE
(
ty≥
,
block
)

	)

316 
	#XMLRPC_TYPED_MEM_BLOCK_CONTENTS
(
ty≥
,
block
) \

317 
	`XMLRPC_MEMBLOCK_CONTENTS
(
ty≥
,
block
)

	)

318 
	#XMLRPC_TYPED_MEM_BLOCK_RESIZE
(
ty≥
,
ív
,
block
,
size
) \

319 
	`XMLRPC_MEMBLOCK_RESIZE
(
ty≥
,
ív
,
block
,
size
)

	)

320 
	#XMLRPC_TYPED_MEM_BLOCK_APPEND
(
ty≥
,
ív
,
block
,
d©a
,
size
) \

321 
	`XMLRPC_MEMBLOCK_APPEND
(
ty≥
,
ív
,
block
,
d©a
,
size
)

	)

328 
XMLRPC_UTIL_EXPORTED


330 
xmÃpc_vÆid©e_utf8
(
xmÃpc_ív
 * c⁄° 
ívP
,

331 c⁄° * c⁄° 
utf8D©a
,

332 
size_t
 c⁄° 
utf8Lí
);

335 
XMLRPC_UTIL_EXPORTED


336 
xmÃpc_mem_block
 *

337 
xmÃpc_utf8_to_wcs
(
xmÃpc_ív
 * c⁄° 
ívP
,

338 c⁄° * c⁄° 
utf8_d©a
,

339 
size_t
 c⁄° 
utf8_Àn
);

343 #i‡
XMLRPC_HAVE_WCHAR


344 
XMLRPC_UTIL_EXPORTED


345 
xmÃpc_mem_block
 *

346 
xmÃpc_wcs_to_utf8
(
xmÃpc_ív
 * c⁄° 
ívP
,

347 c⁄° 
wch¨_t
 * c⁄° 
wcsD©a
,

348 
size_t
 c⁄° 
wcsLí
);

351 
XMLRPC_UTIL_EXPORTED


353 
xmÃpc_f‹˚_to_utf8
(* c⁄° 
buf„r
);

355 
XMLRPC_UTIL_EXPORTED


357 
xmÃpc_f‹˚_to_xml_ch¨s
(* c⁄° 
buf„r
);

368 
XMLRPC_UTIL_EXPORTED


369 
xmÃpc_mem_block
 *

370 
xmÃpc_ba£64_ícode
(
xmÃpc_ív
 * c⁄° 
ívP
,

371 c⁄° * c⁄° 
böD©a
,

372 
size_t
 c⁄° 
böLí
);

376 
XMLRPC_UTIL_EXPORTED


377 
xmÃpc_mem_block
 *

378 
xmÃpc_ba£64_ícode_wôhout_√wlöes
(
xmÃpc_ív
 * c⁄° 
ívP
,

379 c⁄° * c⁄° 
böD©a
,

380 
size_t
 c⁄° 
böLí
);

383 
XMLRPC_UTIL_EXPORTED


384 
xmÃpc_mem_block
 *

385 
xmÃpc_ba£64_decode
(
xmÃpc_ív
 * c⁄° 
ívP
,

386 c⁄° * c⁄° 
asciiD©a
,

387 
size_t
 c⁄° 
asciiLí
);

390 #ifde‡
__˝lu•lus


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

383 
	#__NR_°©x
 383

	)

384 
	#__NR_¨ch_¥˘l
 384

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

336 
	#__NR_°©x
 332

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_°©x
 (
__X32_SYSCALL_BIT
 + 332)

	)

290 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

291 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

292 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

293 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

294 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

295 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

296 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

297 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

298 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

299 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

300 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

301 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

302 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

303 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

304 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

305 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

306 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

307 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

308 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

309 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

310 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

311 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

312 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

313 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

314 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

315 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

316 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

317 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

318 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

319 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

320 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

321 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

322 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

323 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

324 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

325 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	~<löux/ÁŒoc.h
>

325 
	sfûe_h™dÀ


327 
	mh™dÀ_byãs
;

328 
	mh™dÀ_ty≥
;

330 
	mf_h™dÀ
[0];

334 
	#MAX_HANDLE_SZ
 128

	)

338 #ifde‡
__USE_ATFILE


339 
	#AT_FDCWD
 -100

	)

342 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

343 
	#AT_REMOVEDIR
 0x200

	)

345 
	#AT_SYMLINK_FOLLOW
 0x400

	)

346 #ifde‡
__USE_GNU


347 
	#AT_NO_AUTOMOUNT
 0x800

	)

349 
	#AT_EMPTY_PATH
 0x1000

	)

351 
	#AT_EACCESS
 0x200

	)

355 
	g__BEGIN_DECLS


357 #ifde‡
__USE_GNU


360 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

361 
__THROW
;

368 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

369 
__Êags
);

376 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

377 
size_t
 
__cou¡
, 
__Êags
);

383 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

384 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

385 
__Êags
);

391 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

392 
__Êags
);

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

401 #ifde‡
__REDIRECT


402 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

403 
__off64_t
 
__Àn
),

404 
ÁŒoˇã64
);

406 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

409 #ifde‡
__USE_LARGEFILE64


410 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
);

416 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

417 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

418 
__Êags
Ë
__THROW
;

424 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

425 
__Êags
);

429 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_FREE
 8

	)

85 
	#MADV_REMOVE
 9

	)

86 
	#MADV_DONTFORK
 10

	)

87 
	#MADV_DOFORK
 11

	)

88 
	#MADV_MERGEABLE
 12

	)

89 
	#MADV_UNMERGEABLE
 13

	)

90 
	#MADV_HUGEPAGE
 14

	)

91 
	#MADV_NOHUGEPAGE
 15

	)

92 
	#MADV_DONTDUMP
 16

	)

94 
	#MADV_DODUMP
 17

	)

95 
	#MADV_HWPOISON
 100

	)

99 #ifde‡
__USE_XOPEN2K


100 
	#POSIX_MADV_NORMAL
 0

	)

101 
	#POSIX_MADV_RANDOM
 1

	)

102 
	#POSIX_MADV_SEQUENTIAL
 2

	)

103 
	#POSIX_MADV_WILLNEED
 3

	)

104 
	#POSIX_MADV_DONTNEED
 4

	)

108 #i‚de‡
MCL_CURRENT


109 
	#MCL_CURRENT
 1

	)

110 
	#MCL_FUTURE
 2

	)

112 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWCGROUP
 0x02000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 / 8 < (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 / 8 < (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 / 8 < (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 
	mmodes
;

29 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

30 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

31 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

32 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

33 
	m°©us
;

34 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

35 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

36 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

37 
timevÆ
 
	mtime
;

38 
__sysˇŒ_¶⁄g_t
 
	mtick
;

39 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

40 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

41 
	mshi·
;

42 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

43 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

46 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

48 
	mèi
;

57 
	#ADJ_OFFSET
 0x0001

	)

58 
	#ADJ_FREQUENCY
 0x0002

	)

59 
	#ADJ_MAXERROR
 0x0004

	)

60 
	#ADJ_ESTERROR
 0x0008

	)

61 
	#ADJ_STATUS
 0x0010

	)

62 
	#ADJ_TIMECONST
 0x0020

	)

63 
	#ADJ_TAI
 0x0080

	)

64 
	#ADJ_SETOFFSET
 0x0100

	)

65 
	#ADJ_MICRO
 0x1000

	)

66 
	#ADJ_NANO
 0x2000

	)

67 
	#ADJ_TICK
 0x4000

	)

68 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 
	#MOD_TAI
 
ADJ_TAI


	)

81 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 
	#MOD_NANO
 
ADJ_NANO


	)

86 
	#STA_PLL
 0x0001

	)

87 
	#STA_PPSFREQ
 0x0002

	)

88 
	#STA_PPSTIME
 0x0004

	)

89 
	#STA_FLL
 0x0008

	)

91 
	#STA_INS
 0x0010

	)

92 
	#STA_DEL
 0x0020

	)

93 
	#STA_UNSYNC
 0x0040

	)

94 
	#STA_FREQHOLD
 0x0080

	)

96 
	#STA_PPSSIGNAL
 0x0100

	)

97 
	#STA_PPSJITTER
 0x0200

	)

98 
	#STA_PPSWANDER
 0x0400

	)

99 
	#STA_PPSERROR
 0x0800

	)

101 
	#STA_CLOCKERR
 0x1000

	)

102 
	#STA_NANO
 0x2000

	)

103 
	#STA_MODE
 0x4000

	)

104 
	#STA_CLK
 0x8000

	)

107 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

108 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

88 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

92 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/gsl/gsl_inline.h

20 #i‚de‡
__GSL_INLINE_H__


21 
	#__GSL_INLINE_H__


	)

49 #ifde‡
HAVE_INLINE


50 #i‡
deföed
(
__GNUC_STDC_INLINE__
Ë|| deföed(
GSL_C99_INLINE
Ë|| deföed(
HAVE_C99_INLINE
)

51 
	#INLINE_DECL
 
ölöe


	)

52 
	#INLINE_FUN
 
ölöe


	)

54 
	#INLINE_DECL


	)

55 
	#INLINE_FUN
 
ölöe


	)

58 
	#INLINE_DECL


	)

65 
	#GSL_RANGE_COND
(
x
Ë(x)

	)

	@/usr/include/gsl/gsl_machine.h

2 #i‚de‡
__GSL_MACHINE_H__


3 
	#__GSL_MACHINE_H__


	)

5 
	~<limôs.h
>

6 
	~<Êﬂt.h
>

17 
	#GSL_DBL_EPSILON
 2.2204460492503131e-16

	)

18 
	#GSL_SQRT_DBL_EPSILON
 1.4901161193847656e-08

	)

19 
	#GSL_ROOT3_DBL_EPSILON
 6.0554544523933429e-06

	)

20 
	#GSL_ROOT4_DBL_EPSILON
 1.2207031250000000e-04

	)

21 
	#GSL_ROOT5_DBL_EPSILON
 7.4009597974140505e-04

	)

22 
	#GSL_ROOT6_DBL_EPSILON
 2.4607833005759251e-03

	)

23 
	#GSL_LOG_DBL_EPSILON
 (-3.6043653389117154e+01)

	)

25 
	#GSL_DBL_MIN
 2.2250738585072014e-308

	)

26 
	#GSL_SQRT_DBL_MIN
 1.4916681462400413e-154

	)

27 
	#GSL_ROOT3_DBL_MIN
 2.8126442852362996e-103

	)

28 
	#GSL_ROOT4_DBL_MIN
 1.2213386697554620e-77

	)

29 
	#GSL_ROOT5_DBL_MIN
 2.9476022969691763e-62

	)

30 
	#GSL_ROOT6_DBL_MIN
 5.3034368905798218e-52

	)

31 
	#GSL_LOG_DBL_MIN
 (-7.0839641853226408e+02)

	)

33 
	#GSL_DBL_MAX
 1.7976931348623157e+308

	)

34 
	#GSL_SQRT_DBL_MAX
 1.3407807929942596e+154

	)

35 
	#GSL_ROOT3_DBL_MAX
 5.6438030941222897e+102

	)

36 
	#GSL_ROOT4_DBL_MAX
 1.1579208923731620e+77

	)

37 
	#GSL_ROOT5_DBL_MAX
 4.4765466227572707e+61

	)

38 
	#GSL_ROOT6_DBL_MAX
 2.3756689782295612e+51

	)

39 
	#GSL_LOG_DBL_MAX
 7.0978271289338397e+02

	)

41 
	#GSL_FLT_EPSILON
 1.1920928955078125e-07

	)

42 
	#GSL_SQRT_FLT_EPSILON
 3.4526698300124393e-04

	)

43 
	#GSL_ROOT3_FLT_EPSILON
 4.9215666011518501e-03

	)

44 
	#GSL_ROOT4_FLT_EPSILON
 1.8581361171917516e-02

	)

45 
	#GSL_ROOT5_FLT_EPSILON
 4.1234622211652937e-02

	)

46 
	#GSL_ROOT6_FLT_EPSILON
 7.0153878019335827e-02

	)

47 
	#GSL_LOG_FLT_EPSILON
 (-1.5942385152878742e+01)

	)

49 
	#GSL_FLT_MIN
 1.1754943508222875e-38

	)

50 
	#GSL_SQRT_FLT_MIN
 1.0842021724855044e-19

	)

51 
	#GSL_ROOT3_FLT_MIN
 2.2737367544323241e-13

	)

52 
	#GSL_ROOT4_FLT_MIN
 3.2927225399135965e-10

	)

53 
	#GSL_ROOT5_FLT_MIN
 2.5944428542140822e-08

	)

54 
	#GSL_ROOT6_FLT_MIN
 4.7683715820312542e-07

	)

55 
	#GSL_LOG_FLT_MIN
 (-8.7336544750553102e+01)

	)

57 
	#GSL_FLT_MAX
 3.4028234663852886e+38

	)

58 
	#GSL_SQRT_FLT_MAX
 1.8446743523953730e+19

	)

59 
	#GSL_ROOT3_FLT_MAX
 6.9814635196223242e+12

	)

60 
	#GSL_ROOT4_FLT_MAX
 4.2949672319999986e+09

	)

61 
	#GSL_ROOT5_FLT_MAX
 5.0859007855960041e+07

	)

62 
	#GSL_ROOT6_FLT_MAX
 2.6422459233807749e+06

	)

63 
	#GSL_LOG_FLT_MAX
 8.8722839052068352e+01

	)

65 
	#GSL_SFLT_EPSILON
 4.8828125000000000e-04

	)

66 
	#GSL_SQRT_SFLT_EPSILON
 2.2097086912079612e-02

	)

67 
	#GSL_ROOT3_SFLT_EPSILON
 7.8745065618429588e-02

	)

68 
	#GSL_ROOT4_SFLT_EPSILON
 1.4865088937534013e-01

	)

69 
	#GSL_ROOT5_SFLT_EPSILON
 2.1763764082403100e-01

	)

70 
	#GSL_ROOT6_SFLT_EPSILON
 2.8061551207734325e-01

	)

71 
	#GSL_LOG_SFLT_EPSILON
 (-7.6246189861593985e+00)

	)

77 
	#GSL_MACH_EPS
 
GSL_DBL_EPSILON


	)

96 
	#GSL_SQRT_MACH_EPS
 3.2e-08

	)

97 
	#GSL_ROOT3_MACH_EPS
 1.0e-05

	)

98 
	#GSL_ROOT4_MACH_EPS
 0.000178

	)

99 
	#GSL_ROOT5_MACH_EPS
 0.00100

	)

100 
	#GSL_ROOT6_MACH_EPS
 0.00316

	)

101 
	#GSL_LOG_MACH_EPS
 (-34.54)

	)

	@/usr/include/gsl/gsl_minmax.h

20 #i‚de‡
__GSL_MINMAX_H__


21 
	#__GSL_MINMAX_H__


	)

22 
	~<g¶/g¶_ölöe.h
>

24 #unde‡
__BEGIN_DECLS


25 #unde‡
__END_DECLS


26 #ifde‡
__˝lu•lus


27 
	#__BEGIN_DECLS
 "C" {

	)

28 
	#__END_DECLS
 }

	)

30 
	#__BEGIN_DECLS


	)

31 
	#__END_DECLS


	)

34 
__BEGIN_DECLS


39 
	#GSL_MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

40 
	#GSL_MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

43 
g¶_max
 (
a
, 
b
);

44 
g¶_mö
 (
a
, 
b
);

47 #ifde‡
HAVE_INLINE


49 
INLINE_FUN
 
GSL_MAX_INT
 (
a
, 
b
);

50 
INLINE_FUN
 
GSL_MIN_INT
 (
a
, 
b
);

51 
INLINE_FUN
 
GSL_MAX_DBL
 (
a
, 
b
);

52 
INLINE_FUN
 
GSL_MIN_DBL
 (
a
, 
b
);

53 
INLINE_FUN
 
GSL_MAX_LDBL
 (
a
, 
b
);

54 
INLINE_FUN
 
GSL_MIN_LDBL
 (
a
, 
b
);

56 
INLINE_FUN
 

57 
	$GSL_MAX_INT
 (
a
, 
b
)

59  
	`GSL_MAX
 (
a
, 
b
);

60 
	}
}

62 
INLINE_FUN
 

63 
	$GSL_MIN_INT
 (
a
, 
b
)

65  
	`GSL_MIN
 (
a
, 
b
);

66 
	}
}

68 
INLINE_FUN
 

69 
	$GSL_MAX_DBL
 (
a
, 
b
)

71  
	`GSL_MAX
 (
a
, 
b
);

72 
	}
}

74 
INLINE_FUN
 

75 
	$GSL_MIN_DBL
 (
a
, 
b
)

77  
	`GSL_MIN
 (
a
, 
b
);

78 
	}
}

80 
INLINE_FUN
 

81 
	$GSL_MAX_LDBL
 (
a
, 
b
)

83  
	`GSL_MAX
 (
a
, 
b
);

84 
	}
}

86 
INLINE_FUN
 

87 
	$GSL_MIN_LDBL
 (
a
, 
b
)

89  
	`GSL_MIN
 (
a
, 
b
);

90 
	}
}

92 
	#GSL_MAX_INT
(
a
,
b
Ë
	`GSL_MAX
◊,b)

	)

93 
	#GSL_MIN_INT
(
a
,
b
Ë
	`GSL_MIN
◊,b)

	)

94 
	#GSL_MAX_DBL
(
a
,
b
Ë
	`GSL_MAX
◊,b)

	)

95 
	#GSL_MIN_DBL
(
a
,
b
Ë
	`GSL_MIN
◊,b)

	)

96 
	#GSL_MAX_LDBL
(
a
,
b
Ë
	`GSL_MAX
◊,b)

	)

97 
	#GSL_MIN_LDBL
(
a
,
b
Ë
	`GSL_MIN
◊,b)

	)

100 
	g__END_DECLS


	@/usr/include/gsl/gsl_nan.h

20 #i‚de‡
__GSL_NAN_H__


21 
	#__GSL_NAN_H__


	)

23 #ifde‡
INFINITY


24 
	#GSL_POSINF
 
INFINITY


	)

25 
	#GSL_NEGINF
 (-
INFINITY
)

	)

26 #ñi‡
deföed
(
HUGE_VAL
)

27 
	#GSL_POSINF
 
HUGE_VAL


	)

28 
	#GSL_NEGINF
 (-
HUGE_VAL
)

	)

30 
	#GSL_POSINF
 (
	`g¶_posöf
())

	)

31 
	#GSL_NEGINF
 (
	`g¶_√göf
())

	)

34 #ifde‡
NAN


35 
	#GSL_NAN
 
NAN


	)

36 #ñi‡
deföed
(
INFINITY
)

37 
	#GSL_NAN
 (
INFINITY
/INFINITY)

	)

39 
	#GSL_NAN
 (
	`g¶_«n
())

	)

42 
	#GSL_POSZERO
 (+0.0)

	)

43 
	#GSL_NEGZERO
 (-0.0)

	)

	@/usr/include/gsl/gsl_pow_int.h

20 #i‚de‡
__GSL_POW_INT_H__


21 
	#__GSL_POW_INT_H__


	)

22 
	~<g¶/g¶_ölöe.h
>

24 #unde‡
__BEGIN_DECLS


25 #unde‡
__END_DECLS


26 #ifde‡
__˝lu•lus


27 
	#__BEGIN_DECLS
 "C" {

	)

28 
	#__END_DECLS
 }

	)

30 
	#__BEGIN_DECLS


	)

31 
	#__END_DECLS


	)

34 
__BEGIN_DECLS


36 
INLINE_DECL
 
g¶_pow_2
(c⁄° 
x
);

37 
INLINE_DECL
 
g¶_pow_3
(c⁄° 
x
);

38 
INLINE_DECL
 
g¶_pow_4
(c⁄° 
x
);

39 
INLINE_DECL
 
g¶_pow_5
(c⁄° 
x
);

40 
INLINE_DECL
 
g¶_pow_6
(c⁄° 
x
);

41 
INLINE_DECL
 
g¶_pow_7
(c⁄° 
x
);

42 
INLINE_DECL
 
g¶_pow_8
(c⁄° 
x
);

43 
INLINE_DECL
 
g¶_pow_9
(c⁄° 
x
);

45 #ifde‡
HAVE_INLINE


46 
INLINE_FUN
 
	$g¶_pow_2
(c⁄° 
x
Ë{  x*x; 
	}
}

47 
INLINE_FUN
 
	$g¶_pow_3
(c⁄° 
x
Ë{  x*x*x; 
	}
}

48 
INLINE_FUN
 
	$g¶_pow_4
(c⁄° 
x
Ë{ 
x2
 = x*x;  x2*x2; 
	}
}

49 
INLINE_FUN
 
	$g¶_pow_5
(c⁄° 
x
Ë{ 
x2
 = x*x;  x2*x2*x; 
	}
}

50 
INLINE_FUN
 
	$g¶_pow_6
(c⁄° 
x
Ë{ 
x2
 = x*x;  x2*x2*x2; 
	}
}

51 
INLINE_FUN
 
	$g¶_pow_7
(c⁄° 
x
Ë{ 
x3
 = x*x*x;  x3*x3*x; 
	}
}

52 
INLINE_FUN
 
	$g¶_pow_8
(c⁄° 
x
Ë{ 
x2
 = x*x; 
x4
 = x2*x2;  x4*x4; 
	}
}

53 
INLINE_FUN
 
	$g¶_pow_9
(c⁄° 
x
Ë{ 
x3
 = x*x*x;  x3*x3*x3; 
	}
}

56 
g¶_pow_öt
(
x
, 
n
);

57 
g¶_pow_uöt
(
x
, 
n
);

59 
	g__END_DECLS


	@/usr/include/gsl/gsl_precision.h

22 #i‚de‡
__GSL_PRECISION_H__


23 
	#__GSL_PRECISION_H__


	)

24 
	~<g¶/g¶_ty≥s.h
>

26 #unde‡
__BEGIN_DECLS


27 #unde‡
__END_DECLS


28 #ifde‡
__˝lu•lus


29 
	#__BEGIN_DECLS
 "C" {

	)

30 
	#__END_DECLS
 }

	)

32 
	#__BEGIN_DECLS


	)

33 
	#__END_DECLS


	)

36 
__BEGIN_DECLS


42 
	tg¶_¥ec_t
;

49 
	#_GSL_PREC_T_NUM
 3

	)

56 
GSL_VAR
 c⁄° 
	gg¶_¥ec_ïs
[];

57 
GSL_VAR
 c⁄° 
	gg¶_¥ec_sqπ_ïs
[];

58 
GSL_VAR
 c⁄° 
	gg¶_¥ec_roŸ3_ïs
[];

59 
GSL_VAR
 c⁄° 
	gg¶_¥ec_roŸ4_ïs
[];

60 
GSL_VAR
 c⁄° 
	gg¶_¥ec_roŸ5_ïs
[];

61 
GSL_VAR
 c⁄° 
	gg¶_¥ec_roŸ6_ïs
[];

64 
	g__END_DECLS


	@/usr/include/gsl/gsl_sys.h

20 #i‚de‡
__GSL_SYS_H__


21 
	#__GSL_SYS_H__


	)

23 #unde‡
__BEGIN_DECLS


24 #unde‡
__END_DECLS


25 #ifde‡
__˝lu•lus


26 
	#__BEGIN_DECLS
 "C" {

	)

27 
	#__END_DECLS
 }

	)

29 
	#__BEGIN_DECLS


	)

30 
	#__END_DECLS


	)

33 
__BEGIN_DECLS


35 
g¶_log1p
 (c⁄° 
x
);

36 
g¶_expm1
 (c⁄° 
x
);

37 
g¶_hypŸ
 (c⁄° 
x
, c⁄° 
y
);

38 
g¶_hypŸ3
 (c⁄° 
x
, c⁄° 
y
, c⁄° 
z
);

39 
g¶_acosh
 (c⁄° 
x
);

40 
g¶_asöh
 (c⁄° 
x
);

41 
g¶_©™h
 (c⁄° 
x
);

43 
g¶_i¢™
 (c⁄° 
x
);

44 
g¶_isöf
 (c⁄° 
x
);

45 
g¶_föôe
 (c⁄° 
x
);

47 
g¶_«n
 ();

48 
g¶_posöf
 ();

49 
g¶_√göf
 ();

50 
g¶_fdiv
 (c⁄° 
x
, c⁄° 
y
);

52 
g¶_c€r˚_doubÀ
 (c⁄° 
x
);

53 
g¶_c€r˚_Êﬂt
 (c⁄° 
x
);

54 
g¶_c€r˚_l⁄g_doubÀ
 (c⁄° 
x
);

56 
g¶_ldexp
(c⁄° 
x
, c⁄° 
e
);

57 
g¶_‰exp
(c⁄° 
x
, * 
e
);

59 
g¶_fcmp
 (c⁄° 
x1
, c⁄° 
x2
, c⁄° 
ïsû⁄
);

61 
	g__END_DECLS


	@/usr/include/libunwind-common.h

26 
	#UNW_VERSION_MAJOR
 1

	)

27 
	#UNW_VERSION_MINOR
 1

	)

28 
	#UNW_VERSION_EXTRA


	)

30 
	#UNW_VERSION_CODE
(
maj
,
mö
Ë(((majË<< 16Ë| (mö))

	)

31 
	#UNW_VERSION
 
	`UNW_VERSION_CODE
(
UNW_VERSION_MAJOR
, 
UNW_VERSION_MINOR
)

	)

33 
	#UNW_PASTE2
(
x
,
y
Ëx##
	)
y

34 
	#UNW_PASTE
(
x
,
y
Ë
	`UNW_PASTE2
(x,y)

	)

35 
	#UNW_OBJ
(
‚
Ë
	`UNW_PASTE
(
UNW_PREFIX
, fn)

	)

36 
	#UNW_ARCH_OBJ
(
‚
Ë
	`UNW_PASTE
(UNW_PASTE(UNW_PASTE(
_U
,
UNW_TARGET
),
_
), fn)

	)

38 #ifde‡
UNW_LOCAL_ONLY


39 
	#UNW_PREFIX
 
	`UNW_PASTE
(UNW_PASTE(
_UL
,
UNW_TARGET
),
_
)

	)

41 
	#UNW_PREFIX
 
	`UNW_PASTE
(UNW_PASTE(
_U
,
UNW_TARGET
),
_
)

	)

48 
	mUNW_ESUCCESS
 = 0,

49 
	mUNW_EUNSPEC
,

50 
	mUNW_ENOMEM
,

51 
	mUNW_EBADREG
,

52 
	mUNW_EREADONLYREG
,

53 
	mUNW_ESTOPUNWIND
,

54 
	mUNW_EINVALIDIP
,

55 
	mUNW_EBADFRAME
,

56 
	mUNW_EINVAL
,

57 
	mUNW_EBADVERSION
,

58 
	mUNW_ENOINFO


60 
	tunw_îr‹_t
;

71 
	mUNW_REG_IP
 = 
UNW_TDEP_IP
,

72 
	mUNW_REG_SP
 = 
UNW_TDEP_SP
,

73 
	mUNW_REG_EH
 = 
UNW_TDEP_EH
,

74 
	mUNW_REG_LAST
 = 
UNW_TDEP_LAST_REG


76 
	tunw_‰ame_ªgnum_t
;

79 
	#UNW_NUM_EH_REGS
 
UNW_TDEP_NUM_EH_REGS


	)

83 
	mUNW_CACHE_NONE
,

84 
	mUNW_CACHE_GLOBAL
,

85 
	mUNW_CACHE_PER_THREAD


87 
	tunw_ˇchög_pﬁicy_t
;

89 
	tunw_ªgnum_t
;

95 
	sunw_curs‹


97 
unw_w‹d_t
 
	m›aque
[
UNW_TDEP_CURSOR_LEN
];

99 
	tunw_curs‹_t
;

102 
unw_tdï_c⁄ãxt_t
 
	tunw_c⁄ãxt_t
;

108 
	#unw_gëc⁄ãxt
(
uc
Ë
	`unw_tdï_gëc⁄ãxt
(uc)

	)

113 
	#unw_is_Âªg
(
r
Ë
	`unw_tdï_is_Âªg
‘)

	)

115 
unw_tdï_Âªg_t
 
	tunw_Âªg_t
;

117 
unw_addr_•a˚
 *
	tunw_addr_•a˚_t
;

121 
	#UNW_PI_FLAG_FIRST_TDEP_BIT
 16

	)

123 
	#UNW_PI_FLAG_DEBUG_FRAME
 32

	)

125 
	sunw_¥oc_öfo


127 
unw_w‹d_t
 
	m°¨t_ù
;

128 
unw_w‹d_t
 
	míd_ù
;

129 
unw_w‹d_t
 
	mlsda
;

130 
unw_w‹d_t
 
	mh™dÀr
;

131 
unw_w‹d_t
 
	mgp
;

132 
unw_w‹d_t
 
	mÊags
;

134 
	mf‹m©
;

135 
	munwöd_öfo_size
;

136 *
	munwöd_öfo
;

137 
unw_tdï_¥oc_öfo_t
 
	mexåa
;

139 
	tunw_¥oc_öfo_t
;

144 
	sunw_ac˚ss‹s


148 (*
	mföd_¥oc_öfo
Ë(
	munw_addr_•a˚_t
, 
	munw_w‹d_t
, 
	munw_¥oc_öfo_t
 *,

154 (*
	mput_unwöd_öfo
Ë(
	munw_addr_•a˚_t
, 
	munw_¥oc_öfo_t
 *, *);

158 (*
	mgë_dyn_öfo_li°_addr
Ë(
	munw_addr_•a˚_t
, 
	munw_w‹d_t
 *, *);

164 (*
	mac˚ss_mem
Ë(
	munw_addr_•a˚_t
, 
	munw_w‹d_t
, unw_word_t *, ,

168 (*
	mac˚ss_ªg
Ë(
	munw_addr_•a˚_t
, 
	munw_ªgnum_t
, 
	munw_w‹d_t
 *, ,

172 (*
	mac˚ss_Âªg
Ë(
	munw_addr_•a˚_t
, 
	munw_ªgnum_t
,

173 
	munw_Âªg_t
 *, , *);

175 (*
	mªsume
Ë(
	munw_addr_•a˚_t
, 
	munw_curs‹_t
 *, *);

181 (*
	mgë_¥oc_«me
Ë(
	munw_addr_•a˚_t
, 
	munw_w‹d_t
, *, 
	msize_t
,

182 
	munw_w‹d_t
 *, *);

184 
	tunw_ac˚ss‹s_t
;

186 
	eunw_ßve_loc_ty≥


188 
	mUNW_SLT_NONE
,

189 
	mUNW_SLT_MEMORY
,

190 
	mUNW_SLT_REG


192 
	tunw_ßve_loc_ty≥_t
;

194 
	sunw_ßve_loc


196 
unw_ßve_loc_ty≥_t
 
	mty≥
;

199 
unw_w‹d_t
 
	maddr
;

200 
unw_ªgnum_t
 
	mªgnum
;

202 
	mu
;

203 
unw_tdï_ßve_loc_t
 
	mexåa
;

205 
	tunw_ßve_loc_t
;

209 
	#unw_loˇl_addr_•a˚
 
	`UNW_OBJ
(
loˇl_addr_•a˚
)

	)

210 
	#unw_¸óã_addr_•a˚
 
	`UNW_OBJ
(
¸óã_addr_•a˚
)

	)

211 
	#unw_de°roy_addr_•a˚
 
	`UNW_OBJ
(
de°roy_addr_•a˚
)

	)

212 
	#unw_gë_ac˚ss‹s
 
	`UNW_ARCH_OBJ
(
gë_ac˚ss‹s
)

	)

213 
	#unw_öô_loˇl
 
	`UNW_OBJ
(
öô_loˇl
)

	)

214 
	#unw_öô_ªmŸe
 
	`UNW_OBJ
(
öô_ªmŸe
)

	)

215 
	#unw_°ï
 
	`UNW_OBJ
(
°ï
)

	)

216 
	#unw_ªsume
 
	`UNW_OBJ
(
ªsume
)

	)

217 
	#unw_gë_¥oc_öfo
 
	`UNW_OBJ
(
gë_¥oc_öfo
)

	)

218 
	#unw_gë_¥oc_öfo_by_ù
 
	`UNW_OBJ
(
gë_¥oc_öfo_by_ù
)

	)

219 
	#unw_gë_ªg
 
	`UNW_OBJ
(
gë_ªg
)

	)

220 
	#unw_£t_ªg
 
	`UNW_OBJ
(
£t_ªg
)

	)

221 
	#unw_gë_Âªg
 
	`UNW_OBJ
(
gë_Âªg
)

	)

222 
	#unw_£t_Âªg
 
	`UNW_OBJ
(
£t_Âªg
)

	)

223 
	#unw_gë_ßve_loc
 
	`UNW_OBJ
(
gë_ßve_loc
)

	)

224 
	#unw_is_sig«l_‰ame
 
	`UNW_OBJ
(
is_sig«l_‰ame
)

	)

225 
	#unw_h™dÀ_sig«l_‰ame
 
	`UNW_OBJ
(
h™dÀ_sig«l_‰ame
)

	)

226 
	#unw_gë_¥oc_«me
 
	`UNW_OBJ
(
gë_¥oc_«me
)

	)

227 
	#unw_£t_ˇchög_pﬁicy
 
	`UNW_OBJ
(
£t_ˇchög_pﬁicy
)

	)

228 
	#unw_ªg«me
 
	`UNW_ARCH_OBJ
(
ªg«me
)

	)

229 
	#unw_Êush_ˇche
 
	`UNW_ARCH_OBJ
(
Êush_ˇche
)

	)

230 
	#unw_°ªº‹
 
	`UNW_ARCH_OBJ
(
°ªº‹
)

	)

232 
unw_addr_•a˚_t
 
unw_¸óã_addr_•a˚
 (
unw_ac˚ss‹s_t
 *, );

233 
unw_de°roy_addr_•a˚
 (
unw_addr_•a˚_t
);

234 
unw_ac˚ss‹s_t
 *
unw_gë_ac˚ss‹s
 (
unw_addr_•a˚_t
);

235 
unw_Êush_ˇche
 (
unw_addr_•a˚_t
, 
unw_w‹d_t
, unw_word_t);

236 
unw_£t_ˇchög_pﬁicy
 (
unw_addr_•a˚_t
, 
unw_ˇchög_pﬁicy_t
);

237 c⁄° *
unw_ªg«me
 (
unw_ªgnum_t
);

239 
unw_öô_loˇl
 (
unw_curs‹_t
 *, 
unw_c⁄ãxt_t
 *);

240 
unw_öô_ªmŸe
 (
unw_curs‹_t
 *, 
unw_addr_•a˚_t
, *);

241 
unw_°ï
 (
unw_curs‹_t
 *);

242 
unw_ªsume
 (
unw_curs‹_t
 *);

243 
unw_gë_¥oc_öfo
 (
unw_curs‹_t
 *, 
unw_¥oc_öfo_t
 *);

244 
unw_gë_¥oc_öfo_by_ù
 (
unw_addr_•a˚_t
, 
unw_w‹d_t
,

245 
unw_¥oc_öfo_t
 *, *);

246 
unw_gë_ªg
 (
unw_curs‹_t
 *, , 
unw_w‹d_t
 *);

247 
unw_£t_ªg
 (
unw_curs‹_t
 *, , 
unw_w‹d_t
);

248 
unw_gë_Âªg
 (
unw_curs‹_t
 *, , 
unw_Âªg_t
 *);

249 
unw_£t_Âªg
 (
unw_curs‹_t
 *, , 
unw_Âªg_t
);

250 
unw_gë_ßve_loc
 (
unw_curs‹_t
 *, , 
unw_ßve_loc_t
 *);

251 
unw_is_sig«l_‰ame
 (
unw_curs‹_t
 *);

252 
unw_h™dÀ_sig«l_‰ame
 (
unw_curs‹_t
 *);

253 
unw_gë_¥oc_«me
 (
unw_curs‹_t
 *, *, 
size_t
, 
unw_w‹d_t
 *);

254 c⁄° *
unw_°ªº‹
 ();

255 
unw_backåa˚
 (**, );

257 
unw_addr_•a˚_t
 
unw_loˇl_addr_•a˚
;

	@/usr/include/libunwind-dynamic.h

62 
	mUNW_DYN_STOP
 = 0,

63 
	mUNW_DYN_SAVE_REG
,

64 
	mUNW_DYN_SPILL_FP_REL
,

65 
	mUNW_DYN_SPILL_SP_REL
,

66 
	mUNW_DYN_ADD
,

67 
	mUNW_DYN_POP_FRAMES
,

68 
	mUNW_DYN_LABEL_STATE
,

69 
	mUNW_DYN_COPY_STATE
,

70 
	mUNW_DYN_ALIAS


72 
	tunw_dyn_›î©i⁄_t
;

76 
	mUNW_INFO_FORMAT_DYNAMIC
,

77 
	mUNW_INFO_FORMAT_TABLE
,

78 
	mUNW_INFO_FORMAT_REMOTE_TABLE
,

79 
	mUNW_INFO_FORMAT_ARM_EXIDX


81 
	tunw_dyn_öfo_f‹m©_t
;

83 
	sunw_dyn_›


85 
öt8_t
 
	mèg
;

86 
öt8_t
 
	mqp
;

87 
öt16_t
 
	mªg
;

88 
öt32_t
 
	mwhí
;

89 
unw_w‹d_t
 
	mvÆ
;

91 
	tunw_dyn_›_t
;

93 
	sunw_dyn_ªgi⁄_öfo


95 
unw_dyn_ªgi⁄_öfo
 *
	m√xt
;

96 
öt32_t
 
	mö¢_cou¡
;

97 
uöt32_t
 
	m›_cou¡
;

98 
unw_dyn_›_t
 
	m›
[1];

100 
	tunw_dyn_ªgi⁄_öfo_t
;

102 
	sunw_dyn_¥oc_öfo


104 
unw_w‹d_t
 
	m«me_±r
;

105 
unw_w‹d_t
 
	mh™dÀr
;

106 
uöt32_t
 
	mÊags
;

107 
öt32_t
 
	m∑d0
;

108 
unw_dyn_ªgi⁄_öfo_t
 *
	mªgi⁄s
;

110 
	tunw_dyn_¥oc_öfo_t
;

112 
	sunw_dyn_èbÀ_öfo


114 
unw_w‹d_t
 
	m«me_±r
;

115 
unw_w‹d_t
 
	m£gba£
;

116 
unw_w‹d_t
 
	mèbÀ_Àn
;

117 
unw_w‹d_t
 *
	mèbÀ_d©a
;

119 
	tunw_dyn_èbÀ_öfo_t
;

121 
	sunw_dyn_ªmŸe_èbÀ_öfo


123 
unw_w‹d_t
 
	m«me_±r
;

124 
unw_w‹d_t
 
	m£gba£
;

125 
unw_w‹d_t
 
	mèbÀ_Àn
;

126 
unw_w‹d_t
 
	mèbÀ_d©a
;

128 
	tunw_dyn_ªmŸe_èbÀ_öfo_t
;

130 
	sunw_dyn_öfo


133 
unw_dyn_öfo
 *
	m√xt
;

134 
unw_dyn_öfo
 *
	m¥ev
;

135 
unw_w‹d_t
 
	m°¨t_ù
;

136 
unw_w‹d_t
 
	míd_ù
;

137 
unw_w‹d_t
 
	mgp
;

138 
öt32_t
 
	mf‹m©
;

139 
öt32_t
 
	m∑d
;

142 
unw_dyn_¥oc_öfo_t
 
	mpi
;

143 
unw_dyn_èbÀ_öfo_t
 
	mti
;

144 
unw_dyn_ªmŸe_èbÀ_öfo_t
 
	mπi
;

146 
	mu
;

148 
	tunw_dyn_öfo_t
;

150 
	sunw_dyn_öfo_li°


152 
uöt32_t
 
	mvîsi⁄
;

153 
uöt32_t
 
	mgíî©i⁄
;

154 
unw_dyn_öfo_t
 *
	mfú°
;

156 
	tunw_dyn_öfo_li°_t
;

160 
	#_U_dyn_ªgi⁄_öfo_size
(
›_cou¡
) \

161 ((*Ë(((
unw_dyn_ªgi⁄_öfo_t
 *Ë
NULL
)->
›
 + (
›_cou¡
)) \

162 - (*Ë
NULL
)

	)

166 
_U_dyn_ªgi°î
 (
unw_dyn_öfo_t
 *);

170 
_U_dyn_ˇn˚l
 (
unw_dyn_öfo_t
 *);

175 
	#_U_dyn_›
(
_èg
, 
_qp
, 
_whí
, 
_ªg
, 
_vÆ
) \

176 ((
unw_dyn_›_t
Ë{ (
_èg
), (
_qp
), (
_ªg
), (
_whí
), (
_vÆ
Ë})

	)

178 
	#_U_dyn_›_ßve_ªg
(
›
, 
qp
, 
whí
, 
ªg
, 
d°
) \

179 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_SAVE_REG
, (
qp
), (
whí
), (
ªg
), (
d°
)))

	)

181 
	#_U_dyn_›_•ûl_Â_ªl
(
›
, 
qp
, 
whí
, 
ªg
, 
off£t
) \

182 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_SPILL_FP_REL
, (
qp
), (
whí
), (
ªg
), \

183 (
off£t
)))

	)

185 
	#_U_dyn_›_•ûl_•_ªl
(
›
, 
qp
, 
whí
, 
ªg
, 
off£t
) \

186 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_SPILL_SP_REL
, (
qp
), (
whí
), (
ªg
), \

187 (
off£t
)))

	)

189 
	#_U_dyn_›_add
(
›
, 
qp
, 
whí
, 
ªg
, 
vÆue
) \

190 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_ADD
, (
qp
), (
whí
), (
ªg
), (
vÆue
)))

	)

192 
	#_U_dyn_›_p›_‰ames
(
›
, 
qp
, 
whí
, 
num_‰ames
) \

193 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_POP_FRAMES
, (
qp
), (
whí
), 0, (
num_‰ames
)))

	)

195 
	#_U_dyn_›_œbñ_°©e
(
›
, 
œbñ
) \

196 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_LABEL_STATE
, 
_U_QP_TRUE
, -1, 0, (
œbñ
)))

	)

198 
	#_U_dyn_›_c›y_°©e
(
›
, 
œbñ
) \

199 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_COPY_STATE
, 
_U_QP_TRUE
, -1, 0, (
œbñ
)))

	)

201 
	#_U_dyn_›_Æüs
(
›
, 
qp
, 
whí
, 
addr
) \

202 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_ALIAS
, (
qp
), (
whí
), 0, (
addr
)))

	)

204 
	#_U_dyn_›_°›
(
›
) \

205 (*(
›
Ë
	`_U_dyn_›
 (
UNW_DYN_STOP
, 
_U_QP_TRUE
, -1, 0, 0))

	)

210 
	#_U_QP_TRUE
 
_U_TDEP_QP_TRUE


	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

83 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


84 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

86 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

91 
	#__P
(
¨gs
Ë
	)
args

92 
	#__PMT
(
¨gs
Ë
	)
args

97 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

98 
	#__STRING
(
x
Ë#x

	)

101 
	#__±r_t
 *

	)

102 
	#__l⁄g_doubÀ_t
 

	)

106 #ifdef 
__˝lu•lus


107 
	#__BEGIN_DECLS
 "C" {

	)

108 
	#__END_DECLS
 }

	)

110 
	#__BEGIN_DECLS


	)

111 
	#__END_DECLS


	)

120 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


121 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

122 
	#__END_NAMESPACE_STD
 }

	)

123 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

124 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

125 
	#__END_NAMESPACE_C99
 }

	)

126 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

131 
	#__BEGIN_NAMESPACE_STD


	)

132 
	#__END_NAMESPACE_STD


	)

133 
	#__USING_NAMESPACE_STD
(
«me
)

	)

134 
	#__BEGIN_NAMESPACE_C99


	)

135 
	#__END_NAMESPACE_C99


	)

136 
	#__USING_NAMESPACE_C99
(
«me
)

	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

144 #i‡
__GNUC_PREREQ
 (4,3)

145 
	#__w¨nde˛
(
«me
, 
msg
) \

146 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

147 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

148 
	#__îr‹de˛
(
«me
, 
msg
) \

149 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

151 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

152 
	#__w¨«âr
(
msg
)

	)

153 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

160 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

161 
	#__Êex¨r
 []

	)

162 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

163 #ñi‡
__GNUC_PREREQ
 (2,97)

166 
	#__Êex¨r
 []

	)

167 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

168 #ñi‡
deföed
 
__GNUC__


171 
	#__Êex¨r
 [0]

	)

172 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

175 
	#__Êex¨r
 [1]

	)

176 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

190 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

192 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

193 #ifde‡
__˝lu•lus


194 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

196 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

199 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

200 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

201 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

202 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

204 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

205 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

218 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

219 
	#__©åibuã__
(
xyz
Ë

	)

225 #i‡
__GNUC_PREREQ
 (2,96)

226 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

228 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (4, 3)

234 
	#__©åibuã_Æloc_size__
(
∑øms
) \

235 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

237 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

243 #i‡
__GNUC_PREREQ
 (2,96)

244 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

246 
	#__©åibuã_puª__


	)

250 #i‡
__GNUC_PREREQ
 (2,5)

251 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

253 
	#__©åibuã_c⁄°__


	)

259 #i‡
__GNUC_PREREQ
 (3,1)

260 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

261 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

263 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

264 
	#__©åibuã_noölöe__


	)

268 #i‡
__GNUC_PREREQ
 (3,2)

269 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

271 
	#__©åibuã_dïªˇãd__


	)

277 #i‡
__GNUC_PREREQ
 (4,5) || \

278 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

279 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

280 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

282 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

291 #i‡
	`__GNUC_PREREQ
 (2,8)

292 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

294 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

301 #i‡
	`__GNUC_PREREQ
 (2,97)

302 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

303 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

305 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

310 #i‡
	`__GNUC_PREREQ
 (3,3)

311 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

313 
	#__n⁄nuŒ
(
∑øms
)

	)

318 #i‡
	`__GNUC_PREREQ
 (3,4)

319 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

320 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

321 #i‡
__USE_FORTIFY_LEVEL
 > 0

322 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

325 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

327 #i‚de‡
__wur


328 
	#__wur


	)

332 #i‡
	`__GNUC_PREREQ
 (3,2)

336 #unde‡
__Æways_ölöe


337 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

339 #unde‡
__Æways_ölöe


340 
	#__Æways_ölöe
 
__ölöe


	)

345 #i‡
	`__GNUC_PREREQ
 (4,3)

346 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

348 
	#__©åibuã_¨tificül__


	)

360 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

361 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

362 || 
deföed
 
__GNUC_GNU_INLINE__
)))

363 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


364 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

365 
	#__exã∫_Æways_ölöe
 \

366 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

368 
	#__exã∫_ölöe
 
__ölöe


	)

369 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

373 #ifde‡
__exã∫_Æways_ölöe


374 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

379 #i‡
	`__GNUC_PREREQ
 (4,3)

380 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

381 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

388 #i‡!
	`__GNUC_PREREQ
 (2,8)

389 
	#__exãnsi⁄__


	)

393 #i‡!
	`__GNUC_PREREQ
 (2,92)

394 
	#__ª°ri˘


	)

400 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


401 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

403 #ifde‡
__GNUC__


404 
	#__ª°ri˘_¨r


	)

406 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

407 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

410 
	#__ª°ri˘_¨r


	)

415 #i‡
__GNUC__
 >= 3

416 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

417 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

419 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

420 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

423 #i‡(!
deföed
 
_N‹ëu∫
 \

424 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

425 && !
	$__GNUC_PREREQ
 (4,7))

426 #i‡
	`__GNUC_PREREQ
 (2,8)

427 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

429 
	#_N‹ëu∫


	)

433 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

434 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

435 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

436 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

437 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

438 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

441 
	~<bôs/w‹dsize.h
>

442 
	~<bôs/l⁄g-doubÀ.h
>

444 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


445 
	#__LDBL_COMPAT
 1

	)

446 #ifde‡
__REDIRECT


447 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

448 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

449 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

450 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

451 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

452 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

453 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

454 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

455 
	#__LDBL_REDIR_DECL
(
«me
) \

456 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

457 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

458 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

459 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

460 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

463 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


464 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

465 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

466 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

467 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

468 
	#__LDBL_REDIR_DECL
(
«me
)

	)

469 #ifde‡
__REDIRECT


470 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

471 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

472 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

481 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

482 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

483 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

484 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

486 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

	@/usr/include/ucontext.h

20 #i‚de‡
_UCONTEXT_H


21 
	#_UCONTEXT_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<sys/uc⁄ãxt.h
>

28 
__BEGIN_DECLS


31 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

34 
	$£tc⁄ãxt
 (c⁄° 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

38 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

39 c⁄° 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROWNL
;

47 
	$makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

48 
__¨gc
, ...Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

80 
	#TIOCGPTPEER
 
	`_IO
('T', 0x41Ë

	)

82 
	#FIONCLEX
 0x5450

	)

83 
	#FIOCLEX
 0x5451

	)

84 
	#FIOASYNC
 0x5452

	)

85 
	#TIOCSERCONFIG
 0x5453

	)

86 
	#TIOCSERGWILD
 0x5454

	)

87 
	#TIOCSERSWILD
 0x5455

	)

88 
	#TIOCGLCKTRMIOS
 0x5456

	)

89 
	#TIOCSLCKTRMIOS
 0x5457

	)

90 
	#TIOCSERGSTRUCT
 0x5458

	)

91 
	#TIOCSERGETLSR
 0x5459

	)

92 
	#TIOCSERGETMULTI
 0x545A

	)

93 
	#TIOCSERSETMULTI
 0x545B

	)

95 
	#TIOCMIWAIT
 0x545C

	)

96 
	#TIOCGICOUNT
 0x545D

	)

102 #i‚de‡
FIOQSIZE


103 
	#FIOQSIZE
 0x5460

	)

107 
	#TIOCPKT_DATA
 0

	)

108 
	#TIOCPKT_FLUSHREAD
 1

	)

109 
	#TIOCPKT_FLUSHWRITE
 2

	)

110 
	#TIOCPKT_STOP
 4

	)

111 
	#TIOCPKT_START
 8

	)

112 
	#TIOCPKT_NOSTOP
 16

	)

113 
	#TIOCPKT_DOSTOP
 32

	)

114 
	#TIOCPKT_IOCTL
 64

	)

116 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/long-double.h

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/gsl/gsl_types.h

20 #i‚de‡
__GSL_TYPES_H__


21 
	#__GSL_TYPES_H__


	)

23 #i‚de‡
GSL_VAR


25 #ifde‡
WIN32


26 #ifde‡
GSL_DLL


27 #ifde‡
DLL_EXPORT


28 
	#GSL_VAR
 
	`__de˛•ec
(
dŒexp‹t
)

	)

30 
	#GSL_VAR
 
	`__de˛•ec
(
dŒimp‹t
)

	)

33 
	#GSL_VAR
 

	)

36 
	#GSL_VAR
 

	)

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

28 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

42 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

59 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

77 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

56 #i‚de‡
_IOC_NONE


57 
	#_IOC_NONE
 0U

	)

60 #i‚de‡
_IOC_WRITE


61 
	#_IOC_WRITE
 1U

	)

64 #i‚de‡
_IOC_READ


65 
	#_IOC_READ
 2U

	)

68 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

69 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

70 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

71 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

72 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

74 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

82 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

83 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

84 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

85 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

87 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

88 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

91 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

92 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

93 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

94 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

98 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

99 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

100 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

101 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

102 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@
1
.
1
/usr/include
358
8442
check-ndebug.h
debug.h
drmtest.c
drmtest.h
dummy.c
gen6_render.h
gen7_media.h
gen7_render.h
gen8_media.h
gen8_render.h
gen9_render.h
gpgpu_fill.c
gpgpu_fill.h
i830_reg.h
i915/gem_context.c
i915/gem_context.h
i915/gem_scheduler.c
i915/gem_scheduler.h
i915/gem_submission.c
i915/gem_submission.h
i915_3d.h
i915_pciids.h
i915_reg.h
igt.h
igt_alsa.c
igt_alsa.h
igt_audio.c
igt_audio.h
igt_aux.c
igt_aux.h
igt_chamelium.c
igt_chamelium.h
igt_core.c
igt_core.h
igt_debugfs.c
igt_debugfs.h
igt_draw.c
igt_draw.h
igt_dummyload.c
igt_dummyload.h
igt_edid_template.h
igt_fb.c
igt_fb.h
igt_frame.c
igt_frame.h
igt_gt.c
igt_gt.h
igt_gvt.c
igt_gvt.h
igt_kmod.c
igt_kmod.h
igt_kms.c
igt_kms.h
igt_pm.c
igt_pm.h
igt_primes.c
igt_primes.h
igt_rand.c
igt_rand.h
igt_rc.h
igt_stats.c
igt_stats.h
igt_syncobj.c
igt_syncobj.h
igt_sysfs.c
igt_sysfs.h
igt_vc4.c
igt_vc4.h
igt_vgem.c
igt_vgem.h
igt_x86.c
igt_x86.h
instdone.c
instdone.h
intel_batchbuffer.c
intel_batchbuffer.h
intel_chipset.c
intel_chipset.h
intel_device_info.c
intel_io.h
intel_iosf.c
intel_mmio.c
intel_os.c
intel_reg.h
intel_reg_map.c
ioctl_wrappers.c
ioctl_wrappers.h
media_fill.h
media_fill_gen7.c
media_fill_gen8.c
media_fill_gen8lp.c
media_fill_gen9.c
media_spin.c
media_spin.h
rendercopy.h
rendercopy_gen6.c
rendercopy_gen7.c
rendercopy_gen8.c
rendercopy_gen9.c
rendercopy_i830.c
rendercopy_i915.c
stubs/drm/intel_aub.h
stubs/drm/intel_bufmgr.c
stubs/drm/intel_bufmgr.h
sw_sync.c
sw_sync.h
tests/igt_assert.c
tests/igt_can_fail.c
tests/igt_can_fail_simple.c
tests/igt_exit_handler.c
tests/igt_fork_helper.c
tests/igt_hdmi_inject.c
tests/igt_invalid_subtest_name.c
tests/igt_list_only.c
tests/igt_no_exit.c
tests/igt_no_exit_list_only.c
tests/igt_no_subtest.c
tests/igt_segfault.c
tests/igt_simple_test_subtests.c
tests/igt_simulation.c
tests/igt_stats.c
tests/igt_subtest_group.c
tests/igt_timeout.c
uwildmat/uwildmat.c
uwildmat/uwildmat.h
version.h
/usr/include/alsa/asoundlib.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/gsl/gsl_fft_real.h
/usr/include/gsl/gsl_fit.h
/usr/include/gsl/gsl_statistics_double.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libkmod.h
/usr/include/libudev.h
/usr/include/libunwind.h
/usr/include/limits.h
/usr/include/linux/kd.h
/usr/include/linux/limits.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/pciaccess.h
/usr/include/poll.h
/usr/include/proc/readproc.h
/usr/include/pthread.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/kd.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/poll.h
/usr/include/sys/resource.h
/usr/include/sys/stat.h
/usr/include/sys/swap.h
/usr/include/sys/syscall.h
/usr/include/sys/sysinfo.h
/usr/include/sys/sysmacros.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/utsname.h
/usr/include/sys/wait.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/valgrind/memcheck.h
/usr/include/valgrind/valgrind.h
/usr/include/xf86drm.h
/usr/include/xf86drmMode.h
/usr/include/xmlrpc-c/base.h
/usr/include/xmlrpc-c/client.h
/usr/include/alloca.h
/usr/include/alsa/asoundef.h
/usr/include/alsa/conf.h
/usr/include/alsa/control.h
/usr/include/alsa/error.h
/usr/include/alsa/global.h
/usr/include/alsa/hwdep.h
/usr/include/alsa/input.h
/usr/include/alsa/mixer.h
/usr/include/alsa/output.h
/usr/include/alsa/pcm.h
/usr/include/alsa/rawmidi.h
/usr/include/alsa/seq.h
/usr/include/alsa/seq_event.h
/usr/include/alsa/seq_midi_event.h
/usr/include/alsa/seqmid.h
/usr/include/alsa/timer.h
/usr/include/alsa/version.h
/usr/include/asm/unistd.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/flt-eval-method.h
/usr/include/bits/fp-fast.h
/usr/include/bits/fp-logb.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/iscanonical.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/sysmacros.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/gsl/gsl_complex.h
/usr/include/gsl/gsl_fft.h
/usr/include/gsl/gsl_math.h
/usr/include/libio.h
/usr/include/libunwind-x86_64.h
/usr/include/linux/kernel.h
/usr/include/linux/types.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/wchar.h
/usr/include/xlocale.h
/usr/include/xmlrpc-c/c_util.h
/usr/include/xmlrpc-c/client_global.h
/usr/include/xmlrpc-c/config.h
/usr/include/xmlrpc-c/util.h
/usr/include/_G_config.h
/usr/include/asm/ioctls.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/stubs.h
/usr/include/gsl/gsl_inline.h
/usr/include/gsl/gsl_machine.h
/usr/include/gsl/gsl_minmax.h
/usr/include/gsl/gsl_nan.h
/usr/include/gsl/gsl_pow_int.h
/usr/include/gsl/gsl_precision.h
/usr/include/gsl/gsl_sys.h
/usr/include/libunwind-common.h
/usr/include/libunwind-dynamic.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/ucontext.h
/usr/include/wctype.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/long-double.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/gsl/gsl_types.h
/usr/include/linux/falloc.h
/usr/include/linux/stddef.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/linux/ioctl.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/ioctl.h
