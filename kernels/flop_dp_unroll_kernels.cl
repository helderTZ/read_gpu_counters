
/******************************************************
  * Scalar double-precision with loop unrolling kernels
  * ***************************************************/
 
 __kernel void scalar_dp_add_iter_128_unroll_64_kernel(__global double *a, __global double*b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
	}
}

__kernel void scalar_dp_sub_iter_128_unroll_64_kernel(__global double *a, __global double*b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
	}
}

__kernel void scalar_dp_mul_iter_128_unroll_64_kernel(__global double *a, __global double*b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
	}
}

__kernel void scalar_dp_div_iter_128_unroll_64_kernel(__global double *a, __global double*b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
	}
}

__kernel void scalar_dp_mad_iter_128_unroll_64_kernel(__global double *a, __global double*b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
	}
}

/******************************************************
  * Vector double-precision with loop unrolling kernels
  * ***************************************************/
 
__kernel void vect2_dp_add_iter_128_unroll_64_kernel(__global double2 *a, __global double2 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
	}
}

__kernel void vect2_dp_sub_iter_128_unroll_64_kernel(__global double2 *a, __global double2 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
	}
}

__kernel void vect2_dp_mul_iter_128_unroll_64_kernel(__global double2 *a, __global double2 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
	}
}

__kernel void vect2_dp_div_iter_128_unroll_64_kernel(__global double2 *a, __global double2 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
	}
}

__kernel void vect2_dp_mad_iter_128_unroll_64_kernel(__global double2 *a, __global double2 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
	}
}

__kernel void vect4_dp_add_iter_128_unroll_64_kernel(__global double4 *a, __global double4 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
	}
}

__kernel void vect4_dp_sub_iter_128_unroll_64_kernel(__global double4 *a, __global double4 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
	}
}

__kernel void vect4_dp_mul_iter_128_unroll_64_kernel(__global double4 *a, __global double4 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
	}
}

__kernel void vect4_dp_div_iter_128_unroll_64_kernel(__global double4 *a, __global double4 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
	}
}

__kernel void vect4_dp_mad_iter_128_unroll_64_kernel(__global double4 *a, __global double4 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
	}
}


__kernel void vect8_dp_add_iter_128_unroll_64_kernel(__global double8 *a, __global double8 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
	}
}

__kernel void vect8_dp_sub_iter_128_unroll_64_kernel(__global double8 *a, __global double8 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
	}
}

__kernel void vect8_dp_mul_iter_128_unroll_64_kernel(__global double8 *a, __global double8 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
	}
}

__kernel void vect8_dp_div_iter_128_unroll_64_kernel(__global double8 *a, __global double8 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
	}
}

__kernel void vect8_dp_mad_iter_128_unroll_64_kernel(__global double8 *a, __global double8 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
	}
}


__kernel void vect16_dp_add_iter_128_unroll_64_kernel(__global double16 *a, __global double16 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
		a[i] = a[i] + b[i];
	}
}

__kernel void vect16_dp_sub_iter_128_unroll_64_kernel(__global double16 *a, __global double16 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
		a[i] = a[i] - b[i];
	}
}

__kernel void vect16_dp_mul_iter_128_unroll_64_kernel(__global double16 *a, __global double16 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
		a[i] = a[i] * b[i];
	}
}

__kernel void vect16_dp_div_iter_128_unroll_64_kernel(__global double16 *a, __global double16 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
		a[i] = a[i] / b[i];
	}
}

__kernel void vect16_dp_mad_iter_128_unroll_64_kernel(__global double16 *a, __global double16 *b) {
	int i = get_global_id(0);
	int j;
	// 128 iter * 64 unroll = 8192 flops
	for(j = 0; j < 128; j++) {
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
		a[i] = a[i] * b[i] + b[i];
	}
}

